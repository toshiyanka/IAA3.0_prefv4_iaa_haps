//                                                                             
// File:            hqm_system_csr_bridge_regs.svh                             
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_SYSTEM_CSR_BRIDGE_FILE
`define RAL_HQM_SYSTEM_CSR_BRIDGE_FILE

class hqm_system_csr_bridge_TOTAL_CREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOTAL_CREDITS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_TOTAL_CREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_CREDITS, TOTAL_CREDITS.desired)
     `RAL_FIELD_CP_16(TOTAL_CREDITS, TOTAL_CREDITS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_CREDITS, TOTAL_CREDITS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_CREDITS, TOTAL_CREDITS.actual)
     `RAL_FIELD_CP_16(TOTAL_CREDITS, TOTAL_CREDITS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_CREDITS, TOTAL_CREDITS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOTAL_CREDITS = new("TOTAL_CREDITS", "RO", 32, 0, {"NoSignal"});
    TOTAL_CREDITS.set_powerwell("vcccfn_gated");
    TOTAL_CREDITS.set_rand_mode(0);
   TOTAL_CREDITS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOTAL_CREDITS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_TOTAL_CREDITS_reg) 
endclass : hqm_system_csr_bridge_TOTAL_CREDITS_reg

// ================================================

class hqm_system_csr_bridge_TOTAL_LDB_QID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOTAL_LDB_QID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_TOTAL_LDB_QID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_LDB_QID, TOTAL_LDB_QID.desired)
     `RAL_FIELD_CP_16(TOTAL_LDB_QID, TOTAL_LDB_QID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_LDB_QID, TOTAL_LDB_QID.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_LDB_QID, TOTAL_LDB_QID.actual)
     `RAL_FIELD_CP_16(TOTAL_LDB_QID, TOTAL_LDB_QID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_LDB_QID, TOTAL_LDB_QID.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOTAL_LDB_QID = new("TOTAL_LDB_QID", "RO", 32, 0, {"NoSignal"});
    TOTAL_LDB_QID.set_powerwell("vcccfn_gated");
    TOTAL_LDB_QID.set_rand_mode(0);
   TOTAL_LDB_QID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOTAL_LDB_QID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_TOTAL_LDB_QID_reg) 
endclass : hqm_system_csr_bridge_TOTAL_LDB_QID_reg

// ================================================

class hqm_system_csr_bridge_TOTAL_DIR_QID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOTAL_DIR_QID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_TOTAL_DIR_QID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_DIR_QID, TOTAL_DIR_QID.desired)
     `RAL_FIELD_CP_16(TOTAL_DIR_QID, TOTAL_DIR_QID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_DIR_QID, TOTAL_DIR_QID.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_DIR_QID, TOTAL_DIR_QID.actual)
     `RAL_FIELD_CP_16(TOTAL_DIR_QID, TOTAL_DIR_QID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_DIR_QID, TOTAL_DIR_QID.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOTAL_DIR_QID = new("TOTAL_DIR_QID", "RO", 32, 0, {"NoSignal"});
    TOTAL_DIR_QID.set_powerwell("vcccfn_gated");
    TOTAL_DIR_QID.set_rand_mode(0);
   TOTAL_DIR_QID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOTAL_DIR_QID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_TOTAL_DIR_QID_reg) 
endclass : hqm_system_csr_bridge_TOTAL_DIR_QID_reg

// ================================================

class hqm_system_csr_bridge_TOTAL_LDB_PORTS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOTAL_LDB_PORTS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_TOTAL_LDB_PORTS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_LDB_PORTS, TOTAL_LDB_PORTS.desired)
     `RAL_FIELD_CP_16(TOTAL_LDB_PORTS, TOTAL_LDB_PORTS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_LDB_PORTS, TOTAL_LDB_PORTS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_LDB_PORTS, TOTAL_LDB_PORTS.actual)
     `RAL_FIELD_CP_16(TOTAL_LDB_PORTS, TOTAL_LDB_PORTS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_LDB_PORTS, TOTAL_LDB_PORTS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOTAL_LDB_PORTS = new("TOTAL_LDB_PORTS", "RO", 32, 0, {"NoSignal"});
    TOTAL_LDB_PORTS.set_powerwell("vcccfn_gated");
    TOTAL_LDB_PORTS.set_rand_mode(0);
   TOTAL_LDB_PORTS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOTAL_LDB_PORTS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_TOTAL_LDB_PORTS_reg) 
endclass : hqm_system_csr_bridge_TOTAL_LDB_PORTS_reg

// ================================================

class hqm_system_csr_bridge_TOTAL_DIR_PORTS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOTAL_DIR_PORTS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_TOTAL_DIR_PORTS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_DIR_PORTS, TOTAL_DIR_PORTS.desired)
     `RAL_FIELD_CP_16(TOTAL_DIR_PORTS, TOTAL_DIR_PORTS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_DIR_PORTS, TOTAL_DIR_PORTS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_DIR_PORTS, TOTAL_DIR_PORTS.actual)
     `RAL_FIELD_CP_16(TOTAL_DIR_PORTS, TOTAL_DIR_PORTS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_DIR_PORTS, TOTAL_DIR_PORTS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOTAL_DIR_PORTS = new("TOTAL_DIR_PORTS", "RO", 32, 0, {"NoSignal"});
    TOTAL_DIR_PORTS.set_powerwell("vcccfn_gated");
    TOTAL_DIR_PORTS.set_rand_mode(0);
   TOTAL_DIR_PORTS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOTAL_DIR_PORTS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_TOTAL_DIR_PORTS_reg) 
endclass : hqm_system_csr_bridge_TOTAL_DIR_PORTS_reg

// ================================================

class hqm_system_csr_bridge_TOTAL_VAS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOTAL_VAS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_TOTAL_VAS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_VAS, TOTAL_VAS.desired)
     `RAL_FIELD_CP_16(TOTAL_VAS, TOTAL_VAS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_VAS, TOTAL_VAS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_VAS, TOTAL_VAS.actual)
     `RAL_FIELD_CP_16(TOTAL_VAS, TOTAL_VAS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_VAS, TOTAL_VAS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOTAL_VAS = new("TOTAL_VAS", "RO", 32, 0, {"NoSignal"});
    TOTAL_VAS.set_powerwell("vcccfn_gated");
    TOTAL_VAS.set_rand_mode(0);
   TOTAL_VAS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOTAL_VAS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_TOTAL_VAS_reg) 
endclass : hqm_system_csr_bridge_TOTAL_VAS_reg

// ================================================

class hqm_system_csr_bridge_TOTAL_SN_REGIONS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field SLOT;
  sla_ral_field GROUP;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_TOTAL_SN_REGIONS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_8(MODE, MODE.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(SLOT, SLOT.desired)
     `RAL_FIELD_CP_8(SLOT, SLOT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(GROUP, GROUP.desired)
     `RAL_FIELD_CP_8(GROUP, GROUP.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_8(MODE, MODE.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(SLOT, SLOT.actual)
     `RAL_FIELD_CP_8(SLOT, SLOT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(GROUP, GROUP.actual)
     `RAL_FIELD_CP_8(GROUP, GROUP.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RO", 8, 0, {"NoSignal"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MODE ));

    SLOT = new("SLOT", "RO", 8, 8, {"NoSignal"});
    SLOT.set_powerwell("vcccfn_gated");
    SLOT.set_rand_mode(0);
   SLOT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SLOT ));

    GROUP = new("GROUP", "RO", 8, 16, {"NoSignal"});
    GROUP.set_powerwell("vcccfn_gated");
    GROUP.set_rand_mode(0);
   GROUP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( GROUP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_TOTAL_SN_REGIONS_reg) 
endclass : hqm_system_csr_bridge_TOTAL_SN_REGIONS_reg

// ================================================

class hqm_system_csr_bridge_TOTAL_VF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOTAL_VF;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_TOTAL_VF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_VF, TOTAL_VF.desired)
     `RAL_FIELD_CP_16(TOTAL_VF, TOTAL_VF.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_VF, TOTAL_VF.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOTAL_VF, TOTAL_VF.actual)
     `RAL_FIELD_CP_16(TOTAL_VF, TOTAL_VF.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TOTAL_VF, TOTAL_VF.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOTAL_VF = new("TOTAL_VF", "RO", 32, 0, {"NoSignal"});
    TOTAL_VF.set_powerwell("vcccfn_gated");
    TOTAL_VF.set_rand_mode(0);
   TOTAL_VF.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOTAL_VF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_TOTAL_VF_reg) 
endclass : hqm_system_csr_bridge_TOTAL_VF_reg

// ================================================

class hqm_system_csr_bridge_CFG_UNIT_VERSION_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_VERSION;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_CFG_UNIT_VERSION_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.desired)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.actual)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_VERSION = new("UNIT_VERSION", "RO", 8, 24, {""});
    UNIT_VERSION.set_powerwell("vcccfn_gated");
    UNIT_VERSION.set_rand_mode(0);
   UNIT_VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( UNIT_VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_CFG_UNIT_VERSION_reg) 
endclass : hqm_system_csr_bridge_CFG_UNIT_VERSION_reg

// ================================================

class hqm_system_csr_bridge_INGRESS_ALARM_ENABLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ILLEGAL_HCW;
  sla_ral_field ILLEGAL_PP;
  sla_ral_field ILLEGAL_PASID;
  sla_ral_field ILLEGAL_QID;
  sla_ral_field DISABLED_QID;
  sla_ral_field ILLEGAL_LDB_QID_CFG;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_INGRESS_ALARM_ENABLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ILLEGAL_HCW, ILLEGAL_HCW.desired)
     `RAL_FIELD_CP_1(ILLEGAL_HCW, ILLEGAL_HCW.desired, 0)
     `RAL_FIELD_CP(ILLEGAL_PP, ILLEGAL_PP.desired)
     `RAL_FIELD_CP_1(ILLEGAL_PP, ILLEGAL_PP.desired, 0)
     `RAL_FIELD_CP(ILLEGAL_PASID, ILLEGAL_PASID.desired)
     `RAL_FIELD_CP_1(ILLEGAL_PASID, ILLEGAL_PASID.desired, 0)
     `RAL_FIELD_CP(ILLEGAL_QID, ILLEGAL_QID.desired)
     `RAL_FIELD_CP_1(ILLEGAL_QID, ILLEGAL_QID.desired, 0)
     `RAL_FIELD_CP(DISABLED_QID, DISABLED_QID.desired)
     `RAL_FIELD_CP_1(DISABLED_QID, DISABLED_QID.desired, 0)
     `RAL_FIELD_CP(ILLEGAL_LDB_QID_CFG, ILLEGAL_LDB_QID_CFG.desired)
     `RAL_FIELD_CP_1(ILLEGAL_LDB_QID_CFG, ILLEGAL_LDB_QID_CFG.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ILLEGAL_HCW, ILLEGAL_HCW.actual)
     `RAL_FIELD_CP_1(ILLEGAL_HCW, ILLEGAL_HCW.actual, 0)
     `RAL_FIELD_CP(ILLEGAL_PP, ILLEGAL_PP.actual)
     `RAL_FIELD_CP_1(ILLEGAL_PP, ILLEGAL_PP.actual, 0)
     `RAL_FIELD_CP(ILLEGAL_PASID, ILLEGAL_PASID.actual)
     `RAL_FIELD_CP_1(ILLEGAL_PASID, ILLEGAL_PASID.actual, 0)
     `RAL_FIELD_CP(ILLEGAL_QID, ILLEGAL_QID.actual)
     `RAL_FIELD_CP_1(ILLEGAL_QID, ILLEGAL_QID.actual, 0)
     `RAL_FIELD_CP(DISABLED_QID, DISABLED_QID.actual)
     `RAL_FIELD_CP_1(DISABLED_QID, DISABLED_QID.actual, 0)
     `RAL_FIELD_CP(ILLEGAL_LDB_QID_CFG, ILLEGAL_LDB_QID_CFG.actual)
     `RAL_FIELD_CP_1(ILLEGAL_LDB_QID_CFG, ILLEGAL_LDB_QID_CFG.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ILLEGAL_HCW = new("ILLEGAL_HCW", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_HCW"});
    ILLEGAL_HCW.set_powerwell("vcccfn_gated");
    ILLEGAL_HCW.set_rand_mode(0);
   ILLEGAL_HCW.set_reset_signame("hqm_inp_gated_rst_n");
    ILLEGAL_HCW.set_logical_path("HQMID");
    void'(add_field( ILLEGAL_HCW ));

    ILLEGAL_PP = new("ILLEGAL_PP", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_PP"});
    ILLEGAL_PP.set_powerwell("vcccfn_gated");
    ILLEGAL_PP.set_rand_mode(0);
   ILLEGAL_PP.set_reset_signame("hqm_inp_gated_rst_n");
    ILLEGAL_PP.set_logical_path("HQMID");
    void'(add_field( ILLEGAL_PP ));

    ILLEGAL_PASID = new("ILLEGAL_PASID", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_PASID"});
    ILLEGAL_PASID.set_powerwell("vcccfn_gated");
    ILLEGAL_PASID.set_rand_mode(0);
   ILLEGAL_PASID.set_reset_signame("hqm_inp_gated_rst_n");
    ILLEGAL_PASID.set_logical_path("HQMID");
    void'(add_field( ILLEGAL_PASID ));

    ILLEGAL_QID = new("ILLEGAL_QID", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_QID"});
    ILLEGAL_QID.set_powerwell("vcccfn_gated");
    ILLEGAL_QID.set_rand_mode(0);
   ILLEGAL_QID.set_reset_signame("hqm_inp_gated_rst_n");
    ILLEGAL_QID.set_logical_path("HQMID");
    void'(add_field( ILLEGAL_QID ));

    DISABLED_QID = new("DISABLED_QID", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.DISABLED_QID"});
    DISABLED_QID.set_powerwell("vcccfn_gated");
    DISABLED_QID.set_rand_mode(0);
   DISABLED_QID.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLED_QID.set_logical_path("HQMID");
    void'(add_field( DISABLED_QID ));

    ILLEGAL_LDB_QID_CFG = new("ILLEGAL_LDB_QID_CFG", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_LDB_QID_CFG"});
    ILLEGAL_LDB_QID_CFG.set_powerwell("vcccfn_gated");
    ILLEGAL_LDB_QID_CFG.set_rand_mode(0);
   ILLEGAL_LDB_QID_CFG.set_reset_signame("hqm_inp_gated_rst_n");
    ILLEGAL_LDB_QID_CFG.set_logical_path("HQMID");
    void'(add_field( ILLEGAL_LDB_QID_CFG ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_INGRESS_ALARM_ENABLE_reg) 
endclass : hqm_system_csr_bridge_INGRESS_ALARM_ENABLE_reg

// ================================================

class hqm_system_csr_bridge_ALARM_LUT_PERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DIR_CQ_ISR_PERR;
  sla_ral_field LDB_CQ_ISR_PERR;
  sla_ral_field DIR_CQ_AI_ADDR_L_PERR;
  sla_ral_field DIR_CQ_AI_ADDR_U_PERR;
  sla_ral_field LDB_CQ_AI_ADDR_L_PERR;
  sla_ral_field LDB_CQ_AI_ADDR_U_PERR;
  sla_ral_field DIR_CQ_AI_DATA_PERR;
  sla_ral_field LDB_CQ_AI_DATA_PERR;
  sla_ral_field MSIX_TBL_W0_PERR;
  sla_ral_field MSIX_TBL_W1_PERR;
  sla_ral_field MSIX_TBL_W2_PERR;
  sla_ral_field MSIX_TBL_W3_PERR;
  sla_ral_field VF_SYND_PERR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_LUT_PERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_CQ_ISR_PERR, DIR_CQ_ISR_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ_ISR_PERR, DIR_CQ_ISR_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_ISR_PERR, LDB_CQ_ISR_PERR.desired)
     `RAL_FIELD_CP_1(LDB_CQ_ISR_PERR, LDB_CQ_ISR_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_CQ_AI_ADDR_L_PERR, DIR_CQ_AI_ADDR_L_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ_AI_ADDR_L_PERR, DIR_CQ_AI_ADDR_L_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_CQ_AI_ADDR_U_PERR, DIR_CQ_AI_ADDR_U_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ_AI_ADDR_U_PERR, DIR_CQ_AI_ADDR_U_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_AI_ADDR_L_PERR, LDB_CQ_AI_ADDR_L_PERR.desired)
     `RAL_FIELD_CP_1(LDB_CQ_AI_ADDR_L_PERR, LDB_CQ_AI_ADDR_L_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_AI_ADDR_U_PERR, LDB_CQ_AI_ADDR_U_PERR.desired)
     `RAL_FIELD_CP_1(LDB_CQ_AI_ADDR_U_PERR, LDB_CQ_AI_ADDR_U_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_CQ_AI_DATA_PERR, DIR_CQ_AI_DATA_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ_AI_DATA_PERR, DIR_CQ_AI_DATA_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_AI_DATA_PERR, LDB_CQ_AI_DATA_PERR.desired)
     `RAL_FIELD_CP_1(LDB_CQ_AI_DATA_PERR, LDB_CQ_AI_DATA_PERR.desired, 0)
     `RAL_FIELD_CP(MSIX_TBL_W0_PERR, MSIX_TBL_W0_PERR.desired)
     `RAL_FIELD_CP_1(MSIX_TBL_W0_PERR, MSIX_TBL_W0_PERR.desired, 0)
     `RAL_FIELD_CP(MSIX_TBL_W1_PERR, MSIX_TBL_W1_PERR.desired)
     `RAL_FIELD_CP_1(MSIX_TBL_W1_PERR, MSIX_TBL_W1_PERR.desired, 0)
     `RAL_FIELD_CP(MSIX_TBL_W2_PERR, MSIX_TBL_W2_PERR.desired)
     `RAL_FIELD_CP_1(MSIX_TBL_W2_PERR, MSIX_TBL_W2_PERR.desired, 0)
     `RAL_FIELD_CP(MSIX_TBL_W3_PERR, MSIX_TBL_W3_PERR.desired)
     `RAL_FIELD_CP_1(MSIX_TBL_W3_PERR, MSIX_TBL_W3_PERR.desired, 0)
     `RAL_FIELD_CP(VF_SYND_PERR, VF_SYND_PERR.desired)
     `RAL_FIELD_CP_1(VF_SYND_PERR, VF_SYND_PERR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_CQ_ISR_PERR, DIR_CQ_ISR_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ_ISR_PERR, DIR_CQ_ISR_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_ISR_PERR, LDB_CQ_ISR_PERR.actual)
     `RAL_FIELD_CP_1(LDB_CQ_ISR_PERR, LDB_CQ_ISR_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_CQ_AI_ADDR_L_PERR, DIR_CQ_AI_ADDR_L_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ_AI_ADDR_L_PERR, DIR_CQ_AI_ADDR_L_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_CQ_AI_ADDR_U_PERR, DIR_CQ_AI_ADDR_U_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ_AI_ADDR_U_PERR, DIR_CQ_AI_ADDR_U_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_AI_ADDR_L_PERR, LDB_CQ_AI_ADDR_L_PERR.actual)
     `RAL_FIELD_CP_1(LDB_CQ_AI_ADDR_L_PERR, LDB_CQ_AI_ADDR_L_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_AI_ADDR_U_PERR, LDB_CQ_AI_ADDR_U_PERR.actual)
     `RAL_FIELD_CP_1(LDB_CQ_AI_ADDR_U_PERR, LDB_CQ_AI_ADDR_U_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_CQ_AI_DATA_PERR, DIR_CQ_AI_DATA_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ_AI_DATA_PERR, DIR_CQ_AI_DATA_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_AI_DATA_PERR, LDB_CQ_AI_DATA_PERR.actual)
     `RAL_FIELD_CP_1(LDB_CQ_AI_DATA_PERR, LDB_CQ_AI_DATA_PERR.actual, 0)
     `RAL_FIELD_CP(MSIX_TBL_W0_PERR, MSIX_TBL_W0_PERR.actual)
     `RAL_FIELD_CP_1(MSIX_TBL_W0_PERR, MSIX_TBL_W0_PERR.actual, 0)
     `RAL_FIELD_CP(MSIX_TBL_W1_PERR, MSIX_TBL_W1_PERR.actual)
     `RAL_FIELD_CP_1(MSIX_TBL_W1_PERR, MSIX_TBL_W1_PERR.actual, 0)
     `RAL_FIELD_CP(MSIX_TBL_W2_PERR, MSIX_TBL_W2_PERR.actual)
     `RAL_FIELD_CP_1(MSIX_TBL_W2_PERR, MSIX_TBL_W2_PERR.actual, 0)
     `RAL_FIELD_CP(MSIX_TBL_W3_PERR, MSIX_TBL_W3_PERR.actual)
     `RAL_FIELD_CP_1(MSIX_TBL_W3_PERR, MSIX_TBL_W3_PERR.actual, 0)
     `RAL_FIELD_CP(VF_SYND_PERR, VF_SYND_PERR.actual)
     `RAL_FIELD_CP_1(VF_SYND_PERR, VF_SYND_PERR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DIR_CQ_ISR_PERR = new("DIR_CQ_ISR_PERR", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_ISR_PERR"});
    DIR_CQ_ISR_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ_ISR_PERR.set_rand_mode(0);
   DIR_CQ_ISR_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ_ISR_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ_ISR_PERR ));

    LDB_CQ_ISR_PERR = new("LDB_CQ_ISR_PERR", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_ISR_PERR"});
    LDB_CQ_ISR_PERR.set_powerwell("vcccfn_gated");
    LDB_CQ_ISR_PERR.set_rand_mode(0);
   LDB_CQ_ISR_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_ISR_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_ISR_PERR ));

    DIR_CQ_AI_ADDR_L_PERR = new("DIR_CQ_AI_ADDR_L_PERR", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR"});
    DIR_CQ_AI_ADDR_L_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ_AI_ADDR_L_PERR.set_rand_mode(0);
   DIR_CQ_AI_ADDR_L_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ_AI_ADDR_L_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ_AI_ADDR_L_PERR ));

    DIR_CQ_AI_ADDR_U_PERR = new("DIR_CQ_AI_ADDR_U_PERR", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR"});
    DIR_CQ_AI_ADDR_U_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ_AI_ADDR_U_PERR.set_rand_mode(0);
   DIR_CQ_AI_ADDR_U_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ_AI_ADDR_U_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ_AI_ADDR_U_PERR ));

    LDB_CQ_AI_ADDR_L_PERR = new("LDB_CQ_AI_ADDR_L_PERR", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR"});
    LDB_CQ_AI_ADDR_L_PERR.set_powerwell("vcccfn_gated");
    LDB_CQ_AI_ADDR_L_PERR.set_rand_mode(0);
   LDB_CQ_AI_ADDR_L_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_AI_ADDR_L_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_AI_ADDR_L_PERR ));

    LDB_CQ_AI_ADDR_U_PERR = new("LDB_CQ_AI_ADDR_U_PERR", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR"});
    LDB_CQ_AI_ADDR_U_PERR.set_powerwell("vcccfn_gated");
    LDB_CQ_AI_ADDR_U_PERR.set_rand_mode(0);
   LDB_CQ_AI_ADDR_U_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_AI_ADDR_U_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_AI_ADDR_U_PERR ));

    DIR_CQ_AI_DATA_PERR = new("DIR_CQ_AI_DATA_PERR", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR"});
    DIR_CQ_AI_DATA_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ_AI_DATA_PERR.set_rand_mode(0);
   DIR_CQ_AI_DATA_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ_AI_DATA_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ_AI_DATA_PERR ));

    LDB_CQ_AI_DATA_PERR = new("LDB_CQ_AI_DATA_PERR", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR"});
    LDB_CQ_AI_DATA_PERR.set_powerwell("vcccfn_gated");
    LDB_CQ_AI_DATA_PERR.set_rand_mode(0);
   LDB_CQ_AI_DATA_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_AI_DATA_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_AI_DATA_PERR ));

    MSIX_TBL_W0_PERR = new("MSIX_TBL_W0_PERR", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W0_PERR"});
    MSIX_TBL_W0_PERR.set_powerwell("vcccfn_gated");
    MSIX_TBL_W0_PERR.set_rand_mode(0);
   MSIX_TBL_W0_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_TBL_W0_PERR.set_logical_path("HQMID");
    void'(add_field( MSIX_TBL_W0_PERR ));

    MSIX_TBL_W1_PERR = new("MSIX_TBL_W1_PERR", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W1_PERR"});
    MSIX_TBL_W1_PERR.set_powerwell("vcccfn_gated");
    MSIX_TBL_W1_PERR.set_rand_mode(0);
   MSIX_TBL_W1_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_TBL_W1_PERR.set_logical_path("HQMID");
    void'(add_field( MSIX_TBL_W1_PERR ));

    MSIX_TBL_W2_PERR = new("MSIX_TBL_W2_PERR", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W2_PERR"});
    MSIX_TBL_W2_PERR.set_powerwell("vcccfn_gated");
    MSIX_TBL_W2_PERR.set_rand_mode(0);
   MSIX_TBL_W2_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_TBL_W2_PERR.set_logical_path("HQMID");
    void'(add_field( MSIX_TBL_W2_PERR ));

    MSIX_TBL_W3_PERR = new("MSIX_TBL_W3_PERR", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W3_PERR"});
    MSIX_TBL_W3_PERR.set_powerwell("vcccfn_gated");
    MSIX_TBL_W3_PERR.set_rand_mode(0);
   MSIX_TBL_W3_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_TBL_W3_PERR.set_logical_path("HQMID");
    void'(add_field( MSIX_TBL_W3_PERR ));

    VF_SYND_PERR = new("VF_SYND_PERR", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.VF_SYND_PERR"});
    VF_SYND_PERR.set_powerwell("vcccfn_gated");
    VF_SYND_PERR.set_rand_mode(0);
   VF_SYND_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_SYND_PERR.set_logical_path("HQMID");
    void'(add_field( VF_SYND_PERR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_LUT_PERR_reg) 
endclass : hqm_system_csr_bridge_ALARM_LUT_PERR_reg

// ================================================

class hqm_system_csr_bridge_EGRESS_LUT_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DIR_CQ_FMT_PERR;
  sla_ral_field DIR_CQ2VF_PF_RO_PERR;
  sla_ral_field DIR_CQ_ADDR_U_PERR;
  sla_ral_field DIR_CQ_ADDR_L_PERR;
  sla_ral_field DIR_CQ_PASID_PERR;
  sla_ral_field LDB_CQ2VF_PF_RO_PERR;
  sla_ral_field LDB_CQ_ADDR_U_PERR;
  sla_ral_field LDB_CQ_ADDR_L_PERR;
  sla_ral_field LDB_CQ_PASID_PERR;
  sla_ral_field LDB_QID2VQID_PERR;
  sla_ral_field SCH_DATA_PERR;
  sla_ral_field SCH_REQ_PERR;
  sla_ral_field SCH_REQ_RERR;
  sla_ral_field SCH_REQ_PL_PERR;
  sla_ral_field SCH_INT_PL_PERR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_EGRESS_LUT_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_CQ_FMT_PERR, DIR_CQ_FMT_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ_FMT_PERR, DIR_CQ_FMT_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_CQ2VF_PF_RO_PERR, DIR_CQ2VF_PF_RO_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ2VF_PF_RO_PERR, DIR_CQ2VF_PF_RO_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_CQ_ADDR_U_PERR, DIR_CQ_ADDR_U_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ_ADDR_U_PERR, DIR_CQ_ADDR_U_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_CQ_ADDR_L_PERR, DIR_CQ_ADDR_L_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ_ADDR_L_PERR, DIR_CQ_ADDR_L_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_CQ_PASID_PERR, DIR_CQ_PASID_PERR.desired)
     `RAL_FIELD_CP_1(DIR_CQ_PASID_PERR, DIR_CQ_PASID_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_CQ2VF_PF_RO_PERR, LDB_CQ2VF_PF_RO_PERR.desired)
     `RAL_FIELD_CP_1(LDB_CQ2VF_PF_RO_PERR, LDB_CQ2VF_PF_RO_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_ADDR_U_PERR, LDB_CQ_ADDR_U_PERR.desired)
     `RAL_FIELD_CP_1(LDB_CQ_ADDR_U_PERR, LDB_CQ_ADDR_U_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_ADDR_L_PERR, LDB_CQ_ADDR_L_PERR.desired)
     `RAL_FIELD_CP_1(LDB_CQ_ADDR_L_PERR, LDB_CQ_ADDR_L_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_PASID_PERR, LDB_CQ_PASID_PERR.desired)
     `RAL_FIELD_CP_1(LDB_CQ_PASID_PERR, LDB_CQ_PASID_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_QID2VQID_PERR, LDB_QID2VQID_PERR.desired)
     `RAL_FIELD_CP_1(LDB_QID2VQID_PERR, LDB_QID2VQID_PERR.desired, 0)
     `RAL_FIELD_CP(SCH_DATA_PERR, SCH_DATA_PERR.desired)
     `RAL_FIELD_CP_1(SCH_DATA_PERR, SCH_DATA_PERR.desired, 0)
     `RAL_FIELD_CP(SCH_REQ_PERR, SCH_REQ_PERR.desired)
     `RAL_FIELD_CP_1(SCH_REQ_PERR, SCH_REQ_PERR.desired, 0)
     `RAL_FIELD_CP(SCH_REQ_RERR, SCH_REQ_RERR.desired)
     `RAL_FIELD_CP_1(SCH_REQ_RERR, SCH_REQ_RERR.desired, 0)
     `RAL_FIELD_CP(SCH_REQ_PL_PERR, SCH_REQ_PL_PERR.desired)
     `RAL_FIELD_CP_1(SCH_REQ_PL_PERR, SCH_REQ_PL_PERR.desired, 0)
     `RAL_FIELD_CP(SCH_INT_PL_PERR, SCH_INT_PL_PERR.desired)
     `RAL_FIELD_CP_1(SCH_INT_PL_PERR, SCH_INT_PL_PERR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_CQ_FMT_PERR, DIR_CQ_FMT_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ_FMT_PERR, DIR_CQ_FMT_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_CQ2VF_PF_RO_PERR, DIR_CQ2VF_PF_RO_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ2VF_PF_RO_PERR, DIR_CQ2VF_PF_RO_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_CQ_ADDR_U_PERR, DIR_CQ_ADDR_U_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ_ADDR_U_PERR, DIR_CQ_ADDR_U_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_CQ_ADDR_L_PERR, DIR_CQ_ADDR_L_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ_ADDR_L_PERR, DIR_CQ_ADDR_L_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_CQ_PASID_PERR, DIR_CQ_PASID_PERR.actual)
     `RAL_FIELD_CP_1(DIR_CQ_PASID_PERR, DIR_CQ_PASID_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_CQ2VF_PF_RO_PERR, LDB_CQ2VF_PF_RO_PERR.actual)
     `RAL_FIELD_CP_1(LDB_CQ2VF_PF_RO_PERR, LDB_CQ2VF_PF_RO_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_ADDR_U_PERR, LDB_CQ_ADDR_U_PERR.actual)
     `RAL_FIELD_CP_1(LDB_CQ_ADDR_U_PERR, LDB_CQ_ADDR_U_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_ADDR_L_PERR, LDB_CQ_ADDR_L_PERR.actual)
     `RAL_FIELD_CP_1(LDB_CQ_ADDR_L_PERR, LDB_CQ_ADDR_L_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_PASID_PERR, LDB_CQ_PASID_PERR.actual)
     `RAL_FIELD_CP_1(LDB_CQ_PASID_PERR, LDB_CQ_PASID_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_QID2VQID_PERR, LDB_QID2VQID_PERR.actual)
     `RAL_FIELD_CP_1(LDB_QID2VQID_PERR, LDB_QID2VQID_PERR.actual, 0)
     `RAL_FIELD_CP(SCH_DATA_PERR, SCH_DATA_PERR.actual)
     `RAL_FIELD_CP_1(SCH_DATA_PERR, SCH_DATA_PERR.actual, 0)
     `RAL_FIELD_CP(SCH_REQ_PERR, SCH_REQ_PERR.actual)
     `RAL_FIELD_CP_1(SCH_REQ_PERR, SCH_REQ_PERR.actual, 0)
     `RAL_FIELD_CP(SCH_REQ_RERR, SCH_REQ_RERR.actual)
     `RAL_FIELD_CP_1(SCH_REQ_RERR, SCH_REQ_RERR.actual, 0)
     `RAL_FIELD_CP(SCH_REQ_PL_PERR, SCH_REQ_PL_PERR.actual)
     `RAL_FIELD_CP_1(SCH_REQ_PL_PERR, SCH_REQ_PL_PERR.actual, 0)
     `RAL_FIELD_CP(SCH_INT_PL_PERR, SCH_INT_PL_PERR.actual)
     `RAL_FIELD_CP_1(SCH_INT_PL_PERR, SCH_INT_PL_PERR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DIR_CQ_FMT_PERR = new("DIR_CQ_FMT_PERR", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_FMT_PERR"});
    DIR_CQ_FMT_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ_FMT_PERR.set_rand_mode(0);
   DIR_CQ_FMT_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ_FMT_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ_FMT_PERR ));

    DIR_CQ2VF_PF_RO_PERR = new("DIR_CQ2VF_PF_RO_PERR", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR"});
    DIR_CQ2VF_PF_RO_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ2VF_PF_RO_PERR.set_rand_mode(0);
   DIR_CQ2VF_PF_RO_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ2VF_PF_RO_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ2VF_PF_RO_PERR ));

    DIR_CQ_ADDR_U_PERR = new("DIR_CQ_ADDR_U_PERR", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR"});
    DIR_CQ_ADDR_U_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ_ADDR_U_PERR.set_rand_mode(0);
   DIR_CQ_ADDR_U_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ_ADDR_U_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ_ADDR_U_PERR ));

    DIR_CQ_ADDR_L_PERR = new("DIR_CQ_ADDR_L_PERR", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR"});
    DIR_CQ_ADDR_L_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ_ADDR_L_PERR.set_rand_mode(0);
   DIR_CQ_ADDR_L_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ_ADDR_L_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ_ADDR_L_PERR ));

    DIR_CQ_PASID_PERR = new("DIR_CQ_PASID_PERR", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_PASID_PERR"});
    DIR_CQ_PASID_PERR.set_powerwell("vcccfn_gated");
    DIR_CQ_PASID_PERR.set_rand_mode(0);
   DIR_CQ_PASID_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CQ_PASID_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_CQ_PASID_PERR ));

    LDB_CQ2VF_PF_RO_PERR = new("LDB_CQ2VF_PF_RO_PERR", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR"});
    LDB_CQ2VF_PF_RO_PERR.set_powerwell("vcccfn_gated");
    LDB_CQ2VF_PF_RO_PERR.set_rand_mode(0);
   LDB_CQ2VF_PF_RO_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ2VF_PF_RO_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_CQ2VF_PF_RO_PERR ));

    LDB_CQ_ADDR_U_PERR = new("LDB_CQ_ADDR_U_PERR", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR"});
    LDB_CQ_ADDR_U_PERR.set_powerwell("vcccfn_gated");
    LDB_CQ_ADDR_U_PERR.set_rand_mode(0);
   LDB_CQ_ADDR_U_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_ADDR_U_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_ADDR_U_PERR ));

    LDB_CQ_ADDR_L_PERR = new("LDB_CQ_ADDR_L_PERR", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR"});
    LDB_CQ_ADDR_L_PERR.set_powerwell("vcccfn_gated");
    LDB_CQ_ADDR_L_PERR.set_rand_mode(0);
   LDB_CQ_ADDR_L_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_ADDR_L_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_ADDR_L_PERR ));

    LDB_CQ_PASID_PERR = new("LDB_CQ_PASID_PERR", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_PASID_PERR"});
    LDB_CQ_PASID_PERR.set_powerwell("vcccfn_gated");
    LDB_CQ_PASID_PERR.set_rand_mode(0);
   LDB_CQ_PASID_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_PASID_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_PASID_PERR ));

    LDB_QID2VQID_PERR = new("LDB_QID2VQID_PERR", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_QID2VQID_PERR"});
    LDB_QID2VQID_PERR.set_powerwell("vcccfn_gated");
    LDB_QID2VQID_PERR.set_rand_mode(0);
   LDB_QID2VQID_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_QID2VQID_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_QID2VQID_PERR ));

    SCH_DATA_PERR = new("SCH_DATA_PERR", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_DATA_PERR"});
    SCH_DATA_PERR.set_powerwell("vcccfn_gated");
    SCH_DATA_PERR.set_rand_mode(0);
   SCH_DATA_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_DATA_PERR.set_logical_path("HQMID");
    void'(add_field( SCH_DATA_PERR ));

    SCH_REQ_PERR = new("SCH_REQ_PERR", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_PERR"});
    SCH_REQ_PERR.set_powerwell("vcccfn_gated");
    SCH_REQ_PERR.set_rand_mode(0);
   SCH_REQ_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_REQ_PERR.set_logical_path("HQMID");
    void'(add_field( SCH_REQ_PERR ));

    SCH_REQ_RERR = new("SCH_REQ_RERR", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_RERR"});
    SCH_REQ_RERR.set_powerwell("vcccfn_gated");
    SCH_REQ_RERR.set_rand_mode(0);
   SCH_REQ_RERR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_REQ_RERR.set_logical_path("HQMID");
    void'(add_field( SCH_REQ_RERR ));

    SCH_REQ_PL_PERR = new("SCH_REQ_PL_PERR", "RW/1C/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_PL_PERR"});
    SCH_REQ_PL_PERR.set_powerwell("vcccfn_gated");
    SCH_REQ_PL_PERR.set_rand_mode(0);
   SCH_REQ_PL_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_REQ_PL_PERR.set_logical_path("HQMID");
    void'(add_field( SCH_REQ_PL_PERR ));

    SCH_INT_PL_PERR = new("SCH_INT_PL_PERR", "RW/1C/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_INT_PL_PERR"});
    SCH_INT_PL_PERR.set_powerwell("vcccfn_gated");
    SCH_INT_PL_PERR.set_rand_mode(0);
   SCH_INT_PL_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_INT_PL_PERR.set_logical_path("HQMID");
    void'(add_field( SCH_INT_PL_PERR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_EGRESS_LUT_ERR_reg) 
endclass : hqm_system_csr_bridge_EGRESS_LUT_ERR_reg

// ================================================

class hqm_system_csr_bridge_INGRESS_LUT_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LDB_QID_CFG_V_PERR;
  sla_ral_field DIR_PP2VAS_PERR;
  sla_ral_field LDB_PP2VAS_PERR;
  sla_ral_field DIR_VASQID_V_PERR;
  sla_ral_field LDB_VASQID_V_PERR;
  sla_ral_field LDB_QID_V_PERR;
  sla_ral_field DIR_QID_V_PERR;
  sla_ral_field DIR_QID_ITS_PERR;
  sla_ral_field LDB_QID_ITS_PERR;
  sla_ral_field VF_LDB_VQID_V_PERR;
  sla_ral_field VF_DIR_VQID_V_PERR;
  sla_ral_field VF_LDB_VQID2QID_MB_ECC_ERR;
  sla_ral_field VF_DIR_VQID2QID_MB_ECC_ERR;
  sla_ral_field LDB_PP_V_PERR;
  sla_ral_field DIR_PP_V_PERR;
  sla_ral_field VF_LDB_VPP_V_PERR;
  sla_ral_field VF_DIR_VPP_V_PERR;
  sla_ral_field VF_LDB_VPP2PP_PERR;
  sla_ral_field VF_DIR_VPP2PP_MB_ECC_ERR;
  sla_ral_field PORT_PERR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_INGRESS_LUT_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LDB_QID_CFG_V_PERR, LDB_QID_CFG_V_PERR.desired)
     `RAL_FIELD_CP_1(LDB_QID_CFG_V_PERR, LDB_QID_CFG_V_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_PP2VAS_PERR, DIR_PP2VAS_PERR.desired)
     `RAL_FIELD_CP_1(DIR_PP2VAS_PERR, DIR_PP2VAS_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_PP2VAS_PERR, LDB_PP2VAS_PERR.desired)
     `RAL_FIELD_CP_1(LDB_PP2VAS_PERR, LDB_PP2VAS_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_VASQID_V_PERR, DIR_VASQID_V_PERR.desired)
     `RAL_FIELD_CP_1(DIR_VASQID_V_PERR, DIR_VASQID_V_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_VASQID_V_PERR, LDB_VASQID_V_PERR.desired)
     `RAL_FIELD_CP_1(LDB_VASQID_V_PERR, LDB_VASQID_V_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_QID_V_PERR, LDB_QID_V_PERR.desired)
     `RAL_FIELD_CP_1(LDB_QID_V_PERR, LDB_QID_V_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_QID_V_PERR, DIR_QID_V_PERR.desired)
     `RAL_FIELD_CP_1(DIR_QID_V_PERR, DIR_QID_V_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_QID_ITS_PERR, DIR_QID_ITS_PERR.desired)
     `RAL_FIELD_CP_1(DIR_QID_ITS_PERR, DIR_QID_ITS_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_QID_ITS_PERR, LDB_QID_ITS_PERR.desired)
     `RAL_FIELD_CP_1(LDB_QID_ITS_PERR, LDB_QID_ITS_PERR.desired, 0)
     `RAL_FIELD_CP(VF_LDB_VQID_V_PERR, VF_LDB_VQID_V_PERR.desired)
     `RAL_FIELD_CP_1(VF_LDB_VQID_V_PERR, VF_LDB_VQID_V_PERR.desired, 0)
     `RAL_FIELD_CP(VF_DIR_VQID_V_PERR, VF_DIR_VQID_V_PERR.desired)
     `RAL_FIELD_CP_1(VF_DIR_VQID_V_PERR, VF_DIR_VQID_V_PERR.desired, 0)
     `RAL_FIELD_CP(VF_LDB_VQID2QID_MB_ECC_ERR, VF_LDB_VQID2QID_MB_ECC_ERR.desired)
     `RAL_FIELD_CP_1(VF_LDB_VQID2QID_MB_ECC_ERR, VF_LDB_VQID2QID_MB_ECC_ERR.desired, 0)
     `RAL_FIELD_CP(VF_DIR_VQID2QID_MB_ECC_ERR, VF_DIR_VQID2QID_MB_ECC_ERR.desired)
     `RAL_FIELD_CP_1(VF_DIR_VQID2QID_MB_ECC_ERR, VF_DIR_VQID2QID_MB_ECC_ERR.desired, 0)
     `RAL_FIELD_CP(LDB_PP_V_PERR, LDB_PP_V_PERR.desired)
     `RAL_FIELD_CP_1(LDB_PP_V_PERR, LDB_PP_V_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_PP_V_PERR, DIR_PP_V_PERR.desired)
     `RAL_FIELD_CP_1(DIR_PP_V_PERR, DIR_PP_V_PERR.desired, 0)
     `RAL_FIELD_CP(VF_LDB_VPP_V_PERR, VF_LDB_VPP_V_PERR.desired)
     `RAL_FIELD_CP_1(VF_LDB_VPP_V_PERR, VF_LDB_VPP_V_PERR.desired, 0)
     `RAL_FIELD_CP(VF_DIR_VPP_V_PERR, VF_DIR_VPP_V_PERR.desired)
     `RAL_FIELD_CP_1(VF_DIR_VPP_V_PERR, VF_DIR_VPP_V_PERR.desired, 0)
     `RAL_FIELD_CP(VF_LDB_VPP2PP_PERR, VF_LDB_VPP2PP_PERR.desired)
     `RAL_FIELD_CP_1(VF_LDB_VPP2PP_PERR, VF_LDB_VPP2PP_PERR.desired, 0)
     `RAL_FIELD_CP(VF_DIR_VPP2PP_MB_ECC_ERR, VF_DIR_VPP2PP_MB_ECC_ERR.desired)
     `RAL_FIELD_CP_1(VF_DIR_VPP2PP_MB_ECC_ERR, VF_DIR_VPP2PP_MB_ECC_ERR.desired, 0)
     `RAL_FIELD_CP(PORT_PERR, PORT_PERR.desired)
     `RAL_FIELD_CP_1(PORT_PERR, PORT_PERR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LDB_QID_CFG_V_PERR, LDB_QID_CFG_V_PERR.actual)
     `RAL_FIELD_CP_1(LDB_QID_CFG_V_PERR, LDB_QID_CFG_V_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_PP2VAS_PERR, DIR_PP2VAS_PERR.actual)
     `RAL_FIELD_CP_1(DIR_PP2VAS_PERR, DIR_PP2VAS_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_PP2VAS_PERR, LDB_PP2VAS_PERR.actual)
     `RAL_FIELD_CP_1(LDB_PP2VAS_PERR, LDB_PP2VAS_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_VASQID_V_PERR, DIR_VASQID_V_PERR.actual)
     `RAL_FIELD_CP_1(DIR_VASQID_V_PERR, DIR_VASQID_V_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_VASQID_V_PERR, LDB_VASQID_V_PERR.actual)
     `RAL_FIELD_CP_1(LDB_VASQID_V_PERR, LDB_VASQID_V_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_QID_V_PERR, LDB_QID_V_PERR.actual)
     `RAL_FIELD_CP_1(LDB_QID_V_PERR, LDB_QID_V_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_QID_V_PERR, DIR_QID_V_PERR.actual)
     `RAL_FIELD_CP_1(DIR_QID_V_PERR, DIR_QID_V_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_QID_ITS_PERR, DIR_QID_ITS_PERR.actual)
     `RAL_FIELD_CP_1(DIR_QID_ITS_PERR, DIR_QID_ITS_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_QID_ITS_PERR, LDB_QID_ITS_PERR.actual)
     `RAL_FIELD_CP_1(LDB_QID_ITS_PERR, LDB_QID_ITS_PERR.actual, 0)
     `RAL_FIELD_CP(VF_LDB_VQID_V_PERR, VF_LDB_VQID_V_PERR.actual)
     `RAL_FIELD_CP_1(VF_LDB_VQID_V_PERR, VF_LDB_VQID_V_PERR.actual, 0)
     `RAL_FIELD_CP(VF_DIR_VQID_V_PERR, VF_DIR_VQID_V_PERR.actual)
     `RAL_FIELD_CP_1(VF_DIR_VQID_V_PERR, VF_DIR_VQID_V_PERR.actual, 0)
     `RAL_FIELD_CP(VF_LDB_VQID2QID_MB_ECC_ERR, VF_LDB_VQID2QID_MB_ECC_ERR.actual)
     `RAL_FIELD_CP_1(VF_LDB_VQID2QID_MB_ECC_ERR, VF_LDB_VQID2QID_MB_ECC_ERR.actual, 0)
     `RAL_FIELD_CP(VF_DIR_VQID2QID_MB_ECC_ERR, VF_DIR_VQID2QID_MB_ECC_ERR.actual)
     `RAL_FIELD_CP_1(VF_DIR_VQID2QID_MB_ECC_ERR, VF_DIR_VQID2QID_MB_ECC_ERR.actual, 0)
     `RAL_FIELD_CP(LDB_PP_V_PERR, LDB_PP_V_PERR.actual)
     `RAL_FIELD_CP_1(LDB_PP_V_PERR, LDB_PP_V_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_PP_V_PERR, DIR_PP_V_PERR.actual)
     `RAL_FIELD_CP_1(DIR_PP_V_PERR, DIR_PP_V_PERR.actual, 0)
     `RAL_FIELD_CP(VF_LDB_VPP_V_PERR, VF_LDB_VPP_V_PERR.actual)
     `RAL_FIELD_CP_1(VF_LDB_VPP_V_PERR, VF_LDB_VPP_V_PERR.actual, 0)
     `RAL_FIELD_CP(VF_DIR_VPP_V_PERR, VF_DIR_VPP_V_PERR.actual)
     `RAL_FIELD_CP_1(VF_DIR_VPP_V_PERR, VF_DIR_VPP_V_PERR.actual, 0)
     `RAL_FIELD_CP(VF_LDB_VPP2PP_PERR, VF_LDB_VPP2PP_PERR.actual)
     `RAL_FIELD_CP_1(VF_LDB_VPP2PP_PERR, VF_LDB_VPP2PP_PERR.actual, 0)
     `RAL_FIELD_CP(VF_DIR_VPP2PP_MB_ECC_ERR, VF_DIR_VPP2PP_MB_ECC_ERR.actual)
     `RAL_FIELD_CP_1(VF_DIR_VPP2PP_MB_ECC_ERR, VF_DIR_VPP2PP_MB_ECC_ERR.actual, 0)
     `RAL_FIELD_CP(PORT_PERR, PORT_PERR.actual)
     `RAL_FIELD_CP_1(PORT_PERR, PORT_PERR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LDB_QID_CFG_V_PERR = new("LDB_QID_CFG_V_PERR", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR"});
    LDB_QID_CFG_V_PERR.set_powerwell("vcccfn_gated");
    LDB_QID_CFG_V_PERR.set_rand_mode(0);
   LDB_QID_CFG_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_QID_CFG_V_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_QID_CFG_V_PERR ));

    DIR_PP2VAS_PERR = new("DIR_PP2VAS_PERR", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_PP2VAS_PERR"});
    DIR_PP2VAS_PERR.set_powerwell("vcccfn_gated");
    DIR_PP2VAS_PERR.set_rand_mode(0);
   DIR_PP2VAS_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_PP2VAS_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_PP2VAS_PERR ));

    LDB_PP2VAS_PERR = new("LDB_PP2VAS_PERR", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_PP2VAS_PERR"});
    LDB_PP2VAS_PERR.set_powerwell("vcccfn_gated");
    LDB_PP2VAS_PERR.set_rand_mode(0);
   LDB_PP2VAS_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_PP2VAS_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_PP2VAS_PERR ));

    DIR_VASQID_V_PERR = new("DIR_VASQID_V_PERR", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_VASQID_V_PERR"});
    DIR_VASQID_V_PERR.set_powerwell("vcccfn_gated");
    DIR_VASQID_V_PERR.set_rand_mode(0);
   DIR_VASQID_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_VASQID_V_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_VASQID_V_PERR ));

    LDB_VASQID_V_PERR = new("LDB_VASQID_V_PERR", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_VASQID_V_PERR"});
    LDB_VASQID_V_PERR.set_powerwell("vcccfn_gated");
    LDB_VASQID_V_PERR.set_rand_mode(0);
   LDB_VASQID_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_VASQID_V_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_VASQID_V_PERR ));

    LDB_QID_V_PERR = new("LDB_QID_V_PERR", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_V_PERR"});
    LDB_QID_V_PERR.set_powerwell("vcccfn_gated");
    LDB_QID_V_PERR.set_rand_mode(0);
   LDB_QID_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_QID_V_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_QID_V_PERR ));

    DIR_QID_V_PERR = new("DIR_QID_V_PERR", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_QID_V_PERR"});
    DIR_QID_V_PERR.set_powerwell("vcccfn_gated");
    DIR_QID_V_PERR.set_rand_mode(0);
   DIR_QID_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_QID_V_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_QID_V_PERR ));

    DIR_QID_ITS_PERR = new("DIR_QID_ITS_PERR", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_QID_ITS_PERR"});
    DIR_QID_ITS_PERR.set_powerwell("vcccfn_gated");
    DIR_QID_ITS_PERR.set_rand_mode(0);
   DIR_QID_ITS_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_QID_ITS_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_QID_ITS_PERR ));

    LDB_QID_ITS_PERR = new("LDB_QID_ITS_PERR", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_ITS_PERR"});
    LDB_QID_ITS_PERR.set_powerwell("vcccfn_gated");
    LDB_QID_ITS_PERR.set_rand_mode(0);
   LDB_QID_ITS_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_QID_ITS_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_QID_ITS_PERR ));

    VF_LDB_VQID_V_PERR = new("VF_LDB_VQID_V_PERR", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR"});
    VF_LDB_VQID_V_PERR.set_powerwell("vcccfn_gated");
    VF_LDB_VQID_V_PERR.set_rand_mode(0);
   VF_LDB_VQID_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_LDB_VQID_V_PERR.set_logical_path("HQMID");
    void'(add_field( VF_LDB_VQID_V_PERR ));

    VF_DIR_VQID_V_PERR = new("VF_DIR_VQID_V_PERR", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR"});
    VF_DIR_VQID_V_PERR.set_powerwell("vcccfn_gated");
    VF_DIR_VQID_V_PERR.set_rand_mode(0);
   VF_DIR_VQID_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_DIR_VQID_V_PERR.set_logical_path("HQMID");
    void'(add_field( VF_DIR_VQID_V_PERR ));

    VF_LDB_VQID2QID_MB_ECC_ERR = new("VF_LDB_VQID2QID_MB_ECC_ERR", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR"});
    VF_LDB_VQID2QID_MB_ECC_ERR.set_powerwell("vcccfn_gated");
    VF_LDB_VQID2QID_MB_ECC_ERR.set_rand_mode(0);
   VF_LDB_VQID2QID_MB_ECC_ERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_LDB_VQID2QID_MB_ECC_ERR.set_logical_path("HQMID");
    void'(add_field( VF_LDB_VQID2QID_MB_ECC_ERR ));

    VF_DIR_VQID2QID_MB_ECC_ERR = new("VF_DIR_VQID2QID_MB_ECC_ERR", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR"});
    VF_DIR_VQID2QID_MB_ECC_ERR.set_powerwell("vcccfn_gated");
    VF_DIR_VQID2QID_MB_ECC_ERR.set_rand_mode(0);
   VF_DIR_VQID2QID_MB_ECC_ERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_DIR_VQID2QID_MB_ECC_ERR.set_logical_path("HQMID");
    void'(add_field( VF_DIR_VQID2QID_MB_ECC_ERR ));

    LDB_PP_V_PERR = new("LDB_PP_V_PERR", "RW/1C/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_PP_V_PERR"});
    LDB_PP_V_PERR.set_powerwell("vcccfn_gated");
    LDB_PP_V_PERR.set_rand_mode(0);
   LDB_PP_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_PP_V_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_PP_V_PERR ));

    DIR_PP_V_PERR = new("DIR_PP_V_PERR", "RW/1C/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_PP_V_PERR"});
    DIR_PP_V_PERR.set_powerwell("vcccfn_gated");
    DIR_PP_V_PERR.set_rand_mode(0);
   DIR_PP_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_PP_V_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_PP_V_PERR ));

    VF_LDB_VPP_V_PERR = new("VF_LDB_VPP_V_PERR", "RW/1C/V", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR"});
    VF_LDB_VPP_V_PERR.set_powerwell("vcccfn_gated");
    VF_LDB_VPP_V_PERR.set_rand_mode(0);
   VF_LDB_VPP_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_LDB_VPP_V_PERR.set_logical_path("HQMID");
    void'(add_field( VF_LDB_VPP_V_PERR ));

    VF_DIR_VPP_V_PERR = new("VF_DIR_VPP_V_PERR", "RW/1C/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR"});
    VF_DIR_VPP_V_PERR.set_powerwell("vcccfn_gated");
    VF_DIR_VPP_V_PERR.set_rand_mode(0);
   VF_DIR_VPP_V_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_DIR_VPP_V_PERR.set_logical_path("HQMID");
    void'(add_field( VF_DIR_VPP_V_PERR ));

    VF_LDB_VPP2PP_PERR = new("VF_LDB_VPP2PP_PERR", "RW/1C/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR"});
    VF_LDB_VPP2PP_PERR.set_powerwell("vcccfn_gated");
    VF_LDB_VPP2PP_PERR.set_rand_mode(0);
   VF_LDB_VPP2PP_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_LDB_VPP2PP_PERR.set_logical_path("HQMID");
    void'(add_field( VF_LDB_VPP2PP_PERR ));

    VF_DIR_VPP2PP_MB_ECC_ERR = new("VF_DIR_VPP2PP_MB_ECC_ERR", "RW/1C/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR"});
    VF_DIR_VPP2PP_MB_ECC_ERR.set_powerwell("vcccfn_gated");
    VF_DIR_VPP2PP_MB_ECC_ERR.set_rand_mode(0);
   VF_DIR_VPP2PP_MB_ECC_ERR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_DIR_VPP2PP_MB_ECC_ERR.set_logical_path("HQMID");
    void'(add_field( VF_DIR_VPP2PP_MB_ECC_ERR ));

    PORT_PERR = new("PORT_PERR", "RW/1C/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.PORT_PERR"});
    PORT_PERR.set_powerwell("vcccfn_gated");
    PORT_PERR.set_rand_mode(0);
   PORT_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    PORT_PERR.set_logical_path("HQMID");
    void'(add_field( PORT_PERR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_INGRESS_LUT_ERR_reg) 
endclass : hqm_system_csr_bridge_INGRESS_LUT_ERR_reg

// ================================================

class hqm_system_csr_bridge_ALARM_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_ADDR_OVERFLOW;
  sla_ral_field INGRESS_PERR;
  sla_ral_field EGRESS_PERR;
  sla_ral_field ALARM_PERR;
  sla_ral_field SCH_SM_ERR;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field SCH_WB_PERR;
  sla_ral_field ALARM_INT_ERR;
  sla_ral_field RF_IPAR_ERROR;
  sla_ral_field ROB_ERROR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_ADDR_OVERFLOW, CQ_ADDR_OVERFLOW.desired)
     `RAL_FIELD_CP_1(CQ_ADDR_OVERFLOW, CQ_ADDR_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(INGRESS_PERR, INGRESS_PERR.desired)
     `RAL_FIELD_CP_1(INGRESS_PERR, INGRESS_PERR.desired, 0)
     `RAL_FIELD_CP(EGRESS_PERR, EGRESS_PERR.desired)
     `RAL_FIELD_CP_1(EGRESS_PERR, EGRESS_PERR.desired, 0)
     `RAL_FIELD_CP(ALARM_PERR, ALARM_PERR.desired)
     `RAL_FIELD_CP_1(ALARM_PERR, ALARM_PERR.desired, 0)
     `RAL_FIELD_CP(SCH_SM_ERR, SCH_SM_ERR.desired)
     `RAL_FIELD_CP_1(SCH_SM_ERR, SCH_SM_ERR.desired, 0)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(SCH_WB_PERR, SCH_WB_PERR.desired)
     `RAL_FIELD_CP_1(SCH_WB_PERR, SCH_WB_PERR.desired, 0)
     `RAL_FIELD_CP(ALARM_INT_ERR, ALARM_INT_ERR.desired)
     `RAL_FIELD_CP_1(ALARM_INT_ERR, ALARM_INT_ERR.desired, 0)
     `RAL_FIELD_CP(RF_IPAR_ERROR, RF_IPAR_ERROR.desired)
     `RAL_FIELD_CP_1(RF_IPAR_ERROR, RF_IPAR_ERROR.desired, 0)
     `RAL_FIELD_CP(ROB_ERROR, ROB_ERROR.desired)
     `RAL_FIELD_CP_1(ROB_ERROR, ROB_ERROR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_ADDR_OVERFLOW, CQ_ADDR_OVERFLOW.actual)
     `RAL_FIELD_CP_1(CQ_ADDR_OVERFLOW, CQ_ADDR_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(INGRESS_PERR, INGRESS_PERR.actual)
     `RAL_FIELD_CP_1(INGRESS_PERR, INGRESS_PERR.actual, 0)
     `RAL_FIELD_CP(EGRESS_PERR, EGRESS_PERR.actual)
     `RAL_FIELD_CP_1(EGRESS_PERR, EGRESS_PERR.actual, 0)
     `RAL_FIELD_CP(ALARM_PERR, ALARM_PERR.actual)
     `RAL_FIELD_CP_1(ALARM_PERR, ALARM_PERR.actual, 0)
     `RAL_FIELD_CP(SCH_SM_ERR, SCH_SM_ERR.actual)
     `RAL_FIELD_CP_1(SCH_SM_ERR, SCH_SM_ERR.actual, 0)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(SCH_WB_PERR, SCH_WB_PERR.actual)
     `RAL_FIELD_CP_1(SCH_WB_PERR, SCH_WB_PERR.actual, 0)
     `RAL_FIELD_CP(ALARM_INT_ERR, ALARM_INT_ERR.actual)
     `RAL_FIELD_CP_1(ALARM_INT_ERR, ALARM_INT_ERR.actual, 0)
     `RAL_FIELD_CP(RF_IPAR_ERROR, RF_IPAR_ERROR.actual)
     `RAL_FIELD_CP_1(RF_IPAR_ERROR, RF_IPAR_ERROR.actual, 0)
     `RAL_FIELD_CP(ROB_ERROR, ROB_ERROR.actual)
     `RAL_FIELD_CP_1(ROB_ERROR, ROB_ERROR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_ADDR_OVERFLOW = new("CQ_ADDR_OVERFLOW", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.CQ_ADDR_OVERFLOW"});
    CQ_ADDR_OVERFLOW.set_powerwell("vcccfn_gated");
    CQ_ADDR_OVERFLOW.set_rand_mode(0);
   CQ_ADDR_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_ADDR_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( CQ_ADDR_OVERFLOW ));

    INGRESS_PERR = new("INGRESS_PERR", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.INGRESS_PERR"});
    INGRESS_PERR.set_powerwell("vcccfn_gated");
    INGRESS_PERR.set_rand_mode(0);
   INGRESS_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_PERR.set_logical_path("HQMID");
    void'(add_field( INGRESS_PERR ));

    EGRESS_PERR = new("EGRESS_PERR", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.EGRESS_PERR"});
    EGRESS_PERR.set_powerwell("vcccfn_gated");
    EGRESS_PERR.set_rand_mode(0);
   EGRESS_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_PERR.set_logical_path("HQMID");
    void'(add_field( EGRESS_PERR ));

    ALARM_PERR = new("ALARM_PERR", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ALARM_PERR"});
    ALARM_PERR.set_powerwell("vcccfn_gated");
    ALARM_PERR.set_rand_mode(0);
   ALARM_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    ALARM_PERR.set_logical_path("HQMID");
    void'(add_field( ALARM_PERR ));

    SCH_SM_ERR = new("SCH_SM_ERR", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.SCH_SM_ERR"});
    SCH_SM_ERR.set_powerwell("vcccfn_gated");
    SCH_SM_ERR.set_rand_mode(0);
   SCH_SM_ERR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_SM_ERR.set_logical_path("HQMID");
    void'(add_field( SCH_SM_ERR ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.FIFO_UNDERFLOW"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.FIFO_OVERFLOW"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    SCH_WB_PERR = new("SCH_WB_PERR", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.SCH_WB_PERR"});
    SCH_WB_PERR.set_powerwell("vcccfn_gated");
    SCH_WB_PERR.set_rand_mode(0);
   SCH_WB_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_PERR.set_logical_path("HQMID");
    void'(add_field( SCH_WB_PERR ));

    ALARM_INT_ERR = new("ALARM_INT_ERR", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ALARM_INT_ERR"});
    ALARM_INT_ERR.set_powerwell("vcccfn_gated");
    ALARM_INT_ERR.set_rand_mode(0);
   ALARM_INT_ERR.set_reset_signame("hqm_inp_gated_rst_n");
    ALARM_INT_ERR.set_logical_path("HQMID");
    void'(add_field( ALARM_INT_ERR ));

    RF_IPAR_ERROR = new("RF_IPAR_ERROR", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.RF_IPAR_ERROR"});
    RF_IPAR_ERROR.set_powerwell("vcccfn_gated");
    RF_IPAR_ERROR.set_rand_mode(0);
   RF_IPAR_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    RF_IPAR_ERROR.set_logical_path("HQMID");
    void'(add_field( RF_IPAR_ERROR ));

    ROB_ERROR = new("ROB_ERROR", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ROB_ERROR"});
    ROB_ERROR.set_powerwell("vcccfn_gated");
    ROB_ERROR.set_rand_mode(0);
   ROB_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    ROB_ERROR.set_logical_path("HQMID");
    void'(add_field( ROB_ERROR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_ERR_reg) 
endclass : hqm_system_csr_bridge_ALARM_ERR_reg

// ================================================

class hqm_system_csr_bridge_ALARM_MB_ECC_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WB_DIR_MB_ECC_ERR0;
  sla_ral_field WB_DIR_MB_ECC_ERR1;
  sla_ral_field WB_DIR_MB_ECC_ERR2;
  sla_ral_field WB_DIR_MB_ECC_ERR3;
  sla_ral_field INGRESS_MB_ECC_ERR0;
  sla_ral_field INGRESS_MB_ECC_ERR1;
  sla_ral_field INGRESS_MB_ECC_ERR2;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_MB_ECC_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WB_DIR_MB_ECC_ERR0, WB_DIR_MB_ECC_ERR0.desired)
     `RAL_FIELD_CP_1(WB_DIR_MB_ECC_ERR0, WB_DIR_MB_ECC_ERR0.desired, 0)
     `RAL_FIELD_CP(WB_DIR_MB_ECC_ERR1, WB_DIR_MB_ECC_ERR1.desired)
     `RAL_FIELD_CP_1(WB_DIR_MB_ECC_ERR1, WB_DIR_MB_ECC_ERR1.desired, 0)
     `RAL_FIELD_CP(WB_DIR_MB_ECC_ERR2, WB_DIR_MB_ECC_ERR2.desired)
     `RAL_FIELD_CP_1(WB_DIR_MB_ECC_ERR2, WB_DIR_MB_ECC_ERR2.desired, 0)
     `RAL_FIELD_CP(WB_DIR_MB_ECC_ERR3, WB_DIR_MB_ECC_ERR3.desired)
     `RAL_FIELD_CP_1(WB_DIR_MB_ECC_ERR3, WB_DIR_MB_ECC_ERR3.desired, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERR0, INGRESS_MB_ECC_ERR0.desired)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERR0, INGRESS_MB_ECC_ERR0.desired, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERR1, INGRESS_MB_ECC_ERR1.desired)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERR1, INGRESS_MB_ECC_ERR1.desired, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERR2, INGRESS_MB_ECC_ERR2.desired)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERR2, INGRESS_MB_ECC_ERR2.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WB_DIR_MB_ECC_ERR0, WB_DIR_MB_ECC_ERR0.actual)
     `RAL_FIELD_CP_1(WB_DIR_MB_ECC_ERR0, WB_DIR_MB_ECC_ERR0.actual, 0)
     `RAL_FIELD_CP(WB_DIR_MB_ECC_ERR1, WB_DIR_MB_ECC_ERR1.actual)
     `RAL_FIELD_CP_1(WB_DIR_MB_ECC_ERR1, WB_DIR_MB_ECC_ERR1.actual, 0)
     `RAL_FIELD_CP(WB_DIR_MB_ECC_ERR2, WB_DIR_MB_ECC_ERR2.actual)
     `RAL_FIELD_CP_1(WB_DIR_MB_ECC_ERR2, WB_DIR_MB_ECC_ERR2.actual, 0)
     `RAL_FIELD_CP(WB_DIR_MB_ECC_ERR3, WB_DIR_MB_ECC_ERR3.actual)
     `RAL_FIELD_CP_1(WB_DIR_MB_ECC_ERR3, WB_DIR_MB_ECC_ERR3.actual, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERR0, INGRESS_MB_ECC_ERR0.actual)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERR0, INGRESS_MB_ECC_ERR0.actual, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERR1, INGRESS_MB_ECC_ERR1.actual)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERR1, INGRESS_MB_ECC_ERR1.actual, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERR2, INGRESS_MB_ECC_ERR2.actual)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERR2, INGRESS_MB_ECC_ERR2.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WB_DIR_MB_ECC_ERR0 = new("WB_DIR_MB_ECC_ERR0", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0"});
    WB_DIR_MB_ECC_ERR0.set_powerwell("vcccfn_gated");
    WB_DIR_MB_ECC_ERR0.set_rand_mode(0);
   WB_DIR_MB_ECC_ERR0.set_reset_signame("hqm_inp_gated_rst_n");
    WB_DIR_MB_ECC_ERR0.set_logical_path("HQMID");
    void'(add_field( WB_DIR_MB_ECC_ERR0 ));

    WB_DIR_MB_ECC_ERR1 = new("WB_DIR_MB_ECC_ERR1", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1"});
    WB_DIR_MB_ECC_ERR1.set_powerwell("vcccfn_gated");
    WB_DIR_MB_ECC_ERR1.set_rand_mode(0);
   WB_DIR_MB_ECC_ERR1.set_reset_signame("hqm_inp_gated_rst_n");
    WB_DIR_MB_ECC_ERR1.set_logical_path("HQMID");
    void'(add_field( WB_DIR_MB_ECC_ERR1 ));

    WB_DIR_MB_ECC_ERR2 = new("WB_DIR_MB_ECC_ERR2", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2"});
    WB_DIR_MB_ECC_ERR2.set_powerwell("vcccfn_gated");
    WB_DIR_MB_ECC_ERR2.set_rand_mode(0);
   WB_DIR_MB_ECC_ERR2.set_reset_signame("hqm_inp_gated_rst_n");
    WB_DIR_MB_ECC_ERR2.set_logical_path("HQMID");
    void'(add_field( WB_DIR_MB_ECC_ERR2 ));

    WB_DIR_MB_ECC_ERR3 = new("WB_DIR_MB_ECC_ERR3", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3"});
    WB_DIR_MB_ECC_ERR3.set_powerwell("vcccfn_gated");
    WB_DIR_MB_ECC_ERR3.set_rand_mode(0);
   WB_DIR_MB_ECC_ERR3.set_reset_signame("hqm_inp_gated_rst_n");
    WB_DIR_MB_ECC_ERR3.set_logical_path("HQMID");
    void'(add_field( WB_DIR_MB_ECC_ERR3 ));

    INGRESS_MB_ECC_ERR0 = new("INGRESS_MB_ECC_ERR0", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0"});
    INGRESS_MB_ECC_ERR0.set_powerwell("vcccfn_gated");
    INGRESS_MB_ECC_ERR0.set_rand_mode(0);
   INGRESS_MB_ECC_ERR0.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_MB_ECC_ERR0.set_logical_path("HQMID");
    void'(add_field( INGRESS_MB_ECC_ERR0 ));

    INGRESS_MB_ECC_ERR1 = new("INGRESS_MB_ECC_ERR1", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1"});
    INGRESS_MB_ECC_ERR1.set_powerwell("vcccfn_gated");
    INGRESS_MB_ECC_ERR1.set_rand_mode(0);
   INGRESS_MB_ECC_ERR1.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_MB_ECC_ERR1.set_logical_path("HQMID");
    void'(add_field( INGRESS_MB_ECC_ERR1 ));

    INGRESS_MB_ECC_ERR2 = new("INGRESS_MB_ECC_ERR2", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2"});
    INGRESS_MB_ECC_ERR2.set_powerwell("vcccfn_gated");
    INGRESS_MB_ECC_ERR2.set_rand_mode(0);
   INGRESS_MB_ECC_ERR2.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_MB_ECC_ERR2.set_logical_path("HQMID");
    void'(add_field( INGRESS_MB_ECC_ERR2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_MB_ECC_ERR_reg) 
endclass : hqm_system_csr_bridge_ALARM_MB_ECC_ERR_reg

// ================================================

class hqm_system_csr_bridge_ALARM_SB_ECC_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WB_DIR_SB_ECC_ERR0;
  sla_ral_field WB_DIR_SB_ECC_ERR1;
  sla_ral_field WB_DIR_SB_ECC_ERR2;
  sla_ral_field WB_DIR_SB_ECC_ERR3;
  sla_ral_field INGRESS_SB_ECC_ERR0;
  sla_ral_field INGRESS_SB_ECC_ERR1;
  sla_ral_field INGRESS_SB_ECC_ERR2;
  sla_ral_field INGRESS_SB_ECC_ERR3;
  sla_ral_field INGRESS_SB_ECC_ERR4;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_SB_ECC_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WB_DIR_SB_ECC_ERR0, WB_DIR_SB_ECC_ERR0.desired)
     `RAL_FIELD_CP_1(WB_DIR_SB_ECC_ERR0, WB_DIR_SB_ECC_ERR0.desired, 0)
     `RAL_FIELD_CP(WB_DIR_SB_ECC_ERR1, WB_DIR_SB_ECC_ERR1.desired)
     `RAL_FIELD_CP_1(WB_DIR_SB_ECC_ERR1, WB_DIR_SB_ECC_ERR1.desired, 0)
     `RAL_FIELD_CP(WB_DIR_SB_ECC_ERR2, WB_DIR_SB_ECC_ERR2.desired)
     `RAL_FIELD_CP_1(WB_DIR_SB_ECC_ERR2, WB_DIR_SB_ECC_ERR2.desired, 0)
     `RAL_FIELD_CP(WB_DIR_SB_ECC_ERR3, WB_DIR_SB_ECC_ERR3.desired)
     `RAL_FIELD_CP_1(WB_DIR_SB_ECC_ERR3, WB_DIR_SB_ECC_ERR3.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR0, INGRESS_SB_ECC_ERR0.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR0, INGRESS_SB_ECC_ERR0.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR1, INGRESS_SB_ECC_ERR1.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR1, INGRESS_SB_ECC_ERR1.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR2, INGRESS_SB_ECC_ERR2.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR2, INGRESS_SB_ECC_ERR2.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR3, INGRESS_SB_ECC_ERR3.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR3, INGRESS_SB_ECC_ERR3.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR4, INGRESS_SB_ECC_ERR4.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR4, INGRESS_SB_ECC_ERR4.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WB_DIR_SB_ECC_ERR0, WB_DIR_SB_ECC_ERR0.actual)
     `RAL_FIELD_CP_1(WB_DIR_SB_ECC_ERR0, WB_DIR_SB_ECC_ERR0.actual, 0)
     `RAL_FIELD_CP(WB_DIR_SB_ECC_ERR1, WB_DIR_SB_ECC_ERR1.actual)
     `RAL_FIELD_CP_1(WB_DIR_SB_ECC_ERR1, WB_DIR_SB_ECC_ERR1.actual, 0)
     `RAL_FIELD_CP(WB_DIR_SB_ECC_ERR2, WB_DIR_SB_ECC_ERR2.actual)
     `RAL_FIELD_CP_1(WB_DIR_SB_ECC_ERR2, WB_DIR_SB_ECC_ERR2.actual, 0)
     `RAL_FIELD_CP(WB_DIR_SB_ECC_ERR3, WB_DIR_SB_ECC_ERR3.actual)
     `RAL_FIELD_CP_1(WB_DIR_SB_ECC_ERR3, WB_DIR_SB_ECC_ERR3.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR0, INGRESS_SB_ECC_ERR0.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR0, INGRESS_SB_ECC_ERR0.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR1, INGRESS_SB_ECC_ERR1.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR1, INGRESS_SB_ECC_ERR1.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR2, INGRESS_SB_ECC_ERR2.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR2, INGRESS_SB_ECC_ERR2.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR3, INGRESS_SB_ECC_ERR3.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR3, INGRESS_SB_ECC_ERR3.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERR4, INGRESS_SB_ECC_ERR4.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERR4, INGRESS_SB_ECC_ERR4.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WB_DIR_SB_ECC_ERR0 = new("WB_DIR_SB_ECC_ERR0", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0"});
    WB_DIR_SB_ECC_ERR0.set_powerwell("vcccfn_gated");
    WB_DIR_SB_ECC_ERR0.set_rand_mode(0);
   WB_DIR_SB_ECC_ERR0.set_reset_signame("hqm_inp_gated_rst_n");
    WB_DIR_SB_ECC_ERR0.set_logical_path("HQMID");
    void'(add_field( WB_DIR_SB_ECC_ERR0 ));

    WB_DIR_SB_ECC_ERR1 = new("WB_DIR_SB_ECC_ERR1", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1"});
    WB_DIR_SB_ECC_ERR1.set_powerwell("vcccfn_gated");
    WB_DIR_SB_ECC_ERR1.set_rand_mode(0);
   WB_DIR_SB_ECC_ERR1.set_reset_signame("hqm_inp_gated_rst_n");
    WB_DIR_SB_ECC_ERR1.set_logical_path("HQMID");
    void'(add_field( WB_DIR_SB_ECC_ERR1 ));

    WB_DIR_SB_ECC_ERR2 = new("WB_DIR_SB_ECC_ERR2", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2"});
    WB_DIR_SB_ECC_ERR2.set_powerwell("vcccfn_gated");
    WB_DIR_SB_ECC_ERR2.set_rand_mode(0);
   WB_DIR_SB_ECC_ERR2.set_reset_signame("hqm_inp_gated_rst_n");
    WB_DIR_SB_ECC_ERR2.set_logical_path("HQMID");
    void'(add_field( WB_DIR_SB_ECC_ERR2 ));

    WB_DIR_SB_ECC_ERR3 = new("WB_DIR_SB_ECC_ERR3", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3"});
    WB_DIR_SB_ECC_ERR3.set_powerwell("vcccfn_gated");
    WB_DIR_SB_ECC_ERR3.set_rand_mode(0);
   WB_DIR_SB_ECC_ERR3.set_reset_signame("hqm_inp_gated_rst_n");
    WB_DIR_SB_ECC_ERR3.set_logical_path("HQMID");
    void'(add_field( WB_DIR_SB_ECC_ERR3 ));

    INGRESS_SB_ECC_ERR0 = new("INGRESS_SB_ECC_ERR0", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0"});
    INGRESS_SB_ECC_ERR0.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERR0.set_rand_mode(0);
   INGRESS_SB_ECC_ERR0.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERR0.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERR0 ));

    INGRESS_SB_ECC_ERR1 = new("INGRESS_SB_ECC_ERR1", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1"});
    INGRESS_SB_ECC_ERR1.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERR1.set_rand_mode(0);
   INGRESS_SB_ECC_ERR1.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERR1.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERR1 ));

    INGRESS_SB_ECC_ERR2 = new("INGRESS_SB_ECC_ERR2", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2"});
    INGRESS_SB_ECC_ERR2.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERR2.set_rand_mode(0);
   INGRESS_SB_ECC_ERR2.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERR2.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERR2 ));

    INGRESS_SB_ECC_ERR3 = new("INGRESS_SB_ECC_ERR3", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3"});
    INGRESS_SB_ECC_ERR3.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERR3.set_rand_mode(0);
   INGRESS_SB_ECC_ERR3.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERR3.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERR3 ));

    INGRESS_SB_ECC_ERR4 = new("INGRESS_SB_ECC_ERR4", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4"});
    INGRESS_SB_ECC_ERR4.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERR4.set_rand_mode(0);
   INGRESS_SB_ECC_ERR4.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERR4.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERR4 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_SB_ECC_ERR_reg) 
endclass : hqm_system_csr_bridge_ALARM_SB_ECC_ERR_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT_CLR;
  sla_ral_field CNT_CLRV;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT_CLR, CNT_CLR.desired)
     `RAL_FIELD_CP_1(CNT_CLR, CNT_CLR.desired, 0)
     `RAL_FIELD_CP(CNT_CLRV, CNT_CLRV.desired)
     `RAL_FIELD_CP_1(CNT_CLRV, CNT_CLRV.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT_CLR, CNT_CLR.actual)
     `RAL_FIELD_CP_1(CNT_CLR, CNT_CLR.actual, 0)
     `RAL_FIELD_CP(CNT_CLRV, CNT_CLRV.actual)
     `RAL_FIELD_CP_1(CNT_CLRV, CNT_CLRV.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT_CLR = new("CNT_CLR", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_CTL.CNT_CLR"});
    CNT_CLR.set_powerwell("vcccfn_gated");
    CNT_CLR.set_rand_mode(0);
   CNT_CLR.set_reset_signame("hqm_inp_gated_rst_n");
    CNT_CLR.set_logical_path("HQMID");
    void'(add_field( CNT_CLR ));

    CNT_CLRV = new("CNT_CLRV", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_CTL.CNT_CLRV"});
    CNT_CLRV.set_powerwell("vcccfn_gated");
    CNT_CLRV.set_rand_mode(0);
   CNT_CLRV.set_reset_signame("hqm_inp_gated_rst_n");
    CNT_CLRV.set_logical_path("HQMID");
    void'(add_field( CNT_CLRV ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_CTL_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_CTL_reg

// ================================================

class hqm_system_csr_bridge_MSIX_ACK_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX_0_ACK;
  sla_ral_field MSIX_1_ACK;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_ACK_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_0_ACK, MSIX_0_ACK.desired)
     `RAL_FIELD_CP_1(MSIX_0_ACK, MSIX_0_ACK.desired, 0)
     `RAL_FIELD_CP(MSIX_1_ACK, MSIX_1_ACK.desired)
     `RAL_FIELD_CP_1(MSIX_1_ACK, MSIX_1_ACK.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_0_ACK, MSIX_0_ACK.actual)
     `RAL_FIELD_CP_1(MSIX_0_ACK, MSIX_0_ACK.actual, 0)
     `RAL_FIELD_CP(MSIX_1_ACK, MSIX_1_ACK.actual)
     `RAL_FIELD_CP_1(MSIX_1_ACK, MSIX_1_ACK.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX_0_ACK = new("MSIX_0_ACK", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_ACK.MSIX_0_ACK"});
    MSIX_0_ACK.set_powerwell("vcccfn_gated");
    MSIX_0_ACK.set_rand_mode(0);
   MSIX_0_ACK.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_0_ACK.set_logical_path("HQMID");
    void'(add_field( MSIX_0_ACK ));

    MSIX_1_ACK = new("MSIX_1_ACK", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_ACK.MSIX_1_ACK"});
    MSIX_1_ACK.set_powerwell("vcccfn_gated");
    MSIX_1_ACK.set_rand_mode(0);
   MSIX_1_ACK.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_1_ACK.set_logical_path("HQMID");
    void'(add_field( MSIX_1_ACK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_ACK_reg) 
endclass : hqm_system_csr_bridge_MSIX_ACK_reg

// ================================================

class hqm_system_csr_bridge_MSIX_PASSTHROUGH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX_0_PASSTHRU;
  sla_ral_field MSIX_1_PASSTHRU;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_PASSTHROUGH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_0_PASSTHRU, MSIX_0_PASSTHRU.desired)
     `RAL_FIELD_CP_1(MSIX_0_PASSTHRU, MSIX_0_PASSTHRU.desired, 0)
     `RAL_FIELD_CP(MSIX_1_PASSTHRU, MSIX_1_PASSTHRU.desired)
     `RAL_FIELD_CP_1(MSIX_1_PASSTHRU, MSIX_1_PASSTHRU.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_0_PASSTHRU, MSIX_0_PASSTHRU.actual)
     `RAL_FIELD_CP_1(MSIX_0_PASSTHRU, MSIX_0_PASSTHRU.actual, 0)
     `RAL_FIELD_CP(MSIX_1_PASSTHRU, MSIX_1_PASSTHRU.actual)
     `RAL_FIELD_CP_1(MSIX_1_PASSTHRU, MSIX_1_PASSTHRU.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX_0_PASSTHRU = new("MSIX_0_PASSTHRU", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PASSTHROUGH.MSIX_0_PASSTHRU"});
    MSIX_0_PASSTHRU.set_powerwell("vcccfn_gated");
    MSIX_0_PASSTHRU.set_rand_mode(0);
   MSIX_0_PASSTHRU.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_0_PASSTHRU.set_logical_path("HQMID");
    void'(add_field( MSIX_0_PASSTHRU ));

    MSIX_1_PASSTHRU = new("MSIX_1_PASSTHRU", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PASSTHROUGH.MSIX_1_PASSTHRU"});
    MSIX_1_PASSTHRU.set_powerwell("vcccfn_gated");
    MSIX_1_PASSTHRU.set_rand_mode(0);
   MSIX_1_PASSTHRU.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_1_PASSTHRU.set_logical_path("HQMID");
    void'(add_field( MSIX_1_PASSTHRU ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_PASSTHROUGH_reg) 
endclass : hqm_system_csr_bridge_MSIX_PASSTHROUGH_reg

// ================================================

class hqm_system_csr_bridge_MSIX_MODE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field IMS_POLLING;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_MODE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_1(MODE, MODE.desired, 0)
     `RAL_FIELD_CP(IMS_POLLING, IMS_POLLING.desired)
     `RAL_FIELD_CP_1(IMS_POLLING, IMS_POLLING.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_1(MODE, MODE.actual, 0)
     `RAL_FIELD_CP(IMS_POLLING, IMS_POLLING.actual)
     `RAL_FIELD_CP_1(IMS_POLLING, IMS_POLLING.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_MODE.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    IMS_POLLING = new("IMS_POLLING", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_MODE.IMS_POLLING"});
    IMS_POLLING.set_powerwell("vcccfn_gated");
    IMS_POLLING.set_rand_mode(0);
   IMS_POLLING.set_reset_signame("hqm_inp_gated_rst_n");
    IMS_POLLING.set_logical_path("HQMID");
    void'(add_field( IMS_POLLING ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_MODE_reg) 
endclass : hqm_system_csr_bridge_MSIX_MODE_reg

// ================================================

class hqm_system_csr_bridge_MSIX_31_0_SYND_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX_0_SENT;
  sla_ral_field MSIX_1_SENT;
  sla_ral_field MSIX_2_SENT;
  sla_ral_field MSIX_3_SENT;
  sla_ral_field MSIX_4_SENT;
  sla_ral_field MSIX_5_SENT;
  sla_ral_field MSIX_6_SENT;
  sla_ral_field MSIX_7_SENT;
  sla_ral_field MSIX_8_SENT;
  sla_ral_field MSIX_9_SENT;
  sla_ral_field MSIX_10_SENT;
  sla_ral_field MSIX_11_SENT;
  sla_ral_field MSIX_12_SENT;
  sla_ral_field MSIX_13_SENT;
  sla_ral_field MSIX_14_SENT;
  sla_ral_field MSIX_15_SENT;
  sla_ral_field MSIX_16_SENT;
  sla_ral_field MSIX_17_SENT;
  sla_ral_field MSIX_18_SENT;
  sla_ral_field MSIX_19_SENT;
  sla_ral_field MSIX_20_SENT;
  sla_ral_field MSIX_21_SENT;
  sla_ral_field MSIX_22_SENT;
  sla_ral_field MSIX_23_SENT;
  sla_ral_field MSIX_24_SENT;
  sla_ral_field MSIX_25_SENT;
  sla_ral_field MSIX_26_SENT;
  sla_ral_field MSIX_27_SENT;
  sla_ral_field MSIX_28_SENT;
  sla_ral_field MSIX_29_SENT;
  sla_ral_field MSIX_30_SENT;
  sla_ral_field MSIX_31_SENT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_31_0_SYND_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_0_SENT, MSIX_0_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_0_SENT, MSIX_0_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_1_SENT, MSIX_1_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_1_SENT, MSIX_1_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_2_SENT, MSIX_2_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_2_SENT, MSIX_2_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_3_SENT, MSIX_3_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_3_SENT, MSIX_3_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_4_SENT, MSIX_4_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_4_SENT, MSIX_4_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_5_SENT, MSIX_5_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_5_SENT, MSIX_5_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_6_SENT, MSIX_6_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_6_SENT, MSIX_6_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_7_SENT, MSIX_7_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_7_SENT, MSIX_7_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_8_SENT, MSIX_8_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_8_SENT, MSIX_8_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_9_SENT, MSIX_9_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_9_SENT, MSIX_9_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_10_SENT, MSIX_10_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_10_SENT, MSIX_10_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_11_SENT, MSIX_11_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_11_SENT, MSIX_11_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_12_SENT, MSIX_12_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_12_SENT, MSIX_12_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_13_SENT, MSIX_13_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_13_SENT, MSIX_13_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_14_SENT, MSIX_14_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_14_SENT, MSIX_14_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_15_SENT, MSIX_15_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_15_SENT, MSIX_15_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_16_SENT, MSIX_16_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_16_SENT, MSIX_16_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_17_SENT, MSIX_17_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_17_SENT, MSIX_17_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_18_SENT, MSIX_18_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_18_SENT, MSIX_18_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_19_SENT, MSIX_19_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_19_SENT, MSIX_19_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_20_SENT, MSIX_20_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_20_SENT, MSIX_20_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_21_SENT, MSIX_21_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_21_SENT, MSIX_21_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_22_SENT, MSIX_22_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_22_SENT, MSIX_22_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_23_SENT, MSIX_23_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_23_SENT, MSIX_23_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_24_SENT, MSIX_24_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_24_SENT, MSIX_24_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_25_SENT, MSIX_25_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_25_SENT, MSIX_25_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_26_SENT, MSIX_26_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_26_SENT, MSIX_26_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_27_SENT, MSIX_27_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_27_SENT, MSIX_27_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_28_SENT, MSIX_28_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_28_SENT, MSIX_28_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_29_SENT, MSIX_29_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_29_SENT, MSIX_29_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_30_SENT, MSIX_30_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_30_SENT, MSIX_30_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_31_SENT, MSIX_31_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_31_SENT, MSIX_31_SENT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_0_SENT, MSIX_0_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_0_SENT, MSIX_0_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_1_SENT, MSIX_1_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_1_SENT, MSIX_1_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_2_SENT, MSIX_2_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_2_SENT, MSIX_2_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_3_SENT, MSIX_3_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_3_SENT, MSIX_3_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_4_SENT, MSIX_4_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_4_SENT, MSIX_4_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_5_SENT, MSIX_5_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_5_SENT, MSIX_5_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_6_SENT, MSIX_6_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_6_SENT, MSIX_6_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_7_SENT, MSIX_7_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_7_SENT, MSIX_7_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_8_SENT, MSIX_8_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_8_SENT, MSIX_8_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_9_SENT, MSIX_9_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_9_SENT, MSIX_9_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_10_SENT, MSIX_10_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_10_SENT, MSIX_10_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_11_SENT, MSIX_11_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_11_SENT, MSIX_11_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_12_SENT, MSIX_12_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_12_SENT, MSIX_12_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_13_SENT, MSIX_13_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_13_SENT, MSIX_13_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_14_SENT, MSIX_14_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_14_SENT, MSIX_14_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_15_SENT, MSIX_15_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_15_SENT, MSIX_15_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_16_SENT, MSIX_16_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_16_SENT, MSIX_16_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_17_SENT, MSIX_17_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_17_SENT, MSIX_17_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_18_SENT, MSIX_18_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_18_SENT, MSIX_18_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_19_SENT, MSIX_19_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_19_SENT, MSIX_19_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_20_SENT, MSIX_20_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_20_SENT, MSIX_20_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_21_SENT, MSIX_21_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_21_SENT, MSIX_21_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_22_SENT, MSIX_22_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_22_SENT, MSIX_22_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_23_SENT, MSIX_23_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_23_SENT, MSIX_23_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_24_SENT, MSIX_24_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_24_SENT, MSIX_24_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_25_SENT, MSIX_25_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_25_SENT, MSIX_25_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_26_SENT, MSIX_26_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_26_SENT, MSIX_26_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_27_SENT, MSIX_27_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_27_SENT, MSIX_27_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_28_SENT, MSIX_28_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_28_SENT, MSIX_28_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_29_SENT, MSIX_29_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_29_SENT, MSIX_29_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_30_SENT, MSIX_30_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_30_SENT, MSIX_30_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_31_SENT, MSIX_31_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_31_SENT, MSIX_31_SENT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX_0_SENT = new("MSIX_0_SENT", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_0_SENT"});
    MSIX_0_SENT.set_powerwell("vcccfn_gated");
    MSIX_0_SENT.set_rand_mode(0);
   MSIX_0_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_0_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_0_SENT ));

    MSIX_1_SENT = new("MSIX_1_SENT", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_1_SENT"});
    MSIX_1_SENT.set_powerwell("vcccfn_gated");
    MSIX_1_SENT.set_rand_mode(0);
   MSIX_1_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_1_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_1_SENT ));

    MSIX_2_SENT = new("MSIX_2_SENT", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_2_SENT"});
    MSIX_2_SENT.set_powerwell("vcccfn_gated");
    MSIX_2_SENT.set_rand_mode(0);
   MSIX_2_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_2_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_2_SENT ));

    MSIX_3_SENT = new("MSIX_3_SENT", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_3_SENT"});
    MSIX_3_SENT.set_powerwell("vcccfn_gated");
    MSIX_3_SENT.set_rand_mode(0);
   MSIX_3_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_3_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_3_SENT ));

    MSIX_4_SENT = new("MSIX_4_SENT", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_4_SENT"});
    MSIX_4_SENT.set_powerwell("vcccfn_gated");
    MSIX_4_SENT.set_rand_mode(0);
   MSIX_4_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_4_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_4_SENT ));

    MSIX_5_SENT = new("MSIX_5_SENT", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_5_SENT"});
    MSIX_5_SENT.set_powerwell("vcccfn_gated");
    MSIX_5_SENT.set_rand_mode(0);
   MSIX_5_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_5_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_5_SENT ));

    MSIX_6_SENT = new("MSIX_6_SENT", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_6_SENT"});
    MSIX_6_SENT.set_powerwell("vcccfn_gated");
    MSIX_6_SENT.set_rand_mode(0);
   MSIX_6_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_6_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_6_SENT ));

    MSIX_7_SENT = new("MSIX_7_SENT", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_7_SENT"});
    MSIX_7_SENT.set_powerwell("vcccfn_gated");
    MSIX_7_SENT.set_rand_mode(0);
   MSIX_7_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_7_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_7_SENT ));

    MSIX_8_SENT = new("MSIX_8_SENT", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_8_SENT"});
    MSIX_8_SENT.set_powerwell("vcccfn_gated");
    MSIX_8_SENT.set_rand_mode(0);
   MSIX_8_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_8_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_8_SENT ));

    MSIX_9_SENT = new("MSIX_9_SENT", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_9_SENT"});
    MSIX_9_SENT.set_powerwell("vcccfn_gated");
    MSIX_9_SENT.set_rand_mode(0);
   MSIX_9_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_9_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_9_SENT ));

    MSIX_10_SENT = new("MSIX_10_SENT", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_10_SENT"});
    MSIX_10_SENT.set_powerwell("vcccfn_gated");
    MSIX_10_SENT.set_rand_mode(0);
   MSIX_10_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_10_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_10_SENT ));

    MSIX_11_SENT = new("MSIX_11_SENT", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_11_SENT"});
    MSIX_11_SENT.set_powerwell("vcccfn_gated");
    MSIX_11_SENT.set_rand_mode(0);
   MSIX_11_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_11_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_11_SENT ));

    MSIX_12_SENT = new("MSIX_12_SENT", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_12_SENT"});
    MSIX_12_SENT.set_powerwell("vcccfn_gated");
    MSIX_12_SENT.set_rand_mode(0);
   MSIX_12_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_12_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_12_SENT ));

    MSIX_13_SENT = new("MSIX_13_SENT", "RW/1C/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_13_SENT"});
    MSIX_13_SENT.set_powerwell("vcccfn_gated");
    MSIX_13_SENT.set_rand_mode(0);
   MSIX_13_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_13_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_13_SENT ));

    MSIX_14_SENT = new("MSIX_14_SENT", "RW/1C/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_14_SENT"});
    MSIX_14_SENT.set_powerwell("vcccfn_gated");
    MSIX_14_SENT.set_rand_mode(0);
   MSIX_14_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_14_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_14_SENT ));

    MSIX_15_SENT = new("MSIX_15_SENT", "RW/1C/V", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_15_SENT"});
    MSIX_15_SENT.set_powerwell("vcccfn_gated");
    MSIX_15_SENT.set_rand_mode(0);
   MSIX_15_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_15_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_15_SENT ));

    MSIX_16_SENT = new("MSIX_16_SENT", "RW/1C/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_16_SENT"});
    MSIX_16_SENT.set_powerwell("vcccfn_gated");
    MSIX_16_SENT.set_rand_mode(0);
   MSIX_16_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_16_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_16_SENT ));

    MSIX_17_SENT = new("MSIX_17_SENT", "RW/1C/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_17_SENT"});
    MSIX_17_SENT.set_powerwell("vcccfn_gated");
    MSIX_17_SENT.set_rand_mode(0);
   MSIX_17_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_17_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_17_SENT ));

    MSIX_18_SENT = new("MSIX_18_SENT", "RW/1C/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_18_SENT"});
    MSIX_18_SENT.set_powerwell("vcccfn_gated");
    MSIX_18_SENT.set_rand_mode(0);
   MSIX_18_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_18_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_18_SENT ));

    MSIX_19_SENT = new("MSIX_19_SENT", "RW/1C/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_19_SENT"});
    MSIX_19_SENT.set_powerwell("vcccfn_gated");
    MSIX_19_SENT.set_rand_mode(0);
   MSIX_19_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_19_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_19_SENT ));

    MSIX_20_SENT = new("MSIX_20_SENT", "RW/1C/V", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_20_SENT"});
    MSIX_20_SENT.set_powerwell("vcccfn_gated");
    MSIX_20_SENT.set_rand_mode(0);
   MSIX_20_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_20_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_20_SENT ));

    MSIX_21_SENT = new("MSIX_21_SENT", "RW/1C/V", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_21_SENT"});
    MSIX_21_SENT.set_powerwell("vcccfn_gated");
    MSIX_21_SENT.set_rand_mode(0);
   MSIX_21_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_21_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_21_SENT ));

    MSIX_22_SENT = new("MSIX_22_SENT", "RW/1C/V", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_22_SENT"});
    MSIX_22_SENT.set_powerwell("vcccfn_gated");
    MSIX_22_SENT.set_rand_mode(0);
   MSIX_22_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_22_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_22_SENT ));

    MSIX_23_SENT = new("MSIX_23_SENT", "RW/1C/V", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_23_SENT"});
    MSIX_23_SENT.set_powerwell("vcccfn_gated");
    MSIX_23_SENT.set_rand_mode(0);
   MSIX_23_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_23_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_23_SENT ));

    MSIX_24_SENT = new("MSIX_24_SENT", "RW/1C/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_24_SENT"});
    MSIX_24_SENT.set_powerwell("vcccfn_gated");
    MSIX_24_SENT.set_rand_mode(0);
   MSIX_24_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_24_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_24_SENT ));

    MSIX_25_SENT = new("MSIX_25_SENT", "RW/1C/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_25_SENT"});
    MSIX_25_SENT.set_powerwell("vcccfn_gated");
    MSIX_25_SENT.set_rand_mode(0);
   MSIX_25_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_25_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_25_SENT ));

    MSIX_26_SENT = new("MSIX_26_SENT", "RW/1C/V", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_26_SENT"});
    MSIX_26_SENT.set_powerwell("vcccfn_gated");
    MSIX_26_SENT.set_rand_mode(0);
   MSIX_26_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_26_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_26_SENT ));

    MSIX_27_SENT = new("MSIX_27_SENT", "RW/1C/V", 1, 27, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_27_SENT"});
    MSIX_27_SENT.set_powerwell("vcccfn_gated");
    MSIX_27_SENT.set_rand_mode(0);
   MSIX_27_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_27_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_27_SENT ));

    MSIX_28_SENT = new("MSIX_28_SENT", "RW/1C/V", 1, 28, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_28_SENT"});
    MSIX_28_SENT.set_powerwell("vcccfn_gated");
    MSIX_28_SENT.set_rand_mode(0);
   MSIX_28_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_28_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_28_SENT ));

    MSIX_29_SENT = new("MSIX_29_SENT", "RW/1C/V", 1, 29, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_29_SENT"});
    MSIX_29_SENT.set_powerwell("vcccfn_gated");
    MSIX_29_SENT.set_rand_mode(0);
   MSIX_29_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_29_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_29_SENT ));

    MSIX_30_SENT = new("MSIX_30_SENT", "RW/1C/V", 1, 30, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_30_SENT"});
    MSIX_30_SENT.set_powerwell("vcccfn_gated");
    MSIX_30_SENT.set_rand_mode(0);
   MSIX_30_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_30_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_30_SENT ));

    MSIX_31_SENT = new("MSIX_31_SENT", "RW/1C/V", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_31_SENT"});
    MSIX_31_SENT.set_powerwell("vcccfn_gated");
    MSIX_31_SENT.set_rand_mode(0);
   MSIX_31_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_31_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_31_SENT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_31_0_SYND_reg) 
endclass : hqm_system_csr_bridge_MSIX_31_0_SYND_reg

// ================================================

class hqm_system_csr_bridge_MSIX_63_32_SYND_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX_32_SENT;
  sla_ral_field MSIX_33_SENT;
  sla_ral_field MSIX_34_SENT;
  sla_ral_field MSIX_35_SENT;
  sla_ral_field MSIX_36_SENT;
  sla_ral_field MSIX_37_SENT;
  sla_ral_field MSIX_38_SENT;
  sla_ral_field MSIX_39_SENT;
  sla_ral_field MSIX_40_SENT;
  sla_ral_field MSIX_41_SENT;
  sla_ral_field MSIX_42_SENT;
  sla_ral_field MSIX_43_SENT;
  sla_ral_field MSIX_44_SENT;
  sla_ral_field MSIX_45_SENT;
  sla_ral_field MSIX_46_SENT;
  sla_ral_field MSIX_47_SENT;
  sla_ral_field MSIX_48_SENT;
  sla_ral_field MSIX_49_SENT;
  sla_ral_field MSIX_50_SENT;
  sla_ral_field MSIX_51_SENT;
  sla_ral_field MSIX_52_SENT;
  sla_ral_field MSIX_53_SENT;
  sla_ral_field MSIX_54_SENT;
  sla_ral_field MSIX_55_SENT;
  sla_ral_field MSIX_56_SENT;
  sla_ral_field MSIX_57_SENT;
  sla_ral_field MSIX_58_SENT;
  sla_ral_field MSIX_59_SENT;
  sla_ral_field MSIX_60_SENT;
  sla_ral_field MSIX_61_SENT;
  sla_ral_field MSIX_62_SENT;
  sla_ral_field MSIX_63_SENT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_63_32_SYND_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_32_SENT, MSIX_32_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_32_SENT, MSIX_32_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_33_SENT, MSIX_33_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_33_SENT, MSIX_33_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_34_SENT, MSIX_34_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_34_SENT, MSIX_34_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_35_SENT, MSIX_35_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_35_SENT, MSIX_35_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_36_SENT, MSIX_36_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_36_SENT, MSIX_36_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_37_SENT, MSIX_37_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_37_SENT, MSIX_37_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_38_SENT, MSIX_38_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_38_SENT, MSIX_38_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_39_SENT, MSIX_39_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_39_SENT, MSIX_39_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_40_SENT, MSIX_40_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_40_SENT, MSIX_40_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_41_SENT, MSIX_41_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_41_SENT, MSIX_41_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_42_SENT, MSIX_42_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_42_SENT, MSIX_42_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_43_SENT, MSIX_43_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_43_SENT, MSIX_43_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_44_SENT, MSIX_44_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_44_SENT, MSIX_44_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_45_SENT, MSIX_45_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_45_SENT, MSIX_45_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_46_SENT, MSIX_46_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_46_SENT, MSIX_46_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_47_SENT, MSIX_47_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_47_SENT, MSIX_47_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_48_SENT, MSIX_48_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_48_SENT, MSIX_48_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_49_SENT, MSIX_49_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_49_SENT, MSIX_49_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_50_SENT, MSIX_50_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_50_SENT, MSIX_50_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_51_SENT, MSIX_51_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_51_SENT, MSIX_51_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_52_SENT, MSIX_52_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_52_SENT, MSIX_52_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_53_SENT, MSIX_53_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_53_SENT, MSIX_53_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_54_SENT, MSIX_54_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_54_SENT, MSIX_54_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_55_SENT, MSIX_55_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_55_SENT, MSIX_55_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_56_SENT, MSIX_56_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_56_SENT, MSIX_56_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_57_SENT, MSIX_57_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_57_SENT, MSIX_57_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_58_SENT, MSIX_58_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_58_SENT, MSIX_58_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_59_SENT, MSIX_59_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_59_SENT, MSIX_59_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_60_SENT, MSIX_60_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_60_SENT, MSIX_60_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_61_SENT, MSIX_61_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_61_SENT, MSIX_61_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_62_SENT, MSIX_62_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_62_SENT, MSIX_62_SENT.desired, 0)
     `RAL_FIELD_CP(MSIX_63_SENT, MSIX_63_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_63_SENT, MSIX_63_SENT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_32_SENT, MSIX_32_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_32_SENT, MSIX_32_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_33_SENT, MSIX_33_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_33_SENT, MSIX_33_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_34_SENT, MSIX_34_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_34_SENT, MSIX_34_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_35_SENT, MSIX_35_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_35_SENT, MSIX_35_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_36_SENT, MSIX_36_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_36_SENT, MSIX_36_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_37_SENT, MSIX_37_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_37_SENT, MSIX_37_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_38_SENT, MSIX_38_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_38_SENT, MSIX_38_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_39_SENT, MSIX_39_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_39_SENT, MSIX_39_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_40_SENT, MSIX_40_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_40_SENT, MSIX_40_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_41_SENT, MSIX_41_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_41_SENT, MSIX_41_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_42_SENT, MSIX_42_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_42_SENT, MSIX_42_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_43_SENT, MSIX_43_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_43_SENT, MSIX_43_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_44_SENT, MSIX_44_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_44_SENT, MSIX_44_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_45_SENT, MSIX_45_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_45_SENT, MSIX_45_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_46_SENT, MSIX_46_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_46_SENT, MSIX_46_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_47_SENT, MSIX_47_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_47_SENT, MSIX_47_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_48_SENT, MSIX_48_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_48_SENT, MSIX_48_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_49_SENT, MSIX_49_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_49_SENT, MSIX_49_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_50_SENT, MSIX_50_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_50_SENT, MSIX_50_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_51_SENT, MSIX_51_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_51_SENT, MSIX_51_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_52_SENT, MSIX_52_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_52_SENT, MSIX_52_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_53_SENT, MSIX_53_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_53_SENT, MSIX_53_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_54_SENT, MSIX_54_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_54_SENT, MSIX_54_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_55_SENT, MSIX_55_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_55_SENT, MSIX_55_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_56_SENT, MSIX_56_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_56_SENT, MSIX_56_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_57_SENT, MSIX_57_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_57_SENT, MSIX_57_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_58_SENT, MSIX_58_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_58_SENT, MSIX_58_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_59_SENT, MSIX_59_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_59_SENT, MSIX_59_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_60_SENT, MSIX_60_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_60_SENT, MSIX_60_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_61_SENT, MSIX_61_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_61_SENT, MSIX_61_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_62_SENT, MSIX_62_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_62_SENT, MSIX_62_SENT.actual, 0)
     `RAL_FIELD_CP(MSIX_63_SENT, MSIX_63_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_63_SENT, MSIX_63_SENT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX_32_SENT = new("MSIX_32_SENT", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_32_SENT"});
    MSIX_32_SENT.set_powerwell("vcccfn_gated");
    MSIX_32_SENT.set_rand_mode(0);
   MSIX_32_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_32_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_32_SENT ));

    MSIX_33_SENT = new("MSIX_33_SENT", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_33_SENT"});
    MSIX_33_SENT.set_powerwell("vcccfn_gated");
    MSIX_33_SENT.set_rand_mode(0);
   MSIX_33_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_33_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_33_SENT ));

    MSIX_34_SENT = new("MSIX_34_SENT", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_34_SENT"});
    MSIX_34_SENT.set_powerwell("vcccfn_gated");
    MSIX_34_SENT.set_rand_mode(0);
   MSIX_34_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_34_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_34_SENT ));

    MSIX_35_SENT = new("MSIX_35_SENT", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_35_SENT"});
    MSIX_35_SENT.set_powerwell("vcccfn_gated");
    MSIX_35_SENT.set_rand_mode(0);
   MSIX_35_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_35_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_35_SENT ));

    MSIX_36_SENT = new("MSIX_36_SENT", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_36_SENT"});
    MSIX_36_SENT.set_powerwell("vcccfn_gated");
    MSIX_36_SENT.set_rand_mode(0);
   MSIX_36_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_36_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_36_SENT ));

    MSIX_37_SENT = new("MSIX_37_SENT", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_37_SENT"});
    MSIX_37_SENT.set_powerwell("vcccfn_gated");
    MSIX_37_SENT.set_rand_mode(0);
   MSIX_37_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_37_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_37_SENT ));

    MSIX_38_SENT = new("MSIX_38_SENT", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_38_SENT"});
    MSIX_38_SENT.set_powerwell("vcccfn_gated");
    MSIX_38_SENT.set_rand_mode(0);
   MSIX_38_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_38_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_38_SENT ));

    MSIX_39_SENT = new("MSIX_39_SENT", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_39_SENT"});
    MSIX_39_SENT.set_powerwell("vcccfn_gated");
    MSIX_39_SENT.set_rand_mode(0);
   MSIX_39_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_39_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_39_SENT ));

    MSIX_40_SENT = new("MSIX_40_SENT", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_40_SENT"});
    MSIX_40_SENT.set_powerwell("vcccfn_gated");
    MSIX_40_SENT.set_rand_mode(0);
   MSIX_40_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_40_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_40_SENT ));

    MSIX_41_SENT = new("MSIX_41_SENT", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_41_SENT"});
    MSIX_41_SENT.set_powerwell("vcccfn_gated");
    MSIX_41_SENT.set_rand_mode(0);
   MSIX_41_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_41_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_41_SENT ));

    MSIX_42_SENT = new("MSIX_42_SENT", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_42_SENT"});
    MSIX_42_SENT.set_powerwell("vcccfn_gated");
    MSIX_42_SENT.set_rand_mode(0);
   MSIX_42_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_42_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_42_SENT ));

    MSIX_43_SENT = new("MSIX_43_SENT", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_43_SENT"});
    MSIX_43_SENT.set_powerwell("vcccfn_gated");
    MSIX_43_SENT.set_rand_mode(0);
   MSIX_43_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_43_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_43_SENT ));

    MSIX_44_SENT = new("MSIX_44_SENT", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_44_SENT"});
    MSIX_44_SENT.set_powerwell("vcccfn_gated");
    MSIX_44_SENT.set_rand_mode(0);
   MSIX_44_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_44_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_44_SENT ));

    MSIX_45_SENT = new("MSIX_45_SENT", "RW/1C/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_45_SENT"});
    MSIX_45_SENT.set_powerwell("vcccfn_gated");
    MSIX_45_SENT.set_rand_mode(0);
   MSIX_45_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_45_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_45_SENT ));

    MSIX_46_SENT = new("MSIX_46_SENT", "RW/1C/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_46_SENT"});
    MSIX_46_SENT.set_powerwell("vcccfn_gated");
    MSIX_46_SENT.set_rand_mode(0);
   MSIX_46_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_46_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_46_SENT ));

    MSIX_47_SENT = new("MSIX_47_SENT", "RW/1C/V", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_47_SENT"});
    MSIX_47_SENT.set_powerwell("vcccfn_gated");
    MSIX_47_SENT.set_rand_mode(0);
   MSIX_47_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_47_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_47_SENT ));

    MSIX_48_SENT = new("MSIX_48_SENT", "RW/1C/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_48_SENT"});
    MSIX_48_SENT.set_powerwell("vcccfn_gated");
    MSIX_48_SENT.set_rand_mode(0);
   MSIX_48_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_48_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_48_SENT ));

    MSIX_49_SENT = new("MSIX_49_SENT", "RW/1C/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_49_SENT"});
    MSIX_49_SENT.set_powerwell("vcccfn_gated");
    MSIX_49_SENT.set_rand_mode(0);
   MSIX_49_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_49_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_49_SENT ));

    MSIX_50_SENT = new("MSIX_50_SENT", "RW/1C/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_50_SENT"});
    MSIX_50_SENT.set_powerwell("vcccfn_gated");
    MSIX_50_SENT.set_rand_mode(0);
   MSIX_50_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_50_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_50_SENT ));

    MSIX_51_SENT = new("MSIX_51_SENT", "RW/1C/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_51_SENT"});
    MSIX_51_SENT.set_powerwell("vcccfn_gated");
    MSIX_51_SENT.set_rand_mode(0);
   MSIX_51_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_51_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_51_SENT ));

    MSIX_52_SENT = new("MSIX_52_SENT", "RW/1C/V", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_52_SENT"});
    MSIX_52_SENT.set_powerwell("vcccfn_gated");
    MSIX_52_SENT.set_rand_mode(0);
   MSIX_52_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_52_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_52_SENT ));

    MSIX_53_SENT = new("MSIX_53_SENT", "RW/1C/V", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_53_SENT"});
    MSIX_53_SENT.set_powerwell("vcccfn_gated");
    MSIX_53_SENT.set_rand_mode(0);
   MSIX_53_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_53_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_53_SENT ));

    MSIX_54_SENT = new("MSIX_54_SENT", "RW/1C/V", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_54_SENT"});
    MSIX_54_SENT.set_powerwell("vcccfn_gated");
    MSIX_54_SENT.set_rand_mode(0);
   MSIX_54_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_54_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_54_SENT ));

    MSIX_55_SENT = new("MSIX_55_SENT", "RW/1C/V", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_55_SENT"});
    MSIX_55_SENT.set_powerwell("vcccfn_gated");
    MSIX_55_SENT.set_rand_mode(0);
   MSIX_55_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_55_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_55_SENT ));

    MSIX_56_SENT = new("MSIX_56_SENT", "RW/1C/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_56_SENT"});
    MSIX_56_SENT.set_powerwell("vcccfn_gated");
    MSIX_56_SENT.set_rand_mode(0);
   MSIX_56_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_56_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_56_SENT ));

    MSIX_57_SENT = new("MSIX_57_SENT", "RW/1C/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_57_SENT"});
    MSIX_57_SENT.set_powerwell("vcccfn_gated");
    MSIX_57_SENT.set_rand_mode(0);
   MSIX_57_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_57_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_57_SENT ));

    MSIX_58_SENT = new("MSIX_58_SENT", "RW/1C/V", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_58_SENT"});
    MSIX_58_SENT.set_powerwell("vcccfn_gated");
    MSIX_58_SENT.set_rand_mode(0);
   MSIX_58_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_58_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_58_SENT ));

    MSIX_59_SENT = new("MSIX_59_SENT", "RW/1C/V", 1, 27, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_59_SENT"});
    MSIX_59_SENT.set_powerwell("vcccfn_gated");
    MSIX_59_SENT.set_rand_mode(0);
   MSIX_59_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_59_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_59_SENT ));

    MSIX_60_SENT = new("MSIX_60_SENT", "RW/1C/V", 1, 28, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_60_SENT"});
    MSIX_60_SENT.set_powerwell("vcccfn_gated");
    MSIX_60_SENT.set_rand_mode(0);
   MSIX_60_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_60_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_60_SENT ));

    MSIX_61_SENT = new("MSIX_61_SENT", "RW/1C/V", 1, 29, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_61_SENT"});
    MSIX_61_SENT.set_powerwell("vcccfn_gated");
    MSIX_61_SENT.set_rand_mode(0);
   MSIX_61_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_61_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_61_SENT ));

    MSIX_62_SENT = new("MSIX_62_SENT", "RW/1C/V", 1, 30, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_62_SENT"});
    MSIX_62_SENT.set_powerwell("vcccfn_gated");
    MSIX_62_SENT.set_rand_mode(0);
   MSIX_62_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_62_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_62_SENT ));

    MSIX_63_SENT = new("MSIX_63_SENT", "RW/1C/V", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_63_SENT"});
    MSIX_63_SENT.set_powerwell("vcccfn_gated");
    MSIX_63_SENT.set_rand_mode(0);
   MSIX_63_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_63_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_63_SENT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_63_32_SYND_reg) 
endclass : hqm_system_csr_bridge_MSIX_63_32_SYND_reg

// ================================================

class hqm_system_csr_bridge_MSIX_64_SYND_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX_64_SENT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_64_SYND_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_64_SENT, MSIX_64_SENT.desired)
     `RAL_FIELD_CP_1(MSIX_64_SENT, MSIX_64_SENT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_64_SENT, MSIX_64_SENT.actual)
     `RAL_FIELD_CP_1(MSIX_64_SENT, MSIX_64_SENT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX_64_SENT = new("MSIX_64_SENT", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_64_SYND.MSIX_64_SENT"});
    MSIX_64_SENT.set_powerwell("vcccfn_gated");
    MSIX_64_SENT.set_rand_mode(0);
   MSIX_64_SENT.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_64_SENT.set_logical_path("HQMID");
    void'(add_field( MSIX_64_SENT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_64_SYND_reg) 
endclass : hqm_system_csr_bridge_MSIX_64_SYND_reg

// ================================================

class hqm_system_csr_bridge_MSIX_PBA_31_0_CLEAR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX_PBA_0_CLEAR;
  sla_ral_field MSIX_PBA_1_CLEAR;
  sla_ral_field MSIX_PBA_2_CLEAR;
  sla_ral_field MSIX_PBA_3_CLEAR;
  sla_ral_field MSIX_PBA_4_CLEAR;
  sla_ral_field MSIX_PBA_5_CLEAR;
  sla_ral_field MSIX_PBA_6_CLEAR;
  sla_ral_field MSIX_PBA_7_CLEAR;
  sla_ral_field MSIX_PBA_8_CLEAR;
  sla_ral_field MSIX_PBA_9_CLEAR;
  sla_ral_field MSIX_PBA_10_CLEAR;
  sla_ral_field MSIX_PBA_11_CLEAR;
  sla_ral_field MSIX_PBA_12_CLEAR;
  sla_ral_field MSIX_PBA_13_CLEAR;
  sla_ral_field MSIX_PBA_14_CLEAR;
  sla_ral_field MSIX_PBA_15_CLEAR;
  sla_ral_field MSIX_PBA_16_CLEAR;
  sla_ral_field MSIX_PBA_17_CLEAR;
  sla_ral_field MSIX_PBA_18_CLEAR;
  sla_ral_field MSIX_PBA_19_CLEAR;
  sla_ral_field MSIX_PBA_20_CLEAR;
  sla_ral_field MSIX_PBA_21_CLEAR;
  sla_ral_field MSIX_PBA_22_CLEAR;
  sla_ral_field MSIX_PBA_23_CLEAR;
  sla_ral_field MSIX_PBA_24_CLEAR;
  sla_ral_field MSIX_PBA_25_CLEAR;
  sla_ral_field MSIX_PBA_26_CLEAR;
  sla_ral_field MSIX_PBA_27_CLEAR;
  sla_ral_field MSIX_PBA_28_CLEAR;
  sla_ral_field MSIX_PBA_29_CLEAR;
  sla_ral_field MSIX_PBA_30_CLEAR;
  sla_ral_field MSIX_PBA_31_CLEAR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_PBA_31_0_CLEAR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_PBA_0_CLEAR, MSIX_PBA_0_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_0_CLEAR, MSIX_PBA_0_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_1_CLEAR, MSIX_PBA_1_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_1_CLEAR, MSIX_PBA_1_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_2_CLEAR, MSIX_PBA_2_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_2_CLEAR, MSIX_PBA_2_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_3_CLEAR, MSIX_PBA_3_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_3_CLEAR, MSIX_PBA_3_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_4_CLEAR, MSIX_PBA_4_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_4_CLEAR, MSIX_PBA_4_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_5_CLEAR, MSIX_PBA_5_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_5_CLEAR, MSIX_PBA_5_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_6_CLEAR, MSIX_PBA_6_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_6_CLEAR, MSIX_PBA_6_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_7_CLEAR, MSIX_PBA_7_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_7_CLEAR, MSIX_PBA_7_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_8_CLEAR, MSIX_PBA_8_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_8_CLEAR, MSIX_PBA_8_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_9_CLEAR, MSIX_PBA_9_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_9_CLEAR, MSIX_PBA_9_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_10_CLEAR, MSIX_PBA_10_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_10_CLEAR, MSIX_PBA_10_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_11_CLEAR, MSIX_PBA_11_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_11_CLEAR, MSIX_PBA_11_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_12_CLEAR, MSIX_PBA_12_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_12_CLEAR, MSIX_PBA_12_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_13_CLEAR, MSIX_PBA_13_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_13_CLEAR, MSIX_PBA_13_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_14_CLEAR, MSIX_PBA_14_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_14_CLEAR, MSIX_PBA_14_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_15_CLEAR, MSIX_PBA_15_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_15_CLEAR, MSIX_PBA_15_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_16_CLEAR, MSIX_PBA_16_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_16_CLEAR, MSIX_PBA_16_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_17_CLEAR, MSIX_PBA_17_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_17_CLEAR, MSIX_PBA_17_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_18_CLEAR, MSIX_PBA_18_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_18_CLEAR, MSIX_PBA_18_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_19_CLEAR, MSIX_PBA_19_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_19_CLEAR, MSIX_PBA_19_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_20_CLEAR, MSIX_PBA_20_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_20_CLEAR, MSIX_PBA_20_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_21_CLEAR, MSIX_PBA_21_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_21_CLEAR, MSIX_PBA_21_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_22_CLEAR, MSIX_PBA_22_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_22_CLEAR, MSIX_PBA_22_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_23_CLEAR, MSIX_PBA_23_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_23_CLEAR, MSIX_PBA_23_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_24_CLEAR, MSIX_PBA_24_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_24_CLEAR, MSIX_PBA_24_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_25_CLEAR, MSIX_PBA_25_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_25_CLEAR, MSIX_PBA_25_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_26_CLEAR, MSIX_PBA_26_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_26_CLEAR, MSIX_PBA_26_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_27_CLEAR, MSIX_PBA_27_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_27_CLEAR, MSIX_PBA_27_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_28_CLEAR, MSIX_PBA_28_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_28_CLEAR, MSIX_PBA_28_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_29_CLEAR, MSIX_PBA_29_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_29_CLEAR, MSIX_PBA_29_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_30_CLEAR, MSIX_PBA_30_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_30_CLEAR, MSIX_PBA_30_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_31_CLEAR, MSIX_PBA_31_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_31_CLEAR, MSIX_PBA_31_CLEAR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_PBA_0_CLEAR, MSIX_PBA_0_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_0_CLEAR, MSIX_PBA_0_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_1_CLEAR, MSIX_PBA_1_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_1_CLEAR, MSIX_PBA_1_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_2_CLEAR, MSIX_PBA_2_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_2_CLEAR, MSIX_PBA_2_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_3_CLEAR, MSIX_PBA_3_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_3_CLEAR, MSIX_PBA_3_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_4_CLEAR, MSIX_PBA_4_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_4_CLEAR, MSIX_PBA_4_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_5_CLEAR, MSIX_PBA_5_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_5_CLEAR, MSIX_PBA_5_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_6_CLEAR, MSIX_PBA_6_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_6_CLEAR, MSIX_PBA_6_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_7_CLEAR, MSIX_PBA_7_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_7_CLEAR, MSIX_PBA_7_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_8_CLEAR, MSIX_PBA_8_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_8_CLEAR, MSIX_PBA_8_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_9_CLEAR, MSIX_PBA_9_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_9_CLEAR, MSIX_PBA_9_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_10_CLEAR, MSIX_PBA_10_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_10_CLEAR, MSIX_PBA_10_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_11_CLEAR, MSIX_PBA_11_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_11_CLEAR, MSIX_PBA_11_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_12_CLEAR, MSIX_PBA_12_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_12_CLEAR, MSIX_PBA_12_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_13_CLEAR, MSIX_PBA_13_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_13_CLEAR, MSIX_PBA_13_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_14_CLEAR, MSIX_PBA_14_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_14_CLEAR, MSIX_PBA_14_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_15_CLEAR, MSIX_PBA_15_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_15_CLEAR, MSIX_PBA_15_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_16_CLEAR, MSIX_PBA_16_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_16_CLEAR, MSIX_PBA_16_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_17_CLEAR, MSIX_PBA_17_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_17_CLEAR, MSIX_PBA_17_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_18_CLEAR, MSIX_PBA_18_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_18_CLEAR, MSIX_PBA_18_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_19_CLEAR, MSIX_PBA_19_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_19_CLEAR, MSIX_PBA_19_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_20_CLEAR, MSIX_PBA_20_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_20_CLEAR, MSIX_PBA_20_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_21_CLEAR, MSIX_PBA_21_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_21_CLEAR, MSIX_PBA_21_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_22_CLEAR, MSIX_PBA_22_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_22_CLEAR, MSIX_PBA_22_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_23_CLEAR, MSIX_PBA_23_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_23_CLEAR, MSIX_PBA_23_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_24_CLEAR, MSIX_PBA_24_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_24_CLEAR, MSIX_PBA_24_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_25_CLEAR, MSIX_PBA_25_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_25_CLEAR, MSIX_PBA_25_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_26_CLEAR, MSIX_PBA_26_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_26_CLEAR, MSIX_PBA_26_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_27_CLEAR, MSIX_PBA_27_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_27_CLEAR, MSIX_PBA_27_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_28_CLEAR, MSIX_PBA_28_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_28_CLEAR, MSIX_PBA_28_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_29_CLEAR, MSIX_PBA_29_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_29_CLEAR, MSIX_PBA_29_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_30_CLEAR, MSIX_PBA_30_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_30_CLEAR, MSIX_PBA_30_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_31_CLEAR, MSIX_PBA_31_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_31_CLEAR, MSIX_PBA_31_CLEAR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX_PBA_0_CLEAR = new("MSIX_PBA_0_CLEAR", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_0_CLEAR"});
    MSIX_PBA_0_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_0_CLEAR.set_rand_mode(0);
   MSIX_PBA_0_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_0_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_0_CLEAR ));

    MSIX_PBA_1_CLEAR = new("MSIX_PBA_1_CLEAR", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_1_CLEAR"});
    MSIX_PBA_1_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_1_CLEAR.set_rand_mode(0);
   MSIX_PBA_1_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_1_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_1_CLEAR ));

    MSIX_PBA_2_CLEAR = new("MSIX_PBA_2_CLEAR", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_2_CLEAR"});
    MSIX_PBA_2_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_2_CLEAR.set_rand_mode(0);
   MSIX_PBA_2_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_2_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_2_CLEAR ));

    MSIX_PBA_3_CLEAR = new("MSIX_PBA_3_CLEAR", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_3_CLEAR"});
    MSIX_PBA_3_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_3_CLEAR.set_rand_mode(0);
   MSIX_PBA_3_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_3_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_3_CLEAR ));

    MSIX_PBA_4_CLEAR = new("MSIX_PBA_4_CLEAR", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_4_CLEAR"});
    MSIX_PBA_4_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_4_CLEAR.set_rand_mode(0);
   MSIX_PBA_4_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_4_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_4_CLEAR ));

    MSIX_PBA_5_CLEAR = new("MSIX_PBA_5_CLEAR", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_5_CLEAR"});
    MSIX_PBA_5_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_5_CLEAR.set_rand_mode(0);
   MSIX_PBA_5_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_5_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_5_CLEAR ));

    MSIX_PBA_6_CLEAR = new("MSIX_PBA_6_CLEAR", "RW", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_6_CLEAR"});
    MSIX_PBA_6_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_6_CLEAR.set_rand_mode(0);
   MSIX_PBA_6_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_6_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_6_CLEAR ));

    MSIX_PBA_7_CLEAR = new("MSIX_PBA_7_CLEAR", "RW", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_7_CLEAR"});
    MSIX_PBA_7_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_7_CLEAR.set_rand_mode(0);
   MSIX_PBA_7_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_7_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_7_CLEAR ));

    MSIX_PBA_8_CLEAR = new("MSIX_PBA_8_CLEAR", "RW", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_8_CLEAR"});
    MSIX_PBA_8_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_8_CLEAR.set_rand_mode(0);
   MSIX_PBA_8_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_8_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_8_CLEAR ));

    MSIX_PBA_9_CLEAR = new("MSIX_PBA_9_CLEAR", "RW", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_9_CLEAR"});
    MSIX_PBA_9_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_9_CLEAR.set_rand_mode(0);
   MSIX_PBA_9_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_9_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_9_CLEAR ));

    MSIX_PBA_10_CLEAR = new("MSIX_PBA_10_CLEAR", "RW", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_10_CLEAR"});
    MSIX_PBA_10_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_10_CLEAR.set_rand_mode(0);
   MSIX_PBA_10_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_10_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_10_CLEAR ));

    MSIX_PBA_11_CLEAR = new("MSIX_PBA_11_CLEAR", "RW", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_11_CLEAR"});
    MSIX_PBA_11_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_11_CLEAR.set_rand_mode(0);
   MSIX_PBA_11_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_11_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_11_CLEAR ));

    MSIX_PBA_12_CLEAR = new("MSIX_PBA_12_CLEAR", "RW", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_12_CLEAR"});
    MSIX_PBA_12_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_12_CLEAR.set_rand_mode(0);
   MSIX_PBA_12_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_12_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_12_CLEAR ));

    MSIX_PBA_13_CLEAR = new("MSIX_PBA_13_CLEAR", "RW", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_13_CLEAR"});
    MSIX_PBA_13_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_13_CLEAR.set_rand_mode(0);
   MSIX_PBA_13_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_13_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_13_CLEAR ));

    MSIX_PBA_14_CLEAR = new("MSIX_PBA_14_CLEAR", "RW", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_14_CLEAR"});
    MSIX_PBA_14_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_14_CLEAR.set_rand_mode(0);
   MSIX_PBA_14_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_14_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_14_CLEAR ));

    MSIX_PBA_15_CLEAR = new("MSIX_PBA_15_CLEAR", "RW", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_15_CLEAR"});
    MSIX_PBA_15_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_15_CLEAR.set_rand_mode(0);
   MSIX_PBA_15_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_15_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_15_CLEAR ));

    MSIX_PBA_16_CLEAR = new("MSIX_PBA_16_CLEAR", "RW", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_16_CLEAR"});
    MSIX_PBA_16_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_16_CLEAR.set_rand_mode(0);
   MSIX_PBA_16_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_16_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_16_CLEAR ));

    MSIX_PBA_17_CLEAR = new("MSIX_PBA_17_CLEAR", "RW", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_17_CLEAR"});
    MSIX_PBA_17_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_17_CLEAR.set_rand_mode(0);
   MSIX_PBA_17_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_17_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_17_CLEAR ));

    MSIX_PBA_18_CLEAR = new("MSIX_PBA_18_CLEAR", "RW", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_18_CLEAR"});
    MSIX_PBA_18_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_18_CLEAR.set_rand_mode(0);
   MSIX_PBA_18_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_18_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_18_CLEAR ));

    MSIX_PBA_19_CLEAR = new("MSIX_PBA_19_CLEAR", "RW", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_19_CLEAR"});
    MSIX_PBA_19_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_19_CLEAR.set_rand_mode(0);
   MSIX_PBA_19_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_19_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_19_CLEAR ));

    MSIX_PBA_20_CLEAR = new("MSIX_PBA_20_CLEAR", "RW", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_20_CLEAR"});
    MSIX_PBA_20_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_20_CLEAR.set_rand_mode(0);
   MSIX_PBA_20_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_20_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_20_CLEAR ));

    MSIX_PBA_21_CLEAR = new("MSIX_PBA_21_CLEAR", "RW", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_21_CLEAR"});
    MSIX_PBA_21_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_21_CLEAR.set_rand_mode(0);
   MSIX_PBA_21_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_21_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_21_CLEAR ));

    MSIX_PBA_22_CLEAR = new("MSIX_PBA_22_CLEAR", "RW", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_22_CLEAR"});
    MSIX_PBA_22_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_22_CLEAR.set_rand_mode(0);
   MSIX_PBA_22_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_22_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_22_CLEAR ));

    MSIX_PBA_23_CLEAR = new("MSIX_PBA_23_CLEAR", "RW", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_23_CLEAR"});
    MSIX_PBA_23_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_23_CLEAR.set_rand_mode(0);
   MSIX_PBA_23_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_23_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_23_CLEAR ));

    MSIX_PBA_24_CLEAR = new("MSIX_PBA_24_CLEAR", "RW", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_24_CLEAR"});
    MSIX_PBA_24_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_24_CLEAR.set_rand_mode(0);
   MSIX_PBA_24_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_24_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_24_CLEAR ));

    MSIX_PBA_25_CLEAR = new("MSIX_PBA_25_CLEAR", "RW", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_25_CLEAR"});
    MSIX_PBA_25_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_25_CLEAR.set_rand_mode(0);
   MSIX_PBA_25_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_25_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_25_CLEAR ));

    MSIX_PBA_26_CLEAR = new("MSIX_PBA_26_CLEAR", "RW", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_26_CLEAR"});
    MSIX_PBA_26_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_26_CLEAR.set_rand_mode(0);
   MSIX_PBA_26_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_26_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_26_CLEAR ));

    MSIX_PBA_27_CLEAR = new("MSIX_PBA_27_CLEAR", "RW", 1, 27, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_27_CLEAR"});
    MSIX_PBA_27_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_27_CLEAR.set_rand_mode(0);
   MSIX_PBA_27_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_27_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_27_CLEAR ));

    MSIX_PBA_28_CLEAR = new("MSIX_PBA_28_CLEAR", "RW", 1, 28, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_28_CLEAR"});
    MSIX_PBA_28_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_28_CLEAR.set_rand_mode(0);
   MSIX_PBA_28_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_28_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_28_CLEAR ));

    MSIX_PBA_29_CLEAR = new("MSIX_PBA_29_CLEAR", "RW", 1, 29, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_29_CLEAR"});
    MSIX_PBA_29_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_29_CLEAR.set_rand_mode(0);
   MSIX_PBA_29_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_29_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_29_CLEAR ));

    MSIX_PBA_30_CLEAR = new("MSIX_PBA_30_CLEAR", "RW", 1, 30, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_30_CLEAR"});
    MSIX_PBA_30_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_30_CLEAR.set_rand_mode(0);
   MSIX_PBA_30_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_30_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_30_CLEAR ));

    MSIX_PBA_31_CLEAR = new("MSIX_PBA_31_CLEAR", "RW", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_31_CLEAR"});
    MSIX_PBA_31_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_31_CLEAR.set_rand_mode(0);
   MSIX_PBA_31_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_31_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_31_CLEAR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_PBA_31_0_CLEAR_reg) 
endclass : hqm_system_csr_bridge_MSIX_PBA_31_0_CLEAR_reg

// ================================================

class hqm_system_csr_bridge_MSIX_PBA_63_32_CLEAR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX_PBA_32_CLEAR;
  sla_ral_field MSIX_PBA_33_CLEAR;
  sla_ral_field MSIX_PBA_34_CLEAR;
  sla_ral_field MSIX_PBA_35_CLEAR;
  sla_ral_field MSIX_PBA_36_CLEAR;
  sla_ral_field MSIX_PBA_37_CLEAR;
  sla_ral_field MSIX_PBA_38_CLEAR;
  sla_ral_field MSIX_PBA_39_CLEAR;
  sla_ral_field MSIX_PBA_40_CLEAR;
  sla_ral_field MSIX_PBA_41_CLEAR;
  sla_ral_field MSIX_PBA_42_CLEAR;
  sla_ral_field MSIX_PBA_43_CLEAR;
  sla_ral_field MSIX_PBA_44_CLEAR;
  sla_ral_field MSIX_PBA_45_CLEAR;
  sla_ral_field MSIX_PBA_46_CLEAR;
  sla_ral_field MSIX_PBA_47_CLEAR;
  sla_ral_field MSIX_PBA_48_CLEAR;
  sla_ral_field MSIX_PBA_49_CLEAR;
  sla_ral_field MSIX_PBA_50_CLEAR;
  sla_ral_field MSIX_PBA_51_CLEAR;
  sla_ral_field MSIX_PBA_52_CLEAR;
  sla_ral_field MSIX_PBA_53_CLEAR;
  sla_ral_field MSIX_PBA_54_CLEAR;
  sla_ral_field MSIX_PBA_55_CLEAR;
  sla_ral_field MSIX_PBA_56_CLEAR;
  sla_ral_field MSIX_PBA_57_CLEAR;
  sla_ral_field MSIX_PBA_58_CLEAR;
  sla_ral_field MSIX_PBA_59_CLEAR;
  sla_ral_field MSIX_PBA_60_CLEAR;
  sla_ral_field MSIX_PBA_61_CLEAR;
  sla_ral_field MSIX_PBA_62_CLEAR;
  sla_ral_field MSIX_PBA_63_CLEAR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_PBA_63_32_CLEAR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_PBA_32_CLEAR, MSIX_PBA_32_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_32_CLEAR, MSIX_PBA_32_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_33_CLEAR, MSIX_PBA_33_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_33_CLEAR, MSIX_PBA_33_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_34_CLEAR, MSIX_PBA_34_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_34_CLEAR, MSIX_PBA_34_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_35_CLEAR, MSIX_PBA_35_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_35_CLEAR, MSIX_PBA_35_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_36_CLEAR, MSIX_PBA_36_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_36_CLEAR, MSIX_PBA_36_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_37_CLEAR, MSIX_PBA_37_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_37_CLEAR, MSIX_PBA_37_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_38_CLEAR, MSIX_PBA_38_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_38_CLEAR, MSIX_PBA_38_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_39_CLEAR, MSIX_PBA_39_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_39_CLEAR, MSIX_PBA_39_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_40_CLEAR, MSIX_PBA_40_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_40_CLEAR, MSIX_PBA_40_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_41_CLEAR, MSIX_PBA_41_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_41_CLEAR, MSIX_PBA_41_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_42_CLEAR, MSIX_PBA_42_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_42_CLEAR, MSIX_PBA_42_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_43_CLEAR, MSIX_PBA_43_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_43_CLEAR, MSIX_PBA_43_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_44_CLEAR, MSIX_PBA_44_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_44_CLEAR, MSIX_PBA_44_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_45_CLEAR, MSIX_PBA_45_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_45_CLEAR, MSIX_PBA_45_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_46_CLEAR, MSIX_PBA_46_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_46_CLEAR, MSIX_PBA_46_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_47_CLEAR, MSIX_PBA_47_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_47_CLEAR, MSIX_PBA_47_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_48_CLEAR, MSIX_PBA_48_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_48_CLEAR, MSIX_PBA_48_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_49_CLEAR, MSIX_PBA_49_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_49_CLEAR, MSIX_PBA_49_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_50_CLEAR, MSIX_PBA_50_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_50_CLEAR, MSIX_PBA_50_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_51_CLEAR, MSIX_PBA_51_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_51_CLEAR, MSIX_PBA_51_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_52_CLEAR, MSIX_PBA_52_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_52_CLEAR, MSIX_PBA_52_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_53_CLEAR, MSIX_PBA_53_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_53_CLEAR, MSIX_PBA_53_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_54_CLEAR, MSIX_PBA_54_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_54_CLEAR, MSIX_PBA_54_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_55_CLEAR, MSIX_PBA_55_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_55_CLEAR, MSIX_PBA_55_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_56_CLEAR, MSIX_PBA_56_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_56_CLEAR, MSIX_PBA_56_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_57_CLEAR, MSIX_PBA_57_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_57_CLEAR, MSIX_PBA_57_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_58_CLEAR, MSIX_PBA_58_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_58_CLEAR, MSIX_PBA_58_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_59_CLEAR, MSIX_PBA_59_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_59_CLEAR, MSIX_PBA_59_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_60_CLEAR, MSIX_PBA_60_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_60_CLEAR, MSIX_PBA_60_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_61_CLEAR, MSIX_PBA_61_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_61_CLEAR, MSIX_PBA_61_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_62_CLEAR, MSIX_PBA_62_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_62_CLEAR, MSIX_PBA_62_CLEAR.desired, 0)
     `RAL_FIELD_CP(MSIX_PBA_63_CLEAR, MSIX_PBA_63_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_63_CLEAR, MSIX_PBA_63_CLEAR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_PBA_32_CLEAR, MSIX_PBA_32_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_32_CLEAR, MSIX_PBA_32_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_33_CLEAR, MSIX_PBA_33_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_33_CLEAR, MSIX_PBA_33_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_34_CLEAR, MSIX_PBA_34_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_34_CLEAR, MSIX_PBA_34_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_35_CLEAR, MSIX_PBA_35_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_35_CLEAR, MSIX_PBA_35_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_36_CLEAR, MSIX_PBA_36_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_36_CLEAR, MSIX_PBA_36_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_37_CLEAR, MSIX_PBA_37_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_37_CLEAR, MSIX_PBA_37_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_38_CLEAR, MSIX_PBA_38_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_38_CLEAR, MSIX_PBA_38_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_39_CLEAR, MSIX_PBA_39_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_39_CLEAR, MSIX_PBA_39_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_40_CLEAR, MSIX_PBA_40_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_40_CLEAR, MSIX_PBA_40_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_41_CLEAR, MSIX_PBA_41_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_41_CLEAR, MSIX_PBA_41_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_42_CLEAR, MSIX_PBA_42_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_42_CLEAR, MSIX_PBA_42_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_43_CLEAR, MSIX_PBA_43_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_43_CLEAR, MSIX_PBA_43_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_44_CLEAR, MSIX_PBA_44_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_44_CLEAR, MSIX_PBA_44_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_45_CLEAR, MSIX_PBA_45_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_45_CLEAR, MSIX_PBA_45_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_46_CLEAR, MSIX_PBA_46_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_46_CLEAR, MSIX_PBA_46_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_47_CLEAR, MSIX_PBA_47_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_47_CLEAR, MSIX_PBA_47_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_48_CLEAR, MSIX_PBA_48_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_48_CLEAR, MSIX_PBA_48_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_49_CLEAR, MSIX_PBA_49_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_49_CLEAR, MSIX_PBA_49_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_50_CLEAR, MSIX_PBA_50_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_50_CLEAR, MSIX_PBA_50_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_51_CLEAR, MSIX_PBA_51_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_51_CLEAR, MSIX_PBA_51_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_52_CLEAR, MSIX_PBA_52_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_52_CLEAR, MSIX_PBA_52_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_53_CLEAR, MSIX_PBA_53_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_53_CLEAR, MSIX_PBA_53_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_54_CLEAR, MSIX_PBA_54_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_54_CLEAR, MSIX_PBA_54_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_55_CLEAR, MSIX_PBA_55_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_55_CLEAR, MSIX_PBA_55_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_56_CLEAR, MSIX_PBA_56_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_56_CLEAR, MSIX_PBA_56_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_57_CLEAR, MSIX_PBA_57_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_57_CLEAR, MSIX_PBA_57_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_58_CLEAR, MSIX_PBA_58_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_58_CLEAR, MSIX_PBA_58_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_59_CLEAR, MSIX_PBA_59_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_59_CLEAR, MSIX_PBA_59_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_60_CLEAR, MSIX_PBA_60_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_60_CLEAR, MSIX_PBA_60_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_61_CLEAR, MSIX_PBA_61_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_61_CLEAR, MSIX_PBA_61_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_62_CLEAR, MSIX_PBA_62_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_62_CLEAR, MSIX_PBA_62_CLEAR.actual, 0)
     `RAL_FIELD_CP(MSIX_PBA_63_CLEAR, MSIX_PBA_63_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_63_CLEAR, MSIX_PBA_63_CLEAR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX_PBA_32_CLEAR = new("MSIX_PBA_32_CLEAR", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_32_CLEAR"});
    MSIX_PBA_32_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_32_CLEAR.set_rand_mode(0);
   MSIX_PBA_32_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_32_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_32_CLEAR ));

    MSIX_PBA_33_CLEAR = new("MSIX_PBA_33_CLEAR", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_33_CLEAR"});
    MSIX_PBA_33_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_33_CLEAR.set_rand_mode(0);
   MSIX_PBA_33_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_33_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_33_CLEAR ));

    MSIX_PBA_34_CLEAR = new("MSIX_PBA_34_CLEAR", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_34_CLEAR"});
    MSIX_PBA_34_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_34_CLEAR.set_rand_mode(0);
   MSIX_PBA_34_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_34_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_34_CLEAR ));

    MSIX_PBA_35_CLEAR = new("MSIX_PBA_35_CLEAR", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_35_CLEAR"});
    MSIX_PBA_35_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_35_CLEAR.set_rand_mode(0);
   MSIX_PBA_35_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_35_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_35_CLEAR ));

    MSIX_PBA_36_CLEAR = new("MSIX_PBA_36_CLEAR", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_36_CLEAR"});
    MSIX_PBA_36_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_36_CLEAR.set_rand_mode(0);
   MSIX_PBA_36_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_36_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_36_CLEAR ));

    MSIX_PBA_37_CLEAR = new("MSIX_PBA_37_CLEAR", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_37_CLEAR"});
    MSIX_PBA_37_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_37_CLEAR.set_rand_mode(0);
   MSIX_PBA_37_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_37_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_37_CLEAR ));

    MSIX_PBA_38_CLEAR = new("MSIX_PBA_38_CLEAR", "RW", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_38_CLEAR"});
    MSIX_PBA_38_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_38_CLEAR.set_rand_mode(0);
   MSIX_PBA_38_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_38_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_38_CLEAR ));

    MSIX_PBA_39_CLEAR = new("MSIX_PBA_39_CLEAR", "RW", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_39_CLEAR"});
    MSIX_PBA_39_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_39_CLEAR.set_rand_mode(0);
   MSIX_PBA_39_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_39_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_39_CLEAR ));

    MSIX_PBA_40_CLEAR = new("MSIX_PBA_40_CLEAR", "RW", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_40_CLEAR"});
    MSIX_PBA_40_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_40_CLEAR.set_rand_mode(0);
   MSIX_PBA_40_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_40_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_40_CLEAR ));

    MSIX_PBA_41_CLEAR = new("MSIX_PBA_41_CLEAR", "RW", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_41_CLEAR"});
    MSIX_PBA_41_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_41_CLEAR.set_rand_mode(0);
   MSIX_PBA_41_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_41_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_41_CLEAR ));

    MSIX_PBA_42_CLEAR = new("MSIX_PBA_42_CLEAR", "RW", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_42_CLEAR"});
    MSIX_PBA_42_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_42_CLEAR.set_rand_mode(0);
   MSIX_PBA_42_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_42_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_42_CLEAR ));

    MSIX_PBA_43_CLEAR = new("MSIX_PBA_43_CLEAR", "RW", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_43_CLEAR"});
    MSIX_PBA_43_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_43_CLEAR.set_rand_mode(0);
   MSIX_PBA_43_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_43_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_43_CLEAR ));

    MSIX_PBA_44_CLEAR = new("MSIX_PBA_44_CLEAR", "RW", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_44_CLEAR"});
    MSIX_PBA_44_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_44_CLEAR.set_rand_mode(0);
   MSIX_PBA_44_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_44_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_44_CLEAR ));

    MSIX_PBA_45_CLEAR = new("MSIX_PBA_45_CLEAR", "RW", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_45_CLEAR"});
    MSIX_PBA_45_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_45_CLEAR.set_rand_mode(0);
   MSIX_PBA_45_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_45_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_45_CLEAR ));

    MSIX_PBA_46_CLEAR = new("MSIX_PBA_46_CLEAR", "RW", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_46_CLEAR"});
    MSIX_PBA_46_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_46_CLEAR.set_rand_mode(0);
   MSIX_PBA_46_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_46_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_46_CLEAR ));

    MSIX_PBA_47_CLEAR = new("MSIX_PBA_47_CLEAR", "RW", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_47_CLEAR"});
    MSIX_PBA_47_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_47_CLEAR.set_rand_mode(0);
   MSIX_PBA_47_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_47_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_47_CLEAR ));

    MSIX_PBA_48_CLEAR = new("MSIX_PBA_48_CLEAR", "RW", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_48_CLEAR"});
    MSIX_PBA_48_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_48_CLEAR.set_rand_mode(0);
   MSIX_PBA_48_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_48_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_48_CLEAR ));

    MSIX_PBA_49_CLEAR = new("MSIX_PBA_49_CLEAR", "RW", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_49_CLEAR"});
    MSIX_PBA_49_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_49_CLEAR.set_rand_mode(0);
   MSIX_PBA_49_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_49_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_49_CLEAR ));

    MSIX_PBA_50_CLEAR = new("MSIX_PBA_50_CLEAR", "RW", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_50_CLEAR"});
    MSIX_PBA_50_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_50_CLEAR.set_rand_mode(0);
   MSIX_PBA_50_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_50_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_50_CLEAR ));

    MSIX_PBA_51_CLEAR = new("MSIX_PBA_51_CLEAR", "RW", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_51_CLEAR"});
    MSIX_PBA_51_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_51_CLEAR.set_rand_mode(0);
   MSIX_PBA_51_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_51_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_51_CLEAR ));

    MSIX_PBA_52_CLEAR = new("MSIX_PBA_52_CLEAR", "RW", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_52_CLEAR"});
    MSIX_PBA_52_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_52_CLEAR.set_rand_mode(0);
   MSIX_PBA_52_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_52_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_52_CLEAR ));

    MSIX_PBA_53_CLEAR = new("MSIX_PBA_53_CLEAR", "RW", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_53_CLEAR"});
    MSIX_PBA_53_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_53_CLEAR.set_rand_mode(0);
   MSIX_PBA_53_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_53_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_53_CLEAR ));

    MSIX_PBA_54_CLEAR = new("MSIX_PBA_54_CLEAR", "RW", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_54_CLEAR"});
    MSIX_PBA_54_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_54_CLEAR.set_rand_mode(0);
   MSIX_PBA_54_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_54_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_54_CLEAR ));

    MSIX_PBA_55_CLEAR = new("MSIX_PBA_55_CLEAR", "RW", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_55_CLEAR"});
    MSIX_PBA_55_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_55_CLEAR.set_rand_mode(0);
   MSIX_PBA_55_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_55_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_55_CLEAR ));

    MSIX_PBA_56_CLEAR = new("MSIX_PBA_56_CLEAR", "RW", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_56_CLEAR"});
    MSIX_PBA_56_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_56_CLEAR.set_rand_mode(0);
   MSIX_PBA_56_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_56_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_56_CLEAR ));

    MSIX_PBA_57_CLEAR = new("MSIX_PBA_57_CLEAR", "RW", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_57_CLEAR"});
    MSIX_PBA_57_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_57_CLEAR.set_rand_mode(0);
   MSIX_PBA_57_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_57_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_57_CLEAR ));

    MSIX_PBA_58_CLEAR = new("MSIX_PBA_58_CLEAR", "RW", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_58_CLEAR"});
    MSIX_PBA_58_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_58_CLEAR.set_rand_mode(0);
   MSIX_PBA_58_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_58_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_58_CLEAR ));

    MSIX_PBA_59_CLEAR = new("MSIX_PBA_59_CLEAR", "RW", 1, 27, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_59_CLEAR"});
    MSIX_PBA_59_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_59_CLEAR.set_rand_mode(0);
   MSIX_PBA_59_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_59_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_59_CLEAR ));

    MSIX_PBA_60_CLEAR = new("MSIX_PBA_60_CLEAR", "RW", 1, 28, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_60_CLEAR"});
    MSIX_PBA_60_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_60_CLEAR.set_rand_mode(0);
   MSIX_PBA_60_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_60_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_60_CLEAR ));

    MSIX_PBA_61_CLEAR = new("MSIX_PBA_61_CLEAR", "RW", 1, 29, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_61_CLEAR"});
    MSIX_PBA_61_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_61_CLEAR.set_rand_mode(0);
   MSIX_PBA_61_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_61_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_61_CLEAR ));

    MSIX_PBA_62_CLEAR = new("MSIX_PBA_62_CLEAR", "RW", 1, 30, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_62_CLEAR"});
    MSIX_PBA_62_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_62_CLEAR.set_rand_mode(0);
   MSIX_PBA_62_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_62_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_62_CLEAR ));

    MSIX_PBA_63_CLEAR = new("MSIX_PBA_63_CLEAR", "RW", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_63_CLEAR"});
    MSIX_PBA_63_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_63_CLEAR.set_rand_mode(0);
   MSIX_PBA_63_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_63_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_63_CLEAR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_PBA_63_32_CLEAR_reg) 
endclass : hqm_system_csr_bridge_MSIX_PBA_63_32_CLEAR_reg

// ================================================

class hqm_system_csr_bridge_MSIX_PBA_64_CLEAR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX_PBA_64_CLEAR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_MSIX_PBA_64_CLEAR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_PBA_64_CLEAR, MSIX_PBA_64_CLEAR.desired)
     `RAL_FIELD_CP_1(MSIX_PBA_64_CLEAR, MSIX_PBA_64_CLEAR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX_PBA_64_CLEAR, MSIX_PBA_64_CLEAR.actual)
     `RAL_FIELD_CP_1(MSIX_PBA_64_CLEAR, MSIX_PBA_64_CLEAR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX_PBA_64_CLEAR = new("MSIX_PBA_64_CLEAR", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_64_CLEAR.MSIX_PBA_64_CLEAR"});
    MSIX_PBA_64_CLEAR.set_powerwell("vcccfn_gated");
    MSIX_PBA_64_CLEAR.set_rand_mode(0);
   MSIX_PBA_64_CLEAR.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_PBA_64_CLEAR.set_logical_path("HQMID");
    void'(add_field( MSIX_PBA_64_CLEAR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_MSIX_PBA_64_CLEAR_reg) 
endclass : hqm_system_csr_bridge_MSIX_PBA_64_CLEAR_reg

// ================================================

class hqm_system_csr_bridge_DIR_CQ_31_0_OCC_INT_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_0_OCC_INT;
  sla_ral_field CQ_1_OCC_INT;
  sla_ral_field CQ_2_OCC_INT;
  sla_ral_field CQ_3_OCC_INT;
  sla_ral_field CQ_4_OCC_INT;
  sla_ral_field CQ_5_OCC_INT;
  sla_ral_field CQ_6_OCC_INT;
  sla_ral_field CQ_7_OCC_INT;
  sla_ral_field CQ_8_OCC_INT;
  sla_ral_field CQ_9_OCC_INT;
  sla_ral_field CQ_10_OCC_INT;
  sla_ral_field CQ_11_OCC_INT;
  sla_ral_field CQ_12_OCC_INT;
  sla_ral_field CQ_13_OCC_INT;
  sla_ral_field CQ_14_OCC_INT;
  sla_ral_field CQ_15_OCC_INT;
  sla_ral_field CQ_16_OCC_INT;
  sla_ral_field CQ_17_OCC_INT;
  sla_ral_field CQ_18_OCC_INT;
  sla_ral_field CQ_19_OCC_INT;
  sla_ral_field CQ_20_OCC_INT;
  sla_ral_field CQ_21_OCC_INT;
  sla_ral_field CQ_22_OCC_INT;
  sla_ral_field CQ_23_OCC_INT;
  sla_ral_field CQ_24_OCC_INT;
  sla_ral_field CQ_25_OCC_INT;
  sla_ral_field CQ_26_OCC_INT;
  sla_ral_field CQ_27_OCC_INT;
  sla_ral_field CQ_28_OCC_INT;
  sla_ral_field CQ_29_OCC_INT;
  sla_ral_field CQ_30_OCC_INT;
  sla_ral_field CQ_31_OCC_INT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_CQ_31_0_OCC_INT_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_0_OCC_INT, CQ_0_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_0_OCC_INT, CQ_0_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_1_OCC_INT, CQ_1_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_1_OCC_INT, CQ_1_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_2_OCC_INT, CQ_2_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_2_OCC_INT, CQ_2_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_3_OCC_INT, CQ_3_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_3_OCC_INT, CQ_3_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_4_OCC_INT, CQ_4_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_4_OCC_INT, CQ_4_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_5_OCC_INT, CQ_5_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_5_OCC_INT, CQ_5_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_6_OCC_INT, CQ_6_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_6_OCC_INT, CQ_6_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_7_OCC_INT, CQ_7_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_7_OCC_INT, CQ_7_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_8_OCC_INT, CQ_8_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_8_OCC_INT, CQ_8_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_9_OCC_INT, CQ_9_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_9_OCC_INT, CQ_9_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_10_OCC_INT, CQ_10_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_10_OCC_INT, CQ_10_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_11_OCC_INT, CQ_11_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_11_OCC_INT, CQ_11_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_12_OCC_INT, CQ_12_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_12_OCC_INT, CQ_12_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_13_OCC_INT, CQ_13_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_13_OCC_INT, CQ_13_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_14_OCC_INT, CQ_14_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_14_OCC_INT, CQ_14_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_15_OCC_INT, CQ_15_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_15_OCC_INT, CQ_15_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_16_OCC_INT, CQ_16_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_16_OCC_INT, CQ_16_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_17_OCC_INT, CQ_17_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_17_OCC_INT, CQ_17_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_18_OCC_INT, CQ_18_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_18_OCC_INT, CQ_18_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_19_OCC_INT, CQ_19_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_19_OCC_INT, CQ_19_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_20_OCC_INT, CQ_20_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_20_OCC_INT, CQ_20_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_21_OCC_INT, CQ_21_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_21_OCC_INT, CQ_21_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_22_OCC_INT, CQ_22_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_22_OCC_INT, CQ_22_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_23_OCC_INT, CQ_23_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_23_OCC_INT, CQ_23_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_24_OCC_INT, CQ_24_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_24_OCC_INT, CQ_24_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_25_OCC_INT, CQ_25_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_25_OCC_INT, CQ_25_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_26_OCC_INT, CQ_26_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_26_OCC_INT, CQ_26_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_27_OCC_INT, CQ_27_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_27_OCC_INT, CQ_27_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_28_OCC_INT, CQ_28_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_28_OCC_INT, CQ_28_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_29_OCC_INT, CQ_29_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_29_OCC_INT, CQ_29_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_30_OCC_INT, CQ_30_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_30_OCC_INT, CQ_30_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_31_OCC_INT, CQ_31_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_31_OCC_INT, CQ_31_OCC_INT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_0_OCC_INT, CQ_0_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_0_OCC_INT, CQ_0_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_1_OCC_INT, CQ_1_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_1_OCC_INT, CQ_1_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_2_OCC_INT, CQ_2_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_2_OCC_INT, CQ_2_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_3_OCC_INT, CQ_3_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_3_OCC_INT, CQ_3_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_4_OCC_INT, CQ_4_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_4_OCC_INT, CQ_4_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_5_OCC_INT, CQ_5_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_5_OCC_INT, CQ_5_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_6_OCC_INT, CQ_6_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_6_OCC_INT, CQ_6_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_7_OCC_INT, CQ_7_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_7_OCC_INT, CQ_7_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_8_OCC_INT, CQ_8_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_8_OCC_INT, CQ_8_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_9_OCC_INT, CQ_9_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_9_OCC_INT, CQ_9_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_10_OCC_INT, CQ_10_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_10_OCC_INT, CQ_10_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_11_OCC_INT, CQ_11_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_11_OCC_INT, CQ_11_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_12_OCC_INT, CQ_12_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_12_OCC_INT, CQ_12_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_13_OCC_INT, CQ_13_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_13_OCC_INT, CQ_13_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_14_OCC_INT, CQ_14_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_14_OCC_INT, CQ_14_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_15_OCC_INT, CQ_15_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_15_OCC_INT, CQ_15_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_16_OCC_INT, CQ_16_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_16_OCC_INT, CQ_16_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_17_OCC_INT, CQ_17_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_17_OCC_INT, CQ_17_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_18_OCC_INT, CQ_18_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_18_OCC_INT, CQ_18_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_19_OCC_INT, CQ_19_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_19_OCC_INT, CQ_19_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_20_OCC_INT, CQ_20_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_20_OCC_INT, CQ_20_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_21_OCC_INT, CQ_21_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_21_OCC_INT, CQ_21_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_22_OCC_INT, CQ_22_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_22_OCC_INT, CQ_22_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_23_OCC_INT, CQ_23_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_23_OCC_INT, CQ_23_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_24_OCC_INT, CQ_24_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_24_OCC_INT, CQ_24_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_25_OCC_INT, CQ_25_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_25_OCC_INT, CQ_25_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_26_OCC_INT, CQ_26_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_26_OCC_INT, CQ_26_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_27_OCC_INT, CQ_27_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_27_OCC_INT, CQ_27_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_28_OCC_INT, CQ_28_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_28_OCC_INT, CQ_28_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_29_OCC_INT, CQ_29_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_29_OCC_INT, CQ_29_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_30_OCC_INT, CQ_30_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_30_OCC_INT, CQ_30_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_31_OCC_INT, CQ_31_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_31_OCC_INT, CQ_31_OCC_INT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_0_OCC_INT = new("CQ_0_OCC_INT", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT"});
    CQ_0_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_0_OCC_INT.set_rand_mode(0);
   CQ_0_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_0_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_0_OCC_INT ));

    CQ_1_OCC_INT = new("CQ_1_OCC_INT", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT"});
    CQ_1_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_1_OCC_INT.set_rand_mode(0);
   CQ_1_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_1_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_1_OCC_INT ));

    CQ_2_OCC_INT = new("CQ_2_OCC_INT", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT"});
    CQ_2_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_2_OCC_INT.set_rand_mode(0);
   CQ_2_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_2_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_2_OCC_INT ));

    CQ_3_OCC_INT = new("CQ_3_OCC_INT", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT"});
    CQ_3_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_3_OCC_INT.set_rand_mode(0);
   CQ_3_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_3_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_3_OCC_INT ));

    CQ_4_OCC_INT = new("CQ_4_OCC_INT", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT"});
    CQ_4_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_4_OCC_INT.set_rand_mode(0);
   CQ_4_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_4_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_4_OCC_INT ));

    CQ_5_OCC_INT = new("CQ_5_OCC_INT", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT"});
    CQ_5_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_5_OCC_INT.set_rand_mode(0);
   CQ_5_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_5_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_5_OCC_INT ));

    CQ_6_OCC_INT = new("CQ_6_OCC_INT", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT"});
    CQ_6_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_6_OCC_INT.set_rand_mode(0);
   CQ_6_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_6_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_6_OCC_INT ));

    CQ_7_OCC_INT = new("CQ_7_OCC_INT", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT"});
    CQ_7_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_7_OCC_INT.set_rand_mode(0);
   CQ_7_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_7_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_7_OCC_INT ));

    CQ_8_OCC_INT = new("CQ_8_OCC_INT", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT"});
    CQ_8_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_8_OCC_INT.set_rand_mode(0);
   CQ_8_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_8_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_8_OCC_INT ));

    CQ_9_OCC_INT = new("CQ_9_OCC_INT", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT"});
    CQ_9_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_9_OCC_INT.set_rand_mode(0);
   CQ_9_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_9_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_9_OCC_INT ));

    CQ_10_OCC_INT = new("CQ_10_OCC_INT", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT"});
    CQ_10_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_10_OCC_INT.set_rand_mode(0);
   CQ_10_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_10_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_10_OCC_INT ));

    CQ_11_OCC_INT = new("CQ_11_OCC_INT", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT"});
    CQ_11_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_11_OCC_INT.set_rand_mode(0);
   CQ_11_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_11_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_11_OCC_INT ));

    CQ_12_OCC_INT = new("CQ_12_OCC_INT", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT"});
    CQ_12_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_12_OCC_INT.set_rand_mode(0);
   CQ_12_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_12_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_12_OCC_INT ));

    CQ_13_OCC_INT = new("CQ_13_OCC_INT", "RW/1C/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT"});
    CQ_13_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_13_OCC_INT.set_rand_mode(0);
   CQ_13_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_13_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_13_OCC_INT ));

    CQ_14_OCC_INT = new("CQ_14_OCC_INT", "RW/1C/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT"});
    CQ_14_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_14_OCC_INT.set_rand_mode(0);
   CQ_14_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_14_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_14_OCC_INT ));

    CQ_15_OCC_INT = new("CQ_15_OCC_INT", "RW/1C/V", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT"});
    CQ_15_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_15_OCC_INT.set_rand_mode(0);
   CQ_15_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_15_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_15_OCC_INT ));

    CQ_16_OCC_INT = new("CQ_16_OCC_INT", "RW/1C/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT"});
    CQ_16_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_16_OCC_INT.set_rand_mode(0);
   CQ_16_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_16_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_16_OCC_INT ));

    CQ_17_OCC_INT = new("CQ_17_OCC_INT", "RW/1C/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT"});
    CQ_17_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_17_OCC_INT.set_rand_mode(0);
   CQ_17_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_17_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_17_OCC_INT ));

    CQ_18_OCC_INT = new("CQ_18_OCC_INT", "RW/1C/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT"});
    CQ_18_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_18_OCC_INT.set_rand_mode(0);
   CQ_18_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_18_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_18_OCC_INT ));

    CQ_19_OCC_INT = new("CQ_19_OCC_INT", "RW/1C/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT"});
    CQ_19_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_19_OCC_INT.set_rand_mode(0);
   CQ_19_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_19_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_19_OCC_INT ));

    CQ_20_OCC_INT = new("CQ_20_OCC_INT", "RW/1C/V", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT"});
    CQ_20_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_20_OCC_INT.set_rand_mode(0);
   CQ_20_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_20_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_20_OCC_INT ));

    CQ_21_OCC_INT = new("CQ_21_OCC_INT", "RW/1C/V", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT"});
    CQ_21_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_21_OCC_INT.set_rand_mode(0);
   CQ_21_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_21_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_21_OCC_INT ));

    CQ_22_OCC_INT = new("CQ_22_OCC_INT", "RW/1C/V", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT"});
    CQ_22_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_22_OCC_INT.set_rand_mode(0);
   CQ_22_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_22_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_22_OCC_INT ));

    CQ_23_OCC_INT = new("CQ_23_OCC_INT", "RW/1C/V", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT"});
    CQ_23_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_23_OCC_INT.set_rand_mode(0);
   CQ_23_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_23_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_23_OCC_INT ));

    CQ_24_OCC_INT = new("CQ_24_OCC_INT", "RW/1C/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT"});
    CQ_24_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_24_OCC_INT.set_rand_mode(0);
   CQ_24_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_24_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_24_OCC_INT ));

    CQ_25_OCC_INT = new("CQ_25_OCC_INT", "RW/1C/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT"});
    CQ_25_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_25_OCC_INT.set_rand_mode(0);
   CQ_25_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_25_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_25_OCC_INT ));

    CQ_26_OCC_INT = new("CQ_26_OCC_INT", "RW/1C/V", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT"});
    CQ_26_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_26_OCC_INT.set_rand_mode(0);
   CQ_26_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_26_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_26_OCC_INT ));

    CQ_27_OCC_INT = new("CQ_27_OCC_INT", "RW/1C/V", 1, 27, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT"});
    CQ_27_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_27_OCC_INT.set_rand_mode(0);
   CQ_27_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_27_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_27_OCC_INT ));

    CQ_28_OCC_INT = new("CQ_28_OCC_INT", "RW/1C/V", 1, 28, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT"});
    CQ_28_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_28_OCC_INT.set_rand_mode(0);
   CQ_28_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_28_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_28_OCC_INT ));

    CQ_29_OCC_INT = new("CQ_29_OCC_INT", "RW/1C/V", 1, 29, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT"});
    CQ_29_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_29_OCC_INT.set_rand_mode(0);
   CQ_29_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_29_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_29_OCC_INT ));

    CQ_30_OCC_INT = new("CQ_30_OCC_INT", "RW/1C/V", 1, 30, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT"});
    CQ_30_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_30_OCC_INT.set_rand_mode(0);
   CQ_30_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_30_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_30_OCC_INT ));

    CQ_31_OCC_INT = new("CQ_31_OCC_INT", "RW/1C/V", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT"});
    CQ_31_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_31_OCC_INT.set_rand_mode(0);
   CQ_31_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_31_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_31_OCC_INT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_CQ_31_0_OCC_INT_STATUS_reg) 
endclass : hqm_system_csr_bridge_DIR_CQ_31_0_OCC_INT_STATUS_reg

// ================================================

class hqm_system_csr_bridge_DIR_CQ_63_32_OCC_INT_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_32_OCC_INT;
  sla_ral_field CQ_33_OCC_INT;
  sla_ral_field CQ_34_OCC_INT;
  sla_ral_field CQ_35_OCC_INT;
  sla_ral_field CQ_36_OCC_INT;
  sla_ral_field CQ_37_OCC_INT;
  sla_ral_field CQ_38_OCC_INT;
  sla_ral_field CQ_39_OCC_INT;
  sla_ral_field CQ_40_OCC_INT;
  sla_ral_field CQ_41_OCC_INT;
  sla_ral_field CQ_42_OCC_INT;
  sla_ral_field CQ_43_OCC_INT;
  sla_ral_field CQ_44_OCC_INT;
  sla_ral_field CQ_45_OCC_INT;
  sla_ral_field CQ_46_OCC_INT;
  sla_ral_field CQ_47_OCC_INT;
  sla_ral_field CQ_48_OCC_INT;
  sla_ral_field CQ_49_OCC_INT;
  sla_ral_field CQ_50_OCC_INT;
  sla_ral_field CQ_51_OCC_INT;
  sla_ral_field CQ_52_OCC_INT;
  sla_ral_field CQ_53_OCC_INT;
  sla_ral_field CQ_54_OCC_INT;
  sla_ral_field CQ_55_OCC_INT;
  sla_ral_field CQ_56_OCC_INT;
  sla_ral_field CQ_57_OCC_INT;
  sla_ral_field CQ_58_OCC_INT;
  sla_ral_field CQ_59_OCC_INT;
  sla_ral_field CQ_60_OCC_INT;
  sla_ral_field CQ_61_OCC_INT;
  sla_ral_field CQ_62_OCC_INT;
  sla_ral_field CQ_63_OCC_INT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_CQ_63_32_OCC_INT_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_32_OCC_INT, CQ_32_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_32_OCC_INT, CQ_32_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_33_OCC_INT, CQ_33_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_33_OCC_INT, CQ_33_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_34_OCC_INT, CQ_34_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_34_OCC_INT, CQ_34_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_35_OCC_INT, CQ_35_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_35_OCC_INT, CQ_35_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_36_OCC_INT, CQ_36_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_36_OCC_INT, CQ_36_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_37_OCC_INT, CQ_37_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_37_OCC_INT, CQ_37_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_38_OCC_INT, CQ_38_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_38_OCC_INT, CQ_38_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_39_OCC_INT, CQ_39_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_39_OCC_INT, CQ_39_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_40_OCC_INT, CQ_40_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_40_OCC_INT, CQ_40_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_41_OCC_INT, CQ_41_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_41_OCC_INT, CQ_41_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_42_OCC_INT, CQ_42_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_42_OCC_INT, CQ_42_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_43_OCC_INT, CQ_43_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_43_OCC_INT, CQ_43_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_44_OCC_INT, CQ_44_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_44_OCC_INT, CQ_44_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_45_OCC_INT, CQ_45_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_45_OCC_INT, CQ_45_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_46_OCC_INT, CQ_46_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_46_OCC_INT, CQ_46_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_47_OCC_INT, CQ_47_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_47_OCC_INT, CQ_47_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_48_OCC_INT, CQ_48_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_48_OCC_INT, CQ_48_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_49_OCC_INT, CQ_49_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_49_OCC_INT, CQ_49_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_50_OCC_INT, CQ_50_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_50_OCC_INT, CQ_50_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_51_OCC_INT, CQ_51_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_51_OCC_INT, CQ_51_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_52_OCC_INT, CQ_52_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_52_OCC_INT, CQ_52_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_53_OCC_INT, CQ_53_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_53_OCC_INT, CQ_53_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_54_OCC_INT, CQ_54_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_54_OCC_INT, CQ_54_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_55_OCC_INT, CQ_55_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_55_OCC_INT, CQ_55_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_56_OCC_INT, CQ_56_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_56_OCC_INT, CQ_56_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_57_OCC_INT, CQ_57_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_57_OCC_INT, CQ_57_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_58_OCC_INT, CQ_58_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_58_OCC_INT, CQ_58_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_59_OCC_INT, CQ_59_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_59_OCC_INT, CQ_59_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_60_OCC_INT, CQ_60_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_60_OCC_INT, CQ_60_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_61_OCC_INT, CQ_61_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_61_OCC_INT, CQ_61_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_62_OCC_INT, CQ_62_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_62_OCC_INT, CQ_62_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_63_OCC_INT, CQ_63_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_63_OCC_INT, CQ_63_OCC_INT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_32_OCC_INT, CQ_32_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_32_OCC_INT, CQ_32_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_33_OCC_INT, CQ_33_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_33_OCC_INT, CQ_33_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_34_OCC_INT, CQ_34_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_34_OCC_INT, CQ_34_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_35_OCC_INT, CQ_35_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_35_OCC_INT, CQ_35_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_36_OCC_INT, CQ_36_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_36_OCC_INT, CQ_36_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_37_OCC_INT, CQ_37_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_37_OCC_INT, CQ_37_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_38_OCC_INT, CQ_38_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_38_OCC_INT, CQ_38_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_39_OCC_INT, CQ_39_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_39_OCC_INT, CQ_39_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_40_OCC_INT, CQ_40_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_40_OCC_INT, CQ_40_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_41_OCC_INT, CQ_41_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_41_OCC_INT, CQ_41_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_42_OCC_INT, CQ_42_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_42_OCC_INT, CQ_42_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_43_OCC_INT, CQ_43_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_43_OCC_INT, CQ_43_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_44_OCC_INT, CQ_44_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_44_OCC_INT, CQ_44_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_45_OCC_INT, CQ_45_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_45_OCC_INT, CQ_45_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_46_OCC_INT, CQ_46_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_46_OCC_INT, CQ_46_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_47_OCC_INT, CQ_47_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_47_OCC_INT, CQ_47_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_48_OCC_INT, CQ_48_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_48_OCC_INT, CQ_48_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_49_OCC_INT, CQ_49_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_49_OCC_INT, CQ_49_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_50_OCC_INT, CQ_50_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_50_OCC_INT, CQ_50_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_51_OCC_INT, CQ_51_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_51_OCC_INT, CQ_51_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_52_OCC_INT, CQ_52_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_52_OCC_INT, CQ_52_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_53_OCC_INT, CQ_53_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_53_OCC_INT, CQ_53_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_54_OCC_INT, CQ_54_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_54_OCC_INT, CQ_54_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_55_OCC_INT, CQ_55_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_55_OCC_INT, CQ_55_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_56_OCC_INT, CQ_56_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_56_OCC_INT, CQ_56_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_57_OCC_INT, CQ_57_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_57_OCC_INT, CQ_57_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_58_OCC_INT, CQ_58_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_58_OCC_INT, CQ_58_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_59_OCC_INT, CQ_59_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_59_OCC_INT, CQ_59_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_60_OCC_INT, CQ_60_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_60_OCC_INT, CQ_60_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_61_OCC_INT, CQ_61_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_61_OCC_INT, CQ_61_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_62_OCC_INT, CQ_62_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_62_OCC_INT, CQ_62_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_63_OCC_INT, CQ_63_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_63_OCC_INT, CQ_63_OCC_INT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_32_OCC_INT = new("CQ_32_OCC_INT", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT"});
    CQ_32_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_32_OCC_INT.set_rand_mode(0);
   CQ_32_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_32_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_32_OCC_INT ));

    CQ_33_OCC_INT = new("CQ_33_OCC_INT", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT"});
    CQ_33_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_33_OCC_INT.set_rand_mode(0);
   CQ_33_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_33_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_33_OCC_INT ));

    CQ_34_OCC_INT = new("CQ_34_OCC_INT", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT"});
    CQ_34_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_34_OCC_INT.set_rand_mode(0);
   CQ_34_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_34_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_34_OCC_INT ));

    CQ_35_OCC_INT = new("CQ_35_OCC_INT", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT"});
    CQ_35_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_35_OCC_INT.set_rand_mode(0);
   CQ_35_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_35_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_35_OCC_INT ));

    CQ_36_OCC_INT = new("CQ_36_OCC_INT", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT"});
    CQ_36_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_36_OCC_INT.set_rand_mode(0);
   CQ_36_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_36_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_36_OCC_INT ));

    CQ_37_OCC_INT = new("CQ_37_OCC_INT", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT"});
    CQ_37_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_37_OCC_INT.set_rand_mode(0);
   CQ_37_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_37_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_37_OCC_INT ));

    CQ_38_OCC_INT = new("CQ_38_OCC_INT", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT"});
    CQ_38_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_38_OCC_INT.set_rand_mode(0);
   CQ_38_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_38_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_38_OCC_INT ));

    CQ_39_OCC_INT = new("CQ_39_OCC_INT", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT"});
    CQ_39_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_39_OCC_INT.set_rand_mode(0);
   CQ_39_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_39_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_39_OCC_INT ));

    CQ_40_OCC_INT = new("CQ_40_OCC_INT", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT"});
    CQ_40_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_40_OCC_INT.set_rand_mode(0);
   CQ_40_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_40_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_40_OCC_INT ));

    CQ_41_OCC_INT = new("CQ_41_OCC_INT", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT"});
    CQ_41_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_41_OCC_INT.set_rand_mode(0);
   CQ_41_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_41_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_41_OCC_INT ));

    CQ_42_OCC_INT = new("CQ_42_OCC_INT", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT"});
    CQ_42_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_42_OCC_INT.set_rand_mode(0);
   CQ_42_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_42_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_42_OCC_INT ));

    CQ_43_OCC_INT = new("CQ_43_OCC_INT", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT"});
    CQ_43_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_43_OCC_INT.set_rand_mode(0);
   CQ_43_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_43_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_43_OCC_INT ));

    CQ_44_OCC_INT = new("CQ_44_OCC_INT", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT"});
    CQ_44_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_44_OCC_INT.set_rand_mode(0);
   CQ_44_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_44_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_44_OCC_INT ));

    CQ_45_OCC_INT = new("CQ_45_OCC_INT", "RW/1C/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT"});
    CQ_45_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_45_OCC_INT.set_rand_mode(0);
   CQ_45_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_45_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_45_OCC_INT ));

    CQ_46_OCC_INT = new("CQ_46_OCC_INT", "RW/1C/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT"});
    CQ_46_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_46_OCC_INT.set_rand_mode(0);
   CQ_46_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_46_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_46_OCC_INT ));

    CQ_47_OCC_INT = new("CQ_47_OCC_INT", "RW/1C/V", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT"});
    CQ_47_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_47_OCC_INT.set_rand_mode(0);
   CQ_47_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_47_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_47_OCC_INT ));

    CQ_48_OCC_INT = new("CQ_48_OCC_INT", "RW/1C/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT"});
    CQ_48_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_48_OCC_INT.set_rand_mode(0);
   CQ_48_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_48_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_48_OCC_INT ));

    CQ_49_OCC_INT = new("CQ_49_OCC_INT", "RW/1C/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT"});
    CQ_49_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_49_OCC_INT.set_rand_mode(0);
   CQ_49_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_49_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_49_OCC_INT ));

    CQ_50_OCC_INT = new("CQ_50_OCC_INT", "RW/1C/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT"});
    CQ_50_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_50_OCC_INT.set_rand_mode(0);
   CQ_50_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_50_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_50_OCC_INT ));

    CQ_51_OCC_INT = new("CQ_51_OCC_INT", "RW/1C/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT"});
    CQ_51_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_51_OCC_INT.set_rand_mode(0);
   CQ_51_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_51_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_51_OCC_INT ));

    CQ_52_OCC_INT = new("CQ_52_OCC_INT", "RW/1C/V", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT"});
    CQ_52_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_52_OCC_INT.set_rand_mode(0);
   CQ_52_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_52_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_52_OCC_INT ));

    CQ_53_OCC_INT = new("CQ_53_OCC_INT", "RW/1C/V", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT"});
    CQ_53_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_53_OCC_INT.set_rand_mode(0);
   CQ_53_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_53_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_53_OCC_INT ));

    CQ_54_OCC_INT = new("CQ_54_OCC_INT", "RW/1C/V", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT"});
    CQ_54_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_54_OCC_INT.set_rand_mode(0);
   CQ_54_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_54_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_54_OCC_INT ));

    CQ_55_OCC_INT = new("CQ_55_OCC_INT", "RW/1C/V", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT"});
    CQ_55_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_55_OCC_INT.set_rand_mode(0);
   CQ_55_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_55_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_55_OCC_INT ));

    CQ_56_OCC_INT = new("CQ_56_OCC_INT", "RW/1C/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT"});
    CQ_56_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_56_OCC_INT.set_rand_mode(0);
   CQ_56_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_56_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_56_OCC_INT ));

    CQ_57_OCC_INT = new("CQ_57_OCC_INT", "RW/1C/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT"});
    CQ_57_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_57_OCC_INT.set_rand_mode(0);
   CQ_57_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_57_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_57_OCC_INT ));

    CQ_58_OCC_INT = new("CQ_58_OCC_INT", "RW/1C/V", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT"});
    CQ_58_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_58_OCC_INT.set_rand_mode(0);
   CQ_58_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_58_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_58_OCC_INT ));

    CQ_59_OCC_INT = new("CQ_59_OCC_INT", "RW/1C/V", 1, 27, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT"});
    CQ_59_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_59_OCC_INT.set_rand_mode(0);
   CQ_59_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_59_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_59_OCC_INT ));

    CQ_60_OCC_INT = new("CQ_60_OCC_INT", "RW/1C/V", 1, 28, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT"});
    CQ_60_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_60_OCC_INT.set_rand_mode(0);
   CQ_60_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_60_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_60_OCC_INT ));

    CQ_61_OCC_INT = new("CQ_61_OCC_INT", "RW/1C/V", 1, 29, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT"});
    CQ_61_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_61_OCC_INT.set_rand_mode(0);
   CQ_61_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_61_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_61_OCC_INT ));

    CQ_62_OCC_INT = new("CQ_62_OCC_INT", "RW/1C/V", 1, 30, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT"});
    CQ_62_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_62_OCC_INT.set_rand_mode(0);
   CQ_62_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_62_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_62_OCC_INT ));

    CQ_63_OCC_INT = new("CQ_63_OCC_INT", "RW/1C/V", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT"});
    CQ_63_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_63_OCC_INT.set_rand_mode(0);
   CQ_63_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_63_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_63_OCC_INT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_CQ_63_32_OCC_INT_STATUS_reg) 
endclass : hqm_system_csr_bridge_DIR_CQ_63_32_OCC_INT_STATUS_reg

// ================================================

class hqm_system_csr_bridge_LDB_CQ_31_0_OCC_INT_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_0_OCC_INT;
  sla_ral_field CQ_1_OCC_INT;
  sla_ral_field CQ_2_OCC_INT;
  sla_ral_field CQ_3_OCC_INT;
  sla_ral_field CQ_4_OCC_INT;
  sla_ral_field CQ_5_OCC_INT;
  sla_ral_field CQ_6_OCC_INT;
  sla_ral_field CQ_7_OCC_INT;
  sla_ral_field CQ_8_OCC_INT;
  sla_ral_field CQ_9_OCC_INT;
  sla_ral_field CQ_10_OCC_INT;
  sla_ral_field CQ_11_OCC_INT;
  sla_ral_field CQ_12_OCC_INT;
  sla_ral_field CQ_13_OCC_INT;
  sla_ral_field CQ_14_OCC_INT;
  sla_ral_field CQ_15_OCC_INT;
  sla_ral_field CQ_16_OCC_INT;
  sla_ral_field CQ_17_OCC_INT;
  sla_ral_field CQ_18_OCC_INT;
  sla_ral_field CQ_19_OCC_INT;
  sla_ral_field CQ_20_OCC_INT;
  sla_ral_field CQ_21_OCC_INT;
  sla_ral_field CQ_22_OCC_INT;
  sla_ral_field CQ_23_OCC_INT;
  sla_ral_field CQ_24_OCC_INT;
  sla_ral_field CQ_25_OCC_INT;
  sla_ral_field CQ_26_OCC_INT;
  sla_ral_field CQ_27_OCC_INT;
  sla_ral_field CQ_28_OCC_INT;
  sla_ral_field CQ_29_OCC_INT;
  sla_ral_field CQ_30_OCC_INT;
  sla_ral_field CQ_31_OCC_INT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_CQ_31_0_OCC_INT_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_0_OCC_INT, CQ_0_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_0_OCC_INT, CQ_0_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_1_OCC_INT, CQ_1_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_1_OCC_INT, CQ_1_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_2_OCC_INT, CQ_2_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_2_OCC_INT, CQ_2_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_3_OCC_INT, CQ_3_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_3_OCC_INT, CQ_3_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_4_OCC_INT, CQ_4_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_4_OCC_INT, CQ_4_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_5_OCC_INT, CQ_5_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_5_OCC_INT, CQ_5_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_6_OCC_INT, CQ_6_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_6_OCC_INT, CQ_6_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_7_OCC_INT, CQ_7_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_7_OCC_INT, CQ_7_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_8_OCC_INT, CQ_8_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_8_OCC_INT, CQ_8_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_9_OCC_INT, CQ_9_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_9_OCC_INT, CQ_9_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_10_OCC_INT, CQ_10_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_10_OCC_INT, CQ_10_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_11_OCC_INT, CQ_11_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_11_OCC_INT, CQ_11_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_12_OCC_INT, CQ_12_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_12_OCC_INT, CQ_12_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_13_OCC_INT, CQ_13_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_13_OCC_INT, CQ_13_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_14_OCC_INT, CQ_14_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_14_OCC_INT, CQ_14_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_15_OCC_INT, CQ_15_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_15_OCC_INT, CQ_15_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_16_OCC_INT, CQ_16_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_16_OCC_INT, CQ_16_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_17_OCC_INT, CQ_17_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_17_OCC_INT, CQ_17_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_18_OCC_INT, CQ_18_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_18_OCC_INT, CQ_18_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_19_OCC_INT, CQ_19_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_19_OCC_INT, CQ_19_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_20_OCC_INT, CQ_20_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_20_OCC_INT, CQ_20_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_21_OCC_INT, CQ_21_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_21_OCC_INT, CQ_21_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_22_OCC_INT, CQ_22_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_22_OCC_INT, CQ_22_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_23_OCC_INT, CQ_23_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_23_OCC_INT, CQ_23_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_24_OCC_INT, CQ_24_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_24_OCC_INT, CQ_24_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_25_OCC_INT, CQ_25_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_25_OCC_INT, CQ_25_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_26_OCC_INT, CQ_26_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_26_OCC_INT, CQ_26_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_27_OCC_INT, CQ_27_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_27_OCC_INT, CQ_27_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_28_OCC_INT, CQ_28_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_28_OCC_INT, CQ_28_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_29_OCC_INT, CQ_29_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_29_OCC_INT, CQ_29_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_30_OCC_INT, CQ_30_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_30_OCC_INT, CQ_30_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_31_OCC_INT, CQ_31_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_31_OCC_INT, CQ_31_OCC_INT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_0_OCC_INT, CQ_0_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_0_OCC_INT, CQ_0_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_1_OCC_INT, CQ_1_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_1_OCC_INT, CQ_1_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_2_OCC_INT, CQ_2_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_2_OCC_INT, CQ_2_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_3_OCC_INT, CQ_3_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_3_OCC_INT, CQ_3_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_4_OCC_INT, CQ_4_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_4_OCC_INT, CQ_4_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_5_OCC_INT, CQ_5_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_5_OCC_INT, CQ_5_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_6_OCC_INT, CQ_6_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_6_OCC_INT, CQ_6_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_7_OCC_INT, CQ_7_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_7_OCC_INT, CQ_7_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_8_OCC_INT, CQ_8_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_8_OCC_INT, CQ_8_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_9_OCC_INT, CQ_9_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_9_OCC_INT, CQ_9_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_10_OCC_INT, CQ_10_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_10_OCC_INT, CQ_10_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_11_OCC_INT, CQ_11_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_11_OCC_INT, CQ_11_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_12_OCC_INT, CQ_12_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_12_OCC_INT, CQ_12_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_13_OCC_INT, CQ_13_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_13_OCC_INT, CQ_13_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_14_OCC_INT, CQ_14_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_14_OCC_INT, CQ_14_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_15_OCC_INT, CQ_15_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_15_OCC_INT, CQ_15_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_16_OCC_INT, CQ_16_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_16_OCC_INT, CQ_16_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_17_OCC_INT, CQ_17_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_17_OCC_INT, CQ_17_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_18_OCC_INT, CQ_18_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_18_OCC_INT, CQ_18_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_19_OCC_INT, CQ_19_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_19_OCC_INT, CQ_19_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_20_OCC_INT, CQ_20_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_20_OCC_INT, CQ_20_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_21_OCC_INT, CQ_21_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_21_OCC_INT, CQ_21_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_22_OCC_INT, CQ_22_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_22_OCC_INT, CQ_22_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_23_OCC_INT, CQ_23_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_23_OCC_INT, CQ_23_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_24_OCC_INT, CQ_24_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_24_OCC_INT, CQ_24_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_25_OCC_INT, CQ_25_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_25_OCC_INT, CQ_25_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_26_OCC_INT, CQ_26_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_26_OCC_INT, CQ_26_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_27_OCC_INT, CQ_27_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_27_OCC_INT, CQ_27_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_28_OCC_INT, CQ_28_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_28_OCC_INT, CQ_28_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_29_OCC_INT, CQ_29_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_29_OCC_INT, CQ_29_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_30_OCC_INT, CQ_30_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_30_OCC_INT, CQ_30_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_31_OCC_INT, CQ_31_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_31_OCC_INT, CQ_31_OCC_INT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_0_OCC_INT = new("CQ_0_OCC_INT", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT"});
    CQ_0_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_0_OCC_INT.set_rand_mode(0);
   CQ_0_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_0_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_0_OCC_INT ));

    CQ_1_OCC_INT = new("CQ_1_OCC_INT", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT"});
    CQ_1_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_1_OCC_INT.set_rand_mode(0);
   CQ_1_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_1_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_1_OCC_INT ));

    CQ_2_OCC_INT = new("CQ_2_OCC_INT", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT"});
    CQ_2_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_2_OCC_INT.set_rand_mode(0);
   CQ_2_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_2_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_2_OCC_INT ));

    CQ_3_OCC_INT = new("CQ_3_OCC_INT", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT"});
    CQ_3_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_3_OCC_INT.set_rand_mode(0);
   CQ_3_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_3_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_3_OCC_INT ));

    CQ_4_OCC_INT = new("CQ_4_OCC_INT", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT"});
    CQ_4_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_4_OCC_INT.set_rand_mode(0);
   CQ_4_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_4_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_4_OCC_INT ));

    CQ_5_OCC_INT = new("CQ_5_OCC_INT", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT"});
    CQ_5_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_5_OCC_INT.set_rand_mode(0);
   CQ_5_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_5_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_5_OCC_INT ));

    CQ_6_OCC_INT = new("CQ_6_OCC_INT", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT"});
    CQ_6_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_6_OCC_INT.set_rand_mode(0);
   CQ_6_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_6_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_6_OCC_INT ));

    CQ_7_OCC_INT = new("CQ_7_OCC_INT", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT"});
    CQ_7_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_7_OCC_INT.set_rand_mode(0);
   CQ_7_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_7_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_7_OCC_INT ));

    CQ_8_OCC_INT = new("CQ_8_OCC_INT", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT"});
    CQ_8_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_8_OCC_INT.set_rand_mode(0);
   CQ_8_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_8_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_8_OCC_INT ));

    CQ_9_OCC_INT = new("CQ_9_OCC_INT", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT"});
    CQ_9_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_9_OCC_INT.set_rand_mode(0);
   CQ_9_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_9_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_9_OCC_INT ));

    CQ_10_OCC_INT = new("CQ_10_OCC_INT", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT"});
    CQ_10_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_10_OCC_INT.set_rand_mode(0);
   CQ_10_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_10_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_10_OCC_INT ));

    CQ_11_OCC_INT = new("CQ_11_OCC_INT", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT"});
    CQ_11_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_11_OCC_INT.set_rand_mode(0);
   CQ_11_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_11_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_11_OCC_INT ));

    CQ_12_OCC_INT = new("CQ_12_OCC_INT", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT"});
    CQ_12_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_12_OCC_INT.set_rand_mode(0);
   CQ_12_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_12_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_12_OCC_INT ));

    CQ_13_OCC_INT = new("CQ_13_OCC_INT", "RW/1C/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT"});
    CQ_13_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_13_OCC_INT.set_rand_mode(0);
   CQ_13_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_13_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_13_OCC_INT ));

    CQ_14_OCC_INT = new("CQ_14_OCC_INT", "RW/1C/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT"});
    CQ_14_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_14_OCC_INT.set_rand_mode(0);
   CQ_14_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_14_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_14_OCC_INT ));

    CQ_15_OCC_INT = new("CQ_15_OCC_INT", "RW/1C/V", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT"});
    CQ_15_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_15_OCC_INT.set_rand_mode(0);
   CQ_15_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_15_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_15_OCC_INT ));

    CQ_16_OCC_INT = new("CQ_16_OCC_INT", "RW/1C/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT"});
    CQ_16_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_16_OCC_INT.set_rand_mode(0);
   CQ_16_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_16_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_16_OCC_INT ));

    CQ_17_OCC_INT = new("CQ_17_OCC_INT", "RW/1C/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT"});
    CQ_17_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_17_OCC_INT.set_rand_mode(0);
   CQ_17_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_17_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_17_OCC_INT ));

    CQ_18_OCC_INT = new("CQ_18_OCC_INT", "RW/1C/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT"});
    CQ_18_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_18_OCC_INT.set_rand_mode(0);
   CQ_18_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_18_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_18_OCC_INT ));

    CQ_19_OCC_INT = new("CQ_19_OCC_INT", "RW/1C/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT"});
    CQ_19_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_19_OCC_INT.set_rand_mode(0);
   CQ_19_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_19_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_19_OCC_INT ));

    CQ_20_OCC_INT = new("CQ_20_OCC_INT", "RW/1C/V", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT"});
    CQ_20_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_20_OCC_INT.set_rand_mode(0);
   CQ_20_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_20_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_20_OCC_INT ));

    CQ_21_OCC_INT = new("CQ_21_OCC_INT", "RW/1C/V", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT"});
    CQ_21_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_21_OCC_INT.set_rand_mode(0);
   CQ_21_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_21_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_21_OCC_INT ));

    CQ_22_OCC_INT = new("CQ_22_OCC_INT", "RW/1C/V", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT"});
    CQ_22_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_22_OCC_INT.set_rand_mode(0);
   CQ_22_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_22_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_22_OCC_INT ));

    CQ_23_OCC_INT = new("CQ_23_OCC_INT", "RW/1C/V", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT"});
    CQ_23_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_23_OCC_INT.set_rand_mode(0);
   CQ_23_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_23_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_23_OCC_INT ));

    CQ_24_OCC_INT = new("CQ_24_OCC_INT", "RW/1C/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT"});
    CQ_24_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_24_OCC_INT.set_rand_mode(0);
   CQ_24_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_24_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_24_OCC_INT ));

    CQ_25_OCC_INT = new("CQ_25_OCC_INT", "RW/1C/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT"});
    CQ_25_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_25_OCC_INT.set_rand_mode(0);
   CQ_25_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_25_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_25_OCC_INT ));

    CQ_26_OCC_INT = new("CQ_26_OCC_INT", "RW/1C/V", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT"});
    CQ_26_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_26_OCC_INT.set_rand_mode(0);
   CQ_26_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_26_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_26_OCC_INT ));

    CQ_27_OCC_INT = new("CQ_27_OCC_INT", "RW/1C/V", 1, 27, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT"});
    CQ_27_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_27_OCC_INT.set_rand_mode(0);
   CQ_27_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_27_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_27_OCC_INT ));

    CQ_28_OCC_INT = new("CQ_28_OCC_INT", "RW/1C/V", 1, 28, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT"});
    CQ_28_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_28_OCC_INT.set_rand_mode(0);
   CQ_28_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_28_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_28_OCC_INT ));

    CQ_29_OCC_INT = new("CQ_29_OCC_INT", "RW/1C/V", 1, 29, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT"});
    CQ_29_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_29_OCC_INT.set_rand_mode(0);
   CQ_29_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_29_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_29_OCC_INT ));

    CQ_30_OCC_INT = new("CQ_30_OCC_INT", "RW/1C/V", 1, 30, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT"});
    CQ_30_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_30_OCC_INT.set_rand_mode(0);
   CQ_30_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_30_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_30_OCC_INT ));

    CQ_31_OCC_INT = new("CQ_31_OCC_INT", "RW/1C/V", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT"});
    CQ_31_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_31_OCC_INT.set_rand_mode(0);
   CQ_31_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_31_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_31_OCC_INT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_CQ_31_0_OCC_INT_STATUS_reg) 
endclass : hqm_system_csr_bridge_LDB_CQ_31_0_OCC_INT_STATUS_reg

// ================================================

class hqm_system_csr_bridge_LDB_CQ_63_32_OCC_INT_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_32_OCC_INT;
  sla_ral_field CQ_33_OCC_INT;
  sla_ral_field CQ_34_OCC_INT;
  sla_ral_field CQ_35_OCC_INT;
  sla_ral_field CQ_36_OCC_INT;
  sla_ral_field CQ_37_OCC_INT;
  sla_ral_field CQ_38_OCC_INT;
  sla_ral_field CQ_39_OCC_INT;
  sla_ral_field CQ_40_OCC_INT;
  sla_ral_field CQ_41_OCC_INT;
  sla_ral_field CQ_42_OCC_INT;
  sla_ral_field CQ_43_OCC_INT;
  sla_ral_field CQ_44_OCC_INT;
  sla_ral_field CQ_45_OCC_INT;
  sla_ral_field CQ_46_OCC_INT;
  sla_ral_field CQ_47_OCC_INT;
  sla_ral_field CQ_48_OCC_INT;
  sla_ral_field CQ_49_OCC_INT;
  sla_ral_field CQ_50_OCC_INT;
  sla_ral_field CQ_51_OCC_INT;
  sla_ral_field CQ_52_OCC_INT;
  sla_ral_field CQ_53_OCC_INT;
  sla_ral_field CQ_54_OCC_INT;
  sla_ral_field CQ_55_OCC_INT;
  sla_ral_field CQ_56_OCC_INT;
  sla_ral_field CQ_57_OCC_INT;
  sla_ral_field CQ_58_OCC_INT;
  sla_ral_field CQ_59_OCC_INT;
  sla_ral_field CQ_60_OCC_INT;
  sla_ral_field CQ_61_OCC_INT;
  sla_ral_field CQ_62_OCC_INT;
  sla_ral_field CQ_63_OCC_INT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_CQ_63_32_OCC_INT_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_32_OCC_INT, CQ_32_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_32_OCC_INT, CQ_32_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_33_OCC_INT, CQ_33_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_33_OCC_INT, CQ_33_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_34_OCC_INT, CQ_34_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_34_OCC_INT, CQ_34_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_35_OCC_INT, CQ_35_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_35_OCC_INT, CQ_35_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_36_OCC_INT, CQ_36_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_36_OCC_INT, CQ_36_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_37_OCC_INT, CQ_37_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_37_OCC_INT, CQ_37_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_38_OCC_INT, CQ_38_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_38_OCC_INT, CQ_38_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_39_OCC_INT, CQ_39_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_39_OCC_INT, CQ_39_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_40_OCC_INT, CQ_40_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_40_OCC_INT, CQ_40_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_41_OCC_INT, CQ_41_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_41_OCC_INT, CQ_41_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_42_OCC_INT, CQ_42_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_42_OCC_INT, CQ_42_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_43_OCC_INT, CQ_43_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_43_OCC_INT, CQ_43_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_44_OCC_INT, CQ_44_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_44_OCC_INT, CQ_44_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_45_OCC_INT, CQ_45_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_45_OCC_INT, CQ_45_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_46_OCC_INT, CQ_46_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_46_OCC_INT, CQ_46_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_47_OCC_INT, CQ_47_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_47_OCC_INT, CQ_47_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_48_OCC_INT, CQ_48_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_48_OCC_INT, CQ_48_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_49_OCC_INT, CQ_49_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_49_OCC_INT, CQ_49_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_50_OCC_INT, CQ_50_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_50_OCC_INT, CQ_50_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_51_OCC_INT, CQ_51_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_51_OCC_INT, CQ_51_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_52_OCC_INT, CQ_52_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_52_OCC_INT, CQ_52_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_53_OCC_INT, CQ_53_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_53_OCC_INT, CQ_53_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_54_OCC_INT, CQ_54_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_54_OCC_INT, CQ_54_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_55_OCC_INT, CQ_55_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_55_OCC_INT, CQ_55_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_56_OCC_INT, CQ_56_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_56_OCC_INT, CQ_56_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_57_OCC_INT, CQ_57_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_57_OCC_INT, CQ_57_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_58_OCC_INT, CQ_58_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_58_OCC_INT, CQ_58_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_59_OCC_INT, CQ_59_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_59_OCC_INT, CQ_59_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_60_OCC_INT, CQ_60_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_60_OCC_INT, CQ_60_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_61_OCC_INT, CQ_61_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_61_OCC_INT, CQ_61_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_62_OCC_INT, CQ_62_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_62_OCC_INT, CQ_62_OCC_INT.desired, 0)
     `RAL_FIELD_CP(CQ_63_OCC_INT, CQ_63_OCC_INT.desired)
     `RAL_FIELD_CP_1(CQ_63_OCC_INT, CQ_63_OCC_INT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_32_OCC_INT, CQ_32_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_32_OCC_INT, CQ_32_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_33_OCC_INT, CQ_33_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_33_OCC_INT, CQ_33_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_34_OCC_INT, CQ_34_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_34_OCC_INT, CQ_34_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_35_OCC_INT, CQ_35_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_35_OCC_INT, CQ_35_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_36_OCC_INT, CQ_36_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_36_OCC_INT, CQ_36_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_37_OCC_INT, CQ_37_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_37_OCC_INT, CQ_37_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_38_OCC_INT, CQ_38_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_38_OCC_INT, CQ_38_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_39_OCC_INT, CQ_39_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_39_OCC_INT, CQ_39_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_40_OCC_INT, CQ_40_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_40_OCC_INT, CQ_40_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_41_OCC_INT, CQ_41_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_41_OCC_INT, CQ_41_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_42_OCC_INT, CQ_42_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_42_OCC_INT, CQ_42_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_43_OCC_INT, CQ_43_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_43_OCC_INT, CQ_43_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_44_OCC_INT, CQ_44_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_44_OCC_INT, CQ_44_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_45_OCC_INT, CQ_45_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_45_OCC_INT, CQ_45_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_46_OCC_INT, CQ_46_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_46_OCC_INT, CQ_46_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_47_OCC_INT, CQ_47_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_47_OCC_INT, CQ_47_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_48_OCC_INT, CQ_48_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_48_OCC_INT, CQ_48_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_49_OCC_INT, CQ_49_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_49_OCC_INT, CQ_49_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_50_OCC_INT, CQ_50_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_50_OCC_INT, CQ_50_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_51_OCC_INT, CQ_51_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_51_OCC_INT, CQ_51_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_52_OCC_INT, CQ_52_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_52_OCC_INT, CQ_52_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_53_OCC_INT, CQ_53_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_53_OCC_INT, CQ_53_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_54_OCC_INT, CQ_54_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_54_OCC_INT, CQ_54_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_55_OCC_INT, CQ_55_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_55_OCC_INT, CQ_55_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_56_OCC_INT, CQ_56_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_56_OCC_INT, CQ_56_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_57_OCC_INT, CQ_57_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_57_OCC_INT, CQ_57_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_58_OCC_INT, CQ_58_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_58_OCC_INT, CQ_58_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_59_OCC_INT, CQ_59_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_59_OCC_INT, CQ_59_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_60_OCC_INT, CQ_60_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_60_OCC_INT, CQ_60_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_61_OCC_INT, CQ_61_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_61_OCC_INT, CQ_61_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_62_OCC_INT, CQ_62_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_62_OCC_INT, CQ_62_OCC_INT.actual, 0)
     `RAL_FIELD_CP(CQ_63_OCC_INT, CQ_63_OCC_INT.actual)
     `RAL_FIELD_CP_1(CQ_63_OCC_INT, CQ_63_OCC_INT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_32_OCC_INT = new("CQ_32_OCC_INT", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT"});
    CQ_32_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_32_OCC_INT.set_rand_mode(0);
   CQ_32_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_32_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_32_OCC_INT ));

    CQ_33_OCC_INT = new("CQ_33_OCC_INT", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT"});
    CQ_33_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_33_OCC_INT.set_rand_mode(0);
   CQ_33_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_33_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_33_OCC_INT ));

    CQ_34_OCC_INT = new("CQ_34_OCC_INT", "RW/1C/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT"});
    CQ_34_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_34_OCC_INT.set_rand_mode(0);
   CQ_34_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_34_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_34_OCC_INT ));

    CQ_35_OCC_INT = new("CQ_35_OCC_INT", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT"});
    CQ_35_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_35_OCC_INT.set_rand_mode(0);
   CQ_35_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_35_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_35_OCC_INT ));

    CQ_36_OCC_INT = new("CQ_36_OCC_INT", "RW/1C/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT"});
    CQ_36_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_36_OCC_INT.set_rand_mode(0);
   CQ_36_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_36_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_36_OCC_INT ));

    CQ_37_OCC_INT = new("CQ_37_OCC_INT", "RW/1C/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT"});
    CQ_37_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_37_OCC_INT.set_rand_mode(0);
   CQ_37_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_37_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_37_OCC_INT ));

    CQ_38_OCC_INT = new("CQ_38_OCC_INT", "RW/1C/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT"});
    CQ_38_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_38_OCC_INT.set_rand_mode(0);
   CQ_38_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_38_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_38_OCC_INT ));

    CQ_39_OCC_INT = new("CQ_39_OCC_INT", "RW/1C/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT"});
    CQ_39_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_39_OCC_INT.set_rand_mode(0);
   CQ_39_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_39_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_39_OCC_INT ));

    CQ_40_OCC_INT = new("CQ_40_OCC_INT", "RW/1C/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT"});
    CQ_40_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_40_OCC_INT.set_rand_mode(0);
   CQ_40_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_40_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_40_OCC_INT ));

    CQ_41_OCC_INT = new("CQ_41_OCC_INT", "RW/1C/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT"});
    CQ_41_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_41_OCC_INT.set_rand_mode(0);
   CQ_41_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_41_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_41_OCC_INT ));

    CQ_42_OCC_INT = new("CQ_42_OCC_INT", "RW/1C/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT"});
    CQ_42_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_42_OCC_INT.set_rand_mode(0);
   CQ_42_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_42_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_42_OCC_INT ));

    CQ_43_OCC_INT = new("CQ_43_OCC_INT", "RW/1C/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT"});
    CQ_43_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_43_OCC_INT.set_rand_mode(0);
   CQ_43_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_43_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_43_OCC_INT ));

    CQ_44_OCC_INT = new("CQ_44_OCC_INT", "RW/1C/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT"});
    CQ_44_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_44_OCC_INT.set_rand_mode(0);
   CQ_44_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_44_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_44_OCC_INT ));

    CQ_45_OCC_INT = new("CQ_45_OCC_INT", "RW/1C/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT"});
    CQ_45_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_45_OCC_INT.set_rand_mode(0);
   CQ_45_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_45_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_45_OCC_INT ));

    CQ_46_OCC_INT = new("CQ_46_OCC_INT", "RW/1C/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT"});
    CQ_46_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_46_OCC_INT.set_rand_mode(0);
   CQ_46_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_46_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_46_OCC_INT ));

    CQ_47_OCC_INT = new("CQ_47_OCC_INT", "RW/1C/V", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT"});
    CQ_47_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_47_OCC_INT.set_rand_mode(0);
   CQ_47_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_47_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_47_OCC_INT ));

    CQ_48_OCC_INT = new("CQ_48_OCC_INT", "RW/1C/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT"});
    CQ_48_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_48_OCC_INT.set_rand_mode(0);
   CQ_48_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_48_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_48_OCC_INT ));

    CQ_49_OCC_INT = new("CQ_49_OCC_INT", "RW/1C/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT"});
    CQ_49_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_49_OCC_INT.set_rand_mode(0);
   CQ_49_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_49_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_49_OCC_INT ));

    CQ_50_OCC_INT = new("CQ_50_OCC_INT", "RW/1C/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT"});
    CQ_50_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_50_OCC_INT.set_rand_mode(0);
   CQ_50_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_50_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_50_OCC_INT ));

    CQ_51_OCC_INT = new("CQ_51_OCC_INT", "RW/1C/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT"});
    CQ_51_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_51_OCC_INT.set_rand_mode(0);
   CQ_51_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_51_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_51_OCC_INT ));

    CQ_52_OCC_INT = new("CQ_52_OCC_INT", "RW/1C/V", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT"});
    CQ_52_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_52_OCC_INT.set_rand_mode(0);
   CQ_52_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_52_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_52_OCC_INT ));

    CQ_53_OCC_INT = new("CQ_53_OCC_INT", "RW/1C/V", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT"});
    CQ_53_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_53_OCC_INT.set_rand_mode(0);
   CQ_53_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_53_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_53_OCC_INT ));

    CQ_54_OCC_INT = new("CQ_54_OCC_INT", "RW/1C/V", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT"});
    CQ_54_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_54_OCC_INT.set_rand_mode(0);
   CQ_54_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_54_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_54_OCC_INT ));

    CQ_55_OCC_INT = new("CQ_55_OCC_INT", "RW/1C/V", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT"});
    CQ_55_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_55_OCC_INT.set_rand_mode(0);
   CQ_55_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_55_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_55_OCC_INT ));

    CQ_56_OCC_INT = new("CQ_56_OCC_INT", "RW/1C/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT"});
    CQ_56_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_56_OCC_INT.set_rand_mode(0);
   CQ_56_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_56_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_56_OCC_INT ));

    CQ_57_OCC_INT = new("CQ_57_OCC_INT", "RW/1C/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT"});
    CQ_57_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_57_OCC_INT.set_rand_mode(0);
   CQ_57_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_57_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_57_OCC_INT ));

    CQ_58_OCC_INT = new("CQ_58_OCC_INT", "RW/1C/V", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT"});
    CQ_58_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_58_OCC_INT.set_rand_mode(0);
   CQ_58_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_58_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_58_OCC_INT ));

    CQ_59_OCC_INT = new("CQ_59_OCC_INT", "RW/1C/V", 1, 27, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT"});
    CQ_59_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_59_OCC_INT.set_rand_mode(0);
   CQ_59_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_59_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_59_OCC_INT ));

    CQ_60_OCC_INT = new("CQ_60_OCC_INT", "RW/1C/V", 1, 28, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT"});
    CQ_60_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_60_OCC_INT.set_rand_mode(0);
   CQ_60_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_60_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_60_OCC_INT ));

    CQ_61_OCC_INT = new("CQ_61_OCC_INT", "RW/1C/V", 1, 29, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT"});
    CQ_61_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_61_OCC_INT.set_rand_mode(0);
   CQ_61_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_61_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_61_OCC_INT ));

    CQ_62_OCC_INT = new("CQ_62_OCC_INT", "RW/1C/V", 1, 30, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT"});
    CQ_62_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_62_OCC_INT.set_rand_mode(0);
   CQ_62_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_62_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_62_OCC_INT ));

    CQ_63_OCC_INT = new("CQ_63_OCC_INT", "RW/1C/V", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT"});
    CQ_63_OCC_INT.set_powerwell("vcccfn_gated");
    CQ_63_OCC_INT.set_rand_mode(0);
   CQ_63_OCC_INT.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_63_OCC_INT.set_logical_path("HQMID");
    void'(add_field( CQ_63_OCC_INT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_CQ_63_32_OCC_INT_STATUS_reg) 
endclass : hqm_system_csr_bridge_LDB_CQ_63_32_OCC_INT_STATUS_reg

// ================================================

class hqm_system_csr_bridge_SYS_ALARM_INT_ENABLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_ADDR_OVERFLOW_ERROR;
  sla_ral_field INGRESS_PERR;
  sla_ral_field EGRESS_PERR;
  sla_ral_field ALARM_PERR;
  sla_ral_field VF_TO_PF_ISR_PEND_ERROR;
  sla_ral_field PF_TO_VF_ISR_PEND_ERROR;
  sla_ral_field SCH_SM_ERROR;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field SCH_WB_PERR;
  sla_ral_field ALARM_INT_ERR;
  sla_ral_field RF_IPAR_ERROR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SYS_ALARM_INT_ENABLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_ADDR_OVERFLOW_ERROR, CQ_ADDR_OVERFLOW_ERROR.desired)
     `RAL_FIELD_CP_1(CQ_ADDR_OVERFLOW_ERROR, CQ_ADDR_OVERFLOW_ERROR.desired, 0)
     `RAL_FIELD_CP(INGRESS_PERR, INGRESS_PERR.desired)
     `RAL_FIELD_CP_1(INGRESS_PERR, INGRESS_PERR.desired, 0)
     `RAL_FIELD_CP(EGRESS_PERR, EGRESS_PERR.desired)
     `RAL_FIELD_CP_1(EGRESS_PERR, EGRESS_PERR.desired, 0)
     `RAL_FIELD_CP(ALARM_PERR, ALARM_PERR.desired)
     `RAL_FIELD_CP_1(ALARM_PERR, ALARM_PERR.desired, 0)
     `RAL_FIELD_CP(VF_TO_PF_ISR_PEND_ERROR, VF_TO_PF_ISR_PEND_ERROR.desired)
     `RAL_FIELD_CP_1(VF_TO_PF_ISR_PEND_ERROR, VF_TO_PF_ISR_PEND_ERROR.desired, 0)
     `RAL_FIELD_CP(PF_TO_VF_ISR_PEND_ERROR, PF_TO_VF_ISR_PEND_ERROR.desired)
     `RAL_FIELD_CP_1(PF_TO_VF_ISR_PEND_ERROR, PF_TO_VF_ISR_PEND_ERROR.desired, 0)
     `RAL_FIELD_CP(SCH_SM_ERROR, SCH_SM_ERROR.desired)
     `RAL_FIELD_CP_1(SCH_SM_ERROR, SCH_SM_ERROR.desired, 0)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(SCH_WB_PERR, SCH_WB_PERR.desired)
     `RAL_FIELD_CP_1(SCH_WB_PERR, SCH_WB_PERR.desired, 0)
     `RAL_FIELD_CP(ALARM_INT_ERR, ALARM_INT_ERR.desired)
     `RAL_FIELD_CP_1(ALARM_INT_ERR, ALARM_INT_ERR.desired, 0)
     `RAL_FIELD_CP(RF_IPAR_ERROR, RF_IPAR_ERROR.desired)
     `RAL_FIELD_CP_1(RF_IPAR_ERROR, RF_IPAR_ERROR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_ADDR_OVERFLOW_ERROR, CQ_ADDR_OVERFLOW_ERROR.actual)
     `RAL_FIELD_CP_1(CQ_ADDR_OVERFLOW_ERROR, CQ_ADDR_OVERFLOW_ERROR.actual, 0)
     `RAL_FIELD_CP(INGRESS_PERR, INGRESS_PERR.actual)
     `RAL_FIELD_CP_1(INGRESS_PERR, INGRESS_PERR.actual, 0)
     `RAL_FIELD_CP(EGRESS_PERR, EGRESS_PERR.actual)
     `RAL_FIELD_CP_1(EGRESS_PERR, EGRESS_PERR.actual, 0)
     `RAL_FIELD_CP(ALARM_PERR, ALARM_PERR.actual)
     `RAL_FIELD_CP_1(ALARM_PERR, ALARM_PERR.actual, 0)
     `RAL_FIELD_CP(VF_TO_PF_ISR_PEND_ERROR, VF_TO_PF_ISR_PEND_ERROR.actual)
     `RAL_FIELD_CP_1(VF_TO_PF_ISR_PEND_ERROR, VF_TO_PF_ISR_PEND_ERROR.actual, 0)
     `RAL_FIELD_CP(PF_TO_VF_ISR_PEND_ERROR, PF_TO_VF_ISR_PEND_ERROR.actual)
     `RAL_FIELD_CP_1(PF_TO_VF_ISR_PEND_ERROR, PF_TO_VF_ISR_PEND_ERROR.actual, 0)
     `RAL_FIELD_CP(SCH_SM_ERROR, SCH_SM_ERROR.actual)
     `RAL_FIELD_CP_1(SCH_SM_ERROR, SCH_SM_ERROR.actual, 0)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(SCH_WB_PERR, SCH_WB_PERR.actual)
     `RAL_FIELD_CP_1(SCH_WB_PERR, SCH_WB_PERR.actual, 0)
     `RAL_FIELD_CP(ALARM_INT_ERR, ALARM_INT_ERR.actual)
     `RAL_FIELD_CP_1(ALARM_INT_ERR, ALARM_INT_ERR.actual, 0)
     `RAL_FIELD_CP(RF_IPAR_ERROR, RF_IPAR_ERROR.actual)
     `RAL_FIELD_CP_1(RF_IPAR_ERROR, RF_IPAR_ERROR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_ADDR_OVERFLOW_ERROR = new("CQ_ADDR_OVERFLOW_ERROR", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.CQ_ADDR_OVERFLOW_ERROR"});
    CQ_ADDR_OVERFLOW_ERROR.set_powerwell("vcccfn_gated");
    CQ_ADDR_OVERFLOW_ERROR.set_rand_mode(0);
   CQ_ADDR_OVERFLOW_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_ADDR_OVERFLOW_ERROR.set_logical_path("HQMID");
    void'(add_field( CQ_ADDR_OVERFLOW_ERROR ));

    INGRESS_PERR = new("INGRESS_PERR", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.INGRESS_PERR"});
    INGRESS_PERR.set_powerwell("vcccfn_gated");
    INGRESS_PERR.set_rand_mode(0);
   INGRESS_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_PERR.set_logical_path("HQMID");
    void'(add_field( INGRESS_PERR ));

    EGRESS_PERR = new("EGRESS_PERR", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.EGRESS_PERR"});
    EGRESS_PERR.set_powerwell("vcccfn_gated");
    EGRESS_PERR.set_rand_mode(0);
   EGRESS_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_PERR.set_logical_path("HQMID");
    void'(add_field( EGRESS_PERR ));

    ALARM_PERR = new("ALARM_PERR", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.ALARM_PERR"});
    ALARM_PERR.set_powerwell("vcccfn_gated");
    ALARM_PERR.set_rand_mode(0);
   ALARM_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    ALARM_PERR.set_logical_path("HQMID");
    void'(add_field( ALARM_PERR ));

    VF_TO_PF_ISR_PEND_ERROR = new("VF_TO_PF_ISR_PEND_ERROR", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.VF_TO_PF_ISR_PEND_ERROR"});
    VF_TO_PF_ISR_PEND_ERROR.set_powerwell("vcccfn_gated");
    VF_TO_PF_ISR_PEND_ERROR.set_rand_mode(0);
   VF_TO_PF_ISR_PEND_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    VF_TO_PF_ISR_PEND_ERROR.set_logical_path("HQMID");
    void'(add_field( VF_TO_PF_ISR_PEND_ERROR ));

    PF_TO_VF_ISR_PEND_ERROR = new("PF_TO_VF_ISR_PEND_ERROR", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.PF_TO_VF_ISR_PEND_ERROR"});
    PF_TO_VF_ISR_PEND_ERROR.set_powerwell("vcccfn_gated");
    PF_TO_VF_ISR_PEND_ERROR.set_rand_mode(0);
   PF_TO_VF_ISR_PEND_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    PF_TO_VF_ISR_PEND_ERROR.set_logical_path("HQMID");
    void'(add_field( PF_TO_VF_ISR_PEND_ERROR ));

    SCH_SM_ERROR = new("SCH_SM_ERROR", "RW", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.SCH_SM_ERROR"});
    SCH_SM_ERROR.set_powerwell("vcccfn_gated");
    SCH_SM_ERROR.set_rand_mode(0);
   SCH_SM_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_SM_ERROR.set_logical_path("HQMID");
    void'(add_field( SCH_SM_ERROR ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RW", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.FIFO_UNDERFLOW"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RW", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.FIFO_OVERFLOW"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    SCH_WB_PERR = new("SCH_WB_PERR", "RW", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.SCH_WB_PERR"});
    SCH_WB_PERR.set_powerwell("vcccfn_gated");
    SCH_WB_PERR.set_rand_mode(0);
   SCH_WB_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_PERR.set_logical_path("HQMID");
    void'(add_field( SCH_WB_PERR ));

    ALARM_INT_ERR = new("ALARM_INT_ERR", "RW", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.ALARM_INT_ERR"});
    ALARM_INT_ERR.set_powerwell("vcccfn_gated");
    ALARM_INT_ERR.set_rand_mode(0);
   ALARM_INT_ERR.set_reset_signame("hqm_inp_gated_rst_n");
    ALARM_INT_ERR.set_logical_path("HQMID");
    void'(add_field( ALARM_INT_ERR ));

    RF_IPAR_ERROR = new("RF_IPAR_ERROR", "RW", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.RF_IPAR_ERROR"});
    RF_IPAR_ERROR.set_powerwell("vcccfn_gated");
    RF_IPAR_ERROR.set_rand_mode(0);
   RF_IPAR_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    RF_IPAR_ERROR.set_logical_path("HQMID");
    void'(add_field( RF_IPAR_ERROR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SYS_ALARM_INT_ENABLE_reg) 
endclass : hqm_system_csr_bridge_SYS_ALARM_INT_ENABLE_reg

// ================================================

class hqm_system_csr_bridge_SYS_ALARM_MB_ECC_INT_ENABLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SCH_WB_MB_ECC_ERROR_0;
  sla_ral_field SCH_WB_MB_ECC_ERROR_1;
  sla_ral_field SCH_WB_MB_ECC_ERROR_2;
  sla_ral_field SCH_WB_MB_ECC_ERROR_3;
  sla_ral_field SYSTEM_CSR_MB_ECC_ERROR;
  sla_ral_field INGRESS_MB_ECC_ERROR_0;
  sla_ral_field INGRESS_MB_ECC_ERROR_1;
  sla_ral_field INGRESS_MB_ECC_ERROR_2;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SYS_ALARM_MB_ECC_INT_ENABLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_WB_MB_ECC_ERROR_0, SCH_WB_MB_ECC_ERROR_0.desired)
     `RAL_FIELD_CP_1(SCH_WB_MB_ECC_ERROR_0, SCH_WB_MB_ECC_ERROR_0.desired, 0)
     `RAL_FIELD_CP(SCH_WB_MB_ECC_ERROR_1, SCH_WB_MB_ECC_ERROR_1.desired)
     `RAL_FIELD_CP_1(SCH_WB_MB_ECC_ERROR_1, SCH_WB_MB_ECC_ERROR_1.desired, 0)
     `RAL_FIELD_CP(SCH_WB_MB_ECC_ERROR_2, SCH_WB_MB_ECC_ERROR_2.desired)
     `RAL_FIELD_CP_1(SCH_WB_MB_ECC_ERROR_2, SCH_WB_MB_ECC_ERROR_2.desired, 0)
     `RAL_FIELD_CP(SCH_WB_MB_ECC_ERROR_3, SCH_WB_MB_ECC_ERROR_3.desired)
     `RAL_FIELD_CP_1(SCH_WB_MB_ECC_ERROR_3, SCH_WB_MB_ECC_ERROR_3.desired, 0)
     `RAL_FIELD_CP(SYSTEM_CSR_MB_ECC_ERROR, SYSTEM_CSR_MB_ECC_ERROR.desired)
     `RAL_FIELD_CP_1(SYSTEM_CSR_MB_ECC_ERROR, SYSTEM_CSR_MB_ECC_ERROR.desired, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERROR_0, INGRESS_MB_ECC_ERROR_0.desired)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERROR_0, INGRESS_MB_ECC_ERROR_0.desired, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERROR_1, INGRESS_MB_ECC_ERROR_1.desired)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERROR_1, INGRESS_MB_ECC_ERROR_1.desired, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERROR_2, INGRESS_MB_ECC_ERROR_2.desired)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERROR_2, INGRESS_MB_ECC_ERROR_2.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_WB_MB_ECC_ERROR_0, SCH_WB_MB_ECC_ERROR_0.actual)
     `RAL_FIELD_CP_1(SCH_WB_MB_ECC_ERROR_0, SCH_WB_MB_ECC_ERROR_0.actual, 0)
     `RAL_FIELD_CP(SCH_WB_MB_ECC_ERROR_1, SCH_WB_MB_ECC_ERROR_1.actual)
     `RAL_FIELD_CP_1(SCH_WB_MB_ECC_ERROR_1, SCH_WB_MB_ECC_ERROR_1.actual, 0)
     `RAL_FIELD_CP(SCH_WB_MB_ECC_ERROR_2, SCH_WB_MB_ECC_ERROR_2.actual)
     `RAL_FIELD_CP_1(SCH_WB_MB_ECC_ERROR_2, SCH_WB_MB_ECC_ERROR_2.actual, 0)
     `RAL_FIELD_CP(SCH_WB_MB_ECC_ERROR_3, SCH_WB_MB_ECC_ERROR_3.actual)
     `RAL_FIELD_CP_1(SCH_WB_MB_ECC_ERROR_3, SCH_WB_MB_ECC_ERROR_3.actual, 0)
     `RAL_FIELD_CP(SYSTEM_CSR_MB_ECC_ERROR, SYSTEM_CSR_MB_ECC_ERROR.actual)
     `RAL_FIELD_CP_1(SYSTEM_CSR_MB_ECC_ERROR, SYSTEM_CSR_MB_ECC_ERROR.actual, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERROR_0, INGRESS_MB_ECC_ERROR_0.actual)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERROR_0, INGRESS_MB_ECC_ERROR_0.actual, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERROR_1, INGRESS_MB_ECC_ERROR_1.actual)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERROR_1, INGRESS_MB_ECC_ERROR_1.actual, 0)
     `RAL_FIELD_CP(INGRESS_MB_ECC_ERROR_2, INGRESS_MB_ECC_ERROR_2.actual)
     `RAL_FIELD_CP_1(INGRESS_MB_ECC_ERROR_2, INGRESS_MB_ECC_ERROR_2.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SCH_WB_MB_ECC_ERROR_0 = new("SCH_WB_MB_ECC_ERROR_0", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_0"});
    SCH_WB_MB_ECC_ERROR_0.set_powerwell("vcccfn_gated");
    SCH_WB_MB_ECC_ERROR_0.set_rand_mode(0);
   SCH_WB_MB_ECC_ERROR_0.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_MB_ECC_ERROR_0.set_logical_path("HQMID");
    void'(add_field( SCH_WB_MB_ECC_ERROR_0 ));

    SCH_WB_MB_ECC_ERROR_1 = new("SCH_WB_MB_ECC_ERROR_1", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_1"});
    SCH_WB_MB_ECC_ERROR_1.set_powerwell("vcccfn_gated");
    SCH_WB_MB_ECC_ERROR_1.set_rand_mode(0);
   SCH_WB_MB_ECC_ERROR_1.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_MB_ECC_ERROR_1.set_logical_path("HQMID");
    void'(add_field( SCH_WB_MB_ECC_ERROR_1 ));

    SCH_WB_MB_ECC_ERROR_2 = new("SCH_WB_MB_ECC_ERROR_2", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_2"});
    SCH_WB_MB_ECC_ERROR_2.set_powerwell("vcccfn_gated");
    SCH_WB_MB_ECC_ERROR_2.set_rand_mode(0);
   SCH_WB_MB_ECC_ERROR_2.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_MB_ECC_ERROR_2.set_logical_path("HQMID");
    void'(add_field( SCH_WB_MB_ECC_ERROR_2 ));

    SCH_WB_MB_ECC_ERROR_3 = new("SCH_WB_MB_ECC_ERROR_3", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_3"});
    SCH_WB_MB_ECC_ERROR_3.set_powerwell("vcccfn_gated");
    SCH_WB_MB_ECC_ERROR_3.set_rand_mode(0);
   SCH_WB_MB_ECC_ERROR_3.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_MB_ECC_ERROR_3.set_logical_path("HQMID");
    void'(add_field( SCH_WB_MB_ECC_ERROR_3 ));

    SYSTEM_CSR_MB_ECC_ERROR = new("SYSTEM_CSR_MB_ECC_ERROR", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SYSTEM_CSR_MB_ECC_ERROR"});
    SYSTEM_CSR_MB_ECC_ERROR.set_powerwell("vcccfn_gated");
    SYSTEM_CSR_MB_ECC_ERROR.set_rand_mode(0);
   SYSTEM_CSR_MB_ECC_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    SYSTEM_CSR_MB_ECC_ERROR.set_logical_path("HQMID");
    void'(add_field( SYSTEM_CSR_MB_ECC_ERROR ));

    INGRESS_MB_ECC_ERROR_0 = new("INGRESS_MB_ECC_ERROR_0", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_0"});
    INGRESS_MB_ECC_ERROR_0.set_powerwell("vcccfn_gated");
    INGRESS_MB_ECC_ERROR_0.set_rand_mode(0);
   INGRESS_MB_ECC_ERROR_0.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_MB_ECC_ERROR_0.set_logical_path("HQMID");
    void'(add_field( INGRESS_MB_ECC_ERROR_0 ));

    INGRESS_MB_ECC_ERROR_1 = new("INGRESS_MB_ECC_ERROR_1", "RW", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_1"});
    INGRESS_MB_ECC_ERROR_1.set_powerwell("vcccfn_gated");
    INGRESS_MB_ECC_ERROR_1.set_rand_mode(0);
   INGRESS_MB_ECC_ERROR_1.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_MB_ECC_ERROR_1.set_logical_path("HQMID");
    void'(add_field( INGRESS_MB_ECC_ERROR_1 ));

    INGRESS_MB_ECC_ERROR_2 = new("INGRESS_MB_ECC_ERROR_2", "RW", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_2"});
    INGRESS_MB_ECC_ERROR_2.set_powerwell("vcccfn_gated");
    INGRESS_MB_ECC_ERROR_2.set_rand_mode(0);
   INGRESS_MB_ECC_ERROR_2.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_MB_ECC_ERROR_2.set_logical_path("HQMID");
    void'(add_field( INGRESS_MB_ECC_ERROR_2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SYS_ALARM_MB_ECC_INT_ENABLE_reg) 
endclass : hqm_system_csr_bridge_SYS_ALARM_MB_ECC_INT_ENABLE_reg

// ================================================

class hqm_system_csr_bridge_SYS_ALARM_SB_ECC_INT_ENABLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SCH_WB_SB_ECC_ERROR_0;
  sla_ral_field SCH_WB_SB_ECC_ERROR_1;
  sla_ral_field SCH_WB_SB_ECC_ERROR_2;
  sla_ral_field SCH_WB_SB_ECC_ERROR_3;
  sla_ral_field SYSTEM_CSR_SB_ECC_ERROR;
  sla_ral_field INGRESS_SB_ECC_ERROR_0;
  sla_ral_field INGRESS_SB_ECC_ERROR_1;
  sla_ral_field INGRESS_SB_ECC_ERROR_2;
  sla_ral_field INGRESS_SB_ECC_ERROR_3;
  sla_ral_field INGRESS_SB_ECC_ERROR_4;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SYS_ALARM_SB_ECC_INT_ENABLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_WB_SB_ECC_ERROR_0, SCH_WB_SB_ECC_ERROR_0.desired)
     `RAL_FIELD_CP_1(SCH_WB_SB_ECC_ERROR_0, SCH_WB_SB_ECC_ERROR_0.desired, 0)
     `RAL_FIELD_CP(SCH_WB_SB_ECC_ERROR_1, SCH_WB_SB_ECC_ERROR_1.desired)
     `RAL_FIELD_CP_1(SCH_WB_SB_ECC_ERROR_1, SCH_WB_SB_ECC_ERROR_1.desired, 0)
     `RAL_FIELD_CP(SCH_WB_SB_ECC_ERROR_2, SCH_WB_SB_ECC_ERROR_2.desired)
     `RAL_FIELD_CP_1(SCH_WB_SB_ECC_ERROR_2, SCH_WB_SB_ECC_ERROR_2.desired, 0)
     `RAL_FIELD_CP(SCH_WB_SB_ECC_ERROR_3, SCH_WB_SB_ECC_ERROR_3.desired)
     `RAL_FIELD_CP_1(SCH_WB_SB_ECC_ERROR_3, SCH_WB_SB_ECC_ERROR_3.desired, 0)
     `RAL_FIELD_CP(SYSTEM_CSR_SB_ECC_ERROR, SYSTEM_CSR_SB_ECC_ERROR.desired)
     `RAL_FIELD_CP_1(SYSTEM_CSR_SB_ECC_ERROR, SYSTEM_CSR_SB_ECC_ERROR.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_0, INGRESS_SB_ECC_ERROR_0.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_0, INGRESS_SB_ECC_ERROR_0.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_1, INGRESS_SB_ECC_ERROR_1.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_1, INGRESS_SB_ECC_ERROR_1.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_2, INGRESS_SB_ECC_ERROR_2.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_2, INGRESS_SB_ECC_ERROR_2.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_3, INGRESS_SB_ECC_ERROR_3.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_3, INGRESS_SB_ECC_ERROR_3.desired, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_4, INGRESS_SB_ECC_ERROR_4.desired)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_4, INGRESS_SB_ECC_ERROR_4.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_WB_SB_ECC_ERROR_0, SCH_WB_SB_ECC_ERROR_0.actual)
     `RAL_FIELD_CP_1(SCH_WB_SB_ECC_ERROR_0, SCH_WB_SB_ECC_ERROR_0.actual, 0)
     `RAL_FIELD_CP(SCH_WB_SB_ECC_ERROR_1, SCH_WB_SB_ECC_ERROR_1.actual)
     `RAL_FIELD_CP_1(SCH_WB_SB_ECC_ERROR_1, SCH_WB_SB_ECC_ERROR_1.actual, 0)
     `RAL_FIELD_CP(SCH_WB_SB_ECC_ERROR_2, SCH_WB_SB_ECC_ERROR_2.actual)
     `RAL_FIELD_CP_1(SCH_WB_SB_ECC_ERROR_2, SCH_WB_SB_ECC_ERROR_2.actual, 0)
     `RAL_FIELD_CP(SCH_WB_SB_ECC_ERROR_3, SCH_WB_SB_ECC_ERROR_3.actual)
     `RAL_FIELD_CP_1(SCH_WB_SB_ECC_ERROR_3, SCH_WB_SB_ECC_ERROR_3.actual, 0)
     `RAL_FIELD_CP(SYSTEM_CSR_SB_ECC_ERROR, SYSTEM_CSR_SB_ECC_ERROR.actual)
     `RAL_FIELD_CP_1(SYSTEM_CSR_SB_ECC_ERROR, SYSTEM_CSR_SB_ECC_ERROR.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_0, INGRESS_SB_ECC_ERROR_0.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_0, INGRESS_SB_ECC_ERROR_0.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_1, INGRESS_SB_ECC_ERROR_1.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_1, INGRESS_SB_ECC_ERROR_1.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_2, INGRESS_SB_ECC_ERROR_2.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_2, INGRESS_SB_ECC_ERROR_2.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_3, INGRESS_SB_ECC_ERROR_3.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_3, INGRESS_SB_ECC_ERROR_3.actual, 0)
     `RAL_FIELD_CP(INGRESS_SB_ECC_ERROR_4, INGRESS_SB_ECC_ERROR_4.actual)
     `RAL_FIELD_CP_1(INGRESS_SB_ECC_ERROR_4, INGRESS_SB_ECC_ERROR_4.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SCH_WB_SB_ECC_ERROR_0 = new("SCH_WB_SB_ECC_ERROR_0", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_0"});
    SCH_WB_SB_ECC_ERROR_0.set_powerwell("vcccfn_gated");
    SCH_WB_SB_ECC_ERROR_0.set_rand_mode(0);
   SCH_WB_SB_ECC_ERROR_0.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_SB_ECC_ERROR_0.set_logical_path("HQMID");
    void'(add_field( SCH_WB_SB_ECC_ERROR_0 ));

    SCH_WB_SB_ECC_ERROR_1 = new("SCH_WB_SB_ECC_ERROR_1", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_1"});
    SCH_WB_SB_ECC_ERROR_1.set_powerwell("vcccfn_gated");
    SCH_WB_SB_ECC_ERROR_1.set_rand_mode(0);
   SCH_WB_SB_ECC_ERROR_1.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_SB_ECC_ERROR_1.set_logical_path("HQMID");
    void'(add_field( SCH_WB_SB_ECC_ERROR_1 ));

    SCH_WB_SB_ECC_ERROR_2 = new("SCH_WB_SB_ECC_ERROR_2", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_2"});
    SCH_WB_SB_ECC_ERROR_2.set_powerwell("vcccfn_gated");
    SCH_WB_SB_ECC_ERROR_2.set_rand_mode(0);
   SCH_WB_SB_ECC_ERROR_2.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_SB_ECC_ERROR_2.set_logical_path("HQMID");
    void'(add_field( SCH_WB_SB_ECC_ERROR_2 ));

    SCH_WB_SB_ECC_ERROR_3 = new("SCH_WB_SB_ECC_ERROR_3", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_3"});
    SCH_WB_SB_ECC_ERROR_3.set_powerwell("vcccfn_gated");
    SCH_WB_SB_ECC_ERROR_3.set_rand_mode(0);
   SCH_WB_SB_ECC_ERROR_3.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_SB_ECC_ERROR_3.set_logical_path("HQMID");
    void'(add_field( SCH_WB_SB_ECC_ERROR_3 ));

    SYSTEM_CSR_SB_ECC_ERROR = new("SYSTEM_CSR_SB_ECC_ERROR", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SYSTEM_CSR_SB_ECC_ERROR"});
    SYSTEM_CSR_SB_ECC_ERROR.set_powerwell("vcccfn_gated");
    SYSTEM_CSR_SB_ECC_ERROR.set_rand_mode(0);
   SYSTEM_CSR_SB_ECC_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    SYSTEM_CSR_SB_ECC_ERROR.set_logical_path("HQMID");
    void'(add_field( SYSTEM_CSR_SB_ECC_ERROR ));

    INGRESS_SB_ECC_ERROR_0 = new("INGRESS_SB_ECC_ERROR_0", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_0"});
    INGRESS_SB_ECC_ERROR_0.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERROR_0.set_rand_mode(0);
   INGRESS_SB_ECC_ERROR_0.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERROR_0.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERROR_0 ));

    INGRESS_SB_ECC_ERROR_1 = new("INGRESS_SB_ECC_ERROR_1", "RW", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_1"});
    INGRESS_SB_ECC_ERROR_1.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERROR_1.set_rand_mode(0);
   INGRESS_SB_ECC_ERROR_1.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERROR_1.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERROR_1 ));

    INGRESS_SB_ECC_ERROR_2 = new("INGRESS_SB_ECC_ERROR_2", "RW", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_2"});
    INGRESS_SB_ECC_ERROR_2.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERROR_2.set_rand_mode(0);
   INGRESS_SB_ECC_ERROR_2.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERROR_2.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERROR_2 ));

    INGRESS_SB_ECC_ERROR_3 = new("INGRESS_SB_ECC_ERROR_3", "RW", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_3"});
    INGRESS_SB_ECC_ERROR_3.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERROR_3.set_rand_mode(0);
   INGRESS_SB_ECC_ERROR_3.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERROR_3.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERROR_3 ));

    INGRESS_SB_ECC_ERROR_4 = new("INGRESS_SB_ECC_ERROR_4", "RW", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_4"});
    INGRESS_SB_ECC_ERROR_4.set_powerwell("vcccfn_gated");
    INGRESS_SB_ECC_ERROR_4.set_rand_mode(0);
   INGRESS_SB_ECC_ERROR_4.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_SB_ECC_ERROR_4.set_logical_path("HQMID");
    void'(add_field( INGRESS_SB_ECC_ERROR_4 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SYS_ALARM_SB_ECC_INT_ENABLE_reg) 
endclass : hqm_system_csr_bridge_SYS_ALARM_SB_ECC_INT_ENABLE_reg

// ================================================

class hqm_system_csr_bridge_ALARM_PF_SYND0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDROME;
  sla_ral_field RTYPE;
  sla_ral_field IS_LDB;
  sla_ral_field CLS;
  sla_ral_field AID;
  sla_ral_field UNIT;
  sla_ral_field SOURCE;
  sla_ral_field MORE;
  sla_ral_field VALID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_PF_SYND0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDROME, SYNDROME.desired)
     `RAL_FIELD_CP_8(SYNDROME, SYNDROME.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RTYPE, RTYPE.desired)
     `RAL_FIELD_CP_2(RTYPE, RTYPE.desired, 0,1)
     `RAL_FIELD_CP(IS_LDB, IS_LDB.desired)
     `RAL_FIELD_CP_1(IS_LDB, IS_LDB.desired, 0)
     `RAL_FIELD_CP(CLS, CLS.desired)
     `RAL_FIELD_CP_2(CLS, CLS.desired, 0,1)
     `RAL_FIELD_CP(AID, AID.desired)
     `RAL_FIELD_CP_6(AID, AID.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(UNIT, UNIT.desired)
     `RAL_FIELD_CP_4(UNIT, UNIT.desired, 0,1,2,3)
     `RAL_FIELD_CP(SOURCE, SOURCE.desired)
     `RAL_FIELD_CP_4(SOURCE, SOURCE.desired, 0,1,2,3)
     `RAL_FIELD_CP(MORE, MORE.desired)
     `RAL_FIELD_CP_1(MORE, MORE.desired, 0)
     `RAL_FIELD_CP(VALID, VALID.desired)
     `RAL_FIELD_CP_1(VALID, VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDROME, SYNDROME.actual)
     `RAL_FIELD_CP_8(SYNDROME, SYNDROME.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RTYPE, RTYPE.actual)
     `RAL_FIELD_CP_2(RTYPE, RTYPE.actual, 0,1)
     `RAL_FIELD_CP(IS_LDB, IS_LDB.actual)
     `RAL_FIELD_CP_1(IS_LDB, IS_LDB.actual, 0)
     `RAL_FIELD_CP(CLS, CLS.actual)
     `RAL_FIELD_CP_2(CLS, CLS.actual, 0,1)
     `RAL_FIELD_CP(AID, AID.actual)
     `RAL_FIELD_CP_6(AID, AID.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(UNIT, UNIT.actual)
     `RAL_FIELD_CP_4(UNIT, UNIT.actual, 0,1,2,3)
     `RAL_FIELD_CP(SOURCE, SOURCE.actual)
     `RAL_FIELD_CP_4(SOURCE, SOURCE.actual, 0,1,2,3)
     `RAL_FIELD_CP(MORE, MORE.actual)
     `RAL_FIELD_CP_1(MORE, MORE.actual, 0)
     `RAL_FIELD_CP(VALID, VALID.actual)
     `RAL_FIELD_CP_1(VALID, VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDROME = new("SYNDROME", "RO/V", 8, 0, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[7:0]"});
    SYNDROME.set_powerwell("vcccfn_gated");
    SYNDROME.set_rand_mode(0);
   SYNDROME.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDROME.set_logical_path("HQMID");
    void'(add_field( SYNDROME ));

    RTYPE = new("RTYPE", "RO/V", 2, 8, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[9:8]"});
    RTYPE.set_powerwell("vcccfn_gated");
    RTYPE.set_rand_mode(0);
   RTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    RTYPE.set_logical_path("HQMID");
    void'(add_field( RTYPE ));

    IS_LDB = new("IS_LDB", "RO/V", 1, 13, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[13:13]"});
    IS_LDB.set_powerwell("vcccfn_gated");
    IS_LDB.set_rand_mode(0);
   IS_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    IS_LDB.set_logical_path("HQMID");
    void'(add_field( IS_LDB ));

    CLS = new("CLS", "RO/V", 2, 14, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[15:14]"});
    CLS.set_powerwell("vcccfn_gated");
    CLS.set_rand_mode(0);
   CLS.set_reset_signame("hqm_inp_gated_rst_n");
    CLS.set_logical_path("HQMID");
    void'(add_field( CLS ));

    AID = new("AID", "RO/V", 6, 16, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[21:16]"});
    AID.set_powerwell("vcccfn_gated");
    AID.set_rand_mode(0);
   AID.set_reset_signame("hqm_inp_gated_rst_n");
    AID.set_logical_path("HQMID");
    void'(add_field( AID ));

    UNIT = new("UNIT", "RO/V", 4, 22, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[25:22]"});
    UNIT.set_powerwell("vcccfn_gated");
    UNIT.set_rand_mode(0);
   UNIT.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT.set_logical_path("HQMID");
    void'(add_field( UNIT ));

    SOURCE = new("SOURCE", "RO/V", 4, 26, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[29:26]"});
    SOURCE.set_powerwell("vcccfn_gated");
    SOURCE.set_rand_mode(0);
   SOURCE.set_reset_signame("hqm_inp_gated_rst_n");
    SOURCE.set_logical_path("HQMID");
    void'(add_field( SOURCE ));

    MORE = new("MORE", "RW/1C/V", 1, 30, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_more_q"});
    MORE.set_powerwell("vcccfn_gated");
    MORE.set_rand_mode(0);
   MORE.set_reset_signame("hqm_inp_gated_rst_n");
    MORE.set_logical_path("HQMID");
    void'(add_field( MORE ));

    VALID = new("VALID", "RW/1C/V", 1, 31, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_v_q"});
    VALID.set_powerwell("vcccfn_gated");
    VALID.set_rand_mode(0);
   VALID.set_reset_signame("hqm_inp_gated_rst_n");
    VALID.set_logical_path("HQMID");
    void'(add_field( VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_PF_SYND0_reg) 
endclass : hqm_system_csr_bridge_ALARM_PF_SYND0_reg

// ================================================

class hqm_system_csr_bridge_ALARM_PF_SYND1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DSI;
  sla_ral_field QID;
  sla_ral_field QTYPE;
  sla_ral_field QPRI;
  sla_ral_field MSG_TYPE;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_PF_SYND1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DSI, DSI.desired)
     `RAL_FIELD_CP_16(DSI, DSI.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(QID, QID.desired)
     `RAL_FIELD_CP_8(QID, QID.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QTYPE, QTYPE.desired)
     `RAL_FIELD_CP_2(QTYPE, QTYPE.desired, 0,1)
     `RAL_FIELD_CP(QPRI, QPRI.desired)
     `RAL_FIELD_CP_3(QPRI, QPRI.desired, 0,1,2)
     `RAL_FIELD_CP(MSG_TYPE, MSG_TYPE.desired)
     `RAL_FIELD_CP_3(MSG_TYPE, MSG_TYPE.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DSI, DSI.actual)
     `RAL_FIELD_CP_16(DSI, DSI.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(QID, QID.actual)
     `RAL_FIELD_CP_8(QID, QID.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QTYPE, QTYPE.actual)
     `RAL_FIELD_CP_2(QTYPE, QTYPE.actual, 0,1)
     `RAL_FIELD_CP(QPRI, QPRI.actual)
     `RAL_FIELD_CP_3(QPRI, QPRI.actual, 0,1,2)
     `RAL_FIELD_CP(MSG_TYPE, MSG_TYPE.actual)
     `RAL_FIELD_CP_3(MSG_TYPE, MSG_TYPE.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DSI = new("DSI", "RO/V", 16, 0, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[45:30]"});
    DSI.set_powerwell("vcccfn_gated");
    DSI.set_rand_mode(0);
   DSI.set_reset_signame("hqm_inp_gated_rst_n");
    DSI.set_logical_path("HQMID");
    void'(add_field( DSI ));

    QID = new("QID", "RO/V", 8, 16, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[53:46]"});
    QID.set_powerwell("vcccfn_gated");
    QID.set_rand_mode(0);
   QID.set_reset_signame("hqm_inp_gated_rst_n");
    QID.set_logical_path("HQMID");
    void'(add_field( QID ));

    QTYPE = new("QTYPE", "RO/V", 2, 24, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[55:54]"});
    QTYPE.set_powerwell("vcccfn_gated");
    QTYPE.set_rand_mode(0);
   QTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    QTYPE.set_logical_path("HQMID");
    void'(add_field( QTYPE ));

    QPRI = new("QPRI", "RO/V", 3, 26, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[58:56]"});
    QPRI.set_powerwell("vcccfn_gated");
    QPRI.set_rand_mode(0);
   QPRI.set_reset_signame("hqm_inp_gated_rst_n");
    QPRI.set_logical_path("HQMID");
    void'(add_field( QPRI ));

    MSG_TYPE = new("MSG_TYPE", "RO/V", 3, 29, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[61:59]"});
    MSG_TYPE.set_powerwell("vcccfn_gated");
    MSG_TYPE.set_rand_mode(0);
   MSG_TYPE.set_reset_signame("hqm_inp_gated_rst_n");
    MSG_TYPE.set_logical_path("HQMID");
    void'(add_field( MSG_TYPE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_PF_SYND1_reg) 
endclass : hqm_system_csr_bridge_ALARM_PF_SYND1_reg

// ================================================

class hqm_system_csr_bridge_ALARM_PF_SYND2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LOCK_ID;
  sla_ral_field MEAS;
  sla_ral_field DEBUG;
  sla_ral_field CQ_POP;
  sla_ral_field QE_UHL;
  sla_ral_field QE_ORSP;
  sla_ral_field QE_VALID;
  sla_ral_field CQ_INT_REARM;
  sla_ral_field DSI_ERROR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_PF_SYND2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LOCK_ID, LOCK_ID.desired)
     `RAL_FIELD_CP_16(LOCK_ID, LOCK_ID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(MEAS, MEAS.desired)
     `RAL_FIELD_CP_1(MEAS, MEAS.desired, 0)
     `RAL_FIELD_CP(DEBUG, DEBUG.desired)
     `RAL_FIELD_CP_7(DEBUG, DEBUG.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(CQ_POP, CQ_POP.desired)
     `RAL_FIELD_CP_1(CQ_POP, CQ_POP.desired, 0)
     `RAL_FIELD_CP(QE_UHL, QE_UHL.desired)
     `RAL_FIELD_CP_1(QE_UHL, QE_UHL.desired, 0)
     `RAL_FIELD_CP(QE_ORSP, QE_ORSP.desired)
     `RAL_FIELD_CP_1(QE_ORSP, QE_ORSP.desired, 0)
     `RAL_FIELD_CP(QE_VALID, QE_VALID.desired)
     `RAL_FIELD_CP_1(QE_VALID, QE_VALID.desired, 0)
     `RAL_FIELD_CP(CQ_INT_REARM, CQ_INT_REARM.desired)
     `RAL_FIELD_CP_1(CQ_INT_REARM, CQ_INT_REARM.desired, 0)
     `RAL_FIELD_CP(DSI_ERROR, DSI_ERROR.desired)
     `RAL_FIELD_CP_1(DSI_ERROR, DSI_ERROR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LOCK_ID, LOCK_ID.actual)
     `RAL_FIELD_CP_16(LOCK_ID, LOCK_ID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(MEAS, MEAS.actual)
     `RAL_FIELD_CP_1(MEAS, MEAS.actual, 0)
     `RAL_FIELD_CP(DEBUG, DEBUG.actual)
     `RAL_FIELD_CP_7(DEBUG, DEBUG.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(CQ_POP, CQ_POP.actual)
     `RAL_FIELD_CP_1(CQ_POP, CQ_POP.actual, 0)
     `RAL_FIELD_CP(QE_UHL, QE_UHL.actual)
     `RAL_FIELD_CP_1(QE_UHL, QE_UHL.actual, 0)
     `RAL_FIELD_CP(QE_ORSP, QE_ORSP.actual)
     `RAL_FIELD_CP_1(QE_ORSP, QE_ORSP.actual, 0)
     `RAL_FIELD_CP(QE_VALID, QE_VALID.actual)
     `RAL_FIELD_CP_1(QE_VALID, QE_VALID.actual, 0)
     `RAL_FIELD_CP(CQ_INT_REARM, CQ_INT_REARM.actual)
     `RAL_FIELD_CP_1(CQ_INT_REARM, CQ_INT_REARM.actual, 0)
     `RAL_FIELD_CP(DSI_ERROR, DSI_ERROR.actual)
     `RAL_FIELD_CP_1(DSI_ERROR, DSI_ERROR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LOCK_ID = new("LOCK_ID", "RO/V", 16, 0, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[77:62]"});
    LOCK_ID.set_powerwell("vcccfn_gated");
    LOCK_ID.set_rand_mode(0);
   LOCK_ID.set_reset_signame("hqm_inp_gated_rst_n");
    LOCK_ID.set_logical_path("HQMID");
    void'(add_field( LOCK_ID ));

    MEAS = new("MEAS", "RO/V", 1, 16, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[78:78]"});
    MEAS.set_powerwell("vcccfn_gated");
    MEAS.set_rand_mode(0);
   MEAS.set_reset_signame("hqm_inp_gated_rst_n");
    MEAS.set_logical_path("HQMID");
    void'(add_field( MEAS ));

    DEBUG = new("DEBUG", "RO/V", 7, 17, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[85:79]"});
    DEBUG.set_powerwell("vcccfn_gated");
    DEBUG.set_rand_mode(0);
   DEBUG.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG.set_logical_path("HQMID");
    void'(add_field( DEBUG ));

    CQ_POP = new("CQ_POP", "RO/V", 1, 24, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[86:86]"});
    CQ_POP.set_powerwell("vcccfn_gated");
    CQ_POP.set_rand_mode(0);
   CQ_POP.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_POP.set_logical_path("HQMID");
    void'(add_field( CQ_POP ));

    QE_UHL = new("QE_UHL", "RO/V", 1, 25, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[87:87]"});
    QE_UHL.set_powerwell("vcccfn_gated");
    QE_UHL.set_rand_mode(0);
   QE_UHL.set_reset_signame("hqm_inp_gated_rst_n");
    QE_UHL.set_logical_path("HQMID");
    void'(add_field( QE_UHL ));

    QE_ORSP = new("QE_ORSP", "RO/V", 1, 26, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[88:88]"});
    QE_ORSP.set_powerwell("vcccfn_gated");
    QE_ORSP.set_rand_mode(0);
   QE_ORSP.set_reset_signame("hqm_inp_gated_rst_n");
    QE_ORSP.set_logical_path("HQMID");
    void'(add_field( QE_ORSP ));

    QE_VALID = new("QE_VALID", "RO/V", 1, 27, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[89:89]"});
    QE_VALID.set_powerwell("vcccfn_gated");
    QE_VALID.set_rand_mode(0);
   QE_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    QE_VALID.set_logical_path("HQMID");
    void'(add_field( QE_VALID ));

    CQ_INT_REARM = new("CQ_INT_REARM", "RO/V", 1, 28, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[90:90]"});
    CQ_INT_REARM.set_powerwell("vcccfn_gated");
    CQ_INT_REARM.set_rand_mode(0);
   CQ_INT_REARM.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_INT_REARM.set_logical_path("HQMID");
    void'(add_field( CQ_INT_REARM ));

    DSI_ERROR = new("DSI_ERROR", "RO/V", 1, 29, {"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[91:91]"});
    DSI_ERROR.set_powerwell("vcccfn_gated");
    DSI_ERROR.set_rand_mode(0);
   DSI_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    DSI_ERROR.set_logical_path("HQMID");
    void'(add_field( DSI_ERROR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_PF_SYND2_reg) 
endclass : hqm_system_csr_bridge_ALARM_PF_SYND2_reg

// ================================================

class hqm_system_csr_bridge_ALARM_HW_SYND_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDROME;
  sla_ral_field RTYPE;
  sla_ral_field ALARM;
  sla_ral_field CWD;
  sla_ral_field VF_PF_MB;
  sla_ral_field RSVD0;
  sla_ral_field CLS;
  sla_ral_field AID;
  sla_ral_field UNIT;
  sla_ral_field SOURCE;
  sla_ral_field MORE;
  sla_ral_field VALID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_HW_SYND_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDROME, SYNDROME.desired)
     `RAL_FIELD_CP_8(SYNDROME, SYNDROME.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RTYPE, RTYPE.desired)
     `RAL_FIELD_CP_2(RTYPE, RTYPE.desired, 0,1)
     `RAL_FIELD_CP(ALARM, ALARM.desired)
     `RAL_FIELD_CP_1(ALARM, ALARM.desired, 0)
     `RAL_FIELD_CP(CWD, CWD.desired)
     `RAL_FIELD_CP_1(CWD, CWD.desired, 0)
     `RAL_FIELD_CP(VF_PF_MB, VF_PF_MB.desired)
     `RAL_FIELD_CP_1(VF_PF_MB, VF_PF_MB.desired, 0)
     `RAL_FIELD_CP(RSVD0, RSVD0.desired)
     `RAL_FIELD_CP_1(RSVD0, RSVD0.desired, 0)
     `RAL_FIELD_CP(CLS, CLS.desired)
     `RAL_FIELD_CP_2(CLS, CLS.desired, 0,1)
     `RAL_FIELD_CP(AID, AID.desired)
     `RAL_FIELD_CP_6(AID, AID.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(UNIT, UNIT.desired)
     `RAL_FIELD_CP_4(UNIT, UNIT.desired, 0,1,2,3)
     `RAL_FIELD_CP(SOURCE, SOURCE.desired)
     `RAL_FIELD_CP_4(SOURCE, SOURCE.desired, 0,1,2,3)
     `RAL_FIELD_CP(MORE, MORE.desired)
     `RAL_FIELD_CP_1(MORE, MORE.desired, 0)
     `RAL_FIELD_CP(VALID, VALID.desired)
     `RAL_FIELD_CP_1(VALID, VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDROME, SYNDROME.actual)
     `RAL_FIELD_CP_8(SYNDROME, SYNDROME.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RTYPE, RTYPE.actual)
     `RAL_FIELD_CP_2(RTYPE, RTYPE.actual, 0,1)
     `RAL_FIELD_CP(ALARM, ALARM.actual)
     `RAL_FIELD_CP_1(ALARM, ALARM.actual, 0)
     `RAL_FIELD_CP(CWD, CWD.actual)
     `RAL_FIELD_CP_1(CWD, CWD.actual, 0)
     `RAL_FIELD_CP(VF_PF_MB, VF_PF_MB.actual)
     `RAL_FIELD_CP_1(VF_PF_MB, VF_PF_MB.actual, 0)
     `RAL_FIELD_CP(RSVD0, RSVD0.actual)
     `RAL_FIELD_CP_1(RSVD0, RSVD0.actual, 0)
     `RAL_FIELD_CP(CLS, CLS.actual)
     `RAL_FIELD_CP_2(CLS, CLS.actual, 0,1)
     `RAL_FIELD_CP(AID, AID.actual)
     `RAL_FIELD_CP_6(AID, AID.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(UNIT, UNIT.actual)
     `RAL_FIELD_CP_4(UNIT, UNIT.actual, 0,1,2,3)
     `RAL_FIELD_CP(SOURCE, SOURCE.actual)
     `RAL_FIELD_CP_4(SOURCE, SOURCE.actual, 0,1,2,3)
     `RAL_FIELD_CP(MORE, MORE.actual)
     `RAL_FIELD_CP_1(MORE, MORE.actual, 0)
     `RAL_FIELD_CP(VALID, VALID.actual)
     `RAL_FIELD_CP_1(VALID, VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDROME = new("SYNDROME", "RO/V", 8, 0, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[7:0]"});
    SYNDROME.set_powerwell("vcccfn_gated");
    SYNDROME.set_rand_mode(0);
   SYNDROME.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDROME.set_logical_path("HQMID");
    void'(add_field( SYNDROME ));

    RTYPE = new("RTYPE", "RO/V", 2, 8, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[9:8]"});
    RTYPE.set_powerwell("vcccfn_gated");
    RTYPE.set_rand_mode(0);
   RTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    RTYPE.set_logical_path("HQMID");
    void'(add_field( RTYPE ));

    ALARM = new("ALARM", "RO/V", 1, 10, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[10:10]"});
    ALARM.set_powerwell("vcccfn_gated");
    ALARM.set_rand_mode(0);
   ALARM.set_reset_signame("hqm_inp_gated_rst_n");
    ALARM.set_logical_path("HQMID");
    void'(add_field( ALARM ));

    CWD = new("CWD", "RO/V", 1, 11, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[11:11]"});
    CWD.set_powerwell("vcccfn_gated");
    CWD.set_rand_mode(0);
   CWD.set_reset_signame("hqm_inp_gated_rst_n");
    CWD.set_logical_path("HQMID");
    void'(add_field( CWD ));

    VF_PF_MB = new("VF_PF_MB", "RO/V", 1, 12, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[12:12]"});
    VF_PF_MB.set_powerwell("vcccfn_gated");
    VF_PF_MB.set_rand_mode(0);
   VF_PF_MB.set_reset_signame("hqm_inp_gated_rst_n");
    VF_PF_MB.set_logical_path("HQMID");
    void'(add_field( VF_PF_MB ));

    RSVD0 = new("RSVD0", "RO/V", 1, 13, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[13:13]"});
    RSVD0.set_powerwell("vcccfn_gated");
    RSVD0.set_rand_mode(0);
   RSVD0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD0.set_logical_path("HQMID");
    void'(add_field( RSVD0 ));

    CLS = new("CLS", "RO/V", 2, 14, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[15:14]"});
    CLS.set_powerwell("vcccfn_gated");
    CLS.set_rand_mode(0);
   CLS.set_reset_signame("hqm_inp_gated_rst_n");
    CLS.set_logical_path("HQMID");
    void'(add_field( CLS ));

    AID = new("AID", "RO/V", 6, 16, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[21:16]"});
    AID.set_powerwell("vcccfn_gated");
    AID.set_rand_mode(0);
   AID.set_reset_signame("hqm_inp_gated_rst_n");
    AID.set_logical_path("HQMID");
    void'(add_field( AID ));

    UNIT = new("UNIT", "RO/V", 4, 22, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[25:22]"});
    UNIT.set_powerwell("vcccfn_gated");
    UNIT.set_rand_mode(0);
   UNIT.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT.set_logical_path("HQMID");
    void'(add_field( UNIT ));

    SOURCE = new("SOURCE", "RO/V", 4, 26, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[29:26]"});
    SOURCE.set_powerwell("vcccfn_gated");
    SOURCE.set_rand_mode(0);
   SOURCE.set_reset_signame("hqm_inp_gated_rst_n");
    SOURCE.set_logical_path("HQMID");
    void'(add_field( SOURCE ));

    MORE = new("MORE", "RW/1C/V", 1, 30, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_more_q"});
    MORE.set_powerwell("vcccfn_gated");
    MORE.set_rand_mode(0);
   MORE.set_reset_signame("hqm_inp_gated_rst_n");
    MORE.set_logical_path("HQMID");
    void'(add_field( MORE ));

    VALID = new("VALID", "RW/1C/V", 1, 31, {"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_v_q"});
    VALID.set_powerwell("vcccfn_gated");
    VALID.set_rand_mode(0);
   VALID.set_reset_signame("hqm_inp_gated_rst_n");
    VALID.set_logical_path("HQMID");
    void'(add_field( VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_HW_SYND_reg) 
endclass : hqm_system_csr_bridge_ALARM_HW_SYND_reg

// ================================================

class hqm_system_csr_bridge_VF_LDB_VPP_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VPP_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_VF_LDB_VPP_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VPP_V, VPP_V.desired)
     `RAL_FIELD_CP_1(VPP_V, VPP_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VPP_V, VPP_V.actual)
     `RAL_FIELD_CP_1(VPP_V, VPP_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VPP_V = new("VPP_V", "RW", 1, 0, {""});
    VPP_V.set_powerwell("vcccfn_gated");
    VPP_V.set_rand_mode(0);
   VPP_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VPP_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_VF_LDB_VPP_V_reg) 
endclass : hqm_system_csr_bridge_VF_LDB_VPP_V_reg

// ================================================

class hqm_system_csr_bridge_VF_LDB_VPP2PP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PP;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_VF_LDB_VPP2PP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP, PP.desired)
     `RAL_FIELD_CP_6(PP, PP.desired, 0,1,2,3,4,5)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP, PP.actual)
     `RAL_FIELD_CP_6(PP, PP.actual, 0,1,2,3,4,5)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PP = new("PP", "RW", 6, 0, {""});
    PP.set_powerwell("vcccfn_gated");
    PP.set_rand_mode(0);
   PP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_VF_LDB_VPP2PP_reg) 
endclass : hqm_system_csr_bridge_VF_LDB_VPP2PP_reg

// ================================================

class hqm_system_csr_bridge_VF_DIR_VPP_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VPP_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_VF_DIR_VPP_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VPP_V, VPP_V.desired)
     `RAL_FIELD_CP_1(VPP_V, VPP_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VPP_V, VPP_V.actual)
     `RAL_FIELD_CP_1(VPP_V, VPP_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VPP_V = new("VPP_V", "RW", 1, 0, {""});
    VPP_V.set_powerwell("vcccfn_gated");
    VPP_V.set_rand_mode(0);
   VPP_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VPP_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_VF_DIR_VPP_V_reg) 
endclass : hqm_system_csr_bridge_VF_DIR_VPP_V_reg

// ================================================

class hqm_system_csr_bridge_VF_DIR_VPP2PP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PP;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_VF_DIR_VPP2PP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP, PP.desired)
     `RAL_FIELD_CP_6(PP, PP.desired, 0,1,2,3,4,5)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP, PP.actual)
     `RAL_FIELD_CP_6(PP, PP.actual, 0,1,2,3,4,5)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PP = new("PP", "RW", 6, 0, {""});
    PP.set_powerwell("vcccfn_gated");
    PP.set_rand_mode(0);
   PP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_VF_DIR_VPP2PP_reg) 
endclass : hqm_system_csr_bridge_VF_DIR_VPP2PP_reg

// ================================================

class hqm_system_csr_bridge_VF_LDB_VQID_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VQID_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_VF_LDB_VQID_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VQID_V, VQID_V.desired)
     `RAL_FIELD_CP_1(VQID_V, VQID_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VQID_V, VQID_V.actual)
     `RAL_FIELD_CP_1(VQID_V, VQID_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VQID_V = new("VQID_V", "RW", 1, 0, {""});
    VQID_V.set_powerwell("vcccfn_gated");
    VQID_V.set_rand_mode(0);
   VQID_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VQID_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_VF_LDB_VQID_V_reg) 
endclass : hqm_system_csr_bridge_VF_LDB_VQID_V_reg

// ================================================

class hqm_system_csr_bridge_VF_LDB_VQID2QID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_VF_LDB_VQID2QID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID, QID.desired)
     `RAL_FIELD_CP_5(QID, QID.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID, QID.actual)
     `RAL_FIELD_CP_5(QID, QID.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID = new("QID", "RW", 5, 0, {""});
    QID.set_powerwell("vcccfn_gated");
    QID.set_rand_mode(0);
   QID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_VF_LDB_VQID2QID_reg) 
endclass : hqm_system_csr_bridge_VF_LDB_VQID2QID_reg

// ================================================

class hqm_system_csr_bridge_LDB_QID2VQID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VQID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_QID2VQID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VQID, VQID.desired)
     `RAL_FIELD_CP_5(VQID, VQID.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VQID, VQID.actual)
     `RAL_FIELD_CP_5(VQID, VQID.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VQID = new("VQID", "RW", 5, 0, {""});
    VQID.set_powerwell("vcccfn_gated");
    VQID.set_rand_mode(0);
   VQID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VQID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_QID2VQID_reg) 
endclass : hqm_system_csr_bridge_LDB_QID2VQID_reg

// ================================================

class hqm_system_csr_bridge_VF_DIR_VQID_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VQID_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_VF_DIR_VQID_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VQID_V, VQID_V.desired)
     `RAL_FIELD_CP_1(VQID_V, VQID_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VQID_V, VQID_V.actual)
     `RAL_FIELD_CP_1(VQID_V, VQID_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VQID_V = new("VQID_V", "RW", 1, 0, {""});
    VQID_V.set_powerwell("vcccfn_gated");
    VQID_V.set_rand_mode(0);
   VQID_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VQID_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_VF_DIR_VQID_V_reg) 
endclass : hqm_system_csr_bridge_VF_DIR_VQID_V_reg

// ================================================

class hqm_system_csr_bridge_VF_DIR_VQID2QID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_VF_DIR_VQID2QID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID, QID.desired)
     `RAL_FIELD_CP_6(QID, QID.desired, 0,1,2,3,4,5)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID, QID.actual)
     `RAL_FIELD_CP_6(QID, QID.actual, 0,1,2,3,4,5)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID = new("QID", "RW", 6, 0, {""});
    QID.set_powerwell("vcccfn_gated");
    QID.set_rand_mode(0);
   QID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_VF_DIR_VQID2QID_reg) 
endclass : hqm_system_csr_bridge_VF_DIR_VQID2QID_reg

// ================================================

class hqm_system_csr_bridge_LDB_VASQID_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VASQID_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_VASQID_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VASQID_V, VASQID_V.desired)
     `RAL_FIELD_CP_1(VASQID_V, VASQID_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VASQID_V, VASQID_V.actual)
     `RAL_FIELD_CP_1(VASQID_V, VASQID_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VASQID_V = new("VASQID_V", "RW", 1, 0, {""});
    VASQID_V.set_powerwell("vcccfn_gated");
    VASQID_V.set_rand_mode(0);
   VASQID_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VASQID_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_VASQID_V_reg) 
endclass : hqm_system_csr_bridge_LDB_VASQID_V_reg

// ================================================

class hqm_system_csr_bridge_DIR_VASQID_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VASQID_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_VASQID_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VASQID_V, VASQID_V.desired)
     `RAL_FIELD_CP_1(VASQID_V, VASQID_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VASQID_V, VASQID_V.actual)
     `RAL_FIELD_CP_1(VASQID_V, VASQID_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VASQID_V = new("VASQID_V", "RW", 1, 0, {""});
    VASQID_V.set_powerwell("vcccfn_gated");
    VASQID_V.set_rand_mode(0);
   VASQID_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VASQID_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_VASQID_V_reg) 
endclass : hqm_system_csr_bridge_DIR_VASQID_V_reg

// ================================================

class hqm_system_csr_bridge_ALARM_VF_SYND0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDROME;
  sla_ral_field RTYPE;
  sla_ral_field VF_SYND0_PARITY;
  sla_ral_field VF_SYND1_PARITY;
  sla_ral_field VF_SYND2_PARITY;
  sla_ral_field IS_LDB;
  sla_ral_field CLS;
  sla_ral_field AID;
  sla_ral_field UNIT;
  sla_ral_field SOURCE;
  sla_ral_field MORE;
  sla_ral_field VALID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_VF_SYND0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDROME, SYNDROME.desired)
     `RAL_FIELD_CP_8(SYNDROME, SYNDROME.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RTYPE, RTYPE.desired)
     `RAL_FIELD_CP_2(RTYPE, RTYPE.desired, 0,1)
     `RAL_FIELD_CP(VF_SYND0_PARITY, VF_SYND0_PARITY.desired)
     `RAL_FIELD_CP_1(VF_SYND0_PARITY, VF_SYND0_PARITY.desired, 0)
     `RAL_FIELD_CP(VF_SYND1_PARITY, VF_SYND1_PARITY.desired)
     `RAL_FIELD_CP_1(VF_SYND1_PARITY, VF_SYND1_PARITY.desired, 0)
     `RAL_FIELD_CP(VF_SYND2_PARITY, VF_SYND2_PARITY.desired)
     `RAL_FIELD_CP_1(VF_SYND2_PARITY, VF_SYND2_PARITY.desired, 0)
     `RAL_FIELD_CP(IS_LDB, IS_LDB.desired)
     `RAL_FIELD_CP_1(IS_LDB, IS_LDB.desired, 0)
     `RAL_FIELD_CP(CLS, CLS.desired)
     `RAL_FIELD_CP_2(CLS, CLS.desired, 0,1)
     `RAL_FIELD_CP(AID, AID.desired)
     `RAL_FIELD_CP_6(AID, AID.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(UNIT, UNIT.desired)
     `RAL_FIELD_CP_4(UNIT, UNIT.desired, 0,1,2,3)
     `RAL_FIELD_CP(SOURCE, SOURCE.desired)
     `RAL_FIELD_CP_4(SOURCE, SOURCE.desired, 0,1,2,3)
     `RAL_FIELD_CP(MORE, MORE.desired)
     `RAL_FIELD_CP_1(MORE, MORE.desired, 0)
     `RAL_FIELD_CP(VALID, VALID.desired)
     `RAL_FIELD_CP_1(VALID, VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDROME, SYNDROME.actual)
     `RAL_FIELD_CP_8(SYNDROME, SYNDROME.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RTYPE, RTYPE.actual)
     `RAL_FIELD_CP_2(RTYPE, RTYPE.actual, 0,1)
     `RAL_FIELD_CP(VF_SYND0_PARITY, VF_SYND0_PARITY.actual)
     `RAL_FIELD_CP_1(VF_SYND0_PARITY, VF_SYND0_PARITY.actual, 0)
     `RAL_FIELD_CP(VF_SYND1_PARITY, VF_SYND1_PARITY.actual)
     `RAL_FIELD_CP_1(VF_SYND1_PARITY, VF_SYND1_PARITY.actual, 0)
     `RAL_FIELD_CP(VF_SYND2_PARITY, VF_SYND2_PARITY.actual)
     `RAL_FIELD_CP_1(VF_SYND2_PARITY, VF_SYND2_PARITY.actual, 0)
     `RAL_FIELD_CP(IS_LDB, IS_LDB.actual)
     `RAL_FIELD_CP_1(IS_LDB, IS_LDB.actual, 0)
     `RAL_FIELD_CP(CLS, CLS.actual)
     `RAL_FIELD_CP_2(CLS, CLS.actual, 0,1)
     `RAL_FIELD_CP(AID, AID.actual)
     `RAL_FIELD_CP_6(AID, AID.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(UNIT, UNIT.actual)
     `RAL_FIELD_CP_4(UNIT, UNIT.actual, 0,1,2,3)
     `RAL_FIELD_CP(SOURCE, SOURCE.actual)
     `RAL_FIELD_CP_4(SOURCE, SOURCE.actual, 0,1,2,3)
     `RAL_FIELD_CP(MORE, MORE.actual)
     `RAL_FIELD_CP_1(MORE, MORE.actual, 0)
     `RAL_FIELD_CP(VALID, VALID.actual)
     `RAL_FIELD_CP_1(VALID, VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDROME = new("SYNDROME", "RO/V", 8, 0, {""});
    SYNDROME.set_powerwell("vcccfn_gated");
    SYNDROME.set_rand_mode(0);
   SYNDROME.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SYNDROME ));

    RTYPE = new("RTYPE", "RO/V", 2, 8, {""});
    RTYPE.set_powerwell("vcccfn_gated");
    RTYPE.set_rand_mode(0);
   RTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( RTYPE ));

    VF_SYND0_PARITY = new("VF_SYND0_PARITY", "RO/V", 1, 10, {""});
    VF_SYND0_PARITY.set_powerwell("vcccfn_gated");
    VF_SYND0_PARITY.set_rand_mode(0);
   VF_SYND0_PARITY.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VF_SYND0_PARITY ));

    VF_SYND1_PARITY = new("VF_SYND1_PARITY", "RO/V", 1, 11, {""});
    VF_SYND1_PARITY.set_powerwell("vcccfn_gated");
    VF_SYND1_PARITY.set_rand_mode(0);
   VF_SYND1_PARITY.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VF_SYND1_PARITY ));

    VF_SYND2_PARITY = new("VF_SYND2_PARITY", "RO/V", 1, 12, {""});
    VF_SYND2_PARITY.set_powerwell("vcccfn_gated");
    VF_SYND2_PARITY.set_rand_mode(0);
   VF_SYND2_PARITY.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VF_SYND2_PARITY ));

    IS_LDB = new("IS_LDB", "RO/V", 1, 13, {""});
    IS_LDB.set_powerwell("vcccfn_gated");
    IS_LDB.set_rand_mode(0);
   IS_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IS_LDB ));

    CLS = new("CLS", "RO/V", 2, 14, {""});
    CLS.set_powerwell("vcccfn_gated");
    CLS.set_rand_mode(0);
   CLS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CLS ));

    AID = new("AID", "RO/V", 6, 16, {""});
    AID.set_powerwell("vcccfn_gated");
    AID.set_rand_mode(0);
   AID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( AID ));

    UNIT = new("UNIT", "RO/V", 4, 22, {""});
    UNIT.set_powerwell("vcccfn_gated");
    UNIT.set_rand_mode(0);
   UNIT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( UNIT ));

    SOURCE = new("SOURCE", "RO/V", 4, 26, {""});
    SOURCE.set_powerwell("vcccfn_gated");
    SOURCE.set_rand_mode(0);
   SOURCE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SOURCE ));

    MORE = new("MORE", "RW/1C/V", 1, 30, {""});
    MORE.set_powerwell("vcccfn_gated");
    MORE.set_rand_mode(0);
   MORE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MORE ));

    VALID = new("VALID", "RW/1C/V", 1, 31, {""});
    VALID.set_powerwell("vcccfn_gated");
    VALID.set_rand_mode(0);
   VALID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_VF_SYND0_reg) 
endclass : hqm_system_csr_bridge_ALARM_VF_SYND0_reg

// ================================================

class hqm_system_csr_bridge_ALARM_VF_SYND1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DSI;
  sla_ral_field QID;
  sla_ral_field QTYPE;
  sla_ral_field QPRI;
  sla_ral_field MSG_TYPE;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_VF_SYND1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DSI, DSI.desired)
     `RAL_FIELD_CP_16(DSI, DSI.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(QID, QID.desired)
     `RAL_FIELD_CP_8(QID, QID.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QTYPE, QTYPE.desired)
     `RAL_FIELD_CP_2(QTYPE, QTYPE.desired, 0,1)
     `RAL_FIELD_CP(QPRI, QPRI.desired)
     `RAL_FIELD_CP_3(QPRI, QPRI.desired, 0,1,2)
     `RAL_FIELD_CP(MSG_TYPE, MSG_TYPE.desired)
     `RAL_FIELD_CP_3(MSG_TYPE, MSG_TYPE.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DSI, DSI.actual)
     `RAL_FIELD_CP_16(DSI, DSI.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(QID, QID.actual)
     `RAL_FIELD_CP_8(QID, QID.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QTYPE, QTYPE.actual)
     `RAL_FIELD_CP_2(QTYPE, QTYPE.actual, 0,1)
     `RAL_FIELD_CP(QPRI, QPRI.actual)
     `RAL_FIELD_CP_3(QPRI, QPRI.actual, 0,1,2)
     `RAL_FIELD_CP(MSG_TYPE, MSG_TYPE.actual)
     `RAL_FIELD_CP_3(MSG_TYPE, MSG_TYPE.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DSI = new("DSI", "RO/V", 16, 0, {""});
    DSI.set_powerwell("vcccfn_gated");
    DSI.set_rand_mode(0);
   DSI.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DSI ));

    QID = new("QID", "RO/V", 8, 16, {""});
    QID.set_powerwell("vcccfn_gated");
    QID.set_rand_mode(0);
   QID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID ));

    QTYPE = new("QTYPE", "RO/V", 2, 24, {""});
    QTYPE.set_powerwell("vcccfn_gated");
    QTYPE.set_rand_mode(0);
   QTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QTYPE ));

    QPRI = new("QPRI", "RO/V", 3, 26, {""});
    QPRI.set_powerwell("vcccfn_gated");
    QPRI.set_rand_mode(0);
   QPRI.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QPRI ));

    MSG_TYPE = new("MSG_TYPE", "RO/V", 3, 29, {""});
    MSG_TYPE.set_powerwell("vcccfn_gated");
    MSG_TYPE.set_rand_mode(0);
   MSG_TYPE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MSG_TYPE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_VF_SYND1_reg) 
endclass : hqm_system_csr_bridge_ALARM_VF_SYND1_reg

// ================================================

class hqm_system_csr_bridge_ALARM_VF_SYND2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LOCK_ID;
  sla_ral_field DEBUG;
  sla_ral_field CQ_POP;
  sla_ral_field QE_UHL;
  sla_ral_field QE_ORSP;
  sla_ral_field QE_VALID;
  sla_ral_field ISZ;
  sla_ral_field DSI_ERROR;
  sla_ral_field HQMRSVD;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_VF_SYND2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LOCK_ID, LOCK_ID.desired)
     `RAL_FIELD_CP_16(LOCK_ID, LOCK_ID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(DEBUG, DEBUG.desired)
     `RAL_FIELD_CP_8(DEBUG, DEBUG.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_POP, CQ_POP.desired)
     `RAL_FIELD_CP_1(CQ_POP, CQ_POP.desired, 0)
     `RAL_FIELD_CP(QE_UHL, QE_UHL.desired)
     `RAL_FIELD_CP_1(QE_UHL, QE_UHL.desired, 0)
     `RAL_FIELD_CP(QE_ORSP, QE_ORSP.desired)
     `RAL_FIELD_CP_1(QE_ORSP, QE_ORSP.desired, 0)
     `RAL_FIELD_CP(QE_VALID, QE_VALID.desired)
     `RAL_FIELD_CP_1(QE_VALID, QE_VALID.desired, 0)
     `RAL_FIELD_CP(ISZ, ISZ.desired)
     `RAL_FIELD_CP_1(ISZ, ISZ.desired, 0)
     `RAL_FIELD_CP(DSI_ERROR, DSI_ERROR.desired)
     `RAL_FIELD_CP_1(DSI_ERROR, DSI_ERROR.desired, 0)
     `RAL_FIELD_CP(HQMRSVD, HQMRSVD.desired)
     `RAL_FIELD_CP_2(HQMRSVD, HQMRSVD.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LOCK_ID, LOCK_ID.actual)
     `RAL_FIELD_CP_16(LOCK_ID, LOCK_ID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(DEBUG, DEBUG.actual)
     `RAL_FIELD_CP_8(DEBUG, DEBUG.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_POP, CQ_POP.actual)
     `RAL_FIELD_CP_1(CQ_POP, CQ_POP.actual, 0)
     `RAL_FIELD_CP(QE_UHL, QE_UHL.actual)
     `RAL_FIELD_CP_1(QE_UHL, QE_UHL.actual, 0)
     `RAL_FIELD_CP(QE_ORSP, QE_ORSP.actual)
     `RAL_FIELD_CP_1(QE_ORSP, QE_ORSP.actual, 0)
     `RAL_FIELD_CP(QE_VALID, QE_VALID.actual)
     `RAL_FIELD_CP_1(QE_VALID, QE_VALID.actual, 0)
     `RAL_FIELD_CP(ISZ, ISZ.actual)
     `RAL_FIELD_CP_1(ISZ, ISZ.actual, 0)
     `RAL_FIELD_CP(DSI_ERROR, DSI_ERROR.actual)
     `RAL_FIELD_CP_1(DSI_ERROR, DSI_ERROR.actual, 0)
     `RAL_FIELD_CP(HQMRSVD, HQMRSVD.actual)
     `RAL_FIELD_CP_2(HQMRSVD, HQMRSVD.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LOCK_ID = new("LOCK_ID", "RO/V", 16, 0, {""});
    LOCK_ID.set_powerwell("vcccfn_gated");
    LOCK_ID.set_rand_mode(0);
   LOCK_ID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( LOCK_ID ));

    DEBUG = new("DEBUG", "RO/V", 8, 16, {""});
    DEBUG.set_powerwell("vcccfn_gated");
    DEBUG.set_rand_mode(0);
   DEBUG.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DEBUG ));

    CQ_POP = new("CQ_POP", "RO/V", 1, 24, {""});
    CQ_POP.set_powerwell("vcccfn_gated");
    CQ_POP.set_rand_mode(0);
   CQ_POP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_POP ));

    QE_UHL = new("QE_UHL", "RO/V", 1, 25, {""});
    QE_UHL.set_powerwell("vcccfn_gated");
    QE_UHL.set_rand_mode(0);
   QE_UHL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QE_UHL ));

    QE_ORSP = new("QE_ORSP", "RO/V", 1, 26, {""});
    QE_ORSP.set_powerwell("vcccfn_gated");
    QE_ORSP.set_rand_mode(0);
   QE_ORSP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QE_ORSP ));

    QE_VALID = new("QE_VALID", "RO/V", 1, 27, {""});
    QE_VALID.set_powerwell("vcccfn_gated");
    QE_VALID.set_rand_mode(0);
   QE_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QE_VALID ));

    ISZ = new("ISZ", "RO/V", 1, 28, {""});
    ISZ.set_powerwell("vcccfn_gated");
    ISZ.set_rand_mode(0);
   ISZ.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ISZ ));

    DSI_ERROR = new("DSI_ERROR", "RO/V", 1, 29, {""});
    DSI_ERROR.set_powerwell("vcccfn_gated");
    DSI_ERROR.set_rand_mode(0);
   DSI_ERROR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DSI_ERROR ));

    HQMRSVD = new("HQMRSVD", "RO/V", 2, 30, {""});
    HQMRSVD.set_powerwell("vcccfn_gated");
    HQMRSVD.set_rand_mode(0);
   HQMRSVD.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( HQMRSVD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_VF_SYND2_reg) 
endclass : hqm_system_csr_bridge_ALARM_VF_SYND2_reg

// ================================================

class hqm_system_csr_bridge_LDB_QID_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_QID_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_V, QID_V.desired)
     `RAL_FIELD_CP_1(QID_V, QID_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_V, QID_V.actual)
     `RAL_FIELD_CP_1(QID_V, QID_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID_V = new("QID_V", "RW", 1, 0, {""});
    QID_V.set_powerwell("vcccfn_gated");
    QID_V.set_rand_mode(0);
   QID_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_QID_V_reg) 
endclass : hqm_system_csr_bridge_LDB_QID_V_reg

// ================================================

class hqm_system_csr_bridge_LDB_QID_ITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID_ITS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_QID_ITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_ITS, QID_ITS.desired)
     `RAL_FIELD_CP_1(QID_ITS, QID_ITS.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_ITS, QID_ITS.actual)
     `RAL_FIELD_CP_1(QID_ITS, QID_ITS.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID_ITS = new("QID_ITS", "RW", 1, 0, {""});
    QID_ITS.set_powerwell("vcccfn_gated");
    QID_ITS.set_rand_mode(0);
   QID_ITS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_ITS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_QID_ITS_reg) 
endclass : hqm_system_csr_bridge_LDB_QID_ITS_reg

// ================================================

class hqm_system_csr_bridge_LDB_QID_CFG_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SN_CFG_V;
  sla_ral_field FID_CFG_V;
  sla_ral_field AO_CFG_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_QID_CFG_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_CFG_V, SN_CFG_V.desired)
     `RAL_FIELD_CP_1(SN_CFG_V, SN_CFG_V.desired, 0)
     `RAL_FIELD_CP(FID_CFG_V, FID_CFG_V.desired)
     `RAL_FIELD_CP_1(FID_CFG_V, FID_CFG_V.desired, 0)
     `RAL_FIELD_CP(AO_CFG_V, AO_CFG_V.desired)
     `RAL_FIELD_CP_1(AO_CFG_V, AO_CFG_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_CFG_V, SN_CFG_V.actual)
     `RAL_FIELD_CP_1(SN_CFG_V, SN_CFG_V.actual, 0)
     `RAL_FIELD_CP(FID_CFG_V, FID_CFG_V.actual)
     `RAL_FIELD_CP_1(FID_CFG_V, FID_CFG_V.actual, 0)
     `RAL_FIELD_CP(AO_CFG_V, AO_CFG_V.actual)
     `RAL_FIELD_CP_1(AO_CFG_V, AO_CFG_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SN_CFG_V = new("SN_CFG_V", "RW", 1, 0, {""});
    SN_CFG_V.set_powerwell("vcccfn_gated");
    SN_CFG_V.set_rand_mode(0);
   SN_CFG_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SN_CFG_V ));

    FID_CFG_V = new("FID_CFG_V", "RW", 1, 1, {""});
    FID_CFG_V.set_powerwell("vcccfn_gated");
    FID_CFG_V.set_rand_mode(0);
   FID_CFG_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( FID_CFG_V ));

    AO_CFG_V = new("AO_CFG_V", "RW", 1, 2, {""});
    AO_CFG_V.set_powerwell("vcccfn_gated");
    AO_CFG_V.set_rand_mode(0);
   AO_CFG_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( AO_CFG_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_QID_CFG_V_reg) 
endclass : hqm_system_csr_bridge_LDB_QID_CFG_V_reg

// ================================================

class hqm_system_csr_bridge_DIR_QID_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_QID_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_V, QID_V.desired)
     `RAL_FIELD_CP_1(QID_V, QID_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_V, QID_V.actual)
     `RAL_FIELD_CP_1(QID_V, QID_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID_V = new("QID_V", "RW", 1, 0, {""});
    QID_V.set_powerwell("vcccfn_gated");
    QID_V.set_rand_mode(0);
   QID_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_QID_V_reg) 
endclass : hqm_system_csr_bridge_DIR_QID_V_reg

// ================================================

class hqm_system_csr_bridge_DIR_QID_ITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID_ITS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_QID_ITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_ITS, QID_ITS.desired)
     `RAL_FIELD_CP_1(QID_ITS, QID_ITS.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_ITS, QID_ITS.actual)
     `RAL_FIELD_CP_1(QID_ITS, QID_ITS.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID_ITS = new("QID_ITS", "RW", 1, 0, {""});
    QID_ITS.set_powerwell("vcccfn_gated");
    QID_ITS.set_rand_mode(0);
   QID_ITS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_ITS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_QID_ITS_reg) 
endclass : hqm_system_csr_bridge_DIR_QID_ITS_reg

// ================================================

class hqm_system_csr_bridge_LDB_CQ_ADDR_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR_L;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_CQ_ADDR_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_L, ADDR_L.desired)
     `RAL_FIELD_CP_16(ADDR_L, ADDR_L.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_10(ADDR_L, ADDR_L.desired, 16,17,18,19,20,21,22,23,24,25)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_L, ADDR_L.actual)
     `RAL_FIELD_CP_16(ADDR_L, ADDR_L.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_10(ADDR_L, ADDR_L.actual, 16,17,18,19,20,21,22,23,24,25)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR_L = new("ADDR_L", "RW", 26, 6, {""});
    ADDR_L.set_powerwell("vcccfn_gated");
    ADDR_L.set_rand_mode(0);
   ADDR_L.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ADDR_L ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_CQ_ADDR_L_reg) 
endclass : hqm_system_csr_bridge_LDB_CQ_ADDR_L_reg

// ================================================

class hqm_system_csr_bridge_LDB_CQ_ADDR_U_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR_U;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_CQ_ADDR_U_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_U, ADDR_U.desired)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_U, ADDR_U.actual)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR_U = new("ADDR_U", "RW", 32, 0, {""});
    ADDR_U.set_powerwell("vcccfn_gated");
    ADDR_U.set_rand_mode(0);
   ADDR_U.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ADDR_U ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_CQ_ADDR_U_reg) 
endclass : hqm_system_csr_bridge_LDB_CQ_ADDR_U_reg

// ================================================

class hqm_system_csr_bridge_LDB_PP2VAS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VAS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_PP2VAS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VAS, VAS.desired)
     `RAL_FIELD_CP_5(VAS, VAS.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VAS, VAS.actual)
     `RAL_FIELD_CP_5(VAS, VAS.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VAS = new("VAS", "RW", 5, 0, {""});
    VAS.set_powerwell("vcccfn_gated");
    VAS.set_rand_mode(0);
   VAS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VAS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_PP2VAS_reg) 
endclass : hqm_system_csr_bridge_LDB_PP2VAS_reg

// ================================================

class hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VDEV;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VDEV, VDEV.desired)
     `RAL_FIELD_CP_4(VDEV, VDEV.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VDEV, VDEV.actual)
     `RAL_FIELD_CP_4(VDEV, VDEV.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VDEV = new("VDEV", "RW", 4, 0, {""});
    VDEV.set_powerwell("vcccfn_gated");
    VDEV.set_rand_mode(0);
   VDEV.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VDEV ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg) 
endclass : hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg

// ================================================

class hqm_system_csr_bridge_LDB_PP_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PP_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_PP_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP_V, PP_V.desired)
     `RAL_FIELD_CP_1(PP_V, PP_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP_V, PP_V.actual)
     `RAL_FIELD_CP_1(PP_V, PP_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PP_V = new("PP_V", "RW", 1, 0, {""});
    PP_V.set_powerwell("vcccfn_gated");
    PP_V.set_rand_mode(0);
   PP_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PP_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_PP_V_reg) 
endclass : hqm_system_csr_bridge_LDB_PP_V_reg

// ================================================

class hqm_system_csr_bridge_LDB_CQ2VF_PF_RO_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VF;
  sla_ral_field IS_PF;
  sla_ral_field RO;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_CQ2VF_PF_RO_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VF, VF.desired)
     `RAL_FIELD_CP_4(VF, VF.desired, 0,1,2,3)
     `RAL_FIELD_CP(IS_PF, IS_PF.desired)
     `RAL_FIELD_CP_1(IS_PF, IS_PF.desired, 0)
     `RAL_FIELD_CP(RO, RO.desired)
     `RAL_FIELD_CP_1(RO, RO.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VF, VF.actual)
     `RAL_FIELD_CP_4(VF, VF.actual, 0,1,2,3)
     `RAL_FIELD_CP(IS_PF, IS_PF.actual)
     `RAL_FIELD_CP_1(IS_PF, IS_PF.actual, 0)
     `RAL_FIELD_CP(RO, RO.actual)
     `RAL_FIELD_CP_1(RO, RO.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VF = new("VF", "RW", 4, 0, {""});
    VF.set_powerwell("vcccfn_gated");
    VF.set_rand_mode(0);
   VF.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VF ));

    IS_PF = new("IS_PF", "RW", 1, 4, {""});
    IS_PF.set_powerwell("vcccfn_gated");
    IS_PF.set_rand_mode(0);
   IS_PF.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IS_PF ));

    RO = new("RO", "RW", 1, 5, {""});
    RO.set_powerwell("vcccfn_gated");
    RO.set_rand_mode(0);
   RO.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( RO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_CQ2VF_PF_RO_reg) 
endclass : hqm_system_csr_bridge_LDB_CQ2VF_PF_RO_reg

// ================================================

class hqm_system_csr_bridge_LDB_CQ_ISR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VECTOR;
  sla_ral_field VF;
  sla_ral_field EN_CODE;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_CQ_ISR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VECTOR, VECTOR.desired)
     `RAL_FIELD_CP_6(VECTOR, VECTOR.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(VF, VF.desired)
     `RAL_FIELD_CP_4(VF, VF.desired, 0,1,2,3)
     `RAL_FIELD_CP(EN_CODE, EN_CODE.desired)
     `RAL_FIELD_CP_2(EN_CODE, EN_CODE.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VECTOR, VECTOR.actual)
     `RAL_FIELD_CP_6(VECTOR, VECTOR.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(VF, VF.actual)
     `RAL_FIELD_CP_4(VF, VF.actual, 0,1,2,3)
     `RAL_FIELD_CP(EN_CODE, EN_CODE.actual)
     `RAL_FIELD_CP_2(EN_CODE, EN_CODE.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VECTOR = new("VECTOR", "RW", 6, 0, {""});
    VECTOR.set_powerwell("vcccfn_gated");
    VECTOR.set_rand_mode(0);
   VECTOR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VECTOR ));

    VF = new("VF", "RW", 4, 6, {""});
    VF.set_powerwell("vcccfn_gated");
    VF.set_rand_mode(0);
   VF.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VF ));

    EN_CODE = new("EN_CODE", "RW", 2, 10, {""});
    EN_CODE.set_powerwell("vcccfn_gated");
    EN_CODE.set_rand_mode(0);
   EN_CODE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EN_CODE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_CQ_ISR_reg) 
endclass : hqm_system_csr_bridge_LDB_CQ_ISR_reg

// ================================================

class hqm_system_csr_bridge_LDB_CQ_PASID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PASID;
  sla_ral_field EXE_REQ;
  sla_ral_field PRIV_REQ;
  sla_ral_field FMT2;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_CQ_PASID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PASID, PASID.desired)
     `RAL_FIELD_CP_16(PASID, PASID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_4(PASID, PASID.desired, 16,17,18,19)
     `RAL_FIELD_CP(EXE_REQ, EXE_REQ.desired)
     `RAL_FIELD_CP_1(EXE_REQ, EXE_REQ.desired, 0)
     `RAL_FIELD_CP(PRIV_REQ, PRIV_REQ.desired)
     `RAL_FIELD_CP_1(PRIV_REQ, PRIV_REQ.desired, 0)
     `RAL_FIELD_CP(FMT2, FMT2.desired)
     `RAL_FIELD_CP_1(FMT2, FMT2.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PASID, PASID.actual)
     `RAL_FIELD_CP_16(PASID, PASID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_4(PASID, PASID.actual, 16,17,18,19)
     `RAL_FIELD_CP(EXE_REQ, EXE_REQ.actual)
     `RAL_FIELD_CP_1(EXE_REQ, EXE_REQ.actual, 0)
     `RAL_FIELD_CP(PRIV_REQ, PRIV_REQ.actual)
     `RAL_FIELD_CP_1(PRIV_REQ, PRIV_REQ.actual, 0)
     `RAL_FIELD_CP(FMT2, FMT2.actual)
     `RAL_FIELD_CP_1(FMT2, FMT2.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PASID = new("PASID", "RW", 20, 0, {""});
    PASID.set_powerwell("vcccfn_gated");
    PASID.set_rand_mode(0);
   PASID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PASID ));

    EXE_REQ = new("EXE_REQ", "RO", 1, 20, {""});
    EXE_REQ.set_powerwell("vcccfn_gated");
    EXE_REQ.set_rand_mode(0);
   EXE_REQ.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EXE_REQ ));

    PRIV_REQ = new("PRIV_REQ", "RO", 1, 21, {""});
    PRIV_REQ.set_powerwell("vcccfn_gated");
    PRIV_REQ.set_rand_mode(0);
   PRIV_REQ.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PRIV_REQ ));

    FMT2 = new("FMT2", "RW", 1, 22, {""});
    FMT2.set_powerwell("vcccfn_gated");
    FMT2.set_rand_mode(0);
   FMT2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( FMT2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_CQ_PASID_reg) 
endclass : hqm_system_csr_bridge_LDB_CQ_PASID_reg

// ================================================

class hqm_system_csr_bridge_LDB_PP_ROB_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ROB_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_LDB_PP_ROB_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROB_V, ROB_V.desired)
     `RAL_FIELD_CP_1(ROB_V, ROB_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROB_V, ROB_V.actual)
     `RAL_FIELD_CP_1(ROB_V, ROB_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ROB_V = new("ROB_V", "RW", 1, 0, {""});
    ROB_V.set_powerwell("vcccfn_gated");
    ROB_V.set_rand_mode(0);
   ROB_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ROB_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_LDB_PP_ROB_V_reg) 
endclass : hqm_system_csr_bridge_LDB_PP_ROB_V_reg

// ================================================

class hqm_system_csr_bridge_DIR_CQ_ADDR_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR_L;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_CQ_ADDR_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_L, ADDR_L.desired)
     `RAL_FIELD_CP_16(ADDR_L, ADDR_L.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_10(ADDR_L, ADDR_L.desired, 16,17,18,19,20,21,22,23,24,25)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_L, ADDR_L.actual)
     `RAL_FIELD_CP_16(ADDR_L, ADDR_L.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_10(ADDR_L, ADDR_L.actual, 16,17,18,19,20,21,22,23,24,25)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR_L = new("ADDR_L", "RW", 26, 6, {""});
    ADDR_L.set_powerwell("vcccfn_gated");
    ADDR_L.set_rand_mode(0);
   ADDR_L.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ADDR_L ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_CQ_ADDR_L_reg) 
endclass : hqm_system_csr_bridge_DIR_CQ_ADDR_L_reg

// ================================================

class hqm_system_csr_bridge_DIR_CQ_ADDR_U_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR_U;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_CQ_ADDR_U_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_U, ADDR_U.desired)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_U, ADDR_U.actual)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR_U = new("ADDR_U", "RW", 32, 0, {""});
    ADDR_U.set_powerwell("vcccfn_gated");
    ADDR_U.set_rand_mode(0);
   ADDR_U.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ADDR_U ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_CQ_ADDR_U_reg) 
endclass : hqm_system_csr_bridge_DIR_CQ_ADDR_U_reg

// ================================================

class hqm_system_csr_bridge_DIR_PP2VAS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VAS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_PP2VAS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VAS, VAS.desired)
     `RAL_FIELD_CP_5(VAS, VAS.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VAS, VAS.actual)
     `RAL_FIELD_CP_5(VAS, VAS.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VAS = new("VAS", "RW", 5, 0, {""});
    VAS.set_powerwell("vcccfn_gated");
    VAS.set_rand_mode(0);
   VAS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VAS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_PP2VAS_reg) 
endclass : hqm_system_csr_bridge_DIR_PP2VAS_reg

// ================================================

class hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VDEV;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VDEV, VDEV.desired)
     `RAL_FIELD_CP_4(VDEV, VDEV.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VDEV, VDEV.actual)
     `RAL_FIELD_CP_4(VDEV, VDEV.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VDEV = new("VDEV", "RW", 4, 0, {""});
    VDEV.set_powerwell("vcccfn_gated");
    VDEV.set_rand_mode(0);
   VDEV.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VDEV ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg) 
endclass : hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg

// ================================================

class hqm_system_csr_bridge_DIR_PP_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PP_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_PP_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP_V, PP_V.desired)
     `RAL_FIELD_CP_1(PP_V, PP_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP_V, PP_V.actual)
     `RAL_FIELD_CP_1(PP_V, PP_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PP_V = new("PP_V", "RW", 1, 0, {""});
    PP_V.set_powerwell("vcccfn_gated");
    PP_V.set_rand_mode(0);
   PP_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PP_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_PP_V_reg) 
endclass : hqm_system_csr_bridge_DIR_PP_V_reg

// ================================================

class hqm_system_csr_bridge_DIR_CQ2VF_PF_RO_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VF;
  sla_ral_field IS_PF;
  sla_ral_field RO;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_CQ2VF_PF_RO_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VF, VF.desired)
     `RAL_FIELD_CP_4(VF, VF.desired, 0,1,2,3)
     `RAL_FIELD_CP(IS_PF, IS_PF.desired)
     `RAL_FIELD_CP_1(IS_PF, IS_PF.desired, 0)
     `RAL_FIELD_CP(RO, RO.desired)
     `RAL_FIELD_CP_1(RO, RO.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VF, VF.actual)
     `RAL_FIELD_CP_4(VF, VF.actual, 0,1,2,3)
     `RAL_FIELD_CP(IS_PF, IS_PF.actual)
     `RAL_FIELD_CP_1(IS_PF, IS_PF.actual, 0)
     `RAL_FIELD_CP(RO, RO.actual)
     `RAL_FIELD_CP_1(RO, RO.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VF = new("VF", "RW", 4, 0, {""});
    VF.set_powerwell("vcccfn_gated");
    VF.set_rand_mode(0);
   VF.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VF ));

    IS_PF = new("IS_PF", "RW", 1, 4, {""});
    IS_PF.set_powerwell("vcccfn_gated");
    IS_PF.set_rand_mode(0);
   IS_PF.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IS_PF ));

    RO = new("RO", "RW", 1, 5, {""});
    RO.set_powerwell("vcccfn_gated");
    RO.set_rand_mode(0);
   RO.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( RO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_CQ2VF_PF_RO_reg) 
endclass : hqm_system_csr_bridge_DIR_CQ2VF_PF_RO_reg

// ================================================

class hqm_system_csr_bridge_DIR_CQ_ISR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VECTOR;
  sla_ral_field VF;
  sla_ral_field EN_CODE;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_CQ_ISR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VECTOR, VECTOR.desired)
     `RAL_FIELD_CP_6(VECTOR, VECTOR.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(VF, VF.desired)
     `RAL_FIELD_CP_4(VF, VF.desired, 0,1,2,3)
     `RAL_FIELD_CP(EN_CODE, EN_CODE.desired)
     `RAL_FIELD_CP_2(EN_CODE, EN_CODE.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VECTOR, VECTOR.actual)
     `RAL_FIELD_CP_6(VECTOR, VECTOR.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(VF, VF.actual)
     `RAL_FIELD_CP_4(VF, VF.actual, 0,1,2,3)
     `RAL_FIELD_CP(EN_CODE, EN_CODE.actual)
     `RAL_FIELD_CP_2(EN_CODE, EN_CODE.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VECTOR = new("VECTOR", "RW", 6, 0, {""});
    VECTOR.set_powerwell("vcccfn_gated");
    VECTOR.set_rand_mode(0);
   VECTOR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VECTOR ));

    VF = new("VF", "RW", 4, 6, {""});
    VF.set_powerwell("vcccfn_gated");
    VF.set_rand_mode(0);
   VF.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VF ));

    EN_CODE = new("EN_CODE", "RW", 2, 10, {""});
    EN_CODE.set_powerwell("vcccfn_gated");
    EN_CODE.set_rand_mode(0);
   EN_CODE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EN_CODE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_CQ_ISR_reg) 
endclass : hqm_system_csr_bridge_DIR_CQ_ISR_reg

// ================================================

class hqm_system_csr_bridge_DIR_CQ_PASID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PASID;
  sla_ral_field EXE_REQ;
  sla_ral_field PRIV_REQ;
  sla_ral_field FMT2;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_CQ_PASID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PASID, PASID.desired)
     `RAL_FIELD_CP_16(PASID, PASID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_4(PASID, PASID.desired, 16,17,18,19)
     `RAL_FIELD_CP(EXE_REQ, EXE_REQ.desired)
     `RAL_FIELD_CP_1(EXE_REQ, EXE_REQ.desired, 0)
     `RAL_FIELD_CP(PRIV_REQ, PRIV_REQ.desired)
     `RAL_FIELD_CP_1(PRIV_REQ, PRIV_REQ.desired, 0)
     `RAL_FIELD_CP(FMT2, FMT2.desired)
     `RAL_FIELD_CP_1(FMT2, FMT2.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PASID, PASID.actual)
     `RAL_FIELD_CP_16(PASID, PASID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_4(PASID, PASID.actual, 16,17,18,19)
     `RAL_FIELD_CP(EXE_REQ, EXE_REQ.actual)
     `RAL_FIELD_CP_1(EXE_REQ, EXE_REQ.actual, 0)
     `RAL_FIELD_CP(PRIV_REQ, PRIV_REQ.actual)
     `RAL_FIELD_CP_1(PRIV_REQ, PRIV_REQ.actual, 0)
     `RAL_FIELD_CP(FMT2, FMT2.actual)
     `RAL_FIELD_CP_1(FMT2, FMT2.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PASID = new("PASID", "RW", 20, 0, {""});
    PASID.set_powerwell("vcccfn_gated");
    PASID.set_rand_mode(0);
   PASID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PASID ));

    EXE_REQ = new("EXE_REQ", "RO", 1, 20, {""});
    EXE_REQ.set_powerwell("vcccfn_gated");
    EXE_REQ.set_rand_mode(0);
   EXE_REQ.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EXE_REQ ));

    PRIV_REQ = new("PRIV_REQ", "RO", 1, 21, {""});
    PRIV_REQ.set_powerwell("vcccfn_gated");
    PRIV_REQ.set_rand_mode(0);
   PRIV_REQ.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PRIV_REQ ));

    FMT2 = new("FMT2", "RW", 1, 22, {""});
    FMT2.set_powerwell("vcccfn_gated");
    FMT2.set_rand_mode(0);
   FMT2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( FMT2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_CQ_PASID_reg) 
endclass : hqm_system_csr_bridge_DIR_CQ_PASID_reg

// ================================================

class hqm_system_csr_bridge_DIR_CQ_FMT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field KEEP_PF_PPID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_CQ_FMT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(KEEP_PF_PPID, KEEP_PF_PPID.desired)
     `RAL_FIELD_CP_1(KEEP_PF_PPID, KEEP_PF_PPID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(KEEP_PF_PPID, KEEP_PF_PPID.actual)
     `RAL_FIELD_CP_1(KEEP_PF_PPID, KEEP_PF_PPID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    KEEP_PF_PPID = new("KEEP_PF_PPID", "RW", 1, 0, {""});
    KEEP_PF_PPID.set_powerwell("vcccfn_gated");
    KEEP_PF_PPID.set_rand_mode(0);
   KEEP_PF_PPID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( KEEP_PF_PPID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_CQ_FMT_reg) 
endclass : hqm_system_csr_bridge_DIR_CQ_FMT_reg

// ================================================

class hqm_system_csr_bridge_DIR_PP_ROB_V_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ROB_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_DIR_PP_ROB_V_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROB_V, ROB_V.desired)
     `RAL_FIELD_CP_1(ROB_V, ROB_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROB_V, ROB_V.actual)
     `RAL_FIELD_CP_1(ROB_V, ROB_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ROB_V = new("ROB_V", "RW", 1, 0, {""});
    ROB_V.set_powerwell("vcccfn_gated");
    ROB_V.set_rand_mode(0);
   ROB_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ROB_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_DIR_PP_ROB_V_reg) 
endclass : hqm_system_csr_bridge_DIR_PP_ROB_V_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_0.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_0_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_0_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_1.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_1_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_1_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_2.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_2_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_2_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_3.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_3_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_3_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_4_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_4_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_4.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_4_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_4_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_5_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_5_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_5.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_5_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_5_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_6_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_6_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_6.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_6_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_6_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_7_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_7_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_7.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_7_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_7_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_8_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_8_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_8.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_8_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_8_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_9_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_9_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_9.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_9_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_9_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_10_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_10_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_10.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_10_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_10_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_11_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_11_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_11.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_11_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_11_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_12_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_12_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_12.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_12_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_12_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_13_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_13_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_13.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_13_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_13_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_14_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_14_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_14.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_14_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_14_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_15_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_15_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_15.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_15_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_15_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_16_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_16_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_16.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_16_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_16_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_17_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_17_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_17.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_17_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_17_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_18_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_18_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_18.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_18_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_18_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_19_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_19_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_19.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_19_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_19_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_20_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_20_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_20.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_20_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_20_reg

// ================================================

class hqm_system_csr_bridge_HQM_SYSTEM_CNT_21_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_SYSTEM_CNT_21_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_21.CNT"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_SYSTEM_CNT_21_reg) 
endclass : hqm_system_csr_bridge_HQM_SYSTEM_CNT_21_reg

// ================================================

class hqm_system_csr_bridge_SBE_CNT_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SBE_CNT_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RW/V", 32, 0, {"i_hqm_system_core.i_hqm_system_alarm.sbe_cnt_q[31:0]"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SBE_CNT_0_reg) 
endclass : hqm_system_csr_bridge_SBE_CNT_0_reg

// ================================================

class hqm_system_csr_bridge_SBE_CNT_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SBE_CNT_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RW/V", 32, 0, {"i_hqm_system_core.i_hqm_system_alarm.sbe_cnt_q[63:32]"});
    CNT.set_powerwell("vcccfn_gated");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_inp_gated_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SBE_CNT_1_reg) 
endclass : hqm_system_csr_bridge_SBE_CNT_1_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_CONFIGURATION0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SMON_ENABLE;
  sla_ral_field SMON0_FUNCTION;
  sla_ral_field SMON0_FUNCTION_COMPARE;
  sla_ral_field SMON1_FUNCTION;
  sla_ral_field SMON1_FUNCTION_COMPARE;
  sla_ral_field SMON_MODE;
  sla_ral_field STOPCOUNTEROVFL;
  sla_ral_field INTCOUNTEROVFL;
  sla_ral_field STATCOUNTER0OVFL;
  sla_ral_field STATCOUNTER1OVFL;
  sla_ral_field STOPTIMEROVFL;
  sla_ral_field INTTIMEROVFL;
  sla_ral_field STATTIMEROVFL;
  sla_ral_field TIMER_PRESCALE;
  sla_ral_field VERSION;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_CONFIGURATION0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.desired, 0)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.desired)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.desired, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.desired)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.desired)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(VERSION, VERSION.desired)
     `RAL_FIELD_CP_2(VERSION, VERSION.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.actual, 0)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.actual)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.actual, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.actual)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.actual)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(VERSION, VERSION.actual)
     `RAL_FIELD_CP_2(VERSION, VERSION.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SMON_ENABLE = new("SMON_ENABLE", "RW", 1, 0, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[0:0]"});
    SMON_ENABLE.set_powerwell("vcccfn_gated");
    SMON_ENABLE.set_rand_mode(0);
   SMON_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_ENABLE ));

    SMON0_FUNCTION = new("SMON0_FUNCTION", "RW", 3, 4, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[6:4]"});
    SMON0_FUNCTION.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION.set_rand_mode(0);
   SMON0_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION ));

    SMON0_FUNCTION_COMPARE = new("SMON0_FUNCTION_COMPARE", "RW", 1, 7, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[7:7]"});
    SMON0_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION_COMPARE.set_rand_mode(0);
   SMON0_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION_COMPARE ));

    SMON1_FUNCTION = new("SMON1_FUNCTION", "RW", 3, 8, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[10:8]"});
    SMON1_FUNCTION.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION.set_rand_mode(0);
   SMON1_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION ));

    SMON1_FUNCTION_COMPARE = new("SMON1_FUNCTION_COMPARE", "RW", 1, 11, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[11:11]"});
    SMON1_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION_COMPARE.set_rand_mode(0);
   SMON1_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION_COMPARE ));

    SMON_MODE = new("SMON_MODE", "RW", 4, 12, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[15:12]"});
    SMON_MODE.set_powerwell("vcccfn_gated");
    SMON_MODE.set_rand_mode(0);
   SMON_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_MODE.set_logical_path("HQMID");
    void'(add_field( SMON_MODE ));

    STOPCOUNTEROVFL = new("STOPCOUNTEROVFL", "RW", 1, 16, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[16:16]"});
    STOPCOUNTEROVFL.set_powerwell("vcccfn_gated");
    STOPCOUNTEROVFL.set_rand_mode(0);
   STOPCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPCOUNTEROVFL ));

    INTCOUNTEROVFL = new("INTCOUNTEROVFL", "RW", 1, 17, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[17:17]"});
    INTCOUNTEROVFL.set_powerwell("vcccfn_gated");
    INTCOUNTEROVFL.set_rand_mode(0);
   INTCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( INTCOUNTEROVFL ));

    STATCOUNTER0OVFL = new("STATCOUNTER0OVFL", "RW", 1, 18, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[18:18]"});
    STATCOUNTER0OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER0OVFL.set_rand_mode(0);
   STATCOUNTER0OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER0OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER0OVFL ));

    STATCOUNTER1OVFL = new("STATCOUNTER1OVFL", "RW", 1, 19, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[19:19]"});
    STATCOUNTER1OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER1OVFL.set_rand_mode(0);
   STATCOUNTER1OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER1OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER1OVFL ));

    STOPTIMEROVFL = new("STOPTIMEROVFL", "RW", 1, 20, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[20:20]"});
    STOPTIMEROVFL.set_powerwell("vcccfn_gated");
    STOPTIMEROVFL.set_rand_mode(0);
   STOPTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPTIMEROVFL ));

    INTTIMEROVFL = new("INTTIMEROVFL", "RW", 1, 21, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[21:21]"});
    INTTIMEROVFL.set_powerwell("vcccfn_gated");
    INTTIMEROVFL.set_rand_mode(0);
   INTTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( INTTIMEROVFL ));

    STATTIMEROVFL = new("STATTIMEROVFL", "RW", 1, 22, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[22:22]"});
    STATTIMEROVFL.set_powerwell("vcccfn_gated");
    STATTIMEROVFL.set_rand_mode(0);
   STATTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STATTIMEROVFL ));

    TIMER_PRESCALE = new("TIMER_PRESCALE", "RW", 5, 24, {"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[28:24]"});
    TIMER_PRESCALE.set_powerwell("vcccfn_gated");
    TIMER_PRESCALE.set_rand_mode(0);
   TIMER_PRESCALE.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_PRESCALE.set_logical_path("HQMID");
    void'(add_field( TIMER_PRESCALE ));

    VERSION = new("VERSION", "RO", 2, 30, {"NoSignal"});
    VERSION.set_powerwell("vcccfn_gated");
    VERSION.set_rand_mode(0);
   VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_CONFIGURATION0_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_CONFIGURATION0_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_CONFIGURATION1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE0;
  sla_ral_field MODE1;
  sla_ral_field RSVD;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_CONFIGURATION1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.desired)
     `RAL_FIELD_CP_8(MODE0, MODE0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.desired)
     `RAL_FIELD_CP_8(MODE1, MODE1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVD, RSVD.desired)
     `RAL_FIELD_CP_16(RSVD, RSVD.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.actual)
     `RAL_FIELD_CP_8(MODE0, MODE0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.actual)
     `RAL_FIELD_CP_8(MODE1, MODE1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVD, RSVD.actual)
     `RAL_FIELD_CP_16(RSVD, RSVD.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE0 = new("MODE0", "RW", 8, 0, {"i_hqm_system_core.i_smon2.reg_smon_cfg1_q[7:0]"});
    MODE0.set_powerwell("vcccfn_gated");
    MODE0.set_rand_mode(0);
   MODE0.set_reset_signame("hqm_inp_gated_rst_n");
    MODE0.set_logical_path("HQMID");
    void'(add_field( MODE0 ));

    MODE1 = new("MODE1", "RW", 8, 8, {"i_hqm_system_core.i_smon2.reg_smon_cfg1_q[15:8]"});
    MODE1.set_powerwell("vcccfn_gated");
    MODE1.set_rand_mode(0);
   MODE1.set_reset_signame("hqm_inp_gated_rst_n");
    MODE1.set_logical_path("HQMID");
    void'(add_field( MODE1 ));

    RSVD = new("RSVD", "RW", 16, 16, {"i_hqm_system_core.i_smon2.reg_smon_cfg1_q[31:16]"});
    RSVD.set_powerwell("vcccfn_gated");
    RSVD.set_rand_mode(0);
   RSVD.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD.set_logical_path("HQMID");
    void'(add_field( RSVD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_CONFIGURATION1_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_CONFIGURATION1_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_COMPARE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE0;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_COMPARE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.desired)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.actual)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE0 = new("COMPARE0", "RW", 32, 0, {"i_hqm_system_core.i_smon2.reg_smon_comp0_q[31:0]"});
    COMPARE0.set_powerwell("vcccfn_gated");
    COMPARE0.set_rand_mode(0);
   COMPARE0.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE0.set_logical_path("HQMID");
    void'(add_field( COMPARE0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_COMPARE0_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_COMPARE0_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_COMPARE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE1;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_COMPARE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.desired)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.actual)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE1 = new("COMPARE1", "RW", 32, 0, {"i_hqm_system_core.i_smon2.reg_smon_comp1_q[31:0]"});
    COMPARE1.set_powerwell("vcccfn_gated");
    COMPARE1.set_rand_mode(0);
   COMPARE1.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE1.set_logical_path("HQMID");
    void'(add_field( COMPARE1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_COMPARE1_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_COMPARE1_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER0;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.desired)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.actual)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER0 = new("COUNTER0", "RW", 32, 0, {"i_hqm_system_core.i_smon2.reg_smon_cnt0_q[31:0]"});
    COUNTER0.set_powerwell("vcccfn_gated");
    COUNTER0.set_rand_mode(0);
   COUNTER0.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER0.set_logical_path("HQMID");
    void'(add_field( COUNTER0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER0_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER0_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER1;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.desired)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.actual)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER1 = new("COUNTER1", "RW", 32, 0, {"i_hqm_system_core.i_smon2.reg_smon_cnt1_q[31:0]"});
    COUNTER1.set_powerwell("vcccfn_gated");
    COUNTER1.set_rand_mode(0);
   COUNTER1.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER1.set_logical_path("HQMID");
    void'(add_field( COUNTER1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER1_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER1_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER_VAL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_VAL, TIMER_VAL.desired)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_VAL, TIMER_VAL.actual)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER_VAL = new("TIMER_VAL", "RW", 32, 0, {"i_hqm_system_core.i_smon2.reg_smon_timer_q[31:0]"});
    TIMER_VAL.set_powerwell("vcccfn_gated");
    TIMER_VAL.set_rand_mode(0);
   TIMER_VAL.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_VAL.set_logical_path("HQMID");
    void'(add_field( TIMER_VAL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_TIMER_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_TIMER_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_MAXIMUM_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MAXVALUE;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_MAXIMUM_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.desired)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.actual)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MAXVALUE = new("MAXVALUE", "RW", 32, 0, {"i_hqm_system_core.i_smon2.reg_smon_maxval_q[31:0]"});
    MAXVALUE.set_powerwell("vcccfn_gated");
    MAXVALUE.set_rand_mode(0);
   MAXVALUE.set_reset_signame("hqm_inp_gated_rst_n");
    MAXVALUE.set_logical_path("HQMID");
    void'(add_field( MAXVALUE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_MAXIMUM_TIMER_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_MAXIMUM_TIMER_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_COMP_MASK0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMP_MASK0;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_COMP_MASK0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK0, COMP_MASK0.desired)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK0, COMP_MASK0.actual)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMP_MASK0 = new("COMP_MASK0", "RW", 32, 0, {"i_hqm_system_core.i_smon2.reg_smon_mask0_q[31:0]"});
    COMP_MASK0.set_powerwell("vcccfn_gated");
    COMP_MASK0.set_rand_mode(0);
   COMP_MASK0.set_reset_signame("hqm_inp_gated_rst_n");
    COMP_MASK0.set_logical_path("HQMID");
    void'(add_field( COMP_MASK0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_COMP_MASK0_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_COMP_MASK0_reg

// ================================================

class hqm_system_csr_bridge_PERF_SMON_COMP_MASK1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMP_MASK1;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PERF_SMON_COMP_MASK1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK1, COMP_MASK1.desired)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK1, COMP_MASK1.actual)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMP_MASK1 = new("COMP_MASK1", "RW", 32, 0, {"i_hqm_system_core.i_smon2.reg_smon_mask1_q[31:0]"});
    COMP_MASK1.set_powerwell("vcccfn_gated");
    COMP_MASK1.set_rand_mode(0);
   COMP_MASK1.set_reset_signame("hqm_inp_gated_rst_n");
    COMP_MASK1.set_logical_path("HQMID");
    void'(add_field( COMP_MASK1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PERF_SMON_COMP_MASK1_reg) 
endclass : hqm_system_csr_bridge_PERF_SMON_COMP_MASK1_reg

// ================================================

class hqm_system_csr_bridge_WB_DIR_CQ_STATE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WB0_V;
  sla_ral_field WB1_V;
  sla_ral_field WB2_V;
  sla_ral_field DIR_OPT;
  sla_ral_field CQ_OPT_CLR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_WB_DIR_CQ_STATE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WB0_V, WB0_V.desired)
     `RAL_FIELD_CP_1(WB0_V, WB0_V.desired, 0)
     `RAL_FIELD_CP(WB1_V, WB1_V.desired)
     `RAL_FIELD_CP_1(WB1_V, WB1_V.desired, 0)
     `RAL_FIELD_CP(WB2_V, WB2_V.desired)
     `RAL_FIELD_CP_1(WB2_V, WB2_V.desired, 0)
     `RAL_FIELD_CP(DIR_OPT, DIR_OPT.desired)
     `RAL_FIELD_CP_1(DIR_OPT, DIR_OPT.desired, 0)
     `RAL_FIELD_CP(CQ_OPT_CLR, CQ_OPT_CLR.desired)
     `RAL_FIELD_CP_1(CQ_OPT_CLR, CQ_OPT_CLR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WB0_V, WB0_V.actual)
     `RAL_FIELD_CP_1(WB0_V, WB0_V.actual, 0)
     `RAL_FIELD_CP(WB1_V, WB1_V.actual)
     `RAL_FIELD_CP_1(WB1_V, WB1_V.actual, 0)
     `RAL_FIELD_CP(WB2_V, WB2_V.actual)
     `RAL_FIELD_CP_1(WB2_V, WB2_V.actual, 0)
     `RAL_FIELD_CP(DIR_OPT, DIR_OPT.actual)
     `RAL_FIELD_CP_1(DIR_OPT, DIR_OPT.actual, 0)
     `RAL_FIELD_CP(CQ_OPT_CLR, CQ_OPT_CLR.actual)
     `RAL_FIELD_CP_1(CQ_OPT_CLR, CQ_OPT_CLR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WB0_V = new("WB0_V", "RO/V", 1, 0, {""});
    WB0_V.set_powerwell("vcccfn_gated");
    WB0_V.set_rand_mode(0);
   WB0_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WB0_V ));

    WB1_V = new("WB1_V", "RO/V", 1, 1, {""});
    WB1_V.set_powerwell("vcccfn_gated");
    WB1_V.set_rand_mode(0);
   WB1_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WB1_V ));

    WB2_V = new("WB2_V", "RO/V", 1, 2, {""});
    WB2_V.set_powerwell("vcccfn_gated");
    WB2_V.set_rand_mode(0);
   WB2_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WB2_V ));

    DIR_OPT = new("DIR_OPT", "RO/V", 1, 3, {""});
    DIR_OPT.set_powerwell("vcccfn_gated");
    DIR_OPT.set_rand_mode(0);
   DIR_OPT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DIR_OPT ));

    CQ_OPT_CLR = new("CQ_OPT_CLR", "WO", 1, 4, {""});
    CQ_OPT_CLR.set_powerwell("vcccfn_gated");
    CQ_OPT_CLR.set_rand_mode(0);
   CQ_OPT_CLR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_OPT_CLR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_WB_DIR_CQ_STATE_reg) 
endclass : hqm_system_csr_bridge_WB_DIR_CQ_STATE_reg

// ================================================

class hqm_system_csr_bridge_WB_LDB_CQ_STATE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WB0_V;
  sla_ral_field WB1_V;
  sla_ral_field WB2_V;
  sla_ral_field CQ_OPT_CLR;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_WB_LDB_CQ_STATE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WB0_V, WB0_V.desired)
     `RAL_FIELD_CP_1(WB0_V, WB0_V.desired, 0)
     `RAL_FIELD_CP(WB1_V, WB1_V.desired)
     `RAL_FIELD_CP_1(WB1_V, WB1_V.desired, 0)
     `RAL_FIELD_CP(WB2_V, WB2_V.desired)
     `RAL_FIELD_CP_1(WB2_V, WB2_V.desired, 0)
     `RAL_FIELD_CP(CQ_OPT_CLR, CQ_OPT_CLR.desired)
     `RAL_FIELD_CP_1(CQ_OPT_CLR, CQ_OPT_CLR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WB0_V, WB0_V.actual)
     `RAL_FIELD_CP_1(WB0_V, WB0_V.actual, 0)
     `RAL_FIELD_CP(WB1_V, WB1_V.actual)
     `RAL_FIELD_CP_1(WB1_V, WB1_V.actual, 0)
     `RAL_FIELD_CP(WB2_V, WB2_V.actual)
     `RAL_FIELD_CP_1(WB2_V, WB2_V.actual, 0)
     `RAL_FIELD_CP(CQ_OPT_CLR, CQ_OPT_CLR.actual)
     `RAL_FIELD_CP_1(CQ_OPT_CLR, CQ_OPT_CLR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WB0_V = new("WB0_V", "RO/V", 1, 0, {""});
    WB0_V.set_powerwell("vcccfn_gated");
    WB0_V.set_rand_mode(0);
   WB0_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WB0_V ));

    WB1_V = new("WB1_V", "RO/V", 1, 1, {""});
    WB1_V.set_powerwell("vcccfn_gated");
    WB1_V.set_rand_mode(0);
   WB1_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WB1_V ));

    WB2_V = new("WB2_V", "RO/V", 1, 2, {""});
    WB2_V.set_powerwell("vcccfn_gated");
    WB2_V.set_rand_mode(0);
   WB2_V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WB2_V ));

    CQ_OPT_CLR = new("CQ_OPT_CLR", "WO", 1, 4, {""});
    CQ_OPT_CLR.set_powerwell("vcccfn_gated");
    CQ_OPT_CLR.set_rand_mode(0);
   CQ_OPT_CLR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_OPT_CLR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_WB_LDB_CQ_STATE_reg) 
endclass : hqm_system_csr_bridge_WB_LDB_CQ_STATE_reg

// ================================================

class hqm_system_csr_bridge_AI_ADDR_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IMS_ADDR_L;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AI_ADDR_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_ADDR_L, IMS_ADDR_L.desired)
     `RAL_FIELD_CP_16(IMS_ADDR_L, IMS_ADDR_L.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(IMS_ADDR_L, IMS_ADDR_L.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_ADDR_L, IMS_ADDR_L.actual)
     `RAL_FIELD_CP_16(IMS_ADDR_L, IMS_ADDR_L.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(IMS_ADDR_L, IMS_ADDR_L.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IMS_ADDR_L = new("IMS_ADDR_L", "RW", 30, 2, {""});
    IMS_ADDR_L.set_powerwell("vcccfn_gated");
    IMS_ADDR_L.set_rand_mode(0);
   IMS_ADDR_L.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IMS_ADDR_L ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AI_ADDR_L_reg) 
endclass : hqm_system_csr_bridge_AI_ADDR_L_reg

// ================================================

class hqm_system_csr_bridge_AI_ADDR_U_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IMS_ADDR_U;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AI_ADDR_U_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_ADDR_U, IMS_ADDR_U.desired)
     `RAL_FIELD_CP_16(IMS_ADDR_U, IMS_ADDR_U.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IMS_ADDR_U, IMS_ADDR_U.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_ADDR_U, IMS_ADDR_U.actual)
     `RAL_FIELD_CP_16(IMS_ADDR_U, IMS_ADDR_U.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IMS_ADDR_U, IMS_ADDR_U.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IMS_ADDR_U = new("IMS_ADDR_U", "RW", 32, 0, {""});
    IMS_ADDR_U.set_powerwell("vcccfn_gated");
    IMS_ADDR_U.set_rand_mode(0);
   IMS_ADDR_U.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IMS_ADDR_U ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AI_ADDR_U_reg) 
endclass : hqm_system_csr_bridge_AI_ADDR_U_reg

// ================================================

class hqm_system_csr_bridge_AI_DATA_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IMS_DATA;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AI_DATA_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_DATA, IMS_DATA.desired)
     `RAL_FIELD_CP_16(IMS_DATA, IMS_DATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IMS_DATA, IMS_DATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_DATA, IMS_DATA.actual)
     `RAL_FIELD_CP_16(IMS_DATA, IMS_DATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IMS_DATA, IMS_DATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IMS_DATA = new("IMS_DATA", "RW", 32, 0, {""});
    IMS_DATA.set_powerwell("vcccfn_gated");
    IMS_DATA.set_rand_mode(0);
   IMS_DATA.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IMS_DATA ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AI_DATA_reg) 
endclass : hqm_system_csr_bridge_AI_DATA_reg

// ================================================

class hqm_system_csr_bridge_AI_CTRL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IMS_MASK;
  sla_ral_field IMS_PEND;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AI_CTRL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_MASK, IMS_MASK.desired)
     `RAL_FIELD_CP_1(IMS_MASK, IMS_MASK.desired, 0)
     `RAL_FIELD_CP(IMS_PEND, IMS_PEND.desired)
     `RAL_FIELD_CP_1(IMS_PEND, IMS_PEND.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_MASK, IMS_MASK.actual)
     `RAL_FIELD_CP_1(IMS_MASK, IMS_MASK.actual, 0)
     `RAL_FIELD_CP(IMS_PEND, IMS_PEND.actual)
     `RAL_FIELD_CP_1(IMS_PEND, IMS_PEND.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IMS_MASK = new("IMS_MASK", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL%ARRAY_IDX_STR%.IMS_MASK"});
    IMS_MASK.set_powerwell("vcccfn_gated");
    IMS_MASK.set_rand_mode(0);
   IMS_MASK.set_reset_signame("hqm_inp_gated_rst_n");
    IMS_MASK.set_logical_path("HQMID");
    void'(add_field( IMS_MASK ));

    IMS_PEND = new("IMS_PEND", "RO/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL%ARRAY_IDX_STR%.IMS_PEND"});
    IMS_PEND.set_powerwell("vcccfn_gated");
    IMS_PEND.set_rand_mode(0);
   IMS_PEND.set_reset_signame("hqm_inp_gated_rst_n");
    IMS_PEND.set_logical_path("HQMID");
    void'(add_field( IMS_PEND ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AI_CTRL_reg) 
endclass : hqm_system_csr_bridge_AI_CTRL_reg

// ================================================

class hqm_system_csr_bridge_IMS_PEND_CLEAR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VEC;
  sla_ral_field VALID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_IMS_PEND_CLEAR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VEC, VEC.desired)
     `RAL_FIELD_CP_8(VEC, VEC.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(VALID, VALID.desired)
     `RAL_FIELD_CP_1(VALID, VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VEC, VEC.actual)
     `RAL_FIELD_CP_8(VEC, VEC.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(VALID, VALID.actual)
     `RAL_FIELD_CP_1(VALID, VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VEC = new("VEC", "RW", 8, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IMS_PEND_CLEAR.VEC"});
    VEC.set_powerwell("vcccfn_gated");
    VEC.set_rand_mode(0);
   VEC.set_reset_signame("hqm_inp_gated_rst_n");
    VEC.set_logical_path("HQMID");
    void'(add_field( VEC ));

    VALID = new("VALID", "RW", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IMS_PEND_CLEAR.VALID"});
    VALID.set_powerwell("vcccfn_gated");
    VALID.set_rand_mode(0);
   VALID.set_reset_signame("hqm_inp_gated_rst_n");
    VALID.set_logical_path("HQMID");
    void'(add_field( VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_IMS_PEND_CLEAR_reg) 
endclass : hqm_system_csr_bridge_IMS_PEND_CLEAR_reg

// ================================================

class hqm_system_csr_bridge_WB_SCH_OUT_AFULL_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_WB_SCH_OUT_AFULL_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WB_SCH_OUT_AFULL_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WB_SCH_OUT_AFULL_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn_gated");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("hqm_inp_gated_rst_n");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_WB_SCH_OUT_AFULL_AGITATE_CONTROL_reg) 
endclass : hqm_system_csr_bridge_WB_SCH_OUT_AFULL_AGITATE_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IG_HCW_ENQ_AFULL_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IG_HCW_ENQ_AFULL_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn_gated");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("hqm_inp_gated_rst_n");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_reg) 
endclass : hqm_system_csr_bridge_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IG_HCW_ENQ_W_DB_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IG_HCW_ENQ_W_DB_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn_gated");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("hqm_inp_gated_rst_n");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_reg) 
endclass : hqm_system_csr_bridge_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_EG_HCW_SCHED_DB_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_EG_HCW_SCHED_DB_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EG_HCW_SCHED_DB_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EG_HCW_SCHED_DB_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn_gated");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("hqm_inp_gated_rst_n");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_EG_HCW_SCHED_DB_AGITATE_CONTROL_reg) 
endclass : hqm_system_csr_bridge_EG_HCW_SCHED_DB_AGITATE_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_AL_IMS_MSIX_DB_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AL_IMS_MSIX_DB_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_IMS_MSIX_DB_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_IMS_MSIX_DB_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn_gated");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("hqm_inp_gated_rst_n");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AL_IMS_MSIX_DB_AGITATE_CONTROL_reg) 
endclass : hqm_system_csr_bridge_AL_IMS_MSIX_DB_AGITATE_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_AL_CWD_ALARM_DB_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AL_CWD_ALARM_DB_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_CWD_ALARM_DB_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_CWD_ALARM_DB_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn_gated");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("hqm_inp_gated_rst_n");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AL_CWD_ALARM_DB_AGITATE_CONTROL_reg) 
endclass : hqm_system_csr_bridge_AL_CWD_ALARM_DB_AGITATE_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_SIF_ALARM_AFULL_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_SIF_ALARM_AFULL_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn_gated");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("hqm_inp_gated_rst_n");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_reg) 
endclass : hqm_system_csr_bridge_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_AL_HQM_ALARM_DB_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AL_HQM_ALARM_DB_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_HQM_ALARM_DB_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_HQM_ALARM_DB_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn_gated");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("hqm_inp_gated_rst_n");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AL_HQM_ALARM_DB_AGITATE_CONTROL_reg) 
endclass : hqm_system_csr_bridge_AL_HQM_ALARM_DB_AGITATE_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_ECC_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HCW_ENQ_ECC_ENABLE;
  sla_ral_field SCH_WB_ECC_ENABLE;
  sla_ral_field LUT_ECC_ENABLE;
  sla_ral_field WRITE_BAD_SB_ECC;
  sla_ral_field WRITE_BAD_MB_ECC;
  sla_ral_field INJ_MB_ECC_HCW_ENQ_LS;
  sla_ral_field INJ_SB_ECC_HCW_ENQ_LS;
  sla_ral_field INJ_MB_ECC_HCW_ENQ_MS;
  sla_ral_field INJ_SB_ECC_HCW_ENQ_MS;
  sla_ral_field INJ_MB_ECC_WBUF_W0_LS;
  sla_ral_field INJ_SB_ECC_WBUF_W0_LS;
  sla_ral_field INJ_MB_ECC_WBUF_W0_MS;
  sla_ral_field INJ_SB_ECC_WBUF_W0_MS;
  sla_ral_field INJ_MB_ECC_WBUF_W1_LS;
  sla_ral_field INJ_SB_ECC_WBUF_W1_LS;
  sla_ral_field INJ_MB_ECC_WBUF_W1_MS;
  sla_ral_field INJ_SB_ECC_WBUF_W1_MS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ECC_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HCW_ENQ_ECC_ENABLE, HCW_ENQ_ECC_ENABLE.desired)
     `RAL_FIELD_CP_1(HCW_ENQ_ECC_ENABLE, HCW_ENQ_ECC_ENABLE.desired, 0)
     `RAL_FIELD_CP(SCH_WB_ECC_ENABLE, SCH_WB_ECC_ENABLE.desired)
     `RAL_FIELD_CP_1(SCH_WB_ECC_ENABLE, SCH_WB_ECC_ENABLE.desired, 0)
     `RAL_FIELD_CP(LUT_ECC_ENABLE, LUT_ECC_ENABLE.desired)
     `RAL_FIELD_CP_1(LUT_ECC_ENABLE, LUT_ECC_ENABLE.desired, 0)
     `RAL_FIELD_CP(WRITE_BAD_SB_ECC, WRITE_BAD_SB_ECC.desired)
     `RAL_FIELD_CP_1(WRITE_BAD_SB_ECC, WRITE_BAD_SB_ECC.desired, 0)
     `RAL_FIELD_CP(WRITE_BAD_MB_ECC, WRITE_BAD_MB_ECC.desired)
     `RAL_FIELD_CP_1(WRITE_BAD_MB_ECC, WRITE_BAD_MB_ECC.desired, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_HCW_ENQ_LS, INJ_MB_ECC_HCW_ENQ_LS.desired)
     `RAL_FIELD_CP_1(INJ_MB_ECC_HCW_ENQ_LS, INJ_MB_ECC_HCW_ENQ_LS.desired, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_HCW_ENQ_LS, INJ_SB_ECC_HCW_ENQ_LS.desired)
     `RAL_FIELD_CP_1(INJ_SB_ECC_HCW_ENQ_LS, INJ_SB_ECC_HCW_ENQ_LS.desired, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_HCW_ENQ_MS, INJ_MB_ECC_HCW_ENQ_MS.desired)
     `RAL_FIELD_CP_1(INJ_MB_ECC_HCW_ENQ_MS, INJ_MB_ECC_HCW_ENQ_MS.desired, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_HCW_ENQ_MS, INJ_SB_ECC_HCW_ENQ_MS.desired)
     `RAL_FIELD_CP_1(INJ_SB_ECC_HCW_ENQ_MS, INJ_SB_ECC_HCW_ENQ_MS.desired, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_WBUF_W0_LS, INJ_MB_ECC_WBUF_W0_LS.desired)
     `RAL_FIELD_CP_1(INJ_MB_ECC_WBUF_W0_LS, INJ_MB_ECC_WBUF_W0_LS.desired, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_WBUF_W0_LS, INJ_SB_ECC_WBUF_W0_LS.desired)
     `RAL_FIELD_CP_1(INJ_SB_ECC_WBUF_W0_LS, INJ_SB_ECC_WBUF_W0_LS.desired, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_WBUF_W0_MS, INJ_MB_ECC_WBUF_W0_MS.desired)
     `RAL_FIELD_CP_1(INJ_MB_ECC_WBUF_W0_MS, INJ_MB_ECC_WBUF_W0_MS.desired, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_WBUF_W0_MS, INJ_SB_ECC_WBUF_W0_MS.desired)
     `RAL_FIELD_CP_1(INJ_SB_ECC_WBUF_W0_MS, INJ_SB_ECC_WBUF_W0_MS.desired, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_WBUF_W1_LS, INJ_MB_ECC_WBUF_W1_LS.desired)
     `RAL_FIELD_CP_1(INJ_MB_ECC_WBUF_W1_LS, INJ_MB_ECC_WBUF_W1_LS.desired, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_WBUF_W1_LS, INJ_SB_ECC_WBUF_W1_LS.desired)
     `RAL_FIELD_CP_1(INJ_SB_ECC_WBUF_W1_LS, INJ_SB_ECC_WBUF_W1_LS.desired, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_WBUF_W1_MS, INJ_MB_ECC_WBUF_W1_MS.desired)
     `RAL_FIELD_CP_1(INJ_MB_ECC_WBUF_W1_MS, INJ_MB_ECC_WBUF_W1_MS.desired, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_WBUF_W1_MS, INJ_SB_ECC_WBUF_W1_MS.desired)
     `RAL_FIELD_CP_1(INJ_SB_ECC_WBUF_W1_MS, INJ_SB_ECC_WBUF_W1_MS.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HCW_ENQ_ECC_ENABLE, HCW_ENQ_ECC_ENABLE.actual)
     `RAL_FIELD_CP_1(HCW_ENQ_ECC_ENABLE, HCW_ENQ_ECC_ENABLE.actual, 0)
     `RAL_FIELD_CP(SCH_WB_ECC_ENABLE, SCH_WB_ECC_ENABLE.actual)
     `RAL_FIELD_CP_1(SCH_WB_ECC_ENABLE, SCH_WB_ECC_ENABLE.actual, 0)
     `RAL_FIELD_CP(LUT_ECC_ENABLE, LUT_ECC_ENABLE.actual)
     `RAL_FIELD_CP_1(LUT_ECC_ENABLE, LUT_ECC_ENABLE.actual, 0)
     `RAL_FIELD_CP(WRITE_BAD_SB_ECC, WRITE_BAD_SB_ECC.actual)
     `RAL_FIELD_CP_1(WRITE_BAD_SB_ECC, WRITE_BAD_SB_ECC.actual, 0)
     `RAL_FIELD_CP(WRITE_BAD_MB_ECC, WRITE_BAD_MB_ECC.actual)
     `RAL_FIELD_CP_1(WRITE_BAD_MB_ECC, WRITE_BAD_MB_ECC.actual, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_HCW_ENQ_LS, INJ_MB_ECC_HCW_ENQ_LS.actual)
     `RAL_FIELD_CP_1(INJ_MB_ECC_HCW_ENQ_LS, INJ_MB_ECC_HCW_ENQ_LS.actual, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_HCW_ENQ_LS, INJ_SB_ECC_HCW_ENQ_LS.actual)
     `RAL_FIELD_CP_1(INJ_SB_ECC_HCW_ENQ_LS, INJ_SB_ECC_HCW_ENQ_LS.actual, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_HCW_ENQ_MS, INJ_MB_ECC_HCW_ENQ_MS.actual)
     `RAL_FIELD_CP_1(INJ_MB_ECC_HCW_ENQ_MS, INJ_MB_ECC_HCW_ENQ_MS.actual, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_HCW_ENQ_MS, INJ_SB_ECC_HCW_ENQ_MS.actual)
     `RAL_FIELD_CP_1(INJ_SB_ECC_HCW_ENQ_MS, INJ_SB_ECC_HCW_ENQ_MS.actual, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_WBUF_W0_LS, INJ_MB_ECC_WBUF_W0_LS.actual)
     `RAL_FIELD_CP_1(INJ_MB_ECC_WBUF_W0_LS, INJ_MB_ECC_WBUF_W0_LS.actual, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_WBUF_W0_LS, INJ_SB_ECC_WBUF_W0_LS.actual)
     `RAL_FIELD_CP_1(INJ_SB_ECC_WBUF_W0_LS, INJ_SB_ECC_WBUF_W0_LS.actual, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_WBUF_W0_MS, INJ_MB_ECC_WBUF_W0_MS.actual)
     `RAL_FIELD_CP_1(INJ_MB_ECC_WBUF_W0_MS, INJ_MB_ECC_WBUF_W0_MS.actual, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_WBUF_W0_MS, INJ_SB_ECC_WBUF_W0_MS.actual)
     `RAL_FIELD_CP_1(INJ_SB_ECC_WBUF_W0_MS, INJ_SB_ECC_WBUF_W0_MS.actual, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_WBUF_W1_LS, INJ_MB_ECC_WBUF_W1_LS.actual)
     `RAL_FIELD_CP_1(INJ_MB_ECC_WBUF_W1_LS, INJ_MB_ECC_WBUF_W1_LS.actual, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_WBUF_W1_LS, INJ_SB_ECC_WBUF_W1_LS.actual)
     `RAL_FIELD_CP_1(INJ_SB_ECC_WBUF_W1_LS, INJ_SB_ECC_WBUF_W1_LS.actual, 0)
     `RAL_FIELD_CP(INJ_MB_ECC_WBUF_W1_MS, INJ_MB_ECC_WBUF_W1_MS.actual)
     `RAL_FIELD_CP_1(INJ_MB_ECC_WBUF_W1_MS, INJ_MB_ECC_WBUF_W1_MS.actual, 0)
     `RAL_FIELD_CP(INJ_SB_ECC_WBUF_W1_MS, INJ_SB_ECC_WBUF_W1_MS.actual)
     `RAL_FIELD_CP_1(INJ_SB_ECC_WBUF_W1_MS, INJ_SB_ECC_WBUF_W1_MS.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HCW_ENQ_ECC_ENABLE = new("HCW_ENQ_ECC_ENABLE", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.HCW_ENQ_ECC_ENABLE"});
    HCW_ENQ_ECC_ENABLE.set_powerwell("vcccfn_gated");
    HCW_ENQ_ECC_ENABLE.set_rand_mode(0);
   HCW_ENQ_ECC_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_ENQ_ECC_ENABLE.set_logical_path("HQMID");
    void'(add_field( HCW_ENQ_ECC_ENABLE ));

    SCH_WB_ECC_ENABLE = new("SCH_WB_ECC_ENABLE", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.SCH_WB_ECC_ENABLE"});
    SCH_WB_ECC_ENABLE.set_powerwell("vcccfn_gated");
    SCH_WB_ECC_ENABLE.set_rand_mode(0);
   SCH_WB_ECC_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_WB_ECC_ENABLE.set_logical_path("HQMID");
    void'(add_field( SCH_WB_ECC_ENABLE ));

    LUT_ECC_ENABLE = new("LUT_ECC_ENABLE", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.LUT_ECC_ENABLE"});
    LUT_ECC_ENABLE.set_powerwell("vcccfn_gated");
    LUT_ECC_ENABLE.set_rand_mode(0);
   LUT_ECC_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    LUT_ECC_ENABLE.set_logical_path("HQMID");
    void'(add_field( LUT_ECC_ENABLE ));

    WRITE_BAD_SB_ECC = new("WRITE_BAD_SB_ECC", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.WRITE_BAD_SB_ECC"});
    WRITE_BAD_SB_ECC.set_powerwell("vcccfn_gated");
    WRITE_BAD_SB_ECC.set_rand_mode(0);
   WRITE_BAD_SB_ECC.set_reset_signame("hqm_inp_gated_rst_n");
    WRITE_BAD_SB_ECC.set_logical_path("HQMID");
    void'(add_field( WRITE_BAD_SB_ECC ));

    WRITE_BAD_MB_ECC = new("WRITE_BAD_MB_ECC", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.WRITE_BAD_MB_ECC"});
    WRITE_BAD_MB_ECC.set_powerwell("vcccfn_gated");
    WRITE_BAD_MB_ECC.set_rand_mode(0);
   WRITE_BAD_MB_ECC.set_reset_signame("hqm_inp_gated_rst_n");
    WRITE_BAD_MB_ECC.set_logical_path("HQMID");
    void'(add_field( WRITE_BAD_MB_ECC ));

    INJ_MB_ECC_HCW_ENQ_LS = new("INJ_MB_ECC_HCW_ENQ_LS", "RW", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_HCW_ENQ_LS"});
    INJ_MB_ECC_HCW_ENQ_LS.set_powerwell("vcccfn_gated");
    INJ_MB_ECC_HCW_ENQ_LS.set_rand_mode(0);
   INJ_MB_ECC_HCW_ENQ_LS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_MB_ECC_HCW_ENQ_LS.set_logical_path("HQMID");
    void'(add_field( INJ_MB_ECC_HCW_ENQ_LS ));

    INJ_SB_ECC_HCW_ENQ_LS = new("INJ_SB_ECC_HCW_ENQ_LS", "RW", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_HCW_ENQ_LS"});
    INJ_SB_ECC_HCW_ENQ_LS.set_powerwell("vcccfn_gated");
    INJ_SB_ECC_HCW_ENQ_LS.set_rand_mode(0);
   INJ_SB_ECC_HCW_ENQ_LS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_SB_ECC_HCW_ENQ_LS.set_logical_path("HQMID");
    void'(add_field( INJ_SB_ECC_HCW_ENQ_LS ));

    INJ_MB_ECC_HCW_ENQ_MS = new("INJ_MB_ECC_HCW_ENQ_MS", "RW", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_HCW_ENQ_MS"});
    INJ_MB_ECC_HCW_ENQ_MS.set_powerwell("vcccfn_gated");
    INJ_MB_ECC_HCW_ENQ_MS.set_rand_mode(0);
   INJ_MB_ECC_HCW_ENQ_MS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_MB_ECC_HCW_ENQ_MS.set_logical_path("HQMID");
    void'(add_field( INJ_MB_ECC_HCW_ENQ_MS ));

    INJ_SB_ECC_HCW_ENQ_MS = new("INJ_SB_ECC_HCW_ENQ_MS", "RW", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_HCW_ENQ_MS"});
    INJ_SB_ECC_HCW_ENQ_MS.set_powerwell("vcccfn_gated");
    INJ_SB_ECC_HCW_ENQ_MS.set_rand_mode(0);
   INJ_SB_ECC_HCW_ENQ_MS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_SB_ECC_HCW_ENQ_MS.set_logical_path("HQMID");
    void'(add_field( INJ_SB_ECC_HCW_ENQ_MS ));

    INJ_MB_ECC_WBUF_W0_LS = new("INJ_MB_ECC_WBUF_W0_LS", "RW", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W0_LS"});
    INJ_MB_ECC_WBUF_W0_LS.set_powerwell("vcccfn_gated");
    INJ_MB_ECC_WBUF_W0_LS.set_rand_mode(0);
   INJ_MB_ECC_WBUF_W0_LS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_MB_ECC_WBUF_W0_LS.set_logical_path("HQMID");
    void'(add_field( INJ_MB_ECC_WBUF_W0_LS ));

    INJ_SB_ECC_WBUF_W0_LS = new("INJ_SB_ECC_WBUF_W0_LS", "RW", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W0_LS"});
    INJ_SB_ECC_WBUF_W0_LS.set_powerwell("vcccfn_gated");
    INJ_SB_ECC_WBUF_W0_LS.set_rand_mode(0);
   INJ_SB_ECC_WBUF_W0_LS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_SB_ECC_WBUF_W0_LS.set_logical_path("HQMID");
    void'(add_field( INJ_SB_ECC_WBUF_W0_LS ));

    INJ_MB_ECC_WBUF_W0_MS = new("INJ_MB_ECC_WBUF_W0_MS", "RW", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W0_MS"});
    INJ_MB_ECC_WBUF_W0_MS.set_powerwell("vcccfn_gated");
    INJ_MB_ECC_WBUF_W0_MS.set_rand_mode(0);
   INJ_MB_ECC_WBUF_W0_MS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_MB_ECC_WBUF_W0_MS.set_logical_path("HQMID");
    void'(add_field( INJ_MB_ECC_WBUF_W0_MS ));

    INJ_SB_ECC_WBUF_W0_MS = new("INJ_SB_ECC_WBUF_W0_MS", "RW", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W0_MS"});
    INJ_SB_ECC_WBUF_W0_MS.set_powerwell("vcccfn_gated");
    INJ_SB_ECC_WBUF_W0_MS.set_rand_mode(0);
   INJ_SB_ECC_WBUF_W0_MS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_SB_ECC_WBUF_W0_MS.set_logical_path("HQMID");
    void'(add_field( INJ_SB_ECC_WBUF_W0_MS ));

    INJ_MB_ECC_WBUF_W1_LS = new("INJ_MB_ECC_WBUF_W1_LS", "RW", 1, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W1_LS"});
    INJ_MB_ECC_WBUF_W1_LS.set_powerwell("vcccfn_gated");
    INJ_MB_ECC_WBUF_W1_LS.set_rand_mode(0);
   INJ_MB_ECC_WBUF_W1_LS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_MB_ECC_WBUF_W1_LS.set_logical_path("HQMID");
    void'(add_field( INJ_MB_ECC_WBUF_W1_LS ));

    INJ_SB_ECC_WBUF_W1_LS = new("INJ_SB_ECC_WBUF_W1_LS", "RW", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W1_LS"});
    INJ_SB_ECC_WBUF_W1_LS.set_powerwell("vcccfn_gated");
    INJ_SB_ECC_WBUF_W1_LS.set_rand_mode(0);
   INJ_SB_ECC_WBUF_W1_LS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_SB_ECC_WBUF_W1_LS.set_logical_path("HQMID");
    void'(add_field( INJ_SB_ECC_WBUF_W1_LS ));

    INJ_MB_ECC_WBUF_W1_MS = new("INJ_MB_ECC_WBUF_W1_MS", "RW", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W1_MS"});
    INJ_MB_ECC_WBUF_W1_MS.set_powerwell("vcccfn_gated");
    INJ_MB_ECC_WBUF_W1_MS.set_rand_mode(0);
   INJ_MB_ECC_WBUF_W1_MS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_MB_ECC_WBUF_W1_MS.set_logical_path("HQMID");
    void'(add_field( INJ_MB_ECC_WBUF_W1_MS ));

    INJ_SB_ECC_WBUF_W1_MS = new("INJ_SB_ECC_WBUF_W1_MS", "RW", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W1_MS"});
    INJ_SB_ECC_WBUF_W1_MS.set_powerwell("vcccfn_gated");
    INJ_SB_ECC_WBUF_W1_MS.set_rand_mode(0);
   INJ_SB_ECC_WBUF_W1_MS.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_SB_ECC_WBUF_W1_MS.set_logical_path("HQMID");
    void'(add_field( INJ_SB_ECC_WBUF_W1_MS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ECC_CTL_reg) 
endclass : hqm_system_csr_bridge_ECC_CTL_reg

// ================================================

class hqm_system_csr_bridge_PARITY_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WRITE_BAD_PARITY;
  sla_ral_field ALARM_PAR_OFF;
  sla_ral_field EGRESS_PAR_OFF;
  sla_ral_field INGRESS_PAR_OFF;
  sla_ral_field WBUF_PAR_OFF;
  sla_ral_field INJ_PAR_ERR_SCH_DATA;
  sla_ral_field INJ_PAR_ERR_SCH_REQ;
  sla_ral_field INJ_PAR_ERR_HCW_PORT;
  sla_ral_field INJ_PAR_ERR_SCH_OUT;
  sla_ral_field INJ_PAR_ERR_VF_SYND;
  sla_ral_field EGRESS_RES_OFF;
  sla_ral_field WBUF_RES_OFF;
  sla_ral_field INJ_RES_ERR_SCH_REQ;
  sla_ral_field INJ_PAR_ERR_SCH_PL;
  sla_ral_field INJ_PAR_ERR_SCH;
  sla_ral_field INJ_RES_ERR_SCH;
  sla_ral_field INJ_PAR_ERR_INT;
  sla_ral_field INJ_RES_ERR_INT;
  sla_ral_field EGRESS_INT_PAR_OFF;
  sla_ral_field INJ_PAR_ERR_SCH_INT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PARITY_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WRITE_BAD_PARITY, WRITE_BAD_PARITY.desired)
     `RAL_FIELD_CP_1(WRITE_BAD_PARITY, WRITE_BAD_PARITY.desired, 0)
     `RAL_FIELD_CP(ALARM_PAR_OFF, ALARM_PAR_OFF.desired)
     `RAL_FIELD_CP_1(ALARM_PAR_OFF, ALARM_PAR_OFF.desired, 0)
     `RAL_FIELD_CP(EGRESS_PAR_OFF, EGRESS_PAR_OFF.desired)
     `RAL_FIELD_CP_1(EGRESS_PAR_OFF, EGRESS_PAR_OFF.desired, 0)
     `RAL_FIELD_CP(INGRESS_PAR_OFF, INGRESS_PAR_OFF.desired)
     `RAL_FIELD_CP_1(INGRESS_PAR_OFF, INGRESS_PAR_OFF.desired, 0)
     `RAL_FIELD_CP(WBUF_PAR_OFF, WBUF_PAR_OFF.desired)
     `RAL_FIELD_CP_1(WBUF_PAR_OFF, WBUF_PAR_OFF.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_DATA, INJ_PAR_ERR_SCH_DATA.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_DATA, INJ_PAR_ERR_SCH_DATA.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_REQ, INJ_PAR_ERR_SCH_REQ.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_REQ, INJ_PAR_ERR_SCH_REQ.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_HCW_PORT, INJ_PAR_ERR_HCW_PORT.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_HCW_PORT, INJ_PAR_ERR_HCW_PORT.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_OUT, INJ_PAR_ERR_SCH_OUT.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_OUT, INJ_PAR_ERR_SCH_OUT.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_VF_SYND, INJ_PAR_ERR_VF_SYND.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_VF_SYND, INJ_PAR_ERR_VF_SYND.desired, 0)
     `RAL_FIELD_CP(EGRESS_RES_OFF, EGRESS_RES_OFF.desired)
     `RAL_FIELD_CP_1(EGRESS_RES_OFF, EGRESS_RES_OFF.desired, 0)
     `RAL_FIELD_CP(WBUF_RES_OFF, WBUF_RES_OFF.desired)
     `RAL_FIELD_CP_1(WBUF_RES_OFF, WBUF_RES_OFF.desired, 0)
     `RAL_FIELD_CP(INJ_RES_ERR_SCH_REQ, INJ_RES_ERR_SCH_REQ.desired)
     `RAL_FIELD_CP_1(INJ_RES_ERR_SCH_REQ, INJ_RES_ERR_SCH_REQ.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_PL, INJ_PAR_ERR_SCH_PL.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_PL, INJ_PAR_ERR_SCH_PL.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH, INJ_PAR_ERR_SCH.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH, INJ_PAR_ERR_SCH.desired, 0)
     `RAL_FIELD_CP(INJ_RES_ERR_SCH, INJ_RES_ERR_SCH.desired)
     `RAL_FIELD_CP_1(INJ_RES_ERR_SCH, INJ_RES_ERR_SCH.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_INT, INJ_PAR_ERR_INT.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_INT, INJ_PAR_ERR_INT.desired, 0)
     `RAL_FIELD_CP(INJ_RES_ERR_INT, INJ_RES_ERR_INT.desired)
     `RAL_FIELD_CP_1(INJ_RES_ERR_INT, INJ_RES_ERR_INT.desired, 0)
     `RAL_FIELD_CP(EGRESS_INT_PAR_OFF, EGRESS_INT_PAR_OFF.desired)
     `RAL_FIELD_CP_1(EGRESS_INT_PAR_OFF, EGRESS_INT_PAR_OFF.desired, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_INT, INJ_PAR_ERR_SCH_INT.desired)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_INT, INJ_PAR_ERR_SCH_INT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WRITE_BAD_PARITY, WRITE_BAD_PARITY.actual)
     `RAL_FIELD_CP_1(WRITE_BAD_PARITY, WRITE_BAD_PARITY.actual, 0)
     `RAL_FIELD_CP(ALARM_PAR_OFF, ALARM_PAR_OFF.actual)
     `RAL_FIELD_CP_1(ALARM_PAR_OFF, ALARM_PAR_OFF.actual, 0)
     `RAL_FIELD_CP(EGRESS_PAR_OFF, EGRESS_PAR_OFF.actual)
     `RAL_FIELD_CP_1(EGRESS_PAR_OFF, EGRESS_PAR_OFF.actual, 0)
     `RAL_FIELD_CP(INGRESS_PAR_OFF, INGRESS_PAR_OFF.actual)
     `RAL_FIELD_CP_1(INGRESS_PAR_OFF, INGRESS_PAR_OFF.actual, 0)
     `RAL_FIELD_CP(WBUF_PAR_OFF, WBUF_PAR_OFF.actual)
     `RAL_FIELD_CP_1(WBUF_PAR_OFF, WBUF_PAR_OFF.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_DATA, INJ_PAR_ERR_SCH_DATA.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_DATA, INJ_PAR_ERR_SCH_DATA.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_REQ, INJ_PAR_ERR_SCH_REQ.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_REQ, INJ_PAR_ERR_SCH_REQ.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_HCW_PORT, INJ_PAR_ERR_HCW_PORT.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_HCW_PORT, INJ_PAR_ERR_HCW_PORT.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_OUT, INJ_PAR_ERR_SCH_OUT.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_OUT, INJ_PAR_ERR_SCH_OUT.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_VF_SYND, INJ_PAR_ERR_VF_SYND.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_VF_SYND, INJ_PAR_ERR_VF_SYND.actual, 0)
     `RAL_FIELD_CP(EGRESS_RES_OFF, EGRESS_RES_OFF.actual)
     `RAL_FIELD_CP_1(EGRESS_RES_OFF, EGRESS_RES_OFF.actual, 0)
     `RAL_FIELD_CP(WBUF_RES_OFF, WBUF_RES_OFF.actual)
     `RAL_FIELD_CP_1(WBUF_RES_OFF, WBUF_RES_OFF.actual, 0)
     `RAL_FIELD_CP(INJ_RES_ERR_SCH_REQ, INJ_RES_ERR_SCH_REQ.actual)
     `RAL_FIELD_CP_1(INJ_RES_ERR_SCH_REQ, INJ_RES_ERR_SCH_REQ.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_PL, INJ_PAR_ERR_SCH_PL.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_PL, INJ_PAR_ERR_SCH_PL.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH, INJ_PAR_ERR_SCH.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH, INJ_PAR_ERR_SCH.actual, 0)
     `RAL_FIELD_CP(INJ_RES_ERR_SCH, INJ_RES_ERR_SCH.actual)
     `RAL_FIELD_CP_1(INJ_RES_ERR_SCH, INJ_RES_ERR_SCH.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_INT, INJ_PAR_ERR_INT.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_INT, INJ_PAR_ERR_INT.actual, 0)
     `RAL_FIELD_CP(INJ_RES_ERR_INT, INJ_RES_ERR_INT.actual)
     `RAL_FIELD_CP_1(INJ_RES_ERR_INT, INJ_RES_ERR_INT.actual, 0)
     `RAL_FIELD_CP(EGRESS_INT_PAR_OFF, EGRESS_INT_PAR_OFF.actual)
     `RAL_FIELD_CP_1(EGRESS_INT_PAR_OFF, EGRESS_INT_PAR_OFF.actual, 0)
     `RAL_FIELD_CP(INJ_PAR_ERR_SCH_INT, INJ_PAR_ERR_SCH_INT.actual)
     `RAL_FIELD_CP_1(INJ_PAR_ERR_SCH_INT, INJ_PAR_ERR_SCH_INT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WRITE_BAD_PARITY = new("WRITE_BAD_PARITY", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WRITE_BAD_PARITY"});
    WRITE_BAD_PARITY.set_powerwell("vcccfn_gated");
    WRITE_BAD_PARITY.set_rand_mode(0);
   WRITE_BAD_PARITY.set_reset_signame("hqm_inp_gated_rst_n");
    WRITE_BAD_PARITY.set_logical_path("HQMID");
    void'(add_field( WRITE_BAD_PARITY ));

    ALARM_PAR_OFF = new("ALARM_PAR_OFF", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.ALARM_PAR_OFF"});
    ALARM_PAR_OFF.set_powerwell("vcccfn_gated");
    ALARM_PAR_OFF.set_rand_mode(0);
   ALARM_PAR_OFF.set_reset_signame("hqm_inp_gated_rst_n");
    ALARM_PAR_OFF.set_logical_path("HQMID");
    void'(add_field( ALARM_PAR_OFF ));

    EGRESS_PAR_OFF = new("EGRESS_PAR_OFF", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_PAR_OFF"});
    EGRESS_PAR_OFF.set_powerwell("vcccfn_gated");
    EGRESS_PAR_OFF.set_rand_mode(0);
   EGRESS_PAR_OFF.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_PAR_OFF.set_logical_path("HQMID");
    void'(add_field( EGRESS_PAR_OFF ));

    INGRESS_PAR_OFF = new("INGRESS_PAR_OFF", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INGRESS_PAR_OFF"});
    INGRESS_PAR_OFF.set_powerwell("vcccfn_gated");
    INGRESS_PAR_OFF.set_rand_mode(0);
   INGRESS_PAR_OFF.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_PAR_OFF.set_logical_path("HQMID");
    void'(add_field( INGRESS_PAR_OFF ));

    WBUF_PAR_OFF = new("WBUF_PAR_OFF", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WBUF_PAR_OFF"});
    WBUF_PAR_OFF.set_powerwell("vcccfn_gated");
    WBUF_PAR_OFF.set_rand_mode(0);
   WBUF_PAR_OFF.set_reset_signame("hqm_inp_gated_rst_n");
    WBUF_PAR_OFF.set_logical_path("HQMID");
    void'(add_field( WBUF_PAR_OFF ));

    INJ_PAR_ERR_SCH_DATA = new("INJ_PAR_ERR_SCH_DATA", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_DATA"});
    INJ_PAR_ERR_SCH_DATA.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_SCH_DATA.set_rand_mode(0);
   INJ_PAR_ERR_SCH_DATA.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_SCH_DATA.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_SCH_DATA ));

    INJ_PAR_ERR_SCH_REQ = new("INJ_PAR_ERR_SCH_REQ", "RW", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_REQ"});
    INJ_PAR_ERR_SCH_REQ.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_SCH_REQ.set_rand_mode(0);
   INJ_PAR_ERR_SCH_REQ.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_SCH_REQ.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_SCH_REQ ));

    INJ_PAR_ERR_HCW_PORT = new("INJ_PAR_ERR_HCW_PORT", "RW", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_HCW_PORT"});
    INJ_PAR_ERR_HCW_PORT.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_HCW_PORT.set_rand_mode(0);
   INJ_PAR_ERR_HCW_PORT.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_HCW_PORT.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_HCW_PORT ));

    INJ_PAR_ERR_SCH_OUT = new("INJ_PAR_ERR_SCH_OUT", "RW", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_OUT"});
    INJ_PAR_ERR_SCH_OUT.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_SCH_OUT.set_rand_mode(0);
   INJ_PAR_ERR_SCH_OUT.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_SCH_OUT.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_SCH_OUT ));

    INJ_PAR_ERR_VF_SYND = new("INJ_PAR_ERR_VF_SYND", "RW", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_VF_SYND"});
    INJ_PAR_ERR_VF_SYND.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_VF_SYND.set_rand_mode(0);
   INJ_PAR_ERR_VF_SYND.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_VF_SYND.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_VF_SYND ));

    EGRESS_RES_OFF = new("EGRESS_RES_OFF", "RW", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_RES_OFF"});
    EGRESS_RES_OFF.set_powerwell("vcccfn_gated");
    EGRESS_RES_OFF.set_rand_mode(0);
   EGRESS_RES_OFF.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_RES_OFF.set_logical_path("HQMID");
    void'(add_field( EGRESS_RES_OFF ));

    WBUF_RES_OFF = new("WBUF_RES_OFF", "RW", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WBUF_RES_OFF"});
    WBUF_RES_OFF.set_powerwell("vcccfn_gated");
    WBUF_RES_OFF.set_rand_mode(0);
   WBUF_RES_OFF.set_reset_signame("hqm_inp_gated_rst_n");
    WBUF_RES_OFF.set_logical_path("HQMID");
    void'(add_field( WBUF_RES_OFF ));

    INJ_RES_ERR_SCH_REQ = new("INJ_RES_ERR_SCH_REQ", "RW", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_SCH_REQ"});
    INJ_RES_ERR_SCH_REQ.set_powerwell("vcccfn_gated");
    INJ_RES_ERR_SCH_REQ.set_rand_mode(0);
   INJ_RES_ERR_SCH_REQ.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_RES_ERR_SCH_REQ.set_logical_path("HQMID");
    void'(add_field( INJ_RES_ERR_SCH_REQ ));

    INJ_PAR_ERR_SCH_PL = new("INJ_PAR_ERR_SCH_PL", "RW", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_PL"});
    INJ_PAR_ERR_SCH_PL.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_SCH_PL.set_rand_mode(0);
   INJ_PAR_ERR_SCH_PL.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_SCH_PL.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_SCH_PL ));

    INJ_PAR_ERR_SCH = new("INJ_PAR_ERR_SCH", "RW", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH"});
    INJ_PAR_ERR_SCH.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_SCH.set_rand_mode(0);
   INJ_PAR_ERR_SCH.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_SCH.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_SCH ));

    INJ_RES_ERR_SCH = new("INJ_RES_ERR_SCH", "RW", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_SCH"});
    INJ_RES_ERR_SCH.set_powerwell("vcccfn_gated");
    INJ_RES_ERR_SCH.set_rand_mode(0);
   INJ_RES_ERR_SCH.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_RES_ERR_SCH.set_logical_path("HQMID");
    void'(add_field( INJ_RES_ERR_SCH ));

    INJ_PAR_ERR_INT = new("INJ_PAR_ERR_INT", "RW", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_INT"});
    INJ_PAR_ERR_INT.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_INT.set_rand_mode(0);
   INJ_PAR_ERR_INT.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_INT.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_INT ));

    INJ_RES_ERR_INT = new("INJ_RES_ERR_INT", "RW", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_INT"});
    INJ_RES_ERR_INT.set_powerwell("vcccfn_gated");
    INJ_RES_ERR_INT.set_rand_mode(0);
   INJ_RES_ERR_INT.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_RES_ERR_INT.set_logical_path("HQMID");
    void'(add_field( INJ_RES_ERR_INT ));

    EGRESS_INT_PAR_OFF = new("EGRESS_INT_PAR_OFF", "RW", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_INT_PAR_OFF"});
    EGRESS_INT_PAR_OFF.set_powerwell("vcccfn_gated");
    EGRESS_INT_PAR_OFF.set_rand_mode(0);
   EGRESS_INT_PAR_OFF.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_INT_PAR_OFF.set_logical_path("HQMID");
    void'(add_field( EGRESS_INT_PAR_OFF ));

    INJ_PAR_ERR_SCH_INT = new("INJ_PAR_ERR_SCH_INT", "RW", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_INT"});
    INJ_PAR_ERR_SCH_INT.set_powerwell("vcccfn_gated");
    INJ_PAR_ERR_SCH_INT.set_rand_mode(0);
   INJ_PAR_ERR_SCH_INT.set_reset_signame("hqm_inp_gated_rst_n");
    INJ_PAR_ERR_SCH_INT.set_logical_path("HQMID");
    void'(add_field( INJ_PAR_ERR_SCH_INT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PARITY_CTL_reg) 
endclass : hqm_system_csr_bridge_PARITY_CTL_reg

// ================================================

class hqm_system_csr_bridge_WRITE_BUFFER_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IGNORE_DIR_WB_V;
  sla_ral_field WRITE_SINGLE_BEATS;
  sla_ral_field HOLD_SCH_SM;
  sla_ral_field IGNORE_LDB_WB_V;
  sla_ral_field ARB_SCH_MASK;
  sla_ral_field ARB_MSI_MASK;
  sla_ral_field SINGLE_STEP_SCH;
  sla_ral_field SINGLE_STEP_MSI;
  sla_ral_field ENABLE_DEBUG;
  sla_ral_field SCH_RATE_LIMIT;
  sla_ral_field EARLY_DIR_INT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_WRITE_BUFFER_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IGNORE_DIR_WB_V, IGNORE_DIR_WB_V.desired)
     `RAL_FIELD_CP_1(IGNORE_DIR_WB_V, IGNORE_DIR_WB_V.desired, 0)
     `RAL_FIELD_CP(WRITE_SINGLE_BEATS, WRITE_SINGLE_BEATS.desired)
     `RAL_FIELD_CP_1(WRITE_SINGLE_BEATS, WRITE_SINGLE_BEATS.desired, 0)
     `RAL_FIELD_CP(HOLD_SCH_SM, HOLD_SCH_SM.desired)
     `RAL_FIELD_CP_1(HOLD_SCH_SM, HOLD_SCH_SM.desired, 0)
     `RAL_FIELD_CP(IGNORE_LDB_WB_V, IGNORE_LDB_WB_V.desired)
     `RAL_FIELD_CP_1(IGNORE_LDB_WB_V, IGNORE_LDB_WB_V.desired, 0)
     `RAL_FIELD_CP(ARB_SCH_MASK, ARB_SCH_MASK.desired)
     `RAL_FIELD_CP_1(ARB_SCH_MASK, ARB_SCH_MASK.desired, 0)
     `RAL_FIELD_CP(ARB_MSI_MASK, ARB_MSI_MASK.desired)
     `RAL_FIELD_CP_1(ARB_MSI_MASK, ARB_MSI_MASK.desired, 0)
     `RAL_FIELD_CP(SINGLE_STEP_SCH, SINGLE_STEP_SCH.desired)
     `RAL_FIELD_CP_1(SINGLE_STEP_SCH, SINGLE_STEP_SCH.desired, 0)
     `RAL_FIELD_CP(SINGLE_STEP_MSI, SINGLE_STEP_MSI.desired)
     `RAL_FIELD_CP_1(SINGLE_STEP_MSI, SINGLE_STEP_MSI.desired, 0)
     `RAL_FIELD_CP(ENABLE_DEBUG, ENABLE_DEBUG.desired)
     `RAL_FIELD_CP_1(ENABLE_DEBUG, ENABLE_DEBUG.desired, 0)
     `RAL_FIELD_CP(SCH_RATE_LIMIT, SCH_RATE_LIMIT.desired)
     `RAL_FIELD_CP_3(SCH_RATE_LIMIT, SCH_RATE_LIMIT.desired, 0,1,2)
     `RAL_FIELD_CP(EARLY_DIR_INT, EARLY_DIR_INT.desired)
     `RAL_FIELD_CP_1(EARLY_DIR_INT, EARLY_DIR_INT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IGNORE_DIR_WB_V, IGNORE_DIR_WB_V.actual)
     `RAL_FIELD_CP_1(IGNORE_DIR_WB_V, IGNORE_DIR_WB_V.actual, 0)
     `RAL_FIELD_CP(WRITE_SINGLE_BEATS, WRITE_SINGLE_BEATS.actual)
     `RAL_FIELD_CP_1(WRITE_SINGLE_BEATS, WRITE_SINGLE_BEATS.actual, 0)
     `RAL_FIELD_CP(HOLD_SCH_SM, HOLD_SCH_SM.actual)
     `RAL_FIELD_CP_1(HOLD_SCH_SM, HOLD_SCH_SM.actual, 0)
     `RAL_FIELD_CP(IGNORE_LDB_WB_V, IGNORE_LDB_WB_V.actual)
     `RAL_FIELD_CP_1(IGNORE_LDB_WB_V, IGNORE_LDB_WB_V.actual, 0)
     `RAL_FIELD_CP(ARB_SCH_MASK, ARB_SCH_MASK.actual)
     `RAL_FIELD_CP_1(ARB_SCH_MASK, ARB_SCH_MASK.actual, 0)
     `RAL_FIELD_CP(ARB_MSI_MASK, ARB_MSI_MASK.actual)
     `RAL_FIELD_CP_1(ARB_MSI_MASK, ARB_MSI_MASK.actual, 0)
     `RAL_FIELD_CP(SINGLE_STEP_SCH, SINGLE_STEP_SCH.actual)
     `RAL_FIELD_CP_1(SINGLE_STEP_SCH, SINGLE_STEP_SCH.actual, 0)
     `RAL_FIELD_CP(SINGLE_STEP_MSI, SINGLE_STEP_MSI.actual)
     `RAL_FIELD_CP_1(SINGLE_STEP_MSI, SINGLE_STEP_MSI.actual, 0)
     `RAL_FIELD_CP(ENABLE_DEBUG, ENABLE_DEBUG.actual)
     `RAL_FIELD_CP_1(ENABLE_DEBUG, ENABLE_DEBUG.actual, 0)
     `RAL_FIELD_CP(SCH_RATE_LIMIT, SCH_RATE_LIMIT.actual)
     `RAL_FIELD_CP_3(SCH_RATE_LIMIT, SCH_RATE_LIMIT.actual, 0,1,2)
     `RAL_FIELD_CP(EARLY_DIR_INT, EARLY_DIR_INT.actual)
     `RAL_FIELD_CP_1(EARLY_DIR_INT, EARLY_DIR_INT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IGNORE_DIR_WB_V = new("IGNORE_DIR_WB_V", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.IGNORE_DIR_WB_V"});
    IGNORE_DIR_WB_V.set_powerwell("vcccfn_gated");
    IGNORE_DIR_WB_V.set_rand_mode(0);
   IGNORE_DIR_WB_V.set_reset_signame("hqm_inp_gated_rst_n");
    IGNORE_DIR_WB_V.set_logical_path("HQMID");
    void'(add_field( IGNORE_DIR_WB_V ));

    WRITE_SINGLE_BEATS = new("WRITE_SINGLE_BEATS", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.WRITE_SINGLE_BEATS"});
    WRITE_SINGLE_BEATS.set_powerwell("vcccfn_gated");
    WRITE_SINGLE_BEATS.set_rand_mode(0);
   WRITE_SINGLE_BEATS.set_reset_signame("hqm_inp_gated_rst_n");
    WRITE_SINGLE_BEATS.set_logical_path("HQMID");
    void'(add_field( WRITE_SINGLE_BEATS ));

    HOLD_SCH_SM = new("HOLD_SCH_SM", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.HOLD_SCH_SM"});
    HOLD_SCH_SM.set_powerwell("vcccfn_gated");
    HOLD_SCH_SM.set_rand_mode(0);
   HOLD_SCH_SM.set_reset_signame("hqm_inp_gated_rst_n");
    HOLD_SCH_SM.set_logical_path("HQMID");
    void'(add_field( HOLD_SCH_SM ));

    IGNORE_LDB_WB_V = new("IGNORE_LDB_WB_V", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.IGNORE_LDB_WB_V"});
    IGNORE_LDB_WB_V.set_powerwell("vcccfn_gated");
    IGNORE_LDB_WB_V.set_rand_mode(0);
   IGNORE_LDB_WB_V.set_reset_signame("hqm_inp_gated_rst_n");
    IGNORE_LDB_WB_V.set_logical_path("HQMID");
    void'(add_field( IGNORE_LDB_WB_V ));

    ARB_SCH_MASK = new("ARB_SCH_MASK", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ARB_SCH_MASK"});
    ARB_SCH_MASK.set_powerwell("vcccfn_gated");
    ARB_SCH_MASK.set_rand_mode(0);
   ARB_SCH_MASK.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_SCH_MASK.set_logical_path("HQMID");
    void'(add_field( ARB_SCH_MASK ));

    ARB_MSI_MASK = new("ARB_MSI_MASK", "RW", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ARB_MSI_MASK"});
    ARB_MSI_MASK.set_powerwell("vcccfn_gated");
    ARB_MSI_MASK.set_rand_mode(0);
   ARB_MSI_MASK.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_MSI_MASK.set_logical_path("HQMID");
    void'(add_field( ARB_MSI_MASK ));

    SINGLE_STEP_SCH = new("SINGLE_STEP_SCH", "RW", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SINGLE_STEP_SCH"});
    SINGLE_STEP_SCH.set_powerwell("vcccfn_gated");
    SINGLE_STEP_SCH.set_rand_mode(0);
   SINGLE_STEP_SCH.set_reset_signame("hqm_inp_gated_rst_n");
    SINGLE_STEP_SCH.set_logical_path("HQMID");
    void'(add_field( SINGLE_STEP_SCH ));

    SINGLE_STEP_MSI = new("SINGLE_STEP_MSI", "RW", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SINGLE_STEP_MSI"});
    SINGLE_STEP_MSI.set_powerwell("vcccfn_gated");
    SINGLE_STEP_MSI.set_rand_mode(0);
   SINGLE_STEP_MSI.set_reset_signame("hqm_inp_gated_rst_n");
    SINGLE_STEP_MSI.set_logical_path("HQMID");
    void'(add_field( SINGLE_STEP_MSI ));

    ENABLE_DEBUG = new("ENABLE_DEBUG", "RW", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ENABLE_DEBUG"});
    ENABLE_DEBUG.set_powerwell("vcccfn_gated");
    ENABLE_DEBUG.set_rand_mode(0);
   ENABLE_DEBUG.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE_DEBUG.set_logical_path("HQMID");
    void'(add_field( ENABLE_DEBUG ));

    SCH_RATE_LIMIT = new("SCH_RATE_LIMIT", "RW", 3, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SCH_RATE_LIMIT"});
    SCH_RATE_LIMIT.set_powerwell("vcccfn_gated");
    SCH_RATE_LIMIT.set_rand_mode(0);
   SCH_RATE_LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_RATE_LIMIT.set_logical_path("HQMID");
    void'(add_field( SCH_RATE_LIMIT ));

    EARLY_DIR_INT = new("EARLY_DIR_INT", "RW", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.EARLY_DIR_INT"});
    EARLY_DIR_INT.set_powerwell("vcccfn_gated");
    EARLY_DIR_INT.set_rand_mode(0);
   EARLY_DIR_INT.set_reset_signame("hqm_inp_gated_rst_n");
    EARLY_DIR_INT.set_logical_path("HQMID");
    void'(add_field( EARLY_DIR_INT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_WRITE_BUFFER_CTL_reg) 
endclass : hqm_system_csr_bridge_WRITE_BUFFER_CTL_reg

// ================================================

class hqm_system_csr_bridge_ALARM_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DISABLE_HQM_ALARMS;
  sla_ral_field DISABLE_SIF_ALARMS;
  sla_ral_field DISABLE_SYS_ALARMS;
  sla_ral_field DISABLE_CWD_ALARMS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLE_HQM_ALARMS, DISABLE_HQM_ALARMS.desired)
     `RAL_FIELD_CP_1(DISABLE_HQM_ALARMS, DISABLE_HQM_ALARMS.desired, 0)
     `RAL_FIELD_CP(DISABLE_SIF_ALARMS, DISABLE_SIF_ALARMS.desired)
     `RAL_FIELD_CP_1(DISABLE_SIF_ALARMS, DISABLE_SIF_ALARMS.desired, 0)
     `RAL_FIELD_CP(DISABLE_SYS_ALARMS, DISABLE_SYS_ALARMS.desired)
     `RAL_FIELD_CP_1(DISABLE_SYS_ALARMS, DISABLE_SYS_ALARMS.desired, 0)
     `RAL_FIELD_CP(DISABLE_CWD_ALARMS, DISABLE_CWD_ALARMS.desired)
     `RAL_FIELD_CP_1(DISABLE_CWD_ALARMS, DISABLE_CWD_ALARMS.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLE_HQM_ALARMS, DISABLE_HQM_ALARMS.actual)
     `RAL_FIELD_CP_1(DISABLE_HQM_ALARMS, DISABLE_HQM_ALARMS.actual, 0)
     `RAL_FIELD_CP(DISABLE_SIF_ALARMS, DISABLE_SIF_ALARMS.actual)
     `RAL_FIELD_CP_1(DISABLE_SIF_ALARMS, DISABLE_SIF_ALARMS.actual, 0)
     `RAL_FIELD_CP(DISABLE_SYS_ALARMS, DISABLE_SYS_ALARMS.actual)
     `RAL_FIELD_CP_1(DISABLE_SYS_ALARMS, DISABLE_SYS_ALARMS.actual, 0)
     `RAL_FIELD_CP(DISABLE_CWD_ALARMS, DISABLE_CWD_ALARMS.actual)
     `RAL_FIELD_CP_1(DISABLE_CWD_ALARMS, DISABLE_CWD_ALARMS.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DISABLE_HQM_ALARMS = new("DISABLE_HQM_ALARMS", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_HQM_ALARMS"});
    DISABLE_HQM_ALARMS.set_powerwell("vcccfn_gated");
    DISABLE_HQM_ALARMS.set_rand_mode(0);
   DISABLE_HQM_ALARMS.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_HQM_ALARMS.set_logical_path("HQMID");
    void'(add_field( DISABLE_HQM_ALARMS ));

    DISABLE_SIF_ALARMS = new("DISABLE_SIF_ALARMS", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_SIF_ALARMS"});
    DISABLE_SIF_ALARMS.set_powerwell("vcccfn_gated");
    DISABLE_SIF_ALARMS.set_rand_mode(0);
   DISABLE_SIF_ALARMS.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_SIF_ALARMS.set_logical_path("HQMID");
    void'(add_field( DISABLE_SIF_ALARMS ));

    DISABLE_SYS_ALARMS = new("DISABLE_SYS_ALARMS", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_SYS_ALARMS"});
    DISABLE_SYS_ALARMS.set_powerwell("vcccfn_gated");
    DISABLE_SYS_ALARMS.set_rand_mode(0);
   DISABLE_SYS_ALARMS.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_SYS_ALARMS.set_logical_path("HQMID");
    void'(add_field( DISABLE_SYS_ALARMS ));

    DISABLE_CWD_ALARMS = new("DISABLE_CWD_ALARMS", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_CWD_ALARMS"});
    DISABLE_CWD_ALARMS.set_powerwell("vcccfn_gated");
    DISABLE_CWD_ALARMS.set_rand_mode(0);
   DISABLE_CWD_ALARMS.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_CWD_ALARMS.set_logical_path("HQMID");
    void'(add_field( DISABLE_CWD_ALARMS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_CTL_reg) 
endclass : hqm_system_csr_bridge_ALARM_CTL_reg

// ================================================

class hqm_system_csr_bridge_CFG_PATCH_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DELAY_CLOCKOFF;
  sla_ral_field DELAY_CLKOFF_BYPASS;
  sla_ral_field RSVZ1;
  sla_ral_field RSVZ0;
  sla_ral_field DISABLE_CLOCKOFF;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_CFG_PATCH_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.desired, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.actual, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DELAY_CLOCKOFF = new("DELAY_CLOCKOFF", "RW", 8, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DELAY_CLOCKOFF"});
    DELAY_CLOCKOFF.set_powerwell("vcccfn_gated");
    DELAY_CLOCKOFF.set_rand_mode(0);
   DELAY_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DELAY_CLOCKOFF ));

    DELAY_CLKOFF_BYPASS = new("DELAY_CLKOFF_BYPASS", "RW", 6, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS"});
    DELAY_CLKOFF_BYPASS.set_powerwell("vcccfn_gated");
    DELAY_CLKOFF_BYPASS.set_rand_mode(0);
   DELAY_CLKOFF_BYPASS.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLKOFF_BYPASS.set_logical_path("HQMID");
    void'(add_field( DELAY_CLKOFF_BYPASS ));

    RSVZ1 = new("RSVZ1", "RW", 2, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.RSVZ1"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    RSVZ0 = new("RSVZ0", "RW", 15, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.RSVZ0"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    DISABLE_CLOCKOFF = new("DISABLE_CLOCKOFF", "RW", 1, 31, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DISABLE_CLOCKOFF"});
    DISABLE_CLOCKOFF.set_powerwell("vcccfn_gated");
    DISABLE_CLOCKOFF.set_rand_mode(0);
   DISABLE_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DISABLE_CLOCKOFF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_CFG_PATCH_CONTROL_reg) 
endclass : hqm_system_csr_bridge_CFG_PATCH_CONTROL_reg

// ================================================

class hqm_system_csr_bridge_INGRESS_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HOLD_HCW_ENQ;
  sla_ral_field HOLD_HCW_W;
  sla_ral_field SINGLE_STEP_ENQ;
  sla_ral_field SINGLE_STEP_HCW_W;
  sla_ral_field ENABLE_DEBUG;
  sla_ral_field ENQ_RATE_LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_INGRESS_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HOLD_HCW_ENQ, HOLD_HCW_ENQ.desired)
     `RAL_FIELD_CP_1(HOLD_HCW_ENQ, HOLD_HCW_ENQ.desired, 0)
     `RAL_FIELD_CP(HOLD_HCW_W, HOLD_HCW_W.desired)
     `RAL_FIELD_CP_1(HOLD_HCW_W, HOLD_HCW_W.desired, 0)
     `RAL_FIELD_CP(SINGLE_STEP_ENQ, SINGLE_STEP_ENQ.desired)
     `RAL_FIELD_CP_1(SINGLE_STEP_ENQ, SINGLE_STEP_ENQ.desired, 0)
     `RAL_FIELD_CP(SINGLE_STEP_HCW_W, SINGLE_STEP_HCW_W.desired)
     `RAL_FIELD_CP_1(SINGLE_STEP_HCW_W, SINGLE_STEP_HCW_W.desired, 0)
     `RAL_FIELD_CP(ENABLE_DEBUG, ENABLE_DEBUG.desired)
     `RAL_FIELD_CP_1(ENABLE_DEBUG, ENABLE_DEBUG.desired, 0)
     `RAL_FIELD_CP(ENQ_RATE_LIMIT, ENQ_RATE_LIMIT.desired)
     `RAL_FIELD_CP_10(ENQ_RATE_LIMIT, ENQ_RATE_LIMIT.desired, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HOLD_HCW_ENQ, HOLD_HCW_ENQ.actual)
     `RAL_FIELD_CP_1(HOLD_HCW_ENQ, HOLD_HCW_ENQ.actual, 0)
     `RAL_FIELD_CP(HOLD_HCW_W, HOLD_HCW_W.actual)
     `RAL_FIELD_CP_1(HOLD_HCW_W, HOLD_HCW_W.actual, 0)
     `RAL_FIELD_CP(SINGLE_STEP_ENQ, SINGLE_STEP_ENQ.actual)
     `RAL_FIELD_CP_1(SINGLE_STEP_ENQ, SINGLE_STEP_ENQ.actual, 0)
     `RAL_FIELD_CP(SINGLE_STEP_HCW_W, SINGLE_STEP_HCW_W.actual)
     `RAL_FIELD_CP_1(SINGLE_STEP_HCW_W, SINGLE_STEP_HCW_W.actual, 0)
     `RAL_FIELD_CP(ENABLE_DEBUG, ENABLE_DEBUG.actual)
     `RAL_FIELD_CP_1(ENABLE_DEBUG, ENABLE_DEBUG.actual, 0)
     `RAL_FIELD_CP(ENQ_RATE_LIMIT, ENQ_RATE_LIMIT.actual)
     `RAL_FIELD_CP_10(ENQ_RATE_LIMIT, ENQ_RATE_LIMIT.actual, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HOLD_HCW_ENQ = new("HOLD_HCW_ENQ", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.HOLD_HCW_ENQ"});
    HOLD_HCW_ENQ.set_powerwell("vcccfn_gated");
    HOLD_HCW_ENQ.set_rand_mode(0);
   HOLD_HCW_ENQ.set_reset_signame("hqm_inp_gated_rst_n");
    HOLD_HCW_ENQ.set_logical_path("HQMID");
    void'(add_field( HOLD_HCW_ENQ ));

    HOLD_HCW_W = new("HOLD_HCW_W", "RW", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.HOLD_HCW_W"});
    HOLD_HCW_W.set_powerwell("vcccfn_gated");
    HOLD_HCW_W.set_rand_mode(0);
   HOLD_HCW_W.set_reset_signame("hqm_inp_gated_rst_n");
    HOLD_HCW_W.set_logical_path("HQMID");
    void'(add_field( HOLD_HCW_W ));

    SINGLE_STEP_ENQ = new("SINGLE_STEP_ENQ", "RW", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.SINGLE_STEP_ENQ"});
    SINGLE_STEP_ENQ.set_powerwell("vcccfn_gated");
    SINGLE_STEP_ENQ.set_rand_mode(0);
   SINGLE_STEP_ENQ.set_reset_signame("hqm_inp_gated_rst_n");
    SINGLE_STEP_ENQ.set_logical_path("HQMID");
    void'(add_field( SINGLE_STEP_ENQ ));

    SINGLE_STEP_HCW_W = new("SINGLE_STEP_HCW_W", "RW", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.SINGLE_STEP_HCW_W"});
    SINGLE_STEP_HCW_W.set_powerwell("vcccfn_gated");
    SINGLE_STEP_HCW_W.set_rand_mode(0);
   SINGLE_STEP_HCW_W.set_reset_signame("hqm_inp_gated_rst_n");
    SINGLE_STEP_HCW_W.set_logical_path("HQMID");
    void'(add_field( SINGLE_STEP_HCW_W ));

    ENABLE_DEBUG = new("ENABLE_DEBUG", "RW", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.ENABLE_DEBUG"});
    ENABLE_DEBUG.set_powerwell("vcccfn_gated");
    ENABLE_DEBUG.set_rand_mode(0);
   ENABLE_DEBUG.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE_DEBUG.set_logical_path("HQMID");
    void'(add_field( ENABLE_DEBUG ));

    ENQ_RATE_LIMIT = new("ENQ_RATE_LIMIT", "RW", 10, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.ENQ_RATE_LIMIT"});
    ENQ_RATE_LIMIT.set_powerwell("vcccfn_gated");
    ENQ_RATE_LIMIT.set_rand_mode(0);
   ENQ_RATE_LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    ENQ_RATE_LIMIT.set_logical_path("HQMID");
    void'(add_field( ENQ_RATE_LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_INGRESS_CTL_reg) 
endclass : hqm_system_csr_bridge_INGRESS_CTL_reg

// ================================================

class hqm_system_csr_bridge_EGRESS_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SCH_RATE_LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_EGRESS_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_RATE_LIMIT, SCH_RATE_LIMIT.desired)
     `RAL_FIELD_CP_7(SCH_RATE_LIMIT, SCH_RATE_LIMIT.desired, 0,1,2,3,4,5,6)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_RATE_LIMIT, SCH_RATE_LIMIT.actual)
     `RAL_FIELD_CP_7(SCH_RATE_LIMIT, SCH_RATE_LIMIT.actual, 0,1,2,3,4,5,6)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SCH_RATE_LIMIT = new("SCH_RATE_LIMIT", "RW", 7, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_CTL.SCH_RATE_LIMIT"});
    SCH_RATE_LIMIT.set_powerwell("vcccfn_gated");
    SCH_RATE_LIMIT.set_rand_mode(0);
   SCH_RATE_LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_RATE_LIMIT.set_logical_path("HQMID");
    void'(add_field( SCH_RATE_LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_EGRESS_CTL_reg) 
endclass : hqm_system_csr_bridge_EGRESS_CTL_reg

// ================================================

class hqm_system_csr_bridge_SYS_IDLE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INGRESS_IDLE;
  sla_ral_field EGRESS_IDLE;
  sla_ral_field WBUF_IDLE;
  sla_ral_field ALARM_IDLE;
  sla_ral_field INT_IDLE;
  sla_ral_field PBA_IDLE;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SYS_IDLE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INGRESS_IDLE, INGRESS_IDLE.desired)
     `RAL_FIELD_CP_1(INGRESS_IDLE, INGRESS_IDLE.desired, 0)
     `RAL_FIELD_CP(EGRESS_IDLE, EGRESS_IDLE.desired)
     `RAL_FIELD_CP_1(EGRESS_IDLE, EGRESS_IDLE.desired, 0)
     `RAL_FIELD_CP(WBUF_IDLE, WBUF_IDLE.desired)
     `RAL_FIELD_CP_1(WBUF_IDLE, WBUF_IDLE.desired, 0)
     `RAL_FIELD_CP(ALARM_IDLE, ALARM_IDLE.desired)
     `RAL_FIELD_CP_1(ALARM_IDLE, ALARM_IDLE.desired, 0)
     `RAL_FIELD_CP(INT_IDLE, INT_IDLE.desired)
     `RAL_FIELD_CP_1(INT_IDLE, INT_IDLE.desired, 0)
     `RAL_FIELD_CP(PBA_IDLE, PBA_IDLE.desired)
     `RAL_FIELD_CP_1(PBA_IDLE, PBA_IDLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INGRESS_IDLE, INGRESS_IDLE.actual)
     `RAL_FIELD_CP_1(INGRESS_IDLE, INGRESS_IDLE.actual, 0)
     `RAL_FIELD_CP(EGRESS_IDLE, EGRESS_IDLE.actual)
     `RAL_FIELD_CP_1(EGRESS_IDLE, EGRESS_IDLE.actual, 0)
     `RAL_FIELD_CP(WBUF_IDLE, WBUF_IDLE.actual)
     `RAL_FIELD_CP_1(WBUF_IDLE, WBUF_IDLE.actual, 0)
     `RAL_FIELD_CP(ALARM_IDLE, ALARM_IDLE.actual)
     `RAL_FIELD_CP_1(ALARM_IDLE, ALARM_IDLE.actual, 0)
     `RAL_FIELD_CP(INT_IDLE, INT_IDLE.actual)
     `RAL_FIELD_CP_1(INT_IDLE, INT_IDLE.actual, 0)
     `RAL_FIELD_CP(PBA_IDLE, PBA_IDLE.actual)
     `RAL_FIELD_CP_1(PBA_IDLE, PBA_IDLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INGRESS_IDLE = new("INGRESS_IDLE", "RO/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.INGRESS_IDLE"});
    INGRESS_IDLE.set_powerwell("vcccfn_gated");
    INGRESS_IDLE.set_rand_mode(0);
   INGRESS_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_IDLE.set_logical_path("HQMID");
    void'(add_field( INGRESS_IDLE ));

    EGRESS_IDLE = new("EGRESS_IDLE", "RO/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.EGRESS_IDLE"});
    EGRESS_IDLE.set_powerwell("vcccfn_gated");
    EGRESS_IDLE.set_rand_mode(0);
   EGRESS_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_IDLE.set_logical_path("HQMID");
    void'(add_field( EGRESS_IDLE ));

    WBUF_IDLE = new("WBUF_IDLE", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.WBUF_IDLE"});
    WBUF_IDLE.set_powerwell("vcccfn_gated");
    WBUF_IDLE.set_rand_mode(0);
   WBUF_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    WBUF_IDLE.set_logical_path("HQMID");
    void'(add_field( WBUF_IDLE ));

    ALARM_IDLE = new("ALARM_IDLE", "RO/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.ALARM_IDLE"});
    ALARM_IDLE.set_powerwell("vcccfn_gated");
    ALARM_IDLE.set_rand_mode(0);
   ALARM_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    ALARM_IDLE.set_logical_path("HQMID");
    void'(add_field( ALARM_IDLE ));

    INT_IDLE = new("INT_IDLE", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.INT_IDLE"});
    INT_IDLE.set_powerwell("vcccfn_gated");
    INT_IDLE.set_rand_mode(0);
   INT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    INT_IDLE.set_logical_path("HQMID");
    void'(add_field( INT_IDLE ));

    PBA_IDLE = new("PBA_IDLE", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.PBA_IDLE"});
    PBA_IDLE.set_powerwell("vcccfn_gated");
    PBA_IDLE.set_rand_mode(0);
   PBA_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    PBA_IDLE.set_logical_path("HQMID");
    void'(add_field( PBA_IDLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SYS_IDLE_STATUS_reg) 
endclass : hqm_system_csr_bridge_SYS_IDLE_STATUS_reg

// ================================================

class hqm_system_csr_bridge_HCW_ENQ_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HCW_ENQ_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_9(HIGH_WM, HIGH_WM.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_9(HIGH_WM, HIGH_WM.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 9, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn_gated");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("hqm_inp_gated_rst_n");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HCW_ENQ_FIFO_CTL_reg) 
endclass : hqm_system_csr_bridge_HCW_ENQ_FIFO_CTL_reg

// ================================================

class hqm_system_csr_bridge_SCH_OUT_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SCH_OUT_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_8(HIGH_WM, HIGH_WM.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_8(HIGH_WM, HIGH_WM.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 8, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn_gated");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("hqm_inp_gated_rst_n");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SCH_OUT_FIFO_CTL_reg) 
endclass : hqm_system_csr_bridge_SCH_OUT_FIFO_CTL_reg

// ================================================

class hqm_system_csr_bridge_SIF_ALARM_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SIF_ALARM_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_1(HIGH_WM, HIGH_WM.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_1(HIGH_WM, HIGH_WM.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn_gated");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("hqm_inp_gated_rst_n");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SIF_ALARM_FIFO_CTL_reg) 
endclass : hqm_system_csr_bridge_SIF_ALARM_FIFO_CTL_reg

// ================================================

class hqm_system_csr_bridge_HCW_ENQ_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field AEMPTY;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HCW_ENQ_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(AEMPTY, AEMPTY.desired)
     `RAL_FIELD_CP_1(AEMPTY, AEMPTY.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(AEMPTY, AEMPTY.actual)
     `RAL_FIELD_CP_1(AEMPTY, AEMPTY.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn_gated");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn_gated");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn_gated");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn_gated");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    AEMPTY = new("AEMPTY", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.AEMPTY"});
    AEMPTY.set_powerwell("vcccfn_gated");
    AEMPTY.set_rand_mode(0);
   AEMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    AEMPTY.set_logical_path("HQMID");
    void'(add_field( AEMPTY ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn_gated");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn_gated");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HCW_ENQ_FIFO_STATUS_reg) 
endclass : hqm_system_csr_bridge_HCW_ENQ_FIFO_STATUS_reg

// ================================================

class hqm_system_csr_bridge_HCW_SCH_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HCW_SCH_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn_gated");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn_gated");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn_gated");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn_gated");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn_gated");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn_gated");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn_gated");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HCW_SCH_FIFO_STATUS_reg) 
endclass : hqm_system_csr_bridge_HCW_SCH_FIFO_STATUS_reg

// ================================================

class hqm_system_csr_bridge_SCH_OUT_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SCH_OUT_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn_gated");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn_gated");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn_gated");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn_gated");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn_gated");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn_gated");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn_gated");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SCH_OUT_FIFO_STATUS_reg) 
endclass : hqm_system_csr_bridge_SCH_OUT_FIFO_STATUS_reg

// ================================================

class hqm_system_csr_bridge_CFG_RX_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_CFG_RX_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn_gated");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn_gated");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn_gated");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn_gated");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn_gated");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn_gated");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn_gated");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_CFG_RX_FIFO_STATUS_reg) 
endclass : hqm_system_csr_bridge_CFG_RX_FIFO_STATUS_reg

// ================================================

class hqm_system_csr_bridge_CWDI_RX_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_CWDI_RX_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn_gated");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn_gated");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn_gated");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn_gated");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn_gated");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn_gated");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn_gated");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_CWDI_RX_FIFO_STATUS_reg) 
endclass : hqm_system_csr_bridge_CWDI_RX_FIFO_STATUS_reg

// ================================================

class hqm_system_csr_bridge_HQM_ALARM_RX_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_ALARM_RX_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn_gated");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn_gated");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn_gated");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn_gated");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn_gated");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn_gated");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn_gated");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_ALARM_RX_FIFO_STATUS_reg) 
endclass : hqm_system_csr_bridge_HQM_ALARM_RX_FIFO_STATUS_reg

// ================================================

class hqm_system_csr_bridge_SIF_ALARM_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field AEMPTY;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_SIF_ALARM_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(AEMPTY, AEMPTY.desired)
     `RAL_FIELD_CP_1(AEMPTY, AEMPTY.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(AEMPTY, AEMPTY.actual)
     `RAL_FIELD_CP_1(AEMPTY, AEMPTY.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn_gated");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn_gated");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn_gated");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn_gated");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    AEMPTY = new("AEMPTY", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.AEMPTY"});
    AEMPTY.set_powerwell("vcccfn_gated");
    AEMPTY.set_rand_mode(0);
   AEMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    AEMPTY.set_logical_path("HQMID");
    void'(add_field( AEMPTY ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn_gated");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn_gated");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_SIF_ALARM_FIFO_STATUS_reg) 
endclass : hqm_system_csr_bridge_SIF_ALARM_FIFO_STATUS_reg

// ================================================

class hqm_system_csr_bridge_ALARM_DB_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYS_DB_DEPTH;
  sla_ral_field SYS_DB_READY;
  sla_ral_field MSIX_DB_DEPTH;
  sla_ral_field MSIX_DB_READY;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_DB_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYS_DB_DEPTH, SYS_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(SYS_DB_DEPTH, SYS_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(SYS_DB_READY, SYS_DB_READY.desired)
     `RAL_FIELD_CP_1(SYS_DB_READY, SYS_DB_READY.desired, 0)
     `RAL_FIELD_CP(MSIX_DB_DEPTH, MSIX_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(MSIX_DB_DEPTH, MSIX_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(MSIX_DB_READY, MSIX_DB_READY.desired)
     `RAL_FIELD_CP_1(MSIX_DB_READY, MSIX_DB_READY.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYS_DB_DEPTH, SYS_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(SYS_DB_DEPTH, SYS_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(SYS_DB_READY, SYS_DB_READY.actual)
     `RAL_FIELD_CP_1(SYS_DB_READY, SYS_DB_READY.actual, 0)
     `RAL_FIELD_CP(MSIX_DB_DEPTH, MSIX_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(MSIX_DB_DEPTH, MSIX_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(MSIX_DB_READY, MSIX_DB_READY.actual)
     `RAL_FIELD_CP_1(MSIX_DB_READY, MSIX_DB_READY.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYS_DB_DEPTH = new("SYS_DB_DEPTH", "RO/V", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.SYS_DB_DEPTH"});
    SYS_DB_DEPTH.set_powerwell("vcccfn_gated");
    SYS_DB_DEPTH.set_rand_mode(0);
   SYS_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    SYS_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( SYS_DB_DEPTH ));

    SYS_DB_READY = new("SYS_DB_READY", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.SYS_DB_READY"});
    SYS_DB_READY.set_powerwell("vcccfn_gated");
    SYS_DB_READY.set_rand_mode(0);
   SYS_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    SYS_DB_READY.set_logical_path("HQMID");
    void'(add_field( SYS_DB_READY ));

    MSIX_DB_DEPTH = new("MSIX_DB_DEPTH", "RO/V", 2, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.MSIX_DB_DEPTH"});
    MSIX_DB_DEPTH.set_powerwell("vcccfn_gated");
    MSIX_DB_DEPTH.set_rand_mode(0);
   MSIX_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( MSIX_DB_DEPTH ));

    MSIX_DB_READY = new("MSIX_DB_READY", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.MSIX_DB_READY"});
    MSIX_DB_READY.set_powerwell("vcccfn_gated");
    MSIX_DB_READY.set_rand_mode(0);
   MSIX_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_DB_READY.set_logical_path("HQMID");
    void'(add_field( MSIX_DB_READY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_DB_STATUS_reg) 
endclass : hqm_system_csr_bridge_ALARM_DB_STATUS_reg

// ================================================

class hqm_system_csr_bridge_INGRESS_DB_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HCW_ENQ_W_DB_DEPTH;
  sla_ral_field HCW_ENQ_W_DB_READY;
  sla_ral_field HCW_ENQ_DB_DEPTH;
  sla_ral_field HCW_ENQ_DB_READY;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_INGRESS_DB_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HCW_ENQ_W_DB_DEPTH, HCW_ENQ_W_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(HCW_ENQ_W_DB_DEPTH, HCW_ENQ_W_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(HCW_ENQ_W_DB_READY, HCW_ENQ_W_DB_READY.desired)
     `RAL_FIELD_CP_1(HCW_ENQ_W_DB_READY, HCW_ENQ_W_DB_READY.desired, 0)
     `RAL_FIELD_CP(HCW_ENQ_DB_DEPTH, HCW_ENQ_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(HCW_ENQ_DB_DEPTH, HCW_ENQ_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(HCW_ENQ_DB_READY, HCW_ENQ_DB_READY.desired)
     `RAL_FIELD_CP_1(HCW_ENQ_DB_READY, HCW_ENQ_DB_READY.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HCW_ENQ_W_DB_DEPTH, HCW_ENQ_W_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(HCW_ENQ_W_DB_DEPTH, HCW_ENQ_W_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(HCW_ENQ_W_DB_READY, HCW_ENQ_W_DB_READY.actual)
     `RAL_FIELD_CP_1(HCW_ENQ_W_DB_READY, HCW_ENQ_W_DB_READY.actual, 0)
     `RAL_FIELD_CP(HCW_ENQ_DB_DEPTH, HCW_ENQ_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(HCW_ENQ_DB_DEPTH, HCW_ENQ_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(HCW_ENQ_DB_READY, HCW_ENQ_DB_READY.actual)
     `RAL_FIELD_CP_1(HCW_ENQ_DB_READY, HCW_ENQ_DB_READY.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HCW_ENQ_W_DB_DEPTH = new("HCW_ENQ_W_DB_DEPTH", "RO/V", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_W_DB_DEPTH"});
    HCW_ENQ_W_DB_DEPTH.set_powerwell("vcccfn_gated");
    HCW_ENQ_W_DB_DEPTH.set_rand_mode(0);
   HCW_ENQ_W_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_ENQ_W_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( HCW_ENQ_W_DB_DEPTH ));

    HCW_ENQ_W_DB_READY = new("HCW_ENQ_W_DB_READY", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_W_DB_READY"});
    HCW_ENQ_W_DB_READY.set_powerwell("vcccfn_gated");
    HCW_ENQ_W_DB_READY.set_rand_mode(0);
   HCW_ENQ_W_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_ENQ_W_DB_READY.set_logical_path("HQMID");
    void'(add_field( HCW_ENQ_W_DB_READY ));

    HCW_ENQ_DB_DEPTH = new("HCW_ENQ_DB_DEPTH", "RO/V", 2, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_DB_DEPTH"});
    HCW_ENQ_DB_DEPTH.set_powerwell("vcccfn_gated");
    HCW_ENQ_DB_DEPTH.set_rand_mode(0);
   HCW_ENQ_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_ENQ_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( HCW_ENQ_DB_DEPTH ));

    HCW_ENQ_DB_READY = new("HCW_ENQ_DB_READY", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_DB_READY"});
    HCW_ENQ_DB_READY.set_powerwell("vcccfn_gated");
    HCW_ENQ_DB_READY.set_rand_mode(0);
   HCW_ENQ_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_ENQ_DB_READY.set_logical_path("HQMID");
    void'(add_field( HCW_ENQ_DB_READY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_INGRESS_DB_STATUS_reg) 
endclass : hqm_system_csr_bridge_INGRESS_DB_STATUS_reg

// ================================================

class hqm_system_csr_bridge_EGRESS_DB_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HCW_SCHED_DB_DEPTH;
  sla_ral_field HCW_SCHED_DB_READY;
  sla_ral_field CQ_OCC_DB_DEPTH;
  sla_ral_field CQ_OCC_DB_READY;
  sla_ral_field PDATA_LS_DB_DEPTH;
  sla_ral_field PDATA_LS_DB_READY;
  sla_ral_field PDATA_MS_DB_DEPTH;
  sla_ral_field PDATA_MS_DB_READY;
  sla_ral_field PHDR_DB_DEPTH;
  sla_ral_field PHDR_DB_READY;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_EGRESS_DB_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HCW_SCHED_DB_DEPTH, HCW_SCHED_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(HCW_SCHED_DB_DEPTH, HCW_SCHED_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(HCW_SCHED_DB_READY, HCW_SCHED_DB_READY.desired)
     `RAL_FIELD_CP_1(HCW_SCHED_DB_READY, HCW_SCHED_DB_READY.desired, 0)
     `RAL_FIELD_CP(CQ_OCC_DB_DEPTH, CQ_OCC_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(CQ_OCC_DB_DEPTH, CQ_OCC_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(CQ_OCC_DB_READY, CQ_OCC_DB_READY.desired)
     `RAL_FIELD_CP_1(CQ_OCC_DB_READY, CQ_OCC_DB_READY.desired, 0)
     `RAL_FIELD_CP(PDATA_LS_DB_DEPTH, PDATA_LS_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(PDATA_LS_DB_DEPTH, PDATA_LS_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(PDATA_LS_DB_READY, PDATA_LS_DB_READY.desired)
     `RAL_FIELD_CP_1(PDATA_LS_DB_READY, PDATA_LS_DB_READY.desired, 0)
     `RAL_FIELD_CP(PDATA_MS_DB_DEPTH, PDATA_MS_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(PDATA_MS_DB_DEPTH, PDATA_MS_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(PDATA_MS_DB_READY, PDATA_MS_DB_READY.desired)
     `RAL_FIELD_CP_1(PDATA_MS_DB_READY, PDATA_MS_DB_READY.desired, 0)
     `RAL_FIELD_CP(PHDR_DB_DEPTH, PHDR_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(PHDR_DB_DEPTH, PHDR_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(PHDR_DB_READY, PHDR_DB_READY.desired)
     `RAL_FIELD_CP_1(PHDR_DB_READY, PHDR_DB_READY.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HCW_SCHED_DB_DEPTH, HCW_SCHED_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(HCW_SCHED_DB_DEPTH, HCW_SCHED_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(HCW_SCHED_DB_READY, HCW_SCHED_DB_READY.actual)
     `RAL_FIELD_CP_1(HCW_SCHED_DB_READY, HCW_SCHED_DB_READY.actual, 0)
     `RAL_FIELD_CP(CQ_OCC_DB_DEPTH, CQ_OCC_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(CQ_OCC_DB_DEPTH, CQ_OCC_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(CQ_OCC_DB_READY, CQ_OCC_DB_READY.actual)
     `RAL_FIELD_CP_1(CQ_OCC_DB_READY, CQ_OCC_DB_READY.actual, 0)
     `RAL_FIELD_CP(PDATA_LS_DB_DEPTH, PDATA_LS_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(PDATA_LS_DB_DEPTH, PDATA_LS_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(PDATA_LS_DB_READY, PDATA_LS_DB_READY.actual)
     `RAL_FIELD_CP_1(PDATA_LS_DB_READY, PDATA_LS_DB_READY.actual, 0)
     `RAL_FIELD_CP(PDATA_MS_DB_DEPTH, PDATA_MS_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(PDATA_MS_DB_DEPTH, PDATA_MS_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(PDATA_MS_DB_READY, PDATA_MS_DB_READY.actual)
     `RAL_FIELD_CP_1(PDATA_MS_DB_READY, PDATA_MS_DB_READY.actual, 0)
     `RAL_FIELD_CP(PHDR_DB_DEPTH, PHDR_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(PHDR_DB_DEPTH, PHDR_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(PHDR_DB_READY, PHDR_DB_READY.actual)
     `RAL_FIELD_CP_1(PHDR_DB_READY, PHDR_DB_READY.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HCW_SCHED_DB_DEPTH = new("HCW_SCHED_DB_DEPTH", "RO/V", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.HCW_SCHED_DB_DEPTH"});
    HCW_SCHED_DB_DEPTH.set_powerwell("vcccfn_gated");
    HCW_SCHED_DB_DEPTH.set_rand_mode(0);
   HCW_SCHED_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_SCHED_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( HCW_SCHED_DB_DEPTH ));

    HCW_SCHED_DB_READY = new("HCW_SCHED_DB_READY", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.HCW_SCHED_DB_READY"});
    HCW_SCHED_DB_READY.set_powerwell("vcccfn_gated");
    HCW_SCHED_DB_READY.set_rand_mode(0);
   HCW_SCHED_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_SCHED_DB_READY.set_logical_path("HQMID");
    void'(add_field( HCW_SCHED_DB_READY ));

    CQ_OCC_DB_DEPTH = new("CQ_OCC_DB_DEPTH", "RO/V", 2, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.CQ_OCC_DB_DEPTH"});
    CQ_OCC_DB_DEPTH.set_powerwell("vcccfn_gated");
    CQ_OCC_DB_DEPTH.set_rand_mode(0);
   CQ_OCC_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_OCC_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( CQ_OCC_DB_DEPTH ));

    CQ_OCC_DB_READY = new("CQ_OCC_DB_READY", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.CQ_OCC_DB_READY"});
    CQ_OCC_DB_READY.set_powerwell("vcccfn_gated");
    CQ_OCC_DB_READY.set_rand_mode(0);
   CQ_OCC_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_OCC_DB_READY.set_logical_path("HQMID");
    void'(add_field( CQ_OCC_DB_READY ));

    PDATA_LS_DB_DEPTH = new("PDATA_LS_DB_DEPTH", "RO/V", 2, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_LS_DB_DEPTH"});
    PDATA_LS_DB_DEPTH.set_powerwell("vcccfn_gated");
    PDATA_LS_DB_DEPTH.set_rand_mode(0);
   PDATA_LS_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    PDATA_LS_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( PDATA_LS_DB_DEPTH ));

    PDATA_LS_DB_READY = new("PDATA_LS_DB_READY", "RO/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_LS_DB_READY"});
    PDATA_LS_DB_READY.set_powerwell("vcccfn_gated");
    PDATA_LS_DB_READY.set_rand_mode(0);
   PDATA_LS_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    PDATA_LS_DB_READY.set_logical_path("HQMID");
    void'(add_field( PDATA_LS_DB_READY ));

    PDATA_MS_DB_DEPTH = new("PDATA_MS_DB_DEPTH", "RO/V", 2, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_MS_DB_DEPTH"});
    PDATA_MS_DB_DEPTH.set_powerwell("vcccfn_gated");
    PDATA_MS_DB_DEPTH.set_rand_mode(0);
   PDATA_MS_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    PDATA_MS_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( PDATA_MS_DB_DEPTH ));

    PDATA_MS_DB_READY = new("PDATA_MS_DB_READY", "RO/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_MS_DB_READY"});
    PDATA_MS_DB_READY.set_powerwell("vcccfn_gated");
    PDATA_MS_DB_READY.set_rand_mode(0);
   PDATA_MS_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    PDATA_MS_DB_READY.set_logical_path("HQMID");
    void'(add_field( PDATA_MS_DB_READY ));

    PHDR_DB_DEPTH = new("PHDR_DB_DEPTH", "RO/V", 2, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PHDR_DB_DEPTH"});
    PHDR_DB_DEPTH.set_powerwell("vcccfn_gated");
    PHDR_DB_DEPTH.set_rand_mode(0);
   PHDR_DB_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    PHDR_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( PHDR_DB_DEPTH ));

    PHDR_DB_READY = new("PHDR_DB_READY", "RO/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PHDR_DB_READY"});
    PHDR_DB_READY.set_powerwell("vcccfn_gated");
    PHDR_DB_READY.set_rand_mode(0);
   PHDR_DB_READY.set_reset_signame("hqm_inp_gated_rst_n");
    PHDR_DB_READY.set_logical_path("HQMID");
    void'(add_field( PHDR_DB_READY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_EGRESS_DB_STATUS_reg) 
endclass : hqm_system_csr_bridge_EGRESS_DB_STATUS_reg

// ================================================

class hqm_system_csr_bridge_ALARM_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_OCC_P0_V;
  sla_ral_field CQ_OCC_P1_V;
  sla_ral_field CQ_OCC_P2_V;
  sla_ral_field MSIX_P0_V;
  sla_ral_field MSIX_P1_V;
  sla_ral_field MSIX_P2_V;
  sla_ral_field IMS_P0_V;
  sla_ral_field IMS_P1_V;
  sla_ral_field IMS_P2_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ALARM_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_OCC_P0_V, CQ_OCC_P0_V.desired)
     `RAL_FIELD_CP_1(CQ_OCC_P0_V, CQ_OCC_P0_V.desired, 0)
     `RAL_FIELD_CP(CQ_OCC_P1_V, CQ_OCC_P1_V.desired)
     `RAL_FIELD_CP_1(CQ_OCC_P1_V, CQ_OCC_P1_V.desired, 0)
     `RAL_FIELD_CP(CQ_OCC_P2_V, CQ_OCC_P2_V.desired)
     `RAL_FIELD_CP_1(CQ_OCC_P2_V, CQ_OCC_P2_V.desired, 0)
     `RAL_FIELD_CP(MSIX_P0_V, MSIX_P0_V.desired)
     `RAL_FIELD_CP_1(MSIX_P0_V, MSIX_P0_V.desired, 0)
     `RAL_FIELD_CP(MSIX_P1_V, MSIX_P1_V.desired)
     `RAL_FIELD_CP_1(MSIX_P1_V, MSIX_P1_V.desired, 0)
     `RAL_FIELD_CP(MSIX_P2_V, MSIX_P2_V.desired)
     `RAL_FIELD_CP_1(MSIX_P2_V, MSIX_P2_V.desired, 0)
     `RAL_FIELD_CP(IMS_P0_V, IMS_P0_V.desired)
     `RAL_FIELD_CP_1(IMS_P0_V, IMS_P0_V.desired, 0)
     `RAL_FIELD_CP(IMS_P1_V, IMS_P1_V.desired)
     `RAL_FIELD_CP_1(IMS_P1_V, IMS_P1_V.desired, 0)
     `RAL_FIELD_CP(IMS_P2_V, IMS_P2_V.desired)
     `RAL_FIELD_CP_1(IMS_P2_V, IMS_P2_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_OCC_P0_V, CQ_OCC_P0_V.actual)
     `RAL_FIELD_CP_1(CQ_OCC_P0_V, CQ_OCC_P0_V.actual, 0)
     `RAL_FIELD_CP(CQ_OCC_P1_V, CQ_OCC_P1_V.actual)
     `RAL_FIELD_CP_1(CQ_OCC_P1_V, CQ_OCC_P1_V.actual, 0)
     `RAL_FIELD_CP(CQ_OCC_P2_V, CQ_OCC_P2_V.actual)
     `RAL_FIELD_CP_1(CQ_OCC_P2_V, CQ_OCC_P2_V.actual, 0)
     `RAL_FIELD_CP(MSIX_P0_V, MSIX_P0_V.actual)
     `RAL_FIELD_CP_1(MSIX_P0_V, MSIX_P0_V.actual, 0)
     `RAL_FIELD_CP(MSIX_P1_V, MSIX_P1_V.actual)
     `RAL_FIELD_CP_1(MSIX_P1_V, MSIX_P1_V.actual, 0)
     `RAL_FIELD_CP(MSIX_P2_V, MSIX_P2_V.actual)
     `RAL_FIELD_CP_1(MSIX_P2_V, MSIX_P2_V.actual, 0)
     `RAL_FIELD_CP(IMS_P0_V, IMS_P0_V.actual)
     `RAL_FIELD_CP_1(IMS_P0_V, IMS_P0_V.actual, 0)
     `RAL_FIELD_CP(IMS_P1_V, IMS_P1_V.actual)
     `RAL_FIELD_CP_1(IMS_P1_V, IMS_P1_V.actual, 0)
     `RAL_FIELD_CP(IMS_P2_V, IMS_P2_V.actual)
     `RAL_FIELD_CP_1(IMS_P2_V, IMS_P2_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_OCC_P0_V = new("CQ_OCC_P0_V", "RO/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P0_V"});
    CQ_OCC_P0_V.set_powerwell("vcccfn_gated");
    CQ_OCC_P0_V.set_rand_mode(0);
   CQ_OCC_P0_V.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_OCC_P0_V.set_logical_path("HQMID");
    void'(add_field( CQ_OCC_P0_V ));

    CQ_OCC_P1_V = new("CQ_OCC_P1_V", "RO/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P1_V"});
    CQ_OCC_P1_V.set_powerwell("vcccfn_gated");
    CQ_OCC_P1_V.set_rand_mode(0);
   CQ_OCC_P1_V.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_OCC_P1_V.set_logical_path("HQMID");
    void'(add_field( CQ_OCC_P1_V ));

    CQ_OCC_P2_V = new("CQ_OCC_P2_V", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P2_V"});
    CQ_OCC_P2_V.set_powerwell("vcccfn_gated");
    CQ_OCC_P2_V.set_rand_mode(0);
   CQ_OCC_P2_V.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_OCC_P2_V.set_logical_path("HQMID");
    void'(add_field( CQ_OCC_P2_V ));

    MSIX_P0_V = new("MSIX_P0_V", "RO/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P0_V"});
    MSIX_P0_V.set_powerwell("vcccfn_gated");
    MSIX_P0_V.set_rand_mode(0);
   MSIX_P0_V.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_P0_V.set_logical_path("HQMID");
    void'(add_field( MSIX_P0_V ));

    MSIX_P1_V = new("MSIX_P1_V", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P1_V"});
    MSIX_P1_V.set_powerwell("vcccfn_gated");
    MSIX_P1_V.set_rand_mode(0);
   MSIX_P1_V.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_P1_V.set_logical_path("HQMID");
    void'(add_field( MSIX_P1_V ));

    MSIX_P2_V = new("MSIX_P2_V", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P2_V"});
    MSIX_P2_V.set_powerwell("vcccfn_gated");
    MSIX_P2_V.set_rand_mode(0);
   MSIX_P2_V.set_reset_signame("hqm_inp_gated_rst_n");
    MSIX_P2_V.set_logical_path("HQMID");
    void'(add_field( MSIX_P2_V ));

    IMS_P0_V = new("IMS_P0_V", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P0_V"});
    IMS_P0_V.set_powerwell("vcccfn_gated");
    IMS_P0_V.set_rand_mode(0);
   IMS_P0_V.set_reset_signame("hqm_inp_gated_rst_n");
    IMS_P0_V.set_logical_path("HQMID");
    void'(add_field( IMS_P0_V ));

    IMS_P1_V = new("IMS_P1_V", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P1_V"});
    IMS_P1_V.set_powerwell("vcccfn_gated");
    IMS_P1_V.set_rand_mode(0);
   IMS_P1_V.set_reset_signame("hqm_inp_gated_rst_n");
    IMS_P1_V.set_logical_path("HQMID");
    void'(add_field( IMS_P1_V ));

    IMS_P2_V = new("IMS_P2_V", "RO/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P2_V"});
    IMS_P2_V.set_powerwell("vcccfn_gated");
    IMS_P2_V.set_rand_mode(0);
   IMS_P2_V.set_reset_signame("hqm_inp_gated_rst_n");
    IMS_P2_V.set_logical_path("HQMID");
    void'(add_field( IMS_P2_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ALARM_STATUS_reg) 
endclass : hqm_system_csr_bridge_ALARM_STATUS_reg

// ================================================

class hqm_system_csr_bridge_INGRESS_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_V;
  sla_ral_field P1_V;
  sla_ral_field P2_V;
  sla_ral_field P3_V;
  sla_ral_field P4_V;
  sla_ral_field P5_V;
  sla_ral_field P6_V;
  sla_ral_field P7_V;
  sla_ral_field P8_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_INGRESS_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_V, P0_V.desired)
     `RAL_FIELD_CP_1(P0_V, P0_V.desired, 0)
     `RAL_FIELD_CP(P1_V, P1_V.desired)
     `RAL_FIELD_CP_1(P1_V, P1_V.desired, 0)
     `RAL_FIELD_CP(P2_V, P2_V.desired)
     `RAL_FIELD_CP_1(P2_V, P2_V.desired, 0)
     `RAL_FIELD_CP(P3_V, P3_V.desired)
     `RAL_FIELD_CP_1(P3_V, P3_V.desired, 0)
     `RAL_FIELD_CP(P4_V, P4_V.desired)
     `RAL_FIELD_CP_1(P4_V, P4_V.desired, 0)
     `RAL_FIELD_CP(P5_V, P5_V.desired)
     `RAL_FIELD_CP_1(P5_V, P5_V.desired, 0)
     `RAL_FIELD_CP(P6_V, P6_V.desired)
     `RAL_FIELD_CP_1(P6_V, P6_V.desired, 0)
     `RAL_FIELD_CP(P7_V, P7_V.desired)
     `RAL_FIELD_CP_1(P7_V, P7_V.desired, 0)
     `RAL_FIELD_CP(P8_V, P8_V.desired)
     `RAL_FIELD_CP_1(P8_V, P8_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_V, P0_V.actual)
     `RAL_FIELD_CP_1(P0_V, P0_V.actual, 0)
     `RAL_FIELD_CP(P1_V, P1_V.actual)
     `RAL_FIELD_CP_1(P1_V, P1_V.actual, 0)
     `RAL_FIELD_CP(P2_V, P2_V.actual)
     `RAL_FIELD_CP_1(P2_V, P2_V.actual, 0)
     `RAL_FIELD_CP(P3_V, P3_V.actual)
     `RAL_FIELD_CP_1(P3_V, P3_V.actual, 0)
     `RAL_FIELD_CP(P4_V, P4_V.actual)
     `RAL_FIELD_CP_1(P4_V, P4_V.actual, 0)
     `RAL_FIELD_CP(P5_V, P5_V.actual)
     `RAL_FIELD_CP_1(P5_V, P5_V.actual, 0)
     `RAL_FIELD_CP(P6_V, P6_V.actual)
     `RAL_FIELD_CP_1(P6_V, P6_V.actual, 0)
     `RAL_FIELD_CP(P7_V, P7_V.actual)
     `RAL_FIELD_CP_1(P7_V, P7_V.actual, 0)
     `RAL_FIELD_CP(P8_V, P8_V.actual)
     `RAL_FIELD_CP_1(P8_V, P8_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_V = new("P0_V", "RO/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P0_V"});
    P0_V.set_powerwell("vcccfn_gated");
    P0_V.set_rand_mode(0);
   P0_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_V.set_logical_path("HQMID");
    void'(add_field( P0_V ));

    P1_V = new("P1_V", "RO/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P1_V"});
    P1_V.set_powerwell("vcccfn_gated");
    P1_V.set_rand_mode(0);
   P1_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_V.set_logical_path("HQMID");
    void'(add_field( P1_V ));

    P2_V = new("P2_V", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P2_V"});
    P2_V.set_powerwell("vcccfn_gated");
    P2_V.set_rand_mode(0);
   P2_V.set_reset_signame("hqm_inp_gated_rst_n");
    P2_V.set_logical_path("HQMID");
    void'(add_field( P2_V ));

    P3_V = new("P3_V", "RO/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P3_V"});
    P3_V.set_powerwell("vcccfn_gated");
    P3_V.set_rand_mode(0);
   P3_V.set_reset_signame("hqm_inp_gated_rst_n");
    P3_V.set_logical_path("HQMID");
    void'(add_field( P3_V ));

    P4_V = new("P4_V", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P4_V"});
    P4_V.set_powerwell("vcccfn_gated");
    P4_V.set_rand_mode(0);
   P4_V.set_reset_signame("hqm_inp_gated_rst_n");
    P4_V.set_logical_path("HQMID");
    void'(add_field( P4_V ));

    P5_V = new("P5_V", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P5_V"});
    P5_V.set_powerwell("vcccfn_gated");
    P5_V.set_rand_mode(0);
   P5_V.set_reset_signame("hqm_inp_gated_rst_n");
    P5_V.set_logical_path("HQMID");
    void'(add_field( P5_V ));

    P6_V = new("P6_V", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P6_V"});
    P6_V.set_powerwell("vcccfn_gated");
    P6_V.set_rand_mode(0);
   P6_V.set_reset_signame("hqm_inp_gated_rst_n");
    P6_V.set_logical_path("HQMID");
    void'(add_field( P6_V ));

    P7_V = new("P7_V", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P7_V"});
    P7_V.set_powerwell("vcccfn_gated");
    P7_V.set_rand_mode(0);
   P7_V.set_reset_signame("hqm_inp_gated_rst_n");
    P7_V.set_logical_path("HQMID");
    void'(add_field( P7_V ));

    P8_V = new("P8_V", "RO/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P8_V"});
    P8_V.set_powerwell("vcccfn_gated");
    P8_V.set_rand_mode(0);
   P8_V.set_reset_signame("hqm_inp_gated_rst_n");
    P8_V.set_logical_path("HQMID");
    void'(add_field( P8_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_INGRESS_STATUS_reg) 
endclass : hqm_system_csr_bridge_INGRESS_STATUS_reg

// ================================================

class hqm_system_csr_bridge_EGRESS_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SCH_P0_V;
  sla_ral_field SCH_P1_V;
  sla_ral_field SCH_P2_V;
  sla_ral_field SCH_P3_V;
  sla_ral_field SCH_P4_V;
  sla_ral_field SCH_P5_V;
  sla_ral_field P5_INT_V;
  sla_ral_field P5_HCW_V;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_EGRESS_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_P0_V, SCH_P0_V.desired)
     `RAL_FIELD_CP_1(SCH_P0_V, SCH_P0_V.desired, 0)
     `RAL_FIELD_CP(SCH_P1_V, SCH_P1_V.desired)
     `RAL_FIELD_CP_1(SCH_P1_V, SCH_P1_V.desired, 0)
     `RAL_FIELD_CP(SCH_P2_V, SCH_P2_V.desired)
     `RAL_FIELD_CP_1(SCH_P2_V, SCH_P2_V.desired, 0)
     `RAL_FIELD_CP(SCH_P3_V, SCH_P3_V.desired)
     `RAL_FIELD_CP_1(SCH_P3_V, SCH_P3_V.desired, 0)
     `RAL_FIELD_CP(SCH_P4_V, SCH_P4_V.desired)
     `RAL_FIELD_CP_1(SCH_P4_V, SCH_P4_V.desired, 0)
     `RAL_FIELD_CP(SCH_P5_V, SCH_P5_V.desired)
     `RAL_FIELD_CP_1(SCH_P5_V, SCH_P5_V.desired, 0)
     `RAL_FIELD_CP(P5_INT_V, P5_INT_V.desired)
     `RAL_FIELD_CP_1(P5_INT_V, P5_INT_V.desired, 0)
     `RAL_FIELD_CP(P5_HCW_V, P5_HCW_V.desired)
     `RAL_FIELD_CP_1(P5_HCW_V, P5_HCW_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_P0_V, SCH_P0_V.actual)
     `RAL_FIELD_CP_1(SCH_P0_V, SCH_P0_V.actual, 0)
     `RAL_FIELD_CP(SCH_P1_V, SCH_P1_V.actual)
     `RAL_FIELD_CP_1(SCH_P1_V, SCH_P1_V.actual, 0)
     `RAL_FIELD_CP(SCH_P2_V, SCH_P2_V.actual)
     `RAL_FIELD_CP_1(SCH_P2_V, SCH_P2_V.actual, 0)
     `RAL_FIELD_CP(SCH_P3_V, SCH_P3_V.actual)
     `RAL_FIELD_CP_1(SCH_P3_V, SCH_P3_V.actual, 0)
     `RAL_FIELD_CP(SCH_P4_V, SCH_P4_V.actual)
     `RAL_FIELD_CP_1(SCH_P4_V, SCH_P4_V.actual, 0)
     `RAL_FIELD_CP(SCH_P5_V, SCH_P5_V.actual)
     `RAL_FIELD_CP_1(SCH_P5_V, SCH_P5_V.actual, 0)
     `RAL_FIELD_CP(P5_INT_V, P5_INT_V.actual)
     `RAL_FIELD_CP_1(P5_INT_V, P5_INT_V.actual, 0)
     `RAL_FIELD_CP(P5_HCW_V, P5_HCW_V.actual)
     `RAL_FIELD_CP_1(P5_HCW_V, P5_HCW_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SCH_P0_V = new("SCH_P0_V", "RO/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P0_V"});
    SCH_P0_V.set_powerwell("vcccfn_gated");
    SCH_P0_V.set_rand_mode(0);
   SCH_P0_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P0_V.set_logical_path("HQMID");
    void'(add_field( SCH_P0_V ));

    SCH_P1_V = new("SCH_P1_V", "RO/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P1_V"});
    SCH_P1_V.set_powerwell("vcccfn_gated");
    SCH_P1_V.set_rand_mode(0);
   SCH_P1_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P1_V.set_logical_path("HQMID");
    void'(add_field( SCH_P1_V ));

    SCH_P2_V = new("SCH_P2_V", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P2_V"});
    SCH_P2_V.set_powerwell("vcccfn_gated");
    SCH_P2_V.set_rand_mode(0);
   SCH_P2_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_V.set_logical_path("HQMID");
    void'(add_field( SCH_P2_V ));

    SCH_P3_V = new("SCH_P3_V", "RO/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P3_V"});
    SCH_P3_V.set_powerwell("vcccfn_gated");
    SCH_P3_V.set_rand_mode(0);
   SCH_P3_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P3_V.set_logical_path("HQMID");
    void'(add_field( SCH_P3_V ));

    SCH_P4_V = new("SCH_P4_V", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P4_V"});
    SCH_P4_V.set_powerwell("vcccfn_gated");
    SCH_P4_V.set_rand_mode(0);
   SCH_P4_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P4_V.set_logical_path("HQMID");
    void'(add_field( SCH_P4_V ));

    SCH_P5_V = new("SCH_P5_V", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P5_V"});
    SCH_P5_V.set_powerwell("vcccfn_gated");
    SCH_P5_V.set_rand_mode(0);
   SCH_P5_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P5_V.set_logical_path("HQMID");
    void'(add_field( SCH_P5_V ));

    P5_INT_V = new("P5_INT_V", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.P5_INT_V"});
    P5_INT_V.set_powerwell("vcccfn_gated");
    P5_INT_V.set_rand_mode(0);
   P5_INT_V.set_reset_signame("hqm_inp_gated_rst_n");
    P5_INT_V.set_logical_path("HQMID");
    void'(add_field( P5_INT_V ));

    P5_HCW_V = new("P5_HCW_V", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.P5_HCW_V"});
    P5_HCW_V.set_powerwell("vcccfn_gated");
    P5_HCW_V.set_rand_mode(0);
   P5_HCW_V.set_reset_signame("hqm_inp_gated_rst_n");
    P5_HCW_V.set_logical_path("HQMID");
    void'(add_field( P5_HCW_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_EGRESS_STATUS_reg) 
endclass : hqm_system_csr_bridge_EGRESS_STATUS_reg

// ================================================

class hqm_system_csr_bridge_WBUF_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SCH_P0_V;
  sla_ral_field SCH_P1_V;
  sla_ral_field SCH_P2_V;
  sla_ral_field SCH_INT_V;
  sla_ral_field SCH_HCW_V;
  sla_ral_field SCH_LDB;
  sla_ral_field SCH_BEAT;
  sla_ral_field SCH_CQ;
  sla_ral_field PH_FIFO_AFULL;
  sla_ral_field PD_FIFO_AFULL;
  sla_ral_field SCH_SM_STATE;
  sla_ral_field SCH_P2_HDR_V;
  sla_ral_field SCH_P2_DATA_V;
  sla_ral_field SCH_P2_INT_V;
  sla_ral_field SCH_P2_SOP;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_WBUF_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_P0_V, SCH_P0_V.desired)
     `RAL_FIELD_CP_1(SCH_P0_V, SCH_P0_V.desired, 0)
     `RAL_FIELD_CP(SCH_P1_V, SCH_P1_V.desired)
     `RAL_FIELD_CP_1(SCH_P1_V, SCH_P1_V.desired, 0)
     `RAL_FIELD_CP(SCH_P2_V, SCH_P2_V.desired)
     `RAL_FIELD_CP_1(SCH_P2_V, SCH_P2_V.desired, 0)
     `RAL_FIELD_CP(SCH_INT_V, SCH_INT_V.desired)
     `RAL_FIELD_CP_1(SCH_INT_V, SCH_INT_V.desired, 0)
     `RAL_FIELD_CP(SCH_HCW_V, SCH_HCW_V.desired)
     `RAL_FIELD_CP_1(SCH_HCW_V, SCH_HCW_V.desired, 0)
     `RAL_FIELD_CP(SCH_LDB, SCH_LDB.desired)
     `RAL_FIELD_CP_1(SCH_LDB, SCH_LDB.desired, 0)
     `RAL_FIELD_CP(SCH_BEAT, SCH_BEAT.desired)
     `RAL_FIELD_CP_2(SCH_BEAT, SCH_BEAT.desired, 0,1)
     `RAL_FIELD_CP(SCH_CQ, SCH_CQ.desired)
     `RAL_FIELD_CP_8(SCH_CQ, SCH_CQ.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PH_FIFO_AFULL, PH_FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(PH_FIFO_AFULL, PH_FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(PD_FIFO_AFULL, PD_FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(PD_FIFO_AFULL, PD_FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(SCH_SM_STATE, SCH_SM_STATE.desired)
     `RAL_FIELD_CP_5(SCH_SM_STATE, SCH_SM_STATE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(SCH_P2_HDR_V, SCH_P2_HDR_V.desired)
     `RAL_FIELD_CP_1(SCH_P2_HDR_V, SCH_P2_HDR_V.desired, 0)
     `RAL_FIELD_CP(SCH_P2_DATA_V, SCH_P2_DATA_V.desired)
     `RAL_FIELD_CP_1(SCH_P2_DATA_V, SCH_P2_DATA_V.desired, 0)
     `RAL_FIELD_CP(SCH_P2_INT_V, SCH_P2_INT_V.desired)
     `RAL_FIELD_CP_1(SCH_P2_INT_V, SCH_P2_INT_V.desired, 0)
     `RAL_FIELD_CP(SCH_P2_SOP, SCH_P2_SOP.desired)
     `RAL_FIELD_CP_1(SCH_P2_SOP, SCH_P2_SOP.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCH_P0_V, SCH_P0_V.actual)
     `RAL_FIELD_CP_1(SCH_P0_V, SCH_P0_V.actual, 0)
     `RAL_FIELD_CP(SCH_P1_V, SCH_P1_V.actual)
     `RAL_FIELD_CP_1(SCH_P1_V, SCH_P1_V.actual, 0)
     `RAL_FIELD_CP(SCH_P2_V, SCH_P2_V.actual)
     `RAL_FIELD_CP_1(SCH_P2_V, SCH_P2_V.actual, 0)
     `RAL_FIELD_CP(SCH_INT_V, SCH_INT_V.actual)
     `RAL_FIELD_CP_1(SCH_INT_V, SCH_INT_V.actual, 0)
     `RAL_FIELD_CP(SCH_HCW_V, SCH_HCW_V.actual)
     `RAL_FIELD_CP_1(SCH_HCW_V, SCH_HCW_V.actual, 0)
     `RAL_FIELD_CP(SCH_LDB, SCH_LDB.actual)
     `RAL_FIELD_CP_1(SCH_LDB, SCH_LDB.actual, 0)
     `RAL_FIELD_CP(SCH_BEAT, SCH_BEAT.actual)
     `RAL_FIELD_CP_2(SCH_BEAT, SCH_BEAT.actual, 0,1)
     `RAL_FIELD_CP(SCH_CQ, SCH_CQ.actual)
     `RAL_FIELD_CP_8(SCH_CQ, SCH_CQ.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PH_FIFO_AFULL, PH_FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(PH_FIFO_AFULL, PH_FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(PD_FIFO_AFULL, PD_FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(PD_FIFO_AFULL, PD_FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(SCH_SM_STATE, SCH_SM_STATE.actual)
     `RAL_FIELD_CP_5(SCH_SM_STATE, SCH_SM_STATE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(SCH_P2_HDR_V, SCH_P2_HDR_V.actual)
     `RAL_FIELD_CP_1(SCH_P2_HDR_V, SCH_P2_HDR_V.actual, 0)
     `RAL_FIELD_CP(SCH_P2_DATA_V, SCH_P2_DATA_V.actual)
     `RAL_FIELD_CP_1(SCH_P2_DATA_V, SCH_P2_DATA_V.actual, 0)
     `RAL_FIELD_CP(SCH_P2_INT_V, SCH_P2_INT_V.actual)
     `RAL_FIELD_CP_1(SCH_P2_INT_V, SCH_P2_INT_V.actual, 0)
     `RAL_FIELD_CP(SCH_P2_SOP, SCH_P2_SOP.actual)
     `RAL_FIELD_CP_1(SCH_P2_SOP, SCH_P2_SOP.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SCH_P0_V = new("SCH_P0_V", "RO/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P0_V"});
    SCH_P0_V.set_powerwell("vcccfn_gated");
    SCH_P0_V.set_rand_mode(0);
   SCH_P0_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P0_V.set_logical_path("HQMID");
    void'(add_field( SCH_P0_V ));

    SCH_P1_V = new("SCH_P1_V", "RO/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P1_V"});
    SCH_P1_V.set_powerwell("vcccfn_gated");
    SCH_P1_V.set_rand_mode(0);
   SCH_P1_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P1_V.set_logical_path("HQMID");
    void'(add_field( SCH_P1_V ));

    SCH_P2_V = new("SCH_P2_V", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_V"});
    SCH_P2_V.set_powerwell("vcccfn_gated");
    SCH_P2_V.set_rand_mode(0);
   SCH_P2_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_V.set_logical_path("HQMID");
    void'(add_field( SCH_P2_V ));

    SCH_INT_V = new("SCH_INT_V", "RO/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_INT_V"});
    SCH_INT_V.set_powerwell("vcccfn_gated");
    SCH_INT_V.set_rand_mode(0);
   SCH_INT_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_INT_V.set_logical_path("HQMID");
    void'(add_field( SCH_INT_V ));

    SCH_HCW_V = new("SCH_HCW_V", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_HCW_V"});
    SCH_HCW_V.set_powerwell("vcccfn_gated");
    SCH_HCW_V.set_rand_mode(0);
   SCH_HCW_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_HCW_V.set_logical_path("HQMID");
    void'(add_field( SCH_HCW_V ));

    SCH_LDB = new("SCH_LDB", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_LDB"});
    SCH_LDB.set_powerwell("vcccfn_gated");
    SCH_LDB.set_rand_mode(0);
   SCH_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_LDB.set_logical_path("HQMID");
    void'(add_field( SCH_LDB ));

    SCH_BEAT = new("SCH_BEAT", "RO/V", 2, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_BEAT"});
    SCH_BEAT.set_powerwell("vcccfn_gated");
    SCH_BEAT.set_rand_mode(0);
   SCH_BEAT.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_BEAT.set_logical_path("HQMID");
    void'(add_field( SCH_BEAT ));

    SCH_CQ = new("SCH_CQ", "RO/V", 8, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_CQ"});
    SCH_CQ.set_powerwell("vcccfn_gated");
    SCH_CQ.set_rand_mode(0);
   SCH_CQ.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_CQ.set_logical_path("HQMID");
    void'(add_field( SCH_CQ ));

    PH_FIFO_AFULL = new("PH_FIFO_AFULL", "RO/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.PH_FIFO_AFULL"});
    PH_FIFO_AFULL.set_powerwell("vcccfn_gated");
    PH_FIFO_AFULL.set_rand_mode(0);
   PH_FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    PH_FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( PH_FIFO_AFULL ));

    PD_FIFO_AFULL = new("PD_FIFO_AFULL", "RO/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.PD_FIFO_AFULL"});
    PD_FIFO_AFULL.set_powerwell("vcccfn_gated");
    PD_FIFO_AFULL.set_rand_mode(0);
   PD_FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    PD_FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( PD_FIFO_AFULL ));

    SCH_SM_STATE = new("SCH_SM_STATE", "RO/V", 5, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_SM_STATE"});
    SCH_SM_STATE.set_powerwell("vcccfn_gated");
    SCH_SM_STATE.set_rand_mode(0);
   SCH_SM_STATE.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_SM_STATE.set_logical_path("HQMID");
    void'(add_field( SCH_SM_STATE ));

    SCH_P2_HDR_V = new("SCH_P2_HDR_V", "RO/V", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_HDR_V"});
    SCH_P2_HDR_V.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_V.set_rand_mode(0);
   SCH_P2_HDR_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_V.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_V ));

    SCH_P2_DATA_V = new("SCH_P2_DATA_V", "RO/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_DATA_V"});
    SCH_P2_DATA_V.set_powerwell("vcccfn_gated");
    SCH_P2_DATA_V.set_rand_mode(0);
   SCH_P2_DATA_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_DATA_V.set_logical_path("HQMID");
    void'(add_field( SCH_P2_DATA_V ));

    SCH_P2_INT_V = new("SCH_P2_INT_V", "RO/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_INT_V"});
    SCH_P2_INT_V.set_powerwell("vcccfn_gated");
    SCH_P2_INT_V.set_rand_mode(0);
   SCH_P2_INT_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_INT_V.set_logical_path("HQMID");
    void'(add_field( SCH_P2_INT_V ));

    SCH_P2_SOP = new("SCH_P2_SOP", "RO/V", 1, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_SOP"});
    SCH_P2_SOP.set_powerwell("vcccfn_gated");
    SCH_P2_SOP.set_rand_mode(0);
   SCH_P2_SOP.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_SOP.set_logical_path("HQMID");
    void'(add_field( SCH_P2_SOP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_WBUF_STATUS_reg) 
endclass : hqm_system_csr_bridge_WBUF_STATUS_reg

// ================================================

class hqm_system_csr_bridge_WBUF_STATUS2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ARB_REQS;
  sla_ral_field ARB_WINNER;
  sla_ral_field ARB_HOLD;
  sla_ral_field CQ_OCC_INT_BUSY;
  sla_ral_field OPT_DATA_VALID;
  sla_ral_field OPT_ERR;
  sla_ral_field OPT_IN_PROG;
  sla_ral_field OPT_IN_PROG_CQ;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_WBUF_STATUS2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARB_REQS, ARB_REQS.desired)
     `RAL_FIELD_CP_2(ARB_REQS, ARB_REQS.desired, 0,1)
     `RAL_FIELD_CP(ARB_WINNER, ARB_WINNER.desired)
     `RAL_FIELD_CP_1(ARB_WINNER, ARB_WINNER.desired, 0)
     `RAL_FIELD_CP(ARB_HOLD, ARB_HOLD.desired)
     `RAL_FIELD_CP_1(ARB_HOLD, ARB_HOLD.desired, 0)
     `RAL_FIELD_CP(CQ_OCC_INT_BUSY, CQ_OCC_INT_BUSY.desired)
     `RAL_FIELD_CP_1(CQ_OCC_INT_BUSY, CQ_OCC_INT_BUSY.desired, 0)
     `RAL_FIELD_CP(OPT_DATA_VALID, OPT_DATA_VALID.desired)
     `RAL_FIELD_CP_4(OPT_DATA_VALID, OPT_DATA_VALID.desired, 0,1,2,3)
     `RAL_FIELD_CP(OPT_ERR, OPT_ERR.desired)
     `RAL_FIELD_CP_1(OPT_ERR, OPT_ERR.desired, 0)
     `RAL_FIELD_CP(OPT_IN_PROG, OPT_IN_PROG.desired)
     `RAL_FIELD_CP_1(OPT_IN_PROG, OPT_IN_PROG.desired, 0)
     `RAL_FIELD_CP(OPT_IN_PROG_CQ, OPT_IN_PROG_CQ.desired)
     `RAL_FIELD_CP_6(OPT_IN_PROG_CQ, OPT_IN_PROG_CQ.desired, 0,1,2,3,4,5)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARB_REQS, ARB_REQS.actual)
     `RAL_FIELD_CP_2(ARB_REQS, ARB_REQS.actual, 0,1)
     `RAL_FIELD_CP(ARB_WINNER, ARB_WINNER.actual)
     `RAL_FIELD_CP_1(ARB_WINNER, ARB_WINNER.actual, 0)
     `RAL_FIELD_CP(ARB_HOLD, ARB_HOLD.actual)
     `RAL_FIELD_CP_1(ARB_HOLD, ARB_HOLD.actual, 0)
     `RAL_FIELD_CP(CQ_OCC_INT_BUSY, CQ_OCC_INT_BUSY.actual)
     `RAL_FIELD_CP_1(CQ_OCC_INT_BUSY, CQ_OCC_INT_BUSY.actual, 0)
     `RAL_FIELD_CP(OPT_DATA_VALID, OPT_DATA_VALID.actual)
     `RAL_FIELD_CP_4(OPT_DATA_VALID, OPT_DATA_VALID.actual, 0,1,2,3)
     `RAL_FIELD_CP(OPT_ERR, OPT_ERR.actual)
     `RAL_FIELD_CP_1(OPT_ERR, OPT_ERR.actual, 0)
     `RAL_FIELD_CP(OPT_IN_PROG, OPT_IN_PROG.actual)
     `RAL_FIELD_CP_1(OPT_IN_PROG, OPT_IN_PROG.actual, 0)
     `RAL_FIELD_CP(OPT_IN_PROG_CQ, OPT_IN_PROG_CQ.actual)
     `RAL_FIELD_CP_6(OPT_IN_PROG_CQ, OPT_IN_PROG_CQ.actual, 0,1,2,3,4,5)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ARB_REQS = new("ARB_REQS", "RO/V", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_REQS"});
    ARB_REQS.set_powerwell("vcccfn_gated");
    ARB_REQS.set_rand_mode(0);
   ARB_REQS.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_REQS.set_logical_path("HQMID");
    void'(add_field( ARB_REQS ));

    ARB_WINNER = new("ARB_WINNER", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_WINNER"});
    ARB_WINNER.set_powerwell("vcccfn_gated");
    ARB_WINNER.set_rand_mode(0);
   ARB_WINNER.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_WINNER.set_logical_path("HQMID");
    void'(add_field( ARB_WINNER ));

    ARB_HOLD = new("ARB_HOLD", "RO/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_HOLD"});
    ARB_HOLD.set_powerwell("vcccfn_gated");
    ARB_HOLD.set_rand_mode(0);
   ARB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_HOLD.set_logical_path("HQMID");
    void'(add_field( ARB_HOLD ));

    CQ_OCC_INT_BUSY = new("CQ_OCC_INT_BUSY", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.CQ_OCC_INT_BUSY"});
    CQ_OCC_INT_BUSY.set_powerwell("vcccfn_gated");
    CQ_OCC_INT_BUSY.set_rand_mode(0);
   CQ_OCC_INT_BUSY.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_OCC_INT_BUSY.set_logical_path("HQMID");
    void'(add_field( CQ_OCC_INT_BUSY ));

    OPT_DATA_VALID = new("OPT_DATA_VALID", "RO/V", 4, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_DATA_VALID"});
    OPT_DATA_VALID.set_powerwell("vcccfn_gated");
    OPT_DATA_VALID.set_rand_mode(0);
   OPT_DATA_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    OPT_DATA_VALID.set_logical_path("HQMID");
    void'(add_field( OPT_DATA_VALID ));

    OPT_ERR = new("OPT_ERR", "RO/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_ERR"});
    OPT_ERR.set_powerwell("vcccfn_gated");
    OPT_ERR.set_rand_mode(0);
   OPT_ERR.set_reset_signame("hqm_inp_gated_rst_n");
    OPT_ERR.set_logical_path("HQMID");
    void'(add_field( OPT_ERR ));

    OPT_IN_PROG = new("OPT_IN_PROG", "RO/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_IN_PROG"});
    OPT_IN_PROG.set_powerwell("vcccfn_gated");
    OPT_IN_PROG.set_rand_mode(0);
   OPT_IN_PROG.set_reset_signame("hqm_inp_gated_rst_n");
    OPT_IN_PROG.set_logical_path("HQMID");
    void'(add_field( OPT_IN_PROG ));

    OPT_IN_PROG_CQ = new("OPT_IN_PROG_CQ", "RO/V", 6, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_IN_PROG_CQ"});
    OPT_IN_PROG_CQ.set_powerwell("vcccfn_gated");
    OPT_IN_PROG_CQ.set_rand_mode(0);
   OPT_IN_PROG_CQ.set_reset_signame("hqm_inp_gated_rst_n");
    OPT_IN_PROG_CQ.set_logical_path("HQMID");
    void'(add_field( OPT_IN_PROG_CQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_WBUF_STATUS2_reg) 
endclass : hqm_system_csr_bridge_WBUF_STATUS2_reg

// ================================================

class hqm_system_csr_bridge_WBUF_DEBUG_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ARB_WINNER_Q;
  sla_ral_field ARB_HOLD_Q;
  sla_ral_field ARB_WINNER;
  sla_ral_field ARB_WINNER_V;
  sla_ral_field SCH_ARB_REQ;
  sla_ral_field MSI_MSIX_ARB_REQ;
  sla_ral_field PDATA_FIFO_AFULL_Q;
  sla_ral_field PHDR_FIFO_AFULL_Q;
  sla_ral_field CQ_OCC_INT_BUSY;
  sla_ral_field SCH_DATA_LAST;
  sla_ral_field SCH_DATA_FIRST;
  sla_ral_field SCH_DATA_V;
  sla_ral_field SCH_HDR_V;
  sla_ral_field SCH_P2_HDR_Q_EOP;
  sla_ral_field SCH_P2_HDR_Q_SOP;
  sla_ral_field SCH_P2_HDR_Q_INT_V;
  sla_ral_field SCH_P2_HDR_Q_DATA_V;
  sla_ral_field SCH_P2_V_Q;
  sla_ral_field SCH_P2_LOAD;
  sla_ral_field SCH_P2_HOLD;
  sla_ral_field SCH_P2_HDR_Q_VF;
  sla_ral_field SCH_P2_HDR_Q_IS_PF;
  sla_ral_field SCH_P2_HDR_Q_LDB;
  sla_ral_field SCH_P2_HDR_Q_BEATS;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_WBUF_DEBUG_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARB_WINNER_Q, ARB_WINNER_Q.desired)
     `RAL_FIELD_CP_1(ARB_WINNER_Q, ARB_WINNER_Q.desired, 0)
     `RAL_FIELD_CP(ARB_HOLD_Q, ARB_HOLD_Q.desired)
     `RAL_FIELD_CP_1(ARB_HOLD_Q, ARB_HOLD_Q.desired, 0)
     `RAL_FIELD_CP(ARB_WINNER, ARB_WINNER.desired)
     `RAL_FIELD_CP_1(ARB_WINNER, ARB_WINNER.desired, 0)
     `RAL_FIELD_CP(ARB_WINNER_V, ARB_WINNER_V.desired)
     `RAL_FIELD_CP_1(ARB_WINNER_V, ARB_WINNER_V.desired, 0)
     `RAL_FIELD_CP(SCH_ARB_REQ, SCH_ARB_REQ.desired)
     `RAL_FIELD_CP_1(SCH_ARB_REQ, SCH_ARB_REQ.desired, 0)
     `RAL_FIELD_CP(MSI_MSIX_ARB_REQ, MSI_MSIX_ARB_REQ.desired)
     `RAL_FIELD_CP_1(MSI_MSIX_ARB_REQ, MSI_MSIX_ARB_REQ.desired, 0)
     `RAL_FIELD_CP(PDATA_FIFO_AFULL_Q, PDATA_FIFO_AFULL_Q.desired)
     `RAL_FIELD_CP_1(PDATA_FIFO_AFULL_Q, PDATA_FIFO_AFULL_Q.desired, 0)
     `RAL_FIELD_CP(PHDR_FIFO_AFULL_Q, PHDR_FIFO_AFULL_Q.desired)
     `RAL_FIELD_CP_1(PHDR_FIFO_AFULL_Q, PHDR_FIFO_AFULL_Q.desired, 0)
     `RAL_FIELD_CP(CQ_OCC_INT_BUSY, CQ_OCC_INT_BUSY.desired)
     `RAL_FIELD_CP_1(CQ_OCC_INT_BUSY, CQ_OCC_INT_BUSY.desired, 0)
     `RAL_FIELD_CP(SCH_DATA_LAST, SCH_DATA_LAST.desired)
     `RAL_FIELD_CP_1(SCH_DATA_LAST, SCH_DATA_LAST.desired, 0)
     `RAL_FIELD_CP(SCH_DATA_FIRST, SCH_DATA_FIRST.desired)
     `RAL_FIELD_CP_1(SCH_DATA_FIRST, SCH_DATA_FIRST.desired, 0)
     `RAL_FIELD_CP(SCH_DATA_V, SCH_DATA_V.desired)
     `RAL_FIELD_CP_1(SCH_DATA_V, SCH_DATA_V.desired, 0)
     `RAL_FIELD_CP(SCH_HDR_V, SCH_HDR_V.desired)
     `RAL_FIELD_CP_1(SCH_HDR_V, SCH_HDR_V.desired, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_EOP, SCH_P2_HDR_Q_EOP.desired)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_EOP, SCH_P2_HDR_Q_EOP.desired, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_SOP, SCH_P2_HDR_Q_SOP.desired)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_SOP, SCH_P2_HDR_Q_SOP.desired, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_INT_V, SCH_P2_HDR_Q_INT_V.desired)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_INT_V, SCH_P2_HDR_Q_INT_V.desired, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_DATA_V, SCH_P2_HDR_Q_DATA_V.desired)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_DATA_V, SCH_P2_HDR_Q_DATA_V.desired, 0)
     `RAL_FIELD_CP(SCH_P2_V_Q, SCH_P2_V_Q.desired)
     `RAL_FIELD_CP_1(SCH_P2_V_Q, SCH_P2_V_Q.desired, 0)
     `RAL_FIELD_CP(SCH_P2_LOAD, SCH_P2_LOAD.desired)
     `RAL_FIELD_CP_1(SCH_P2_LOAD, SCH_P2_LOAD.desired, 0)
     `RAL_FIELD_CP(SCH_P2_HOLD, SCH_P2_HOLD.desired)
     `RAL_FIELD_CP_1(SCH_P2_HOLD, SCH_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_VF, SCH_P2_HDR_Q_VF.desired)
     `RAL_FIELD_CP_4(SCH_P2_HDR_Q_VF, SCH_P2_HDR_Q_VF.desired, 0,1,2,3)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_IS_PF, SCH_P2_HDR_Q_IS_PF.desired)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_IS_PF, SCH_P2_HDR_Q_IS_PF.desired, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_LDB, SCH_P2_HDR_Q_LDB.desired)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_LDB, SCH_P2_HDR_Q_LDB.desired, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_BEATS, SCH_P2_HDR_Q_BEATS.desired)
     `RAL_FIELD_CP_3(SCH_P2_HDR_Q_BEATS, SCH_P2_HDR_Q_BEATS.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARB_WINNER_Q, ARB_WINNER_Q.actual)
     `RAL_FIELD_CP_1(ARB_WINNER_Q, ARB_WINNER_Q.actual, 0)
     `RAL_FIELD_CP(ARB_HOLD_Q, ARB_HOLD_Q.actual)
     `RAL_FIELD_CP_1(ARB_HOLD_Q, ARB_HOLD_Q.actual, 0)
     `RAL_FIELD_CP(ARB_WINNER, ARB_WINNER.actual)
     `RAL_FIELD_CP_1(ARB_WINNER, ARB_WINNER.actual, 0)
     `RAL_FIELD_CP(ARB_WINNER_V, ARB_WINNER_V.actual)
     `RAL_FIELD_CP_1(ARB_WINNER_V, ARB_WINNER_V.actual, 0)
     `RAL_FIELD_CP(SCH_ARB_REQ, SCH_ARB_REQ.actual)
     `RAL_FIELD_CP_1(SCH_ARB_REQ, SCH_ARB_REQ.actual, 0)
     `RAL_FIELD_CP(MSI_MSIX_ARB_REQ, MSI_MSIX_ARB_REQ.actual)
     `RAL_FIELD_CP_1(MSI_MSIX_ARB_REQ, MSI_MSIX_ARB_REQ.actual, 0)
     `RAL_FIELD_CP(PDATA_FIFO_AFULL_Q, PDATA_FIFO_AFULL_Q.actual)
     `RAL_FIELD_CP_1(PDATA_FIFO_AFULL_Q, PDATA_FIFO_AFULL_Q.actual, 0)
     `RAL_FIELD_CP(PHDR_FIFO_AFULL_Q, PHDR_FIFO_AFULL_Q.actual)
     `RAL_FIELD_CP_1(PHDR_FIFO_AFULL_Q, PHDR_FIFO_AFULL_Q.actual, 0)
     `RAL_FIELD_CP(CQ_OCC_INT_BUSY, CQ_OCC_INT_BUSY.actual)
     `RAL_FIELD_CP_1(CQ_OCC_INT_BUSY, CQ_OCC_INT_BUSY.actual, 0)
     `RAL_FIELD_CP(SCH_DATA_LAST, SCH_DATA_LAST.actual)
     `RAL_FIELD_CP_1(SCH_DATA_LAST, SCH_DATA_LAST.actual, 0)
     `RAL_FIELD_CP(SCH_DATA_FIRST, SCH_DATA_FIRST.actual)
     `RAL_FIELD_CP_1(SCH_DATA_FIRST, SCH_DATA_FIRST.actual, 0)
     `RAL_FIELD_CP(SCH_DATA_V, SCH_DATA_V.actual)
     `RAL_FIELD_CP_1(SCH_DATA_V, SCH_DATA_V.actual, 0)
     `RAL_FIELD_CP(SCH_HDR_V, SCH_HDR_V.actual)
     `RAL_FIELD_CP_1(SCH_HDR_V, SCH_HDR_V.actual, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_EOP, SCH_P2_HDR_Q_EOP.actual)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_EOP, SCH_P2_HDR_Q_EOP.actual, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_SOP, SCH_P2_HDR_Q_SOP.actual)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_SOP, SCH_P2_HDR_Q_SOP.actual, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_INT_V, SCH_P2_HDR_Q_INT_V.actual)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_INT_V, SCH_P2_HDR_Q_INT_V.actual, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_DATA_V, SCH_P2_HDR_Q_DATA_V.actual)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_DATA_V, SCH_P2_HDR_Q_DATA_V.actual, 0)
     `RAL_FIELD_CP(SCH_P2_V_Q, SCH_P2_V_Q.actual)
     `RAL_FIELD_CP_1(SCH_P2_V_Q, SCH_P2_V_Q.actual, 0)
     `RAL_FIELD_CP(SCH_P2_LOAD, SCH_P2_LOAD.actual)
     `RAL_FIELD_CP_1(SCH_P2_LOAD, SCH_P2_LOAD.actual, 0)
     `RAL_FIELD_CP(SCH_P2_HOLD, SCH_P2_HOLD.actual)
     `RAL_FIELD_CP_1(SCH_P2_HOLD, SCH_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_VF, SCH_P2_HDR_Q_VF.actual)
     `RAL_FIELD_CP_4(SCH_P2_HDR_Q_VF, SCH_P2_HDR_Q_VF.actual, 0,1,2,3)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_IS_PF, SCH_P2_HDR_Q_IS_PF.actual)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_IS_PF, SCH_P2_HDR_Q_IS_PF.actual, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_LDB, SCH_P2_HDR_Q_LDB.actual)
     `RAL_FIELD_CP_1(SCH_P2_HDR_Q_LDB, SCH_P2_HDR_Q_LDB.actual, 0)
     `RAL_FIELD_CP(SCH_P2_HDR_Q_BEATS, SCH_P2_HDR_Q_BEATS.actual)
     `RAL_FIELD_CP_3(SCH_P2_HDR_Q_BEATS, SCH_P2_HDR_Q_BEATS.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ARB_WINNER_Q = new("ARB_WINNER_Q", "RO/V", 1, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER_Q"});
    ARB_WINNER_Q.set_powerwell("vcccfn_gated");
    ARB_WINNER_Q.set_rand_mode(0);
   ARB_WINNER_Q.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_WINNER_Q.set_logical_path("HQMID");
    void'(add_field( ARB_WINNER_Q ));

    ARB_HOLD_Q = new("ARB_HOLD_Q", "RO/V", 1, 1, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_HOLD_Q"});
    ARB_HOLD_Q.set_powerwell("vcccfn_gated");
    ARB_HOLD_Q.set_rand_mode(0);
   ARB_HOLD_Q.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_HOLD_Q.set_logical_path("HQMID");
    void'(add_field( ARB_HOLD_Q ));

    ARB_WINNER = new("ARB_WINNER", "RO/V", 1, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER"});
    ARB_WINNER.set_powerwell("vcccfn_gated");
    ARB_WINNER.set_rand_mode(0);
   ARB_WINNER.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_WINNER.set_logical_path("HQMID");
    void'(add_field( ARB_WINNER ));

    ARB_WINNER_V = new("ARB_WINNER_V", "RO/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER_V"});
    ARB_WINNER_V.set_powerwell("vcccfn_gated");
    ARB_WINNER_V.set_rand_mode(0);
   ARB_WINNER_V.set_reset_signame("hqm_inp_gated_rst_n");
    ARB_WINNER_V.set_logical_path("HQMID");
    void'(add_field( ARB_WINNER_V ));

    SCH_ARB_REQ = new("SCH_ARB_REQ", "RO/V", 1, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_ARB_REQ"});
    SCH_ARB_REQ.set_powerwell("vcccfn_gated");
    SCH_ARB_REQ.set_rand_mode(0);
   SCH_ARB_REQ.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_ARB_REQ.set_logical_path("HQMID");
    void'(add_field( SCH_ARB_REQ ));

    MSI_MSIX_ARB_REQ = new("MSI_MSIX_ARB_REQ", "RO/V", 1, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.MSI_MSIX_ARB_REQ"});
    MSI_MSIX_ARB_REQ.set_powerwell("vcccfn_gated");
    MSI_MSIX_ARB_REQ.set_rand_mode(0);
   MSI_MSIX_ARB_REQ.set_reset_signame("hqm_inp_gated_rst_n");
    MSI_MSIX_ARB_REQ.set_logical_path("HQMID");
    void'(add_field( MSI_MSIX_ARB_REQ ));

    PDATA_FIFO_AFULL_Q = new("PDATA_FIFO_AFULL_Q", "RO/V", 1, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.PDATA_FIFO_AFULL_Q"});
    PDATA_FIFO_AFULL_Q.set_powerwell("vcccfn_gated");
    PDATA_FIFO_AFULL_Q.set_rand_mode(0);
   PDATA_FIFO_AFULL_Q.set_reset_signame("hqm_inp_gated_rst_n");
    PDATA_FIFO_AFULL_Q.set_logical_path("HQMID");
    void'(add_field( PDATA_FIFO_AFULL_Q ));

    PHDR_FIFO_AFULL_Q = new("PHDR_FIFO_AFULL_Q", "RO/V", 1, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.PHDR_FIFO_AFULL_Q"});
    PHDR_FIFO_AFULL_Q.set_powerwell("vcccfn_gated");
    PHDR_FIFO_AFULL_Q.set_rand_mode(0);
   PHDR_FIFO_AFULL_Q.set_reset_signame("hqm_inp_gated_rst_n");
    PHDR_FIFO_AFULL_Q.set_logical_path("HQMID");
    void'(add_field( PHDR_FIFO_AFULL_Q ));

    CQ_OCC_INT_BUSY = new("CQ_OCC_INT_BUSY", "RO/V", 1, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.CQ_OCC_INT_BUSY"});
    CQ_OCC_INT_BUSY.set_powerwell("vcccfn_gated");
    CQ_OCC_INT_BUSY.set_rand_mode(0);
   CQ_OCC_INT_BUSY.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_OCC_INT_BUSY.set_logical_path("HQMID");
    void'(add_field( CQ_OCC_INT_BUSY ));

    SCH_DATA_LAST = new("SCH_DATA_LAST", "RO/V", 1, 9, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_LAST"});
    SCH_DATA_LAST.set_powerwell("vcccfn_gated");
    SCH_DATA_LAST.set_rand_mode(0);
   SCH_DATA_LAST.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_DATA_LAST.set_logical_path("HQMID");
    void'(add_field( SCH_DATA_LAST ));

    SCH_DATA_FIRST = new("SCH_DATA_FIRST", "RO/V", 1, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_FIRST"});
    SCH_DATA_FIRST.set_powerwell("vcccfn_gated");
    SCH_DATA_FIRST.set_rand_mode(0);
   SCH_DATA_FIRST.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_DATA_FIRST.set_logical_path("HQMID");
    void'(add_field( SCH_DATA_FIRST ));

    SCH_DATA_V = new("SCH_DATA_V", "RO/V", 1, 11, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_V"});
    SCH_DATA_V.set_powerwell("vcccfn_gated");
    SCH_DATA_V.set_rand_mode(0);
   SCH_DATA_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_DATA_V.set_logical_path("HQMID");
    void'(add_field( SCH_DATA_V ));

    SCH_HDR_V = new("SCH_HDR_V", "RO/V", 1, 12, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_HDR_V"});
    SCH_HDR_V.set_powerwell("vcccfn_gated");
    SCH_HDR_V.set_rand_mode(0);
   SCH_HDR_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_HDR_V.set_logical_path("HQMID");
    void'(add_field( SCH_HDR_V ));

    SCH_P2_HDR_Q_EOP = new("SCH_P2_HDR_Q_EOP", "RO/V", 1, 13, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_EOP"});
    SCH_P2_HDR_Q_EOP.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_Q_EOP.set_rand_mode(0);
   SCH_P2_HDR_Q_EOP.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_Q_EOP.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_Q_EOP ));

    SCH_P2_HDR_Q_SOP = new("SCH_P2_HDR_Q_SOP", "RO/V", 1, 14, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_SOP"});
    SCH_P2_HDR_Q_SOP.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_Q_SOP.set_rand_mode(0);
   SCH_P2_HDR_Q_SOP.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_Q_SOP.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_Q_SOP ));

    SCH_P2_HDR_Q_INT_V = new("SCH_P2_HDR_Q_INT_V", "RO/V", 1, 15, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_INT_V"});
    SCH_P2_HDR_Q_INT_V.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_Q_INT_V.set_rand_mode(0);
   SCH_P2_HDR_Q_INT_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_Q_INT_V.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_Q_INT_V ));

    SCH_P2_HDR_Q_DATA_V = new("SCH_P2_HDR_Q_DATA_V", "RO/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_DATA_V"});
    SCH_P2_HDR_Q_DATA_V.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_Q_DATA_V.set_rand_mode(0);
   SCH_P2_HDR_Q_DATA_V.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_Q_DATA_V.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_Q_DATA_V ));

    SCH_P2_V_Q = new("SCH_P2_V_Q", "RO/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_V_Q"});
    SCH_P2_V_Q.set_powerwell("vcccfn_gated");
    SCH_P2_V_Q.set_rand_mode(0);
   SCH_P2_V_Q.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_V_Q.set_logical_path("HQMID");
    void'(add_field( SCH_P2_V_Q ));

    SCH_P2_LOAD = new("SCH_P2_LOAD", "RO/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_LOAD"});
    SCH_P2_LOAD.set_powerwell("vcccfn_gated");
    SCH_P2_LOAD.set_rand_mode(0);
   SCH_P2_LOAD.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_LOAD.set_logical_path("HQMID");
    void'(add_field( SCH_P2_LOAD ));

    SCH_P2_HOLD = new("SCH_P2_HOLD", "RO/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HOLD"});
    SCH_P2_HOLD.set_powerwell("vcccfn_gated");
    SCH_P2_HOLD.set_rand_mode(0);
   SCH_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HOLD ));

    SCH_P2_HDR_Q_VF = new("SCH_P2_HDR_Q_VF", "RO/V", 4, 20, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_VF"});
    SCH_P2_HDR_Q_VF.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_Q_VF.set_rand_mode(0);
   SCH_P2_HDR_Q_VF.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_Q_VF.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_Q_VF ));

    SCH_P2_HDR_Q_IS_PF = new("SCH_P2_HDR_Q_IS_PF", "RO/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_IS_PF"});
    SCH_P2_HDR_Q_IS_PF.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_Q_IS_PF.set_rand_mode(0);
   SCH_P2_HDR_Q_IS_PF.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_Q_IS_PF.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_Q_IS_PF ));

    SCH_P2_HDR_Q_LDB = new("SCH_P2_HDR_Q_LDB", "RO/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_LDB"});
    SCH_P2_HDR_Q_LDB.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_Q_LDB.set_rand_mode(0);
   SCH_P2_HDR_Q_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_Q_LDB.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_Q_LDB ));

    SCH_P2_HDR_Q_BEATS = new("SCH_P2_HDR_Q_BEATS", "RO/V", 3, 26, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_BEATS"});
    SCH_P2_HDR_Q_BEATS.set_powerwell("vcccfn_gated");
    SCH_P2_HDR_Q_BEATS.set_rand_mode(0);
   SCH_P2_HDR_Q_BEATS.set_reset_signame("hqm_inp_gated_rst_n");
    SCH_P2_HDR_Q_BEATS.set_logical_path("HQMID");
    void'(add_field( SCH_P2_HDR_Q_BEATS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_WBUF_DEBUG_reg) 
endclass : hqm_system_csr_bridge_WBUF_DEBUG_reg

// ================================================

class hqm_system_csr_bridge_ROB_SYNDROME_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ROB_V_CNT;
  sla_ral_field CL_LAST;
  sla_ral_field CLI;
  sla_ral_field CL;
  sla_ral_field PP;
  sla_ral_field PP_IS_LDB;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_ROB_SYNDROME_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROB_V_CNT, ROB_V_CNT.desired)
     `RAL_FIELD_CP_3(ROB_V_CNT, ROB_V_CNT.desired, 0,1,2)
     `RAL_FIELD_CP(CL_LAST, CL_LAST.desired)
     `RAL_FIELD_CP_1(CL_LAST, CL_LAST.desired, 0)
     `RAL_FIELD_CP(CLI, CLI.desired)
     `RAL_FIELD_CP_2(CLI, CLI.desired, 0,1)
     `RAL_FIELD_CP(CL, CL.desired)
     `RAL_FIELD_CP_4(CL, CL.desired, 0,1,2,3)
     `RAL_FIELD_CP(PP, PP.desired)
     `RAL_FIELD_CP_6(PP, PP.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(PP_IS_LDB, PP_IS_LDB.desired)
     `RAL_FIELD_CP_1(PP_IS_LDB, PP_IS_LDB.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROB_V_CNT, ROB_V_CNT.actual)
     `RAL_FIELD_CP_3(ROB_V_CNT, ROB_V_CNT.actual, 0,1,2)
     `RAL_FIELD_CP(CL_LAST, CL_LAST.actual)
     `RAL_FIELD_CP_1(CL_LAST, CL_LAST.actual, 0)
     `RAL_FIELD_CP(CLI, CLI.actual)
     `RAL_FIELD_CP_2(CLI, CLI.actual, 0,1)
     `RAL_FIELD_CP(CL, CL.actual)
     `RAL_FIELD_CP_4(CL, CL.actual, 0,1,2,3)
     `RAL_FIELD_CP(PP, PP.actual)
     `RAL_FIELD_CP_6(PP, PP.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(PP_IS_LDB, PP_IS_LDB.actual)
     `RAL_FIELD_CP_1(PP_IS_LDB, PP_IS_LDB.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ROB_V_CNT = new("ROB_V_CNT", "RW/1C/V", 3, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.ROB_V_CNT"});
    ROB_V_CNT.set_powerwell("vcccfn_gated");
    ROB_V_CNT.set_rand_mode(0);
   ROB_V_CNT.set_reset_signame("hqm_inp_gated_rst_n");
    ROB_V_CNT.set_logical_path("HQMID");
    void'(add_field( ROB_V_CNT ));

    CL_LAST = new("CL_LAST", "RW/1C/V", 1, 3, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CL_LAST"});
    CL_LAST.set_powerwell("vcccfn_gated");
    CL_LAST.set_rand_mode(0);
   CL_LAST.set_reset_signame("hqm_inp_gated_rst_n");
    CL_LAST.set_logical_path("HQMID");
    void'(add_field( CL_LAST ));

    CLI = new("CLI", "RW/1C/V", 2, 4, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CLI"});
    CLI.set_powerwell("vcccfn_gated");
    CLI.set_rand_mode(0);
   CLI.set_reset_signame("hqm_inp_gated_rst_n");
    CLI.set_logical_path("HQMID");
    void'(add_field( CLI ));

    CL = new("CL", "RW/1C/V", 4, 6, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CL"});
    CL.set_powerwell("vcccfn_gated");
    CL.set_rand_mode(0);
   CL.set_reset_signame("hqm_inp_gated_rst_n");
    CL.set_logical_path("HQMID");
    void'(add_field( CL ));

    PP = new("PP", "RW/1C/V", 6, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.PP"});
    PP.set_powerwell("vcccfn_gated");
    PP.set_rand_mode(0);
   PP.set_reset_signame("hqm_inp_gated_rst_n");
    PP.set_logical_path("HQMID");
    void'(add_field( PP ));

    PP_IS_LDB = new("PP_IS_LDB", "RW/1C/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.PP_IS_LDB"});
    PP_IS_LDB.set_powerwell("vcccfn_gated");
    PP_IS_LDB.set_rand_mode(0);
   PP_IS_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    PP_IS_LDB.set_logical_path("HQMID");
    void'(add_field( PP_IS_LDB ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_ROB_SYNDROME_reg) 
endclass : hqm_system_csr_bridge_ROB_SYNDROME_reg

// ================================================

class hqm_system_csr_bridge_PHDR_DEBUG_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TC_SEL;
  sla_ral_field ADDR_31_2;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PHDR_DEBUG_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TC_SEL, TC_SEL.desired)
     `RAL_FIELD_CP_2(TC_SEL, TC_SEL.desired, 0,1)
     `RAL_FIELD_CP(ADDR_31_2, ADDR_31_2.desired)
     `RAL_FIELD_CP_16(ADDR_31_2, ADDR_31_2.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(ADDR_31_2, ADDR_31_2.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TC_SEL, TC_SEL.actual)
     `RAL_FIELD_CP_2(TC_SEL, TC_SEL.actual, 0,1)
     `RAL_FIELD_CP(ADDR_31_2, ADDR_31_2.actual)
     `RAL_FIELD_CP_16(ADDR_31_2, ADDR_31_2.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(ADDR_31_2, ADDR_31_2.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TC_SEL = new("TC_SEL", "RO/V", 2, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_0.TC_SEL"});
    TC_SEL.set_powerwell("vcccfn_gated");
    TC_SEL.set_rand_mode(0);
   TC_SEL.set_reset_signame("hqm_inp_gated_rst_n");
    TC_SEL.set_logical_path("HQMID");
    void'(add_field( TC_SEL ));

    ADDR_31_2 = new("ADDR_31_2", "RO/V", 30, 2, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_0.ADDR_31_2"});
    ADDR_31_2.set_powerwell("vcccfn_gated");
    ADDR_31_2.set_rand_mode(0);
   ADDR_31_2.set_reset_signame("hqm_inp_gated_rst_n");
    ADDR_31_2.set_logical_path("HQMID");
    void'(add_field( ADDR_31_2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PHDR_DEBUG_0_reg) 
endclass : hqm_system_csr_bridge_PHDR_DEBUG_0_reg

// ================================================

class hqm_system_csr_bridge_PHDR_DEBUG_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR_63_32;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PHDR_DEBUG_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_63_32, ADDR_63_32.desired)
     `RAL_FIELD_CP_16(ADDR_63_32, ADDR_63_32.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_63_32, ADDR_63_32.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_63_32, ADDR_63_32.actual)
     `RAL_FIELD_CP_16(ADDR_63_32, ADDR_63_32.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_63_32, ADDR_63_32.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR_63_32 = new("ADDR_63_32", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_1.ADDR_63_32"});
    ADDR_63_32.set_powerwell("vcccfn_gated");
    ADDR_63_32.set_rand_mode(0);
   ADDR_63_32.set_reset_signame("hqm_inp_gated_rst_n");
    ADDR_63_32.set_logical_path("HQMID");
    void'(add_field( ADDR_63_32 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PHDR_DEBUG_1_reg) 
endclass : hqm_system_csr_bridge_PHDR_DEBUG_1_reg

// ================================================

class hqm_system_csr_bridge_PHDR_DEBUG_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LENGTH;
  sla_ral_field SRC;
  sla_ral_field NUM_HCWS;
  sla_ral_field CQ;
  sla_ral_field LDB;
  sla_ral_field CQ_V;
  sla_ral_field RO;
  sla_ral_field INVALID;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_PHDR_DEBUG_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LENGTH, LENGTH.desired)
     `RAL_FIELD_CP_5(LENGTH, LENGTH.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(SRC, SRC.desired)
     `RAL_FIELD_CP_2(SRC, SRC.desired, 0,1)
     `RAL_FIELD_CP(NUM_HCWS, NUM_HCWS.desired)
     `RAL_FIELD_CP_3(NUM_HCWS, NUM_HCWS.desired, 0,1,2)
     `RAL_FIELD_CP(CQ, CQ.desired)
     `RAL_FIELD_CP_6(CQ, CQ.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(LDB, LDB.desired)
     `RAL_FIELD_CP_1(LDB, LDB.desired, 0)
     `RAL_FIELD_CP(CQ_V, CQ_V.desired)
     `RAL_FIELD_CP_1(CQ_V, CQ_V.desired, 0)
     `RAL_FIELD_CP(RO, RO.desired)
     `RAL_FIELD_CP_1(RO, RO.desired, 0)
     `RAL_FIELD_CP(INVALID, INVALID.desired)
     `RAL_FIELD_CP_1(INVALID, INVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LENGTH, LENGTH.actual)
     `RAL_FIELD_CP_5(LENGTH, LENGTH.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(SRC, SRC.actual)
     `RAL_FIELD_CP_2(SRC, SRC.actual, 0,1)
     `RAL_FIELD_CP(NUM_HCWS, NUM_HCWS.actual)
     `RAL_FIELD_CP_3(NUM_HCWS, NUM_HCWS.actual, 0,1,2)
     `RAL_FIELD_CP(CQ, CQ.actual)
     `RAL_FIELD_CP_6(CQ, CQ.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(LDB, LDB.actual)
     `RAL_FIELD_CP_1(LDB, LDB.actual, 0)
     `RAL_FIELD_CP(CQ_V, CQ_V.actual)
     `RAL_FIELD_CP_1(CQ_V, CQ_V.actual, 0)
     `RAL_FIELD_CP(RO, RO.actual)
     `RAL_FIELD_CP_1(RO, RO.actual, 0)
     `RAL_FIELD_CP(INVALID, INVALID.actual)
     `RAL_FIELD_CP_1(INVALID, INVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LENGTH = new("LENGTH", "RO/V", 5, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.LENGTH"});
    LENGTH.set_powerwell("vcccfn_gated");
    LENGTH.set_rand_mode(0);
   LENGTH.set_reset_signame("hqm_inp_gated_rst_n");
    LENGTH.set_logical_path("HQMID");
    void'(add_field( LENGTH ));

    SRC = new("SRC", "RO/V", 2, 5, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.SRC"});
    SRC.set_powerwell("vcccfn_gated");
    SRC.set_rand_mode(0);
   SRC.set_reset_signame("hqm_inp_gated_rst_n");
    SRC.set_logical_path("HQMID");
    void'(add_field( SRC ));

    NUM_HCWS = new("NUM_HCWS", "RO/V", 3, 7, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.NUM_HCWS"});
    NUM_HCWS.set_powerwell("vcccfn_gated");
    NUM_HCWS.set_rand_mode(0);
   NUM_HCWS.set_reset_signame("hqm_inp_gated_rst_n");
    NUM_HCWS.set_logical_path("HQMID");
    void'(add_field( NUM_HCWS ));

    CQ = new("CQ", "RO/V", 6, 10, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.CQ"});
    CQ.set_powerwell("vcccfn_gated");
    CQ.set_rand_mode(0);
   CQ.set_reset_signame("hqm_inp_gated_rst_n");
    CQ.set_logical_path("HQMID");
    void'(add_field( CQ ));

    LDB = new("LDB", "RO/V", 1, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.LDB"});
    LDB.set_powerwell("vcccfn_gated");
    LDB.set_rand_mode(0);
   LDB.set_reset_signame("hqm_inp_gated_rst_n");
    LDB.set_logical_path("HQMID");
    void'(add_field( LDB ));

    CQ_V = new("CQ_V", "RO/V", 1, 17, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.CQ_V"});
    CQ_V.set_powerwell("vcccfn_gated");
    CQ_V.set_rand_mode(0);
   CQ_V.set_reset_signame("hqm_inp_gated_rst_n");
    CQ_V.set_logical_path("HQMID");
    void'(add_field( CQ_V ));

    RO = new("RO", "RO/V", 1, 18, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.RO"});
    RO.set_powerwell("vcccfn_gated");
    RO.set_rand_mode(0);
   RO.set_reset_signame("hqm_inp_gated_rst_n");
    RO.set_logical_path("HQMID");
    void'(add_field( RO ));

    INVALID = new("INVALID", "RO/V", 1, 19, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.INVALID"});
    INVALID.set_powerwell("vcccfn_gated");
    INVALID.set_rand_mode(0);
   INVALID.set_reset_signame("hqm_inp_gated_rst_n");
    INVALID.set_logical_path("HQMID");
    void'(add_field( INVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_PHDR_DEBUG_2_reg) 
endclass : hqm_system_csr_bridge_PHDR_DEBUG_2_reg

// ================================================

class hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DATA;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.desired)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.actual)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DATA = new("DATA", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG%ARRAY_IDX_STR%.DATA"});
    DATA.set_powerwell("vcccfn_gated");
    DATA.set_rand_mode(0);
   DATA.set_reset_signame("hqm_inp_gated_rst_n");
    DATA.set_logical_path("HQMID");
    void'(add_field( DATA ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg) 
endclass : hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg

// ================================================

class hqm_system_csr_bridge_HCW_REQ_DEBUG_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PP;
  sla_ral_field QID;
  sla_ral_field VAS;
  sla_ral_field PP_IS_LDB;
  sla_ral_field QE_IS_LDB;
  sla_ral_field INSERT_TS;
  sla_ral_field AO_V;
  sla_ral_field PARITY;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HCW_REQ_DEBUG_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP, PP.desired)
     `RAL_FIELD_CP_8(PP, PP.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QID, QID.desired)
     `RAL_FIELD_CP_8(QID, QID.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(VAS, VAS.desired)
     `RAL_FIELD_CP_5(VAS, VAS.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(PP_IS_LDB, PP_IS_LDB.desired)
     `RAL_FIELD_CP_1(PP_IS_LDB, PP_IS_LDB.desired, 0)
     `RAL_FIELD_CP(QE_IS_LDB, QE_IS_LDB.desired)
     `RAL_FIELD_CP_1(QE_IS_LDB, QE_IS_LDB.desired, 0)
     `RAL_FIELD_CP(INSERT_TS, INSERT_TS.desired)
     `RAL_FIELD_CP_1(INSERT_TS, INSERT_TS.desired, 0)
     `RAL_FIELD_CP(AO_V, AO_V.desired)
     `RAL_FIELD_CP_1(AO_V, AO_V.desired, 0)
     `RAL_FIELD_CP(PARITY, PARITY.desired)
     `RAL_FIELD_CP_1(PARITY, PARITY.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PP, PP.actual)
     `RAL_FIELD_CP_8(PP, PP.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QID, QID.actual)
     `RAL_FIELD_CP_8(QID, QID.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(VAS, VAS.actual)
     `RAL_FIELD_CP_5(VAS, VAS.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(PP_IS_LDB, PP_IS_LDB.actual)
     `RAL_FIELD_CP_1(PP_IS_LDB, PP_IS_LDB.actual, 0)
     `RAL_FIELD_CP(QE_IS_LDB, QE_IS_LDB.actual)
     `RAL_FIELD_CP_1(QE_IS_LDB, QE_IS_LDB.actual, 0)
     `RAL_FIELD_CP(INSERT_TS, INSERT_TS.actual)
     `RAL_FIELD_CP_1(INSERT_TS, INSERT_TS.actual, 0)
     `RAL_FIELD_CP(AO_V, AO_V.actual)
     `RAL_FIELD_CP_1(AO_V, AO_V.actual, 0)
     `RAL_FIELD_CP(PARITY, PARITY.actual)
     `RAL_FIELD_CP_1(PARITY, PARITY.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PP = new("PP", "RO/V", 8, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PP"});
    PP.set_powerwell("vcccfn_gated");
    PP.set_rand_mode(0);
   PP.set_reset_signame("hqm_inp_gated_rst_n");
    PP.set_logical_path("HQMID");
    void'(add_field( PP ));

    QID = new("QID", "RO/V", 8, 8, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.QID"});
    QID.set_powerwell("vcccfn_gated");
    QID.set_rand_mode(0);
   QID.set_reset_signame("hqm_inp_gated_rst_n");
    QID.set_logical_path("HQMID");
    void'(add_field( QID ));

    VAS = new("VAS", "RO/V", 5, 16, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.VAS"});
    VAS.set_powerwell("vcccfn_gated");
    VAS.set_rand_mode(0);
   VAS.set_reset_signame("hqm_inp_gated_rst_n");
    VAS.set_logical_path("HQMID");
    void'(add_field( VAS ));

    PP_IS_LDB = new("PP_IS_LDB", "RO/V", 1, 21, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PP_IS_LDB"});
    PP_IS_LDB.set_powerwell("vcccfn_gated");
    PP_IS_LDB.set_rand_mode(0);
   PP_IS_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    PP_IS_LDB.set_logical_path("HQMID");
    void'(add_field( PP_IS_LDB ));

    QE_IS_LDB = new("QE_IS_LDB", "RO/V", 1, 22, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.QE_IS_LDB"});
    QE_IS_LDB.set_powerwell("vcccfn_gated");
    QE_IS_LDB.set_rand_mode(0);
   QE_IS_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    QE_IS_LDB.set_logical_path("HQMID");
    void'(add_field( QE_IS_LDB ));

    INSERT_TS = new("INSERT_TS", "RO/V", 1, 23, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.INSERT_TS"});
    INSERT_TS.set_powerwell("vcccfn_gated");
    INSERT_TS.set_rand_mode(0);
   INSERT_TS.set_reset_signame("hqm_inp_gated_rst_n");
    INSERT_TS.set_logical_path("HQMID");
    void'(add_field( INSERT_TS ));

    AO_V = new("AO_V", "RO/V", 1, 24, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.AO_V"});
    AO_V.set_powerwell("vcccfn_gated");
    AO_V.set_rand_mode(0);
   AO_V.set_reset_signame("hqm_inp_gated_rst_n");
    AO_V.set_logical_path("HQMID");
    void'(add_field( AO_V ));

    PARITY = new("PARITY", "RO/V", 1, 25, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PARITY"});
    PARITY.set_powerwell("vcccfn_gated");
    PARITY.set_rand_mode(0);
   PARITY.set_reset_signame("hqm_inp_gated_rst_n");
    PARITY.set_logical_path("HQMID");
    void'(add_field( PARITY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HCW_REQ_DEBUG_reg) 
endclass : hqm_system_csr_bridge_HCW_REQ_DEBUG_reg

// ================================================

class hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DATA;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.desired)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.actual)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DATA = new("DATA", "RO/V", 32, 0, {"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_HCW_DATA_DEBUG%ARRAY_IDX_STR%.DATA"});
    DATA.set_powerwell("vcccfn_gated");
    DATA.set_rand_mode(0);
   DATA.set_reset_signame("hqm_inp_gated_rst_n");
    DATA.set_logical_path("HQMID");
    void'(add_field( DATA ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg) 
endclass : hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_CONFIGURATION0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SMON_ENABLE;
  sla_ral_field SMON0_FUNCTION;
  sla_ral_field SMON0_FUNCTION_COMPARE;
  sla_ral_field SMON1_FUNCTION;
  sla_ral_field SMON1_FUNCTION_COMPARE;
  sla_ral_field SMON_MODE;
  sla_ral_field STOPCOUNTEROVFL;
  sla_ral_field INTCOUNTEROVFL;
  sla_ral_field STATCOUNTER0OVFL;
  sla_ral_field STATCOUNTER1OVFL;
  sla_ral_field STOPTIMEROVFL;
  sla_ral_field INTTIMEROVFL;
  sla_ral_field STATTIMEROVFL;
  sla_ral_field TIMER_PRESCALE;
  sla_ral_field VERSION;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_CONFIGURATION0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.desired, 0)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.desired)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.desired, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.desired)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.desired)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(VERSION, VERSION.desired)
     `RAL_FIELD_CP_2(VERSION, VERSION.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.actual, 0)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.actual)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.actual, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.actual)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.actual)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(VERSION, VERSION.actual)
     `RAL_FIELD_CP_2(VERSION, VERSION.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SMON_ENABLE = new("SMON_ENABLE", "RW", 1, 0, {""});
    SMON_ENABLE.set_powerwell("vcccfn_gated");
    SMON_ENABLE.set_rand_mode(0);
   SMON_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SMON_ENABLE ));

    SMON0_FUNCTION = new("SMON0_FUNCTION", "RW", 3, 4, {""});
    SMON0_FUNCTION.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION.set_rand_mode(0);
   SMON0_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SMON0_FUNCTION ));

    SMON0_FUNCTION_COMPARE = new("SMON0_FUNCTION_COMPARE", "RW", 1, 7, {""});
    SMON0_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION_COMPARE.set_rand_mode(0);
   SMON0_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SMON0_FUNCTION_COMPARE ));

    SMON1_FUNCTION = new("SMON1_FUNCTION", "RW", 3, 8, {""});
    SMON1_FUNCTION.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION.set_rand_mode(0);
   SMON1_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SMON1_FUNCTION ));

    SMON1_FUNCTION_COMPARE = new("SMON1_FUNCTION_COMPARE", "RW", 1, 11, {""});
    SMON1_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION_COMPARE.set_rand_mode(0);
   SMON1_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SMON1_FUNCTION_COMPARE ));

    SMON_MODE = new("SMON_MODE", "RW", 4, 12, {""});
    SMON_MODE.set_powerwell("vcccfn_gated");
    SMON_MODE.set_rand_mode(0);
   SMON_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SMON_MODE ));

    STOPCOUNTEROVFL = new("STOPCOUNTEROVFL", "RW", 1, 16, {""});
    STOPCOUNTEROVFL.set_powerwell("vcccfn_gated");
    STOPCOUNTEROVFL.set_rand_mode(0);
   STOPCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( STOPCOUNTEROVFL ));

    INTCOUNTEROVFL = new("INTCOUNTEROVFL", "RW", 1, 17, {""});
    INTCOUNTEROVFL.set_powerwell("vcccfn_gated");
    INTCOUNTEROVFL.set_rand_mode(0);
   INTCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( INTCOUNTEROVFL ));

    STATCOUNTER0OVFL = new("STATCOUNTER0OVFL", "RW", 1, 18, {""});
    STATCOUNTER0OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER0OVFL.set_rand_mode(0);
   STATCOUNTER0OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( STATCOUNTER0OVFL ));

    STATCOUNTER1OVFL = new("STATCOUNTER1OVFL", "RW", 1, 19, {""});
    STATCOUNTER1OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER1OVFL.set_rand_mode(0);
   STATCOUNTER1OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( STATCOUNTER1OVFL ));

    STOPTIMEROVFL = new("STOPTIMEROVFL", "RW", 1, 20, {""});
    STOPTIMEROVFL.set_powerwell("vcccfn_gated");
    STOPTIMEROVFL.set_rand_mode(0);
   STOPTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( STOPTIMEROVFL ));

    INTTIMEROVFL = new("INTTIMEROVFL", "RW", 1, 21, {""});
    INTTIMEROVFL.set_powerwell("vcccfn_gated");
    INTTIMEROVFL.set_rand_mode(0);
   INTTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( INTTIMEROVFL ));

    STATTIMEROVFL = new("STATTIMEROVFL", "RW", 1, 22, {""});
    STATTIMEROVFL.set_powerwell("vcccfn_gated");
    STATTIMEROVFL.set_rand_mode(0);
   STATTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( STATTIMEROVFL ));

    TIMER_PRESCALE = new("TIMER_PRESCALE", "RW", 5, 24, {""});
    TIMER_PRESCALE.set_powerwell("vcccfn_gated");
    TIMER_PRESCALE.set_rand_mode(0);
   TIMER_PRESCALE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TIMER_PRESCALE ));

    VERSION = new("VERSION", "RO", 2, 30, {"NoSignal"});
    VERSION.set_powerwell("vcccfn_gated");
    VERSION.set_rand_mode(0);
   VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_CONFIGURATION0_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_CONFIGURATION0_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_CONFIGURATION1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE0;
  sla_ral_field MODE1;
  sla_ral_field RSVD;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_CONFIGURATION1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.desired)
     `RAL_FIELD_CP_8(MODE0, MODE0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.desired)
     `RAL_FIELD_CP_8(MODE1, MODE1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVD, RSVD.desired)
     `RAL_FIELD_CP_16(RSVD, RSVD.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.actual)
     `RAL_FIELD_CP_8(MODE0, MODE0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.actual)
     `RAL_FIELD_CP_8(MODE1, MODE1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVD, RSVD.actual)
     `RAL_FIELD_CP_16(RSVD, RSVD.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE0 = new("MODE0", "RW", 8, 0, {""});
    MODE0.set_powerwell("vcccfn_gated");
    MODE0.set_rand_mode(0);
   MODE0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MODE0 ));

    MODE1 = new("MODE1", "RW", 8, 8, {""});
    MODE1.set_powerwell("vcccfn_gated");
    MODE1.set_rand_mode(0);
   MODE1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MODE1 ));

    RSVD = new("RSVD", "RW", 16, 16, {""});
    RSVD.set_powerwell("vcccfn_gated");
    RSVD.set_rand_mode(0);
   RSVD.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( RSVD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_CONFIGURATION1_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_CONFIGURATION1_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_COMPARE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE0;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_COMPARE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.desired)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.actual)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE0 = new("COMPARE0", "RW", 32, 0, {""});
    COMPARE0.set_powerwell("vcccfn_gated");
    COMPARE0.set_rand_mode(0);
   COMPARE0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COMPARE0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_COMPARE0_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_COMPARE0_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_COMPARE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE1;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_COMPARE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.desired)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.actual)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE1 = new("COMPARE1", "RW", 32, 0, {""});
    COMPARE1.set_powerwell("vcccfn_gated");
    COMPARE1.set_rand_mode(0);
   COMPARE1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COMPARE1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_COMPARE1_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_COMPARE1_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER0;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.desired)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.actual)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER0 = new("COUNTER0", "RW", 32, 0, {""});
    COUNTER0.set_powerwell("vcccfn_gated");
    COUNTER0.set_rand_mode(0);
   COUNTER0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNTER0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER1;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.desired)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.actual)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER1 = new("COUNTER1", "RW", 32, 0, {""});
    COUNTER1.set_powerwell("vcccfn_gated");
    COUNTER1.set_rand_mode(0);
   COUNTER1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNTER1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER_VAL;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_VAL, TIMER_VAL.desired)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_VAL, TIMER_VAL.actual)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER_VAL = new("TIMER_VAL", "RW", 32, 0, {""});
    TIMER_VAL.set_powerwell("vcccfn_gated");
    TIMER_VAL.set_rand_mode(0);
   TIMER_VAL.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TIMER_VAL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_TIMER_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_TIMER_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MAXVALUE;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.desired)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.actual)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MAXVALUE = new("MAXVALUE", "RW", 32, 0, {""});
    MAXVALUE.set_powerwell("vcccfn_gated");
    MAXVALUE.set_rand_mode(0);
   MAXVALUE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MAXVALUE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_COMP_MASK0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMP_MASK0;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_COMP_MASK0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK0, COMP_MASK0.desired)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK0, COMP_MASK0.actual)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMP_MASK0 = new("COMP_MASK0", "RW", 32, 0, {""});
    COMP_MASK0.set_powerwell("vcccfn_gated");
    COMP_MASK0.set_rand_mode(0);
   COMP_MASK0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COMP_MASK0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_COMP_MASK0_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_COMP_MASK0_reg

// ================================================

class hqm_system_csr_bridge_AW_SMON_COMP_MASK1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMP_MASK1;

  // --------------------------
  `ovm_object_utils(hqm_system_csr_bridge_AW_SMON_COMP_MASK1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK1, COMP_MASK1.desired)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK1, COMP_MASK1.actual)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMP_MASK1 = new("COMP_MASK1", "RW", 32, 0, {""});
    COMP_MASK1.set_powerwell("vcccfn_gated");
    COMP_MASK1.set_rand_mode(0);
   COMP_MASK1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COMP_MASK1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_system_csr_bridge_AW_SMON_COMP_MASK1_reg) 
endclass : hqm_system_csr_bridge_AW_SMON_COMP_MASK1_reg

// ================================================

class hqm_system_csr_bridge_file extends sla_ral_file;

  rand hqm_system_csr_bridge_TOTAL_CREDITS_reg TOTAL_CREDITS;
  rand hqm_system_csr_bridge_TOTAL_LDB_QID_reg TOTAL_LDB_QID;
  rand hqm_system_csr_bridge_TOTAL_DIR_QID_reg TOTAL_DIR_QID;
  rand hqm_system_csr_bridge_TOTAL_LDB_PORTS_reg TOTAL_LDB_PORTS;
  rand hqm_system_csr_bridge_TOTAL_DIR_PORTS_reg TOTAL_DIR_PORTS;
  rand hqm_system_csr_bridge_TOTAL_VAS_reg TOTAL_VAS;
  rand hqm_system_csr_bridge_TOTAL_SN_REGIONS_reg TOTAL_SN_REGIONS;
  rand hqm_system_csr_bridge_TOTAL_VF_reg TOTAL_VF;
  rand hqm_system_csr_bridge_CFG_UNIT_VERSION_reg CFG_UNIT_VERSION;
  rand hqm_system_csr_bridge_INGRESS_ALARM_ENABLE_reg INGRESS_ALARM_ENABLE;
  rand hqm_system_csr_bridge_ALARM_LUT_PERR_reg ALARM_LUT_PERR;
  rand hqm_system_csr_bridge_EGRESS_LUT_ERR_reg EGRESS_LUT_ERR;
  rand hqm_system_csr_bridge_INGRESS_LUT_ERR_reg INGRESS_LUT_ERR;
  rand hqm_system_csr_bridge_ALARM_ERR_reg ALARM_ERR;
  rand hqm_system_csr_bridge_ALARM_MB_ECC_ERR_reg ALARM_MB_ECC_ERR;
  rand hqm_system_csr_bridge_ALARM_SB_ECC_ERR_reg ALARM_SB_ECC_ERR;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_CTL_reg HQM_SYSTEM_CNT_CTL;
  rand hqm_system_csr_bridge_MSIX_ACK_reg MSIX_ACK;
  rand hqm_system_csr_bridge_MSIX_PASSTHROUGH_reg MSIX_PASSTHROUGH;
  rand hqm_system_csr_bridge_MSIX_MODE_reg MSIX_MODE;
  rand hqm_system_csr_bridge_MSIX_31_0_SYND_reg MSIX_31_0_SYND;
  rand hqm_system_csr_bridge_MSIX_63_32_SYND_reg MSIX_63_32_SYND;
  rand hqm_system_csr_bridge_MSIX_64_SYND_reg MSIX_64_SYND;
  rand hqm_system_csr_bridge_MSIX_PBA_31_0_CLEAR_reg MSIX_PBA_31_0_CLEAR;
  rand hqm_system_csr_bridge_MSIX_PBA_63_32_CLEAR_reg MSIX_PBA_63_32_CLEAR;
  rand hqm_system_csr_bridge_MSIX_PBA_64_CLEAR_reg MSIX_PBA_64_CLEAR;
  rand hqm_system_csr_bridge_DIR_CQ_31_0_OCC_INT_STATUS_reg DIR_CQ_31_0_OCC_INT_STATUS;
  rand hqm_system_csr_bridge_DIR_CQ_63_32_OCC_INT_STATUS_reg DIR_CQ_63_32_OCC_INT_STATUS;
  rand hqm_system_csr_bridge_LDB_CQ_31_0_OCC_INT_STATUS_reg LDB_CQ_31_0_OCC_INT_STATUS;
  rand hqm_system_csr_bridge_LDB_CQ_63_32_OCC_INT_STATUS_reg LDB_CQ_63_32_OCC_INT_STATUS;
  rand hqm_system_csr_bridge_SYS_ALARM_INT_ENABLE_reg SYS_ALARM_INT_ENABLE;
  rand hqm_system_csr_bridge_SYS_ALARM_MB_ECC_INT_ENABLE_reg SYS_ALARM_MB_ECC_INT_ENABLE;
  rand hqm_system_csr_bridge_SYS_ALARM_SB_ECC_INT_ENABLE_reg SYS_ALARM_SB_ECC_INT_ENABLE;
  rand hqm_system_csr_bridge_ALARM_PF_SYND0_reg ALARM_PF_SYND0;
  rand hqm_system_csr_bridge_ALARM_PF_SYND1_reg ALARM_PF_SYND1;
  rand hqm_system_csr_bridge_ALARM_PF_SYND2_reg ALARM_PF_SYND2;
  rand hqm_system_csr_bridge_ALARM_HW_SYND_reg ALARM_HW_SYND;
  rand hqm_system_csr_bridge_VF_LDB_VPP_V_reg VF_LDB_VPP_V[1024];
  rand hqm_system_csr_bridge_VF_LDB_VPP2PP_reg VF_LDB_VPP2PP[1024];
  rand hqm_system_csr_bridge_VF_DIR_VPP_V_reg VF_DIR_VPP_V[1024];
  rand hqm_system_csr_bridge_VF_DIR_VPP2PP_reg VF_DIR_VPP2PP[1024];
  rand hqm_system_csr_bridge_VF_LDB_VQID_V_reg VF_LDB_VQID_V[512];
  rand hqm_system_csr_bridge_VF_LDB_VQID2QID_reg VF_LDB_VQID2QID[512];
  rand hqm_system_csr_bridge_LDB_QID2VQID_reg LDB_QID2VQID[32];
  rand hqm_system_csr_bridge_VF_DIR_VQID_V_reg VF_DIR_VQID_V[1024];
  rand hqm_system_csr_bridge_VF_DIR_VQID2QID_reg VF_DIR_VQID2QID[1024];
  rand hqm_system_csr_bridge_LDB_VASQID_V_reg LDB_VASQID_V[1024];
  rand hqm_system_csr_bridge_DIR_VASQID_V_reg DIR_VASQID_V[2048];
  rand hqm_system_csr_bridge_ALARM_VF_SYND0_reg ALARM_VF_SYND0[16];
  rand hqm_system_csr_bridge_ALARM_VF_SYND1_reg ALARM_VF_SYND1[16];
  rand hqm_system_csr_bridge_ALARM_VF_SYND2_reg ALARM_VF_SYND2[16];
  rand hqm_system_csr_bridge_LDB_QID_V_reg LDB_QID_V[32];
  rand hqm_system_csr_bridge_LDB_QID_ITS_reg LDB_QID_ITS[32];
  rand hqm_system_csr_bridge_LDB_QID_CFG_V_reg LDB_QID_CFG_V[32];
  rand hqm_system_csr_bridge_DIR_QID_V_reg DIR_QID_V[64];
  rand hqm_system_csr_bridge_DIR_QID_ITS_reg DIR_QID_ITS[64];
  rand hqm_system_csr_bridge_LDB_CQ_ADDR_L_reg LDB_CQ_ADDR_L[64];
  rand hqm_system_csr_bridge_LDB_CQ_ADDR_U_reg LDB_CQ_ADDR_U[64];
  rand hqm_system_csr_bridge_LDB_PP2VAS_reg LDB_PP2VAS[64];
  rand hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg HQM_LDB_PP2VDEV[64];
  rand hqm_system_csr_bridge_LDB_PP_V_reg LDB_PP_V[64];
  rand hqm_system_csr_bridge_LDB_CQ2VF_PF_RO_reg LDB_CQ2VF_PF_RO[64];
  rand hqm_system_csr_bridge_LDB_CQ_ISR_reg LDB_CQ_ISR[64];
  rand hqm_system_csr_bridge_LDB_CQ_PASID_reg LDB_CQ_PASID[64];
  rand hqm_system_csr_bridge_LDB_PP_ROB_V_reg LDB_PP_ROB_V[64];
  rand hqm_system_csr_bridge_DIR_CQ_ADDR_L_reg DIR_CQ_ADDR_L[64];
  rand hqm_system_csr_bridge_DIR_CQ_ADDR_U_reg DIR_CQ_ADDR_U[64];
  rand hqm_system_csr_bridge_DIR_PP2VAS_reg DIR_PP2VAS[64];
  rand hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg HQM_DIR_PP2VDEV[64];
  rand hqm_system_csr_bridge_DIR_PP_V_reg DIR_PP_V[64];
  rand hqm_system_csr_bridge_DIR_CQ2VF_PF_RO_reg DIR_CQ2VF_PF_RO[64];
  rand hqm_system_csr_bridge_DIR_CQ_ISR_reg DIR_CQ_ISR[64];
  rand hqm_system_csr_bridge_DIR_CQ_PASID_reg DIR_CQ_PASID[64];
  rand hqm_system_csr_bridge_DIR_CQ_FMT_reg DIR_CQ_FMT[64];
  rand hqm_system_csr_bridge_DIR_PP_ROB_V_reg DIR_PP_ROB_V[64];
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_0_reg HQM_SYSTEM_CNT_0;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_1_reg HQM_SYSTEM_CNT_1;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_2_reg HQM_SYSTEM_CNT_2;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_3_reg HQM_SYSTEM_CNT_3;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_4_reg HQM_SYSTEM_CNT_4;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_5_reg HQM_SYSTEM_CNT_5;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_6_reg HQM_SYSTEM_CNT_6;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_7_reg HQM_SYSTEM_CNT_7;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_8_reg HQM_SYSTEM_CNT_8;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_9_reg HQM_SYSTEM_CNT_9;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_10_reg HQM_SYSTEM_CNT_10;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_11_reg HQM_SYSTEM_CNT_11;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_12_reg HQM_SYSTEM_CNT_12;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_13_reg HQM_SYSTEM_CNT_13;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_14_reg HQM_SYSTEM_CNT_14;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_15_reg HQM_SYSTEM_CNT_15;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_16_reg HQM_SYSTEM_CNT_16;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_17_reg HQM_SYSTEM_CNT_17;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_18_reg HQM_SYSTEM_CNT_18;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_19_reg HQM_SYSTEM_CNT_19;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_20_reg HQM_SYSTEM_CNT_20;
  rand hqm_system_csr_bridge_HQM_SYSTEM_CNT_21_reg HQM_SYSTEM_CNT_21;
  rand hqm_system_csr_bridge_SBE_CNT_0_reg SBE_CNT_0;
  rand hqm_system_csr_bridge_SBE_CNT_1_reg SBE_CNT_1;
  rand hqm_system_csr_bridge_PERF_SMON_CONFIGURATION0_reg PERF_SMON_CONFIGURATION0;
  rand hqm_system_csr_bridge_PERF_SMON_CONFIGURATION1_reg PERF_SMON_CONFIGURATION1;
  rand hqm_system_csr_bridge_PERF_SMON_COMPARE0_reg PERF_SMON_COMPARE0;
  rand hqm_system_csr_bridge_PERF_SMON_COMPARE1_reg PERF_SMON_COMPARE1;
  rand hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER0_reg PERF_SMON_ACTIVITYCOUNTER0;
  rand hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER1_reg PERF_SMON_ACTIVITYCOUNTER1;
  rand hqm_system_csr_bridge_PERF_SMON_TIMER_reg PERF_SMON_TIMER;
  rand hqm_system_csr_bridge_PERF_SMON_MAXIMUM_TIMER_reg PERF_SMON_MAXIMUM_TIMER;
  rand hqm_system_csr_bridge_PERF_SMON_COMP_MASK0_reg PERF_SMON_COMP_MASK0;
  rand hqm_system_csr_bridge_PERF_SMON_COMP_MASK1_reg PERF_SMON_COMP_MASK1;
  rand hqm_system_csr_bridge_WB_DIR_CQ_STATE_reg WB_DIR_CQ_STATE[64];
  rand hqm_system_csr_bridge_WB_LDB_CQ_STATE_reg WB_LDB_CQ_STATE[64];
  rand hqm_system_csr_bridge_AI_ADDR_L_reg AI_ADDR_L[128];
  rand hqm_system_csr_bridge_AI_ADDR_U_reg AI_ADDR_U[128];
  rand hqm_system_csr_bridge_AI_DATA_reg AI_DATA[128];
  rand hqm_system_csr_bridge_AI_CTRL_reg AI_CTRL[128];
  rand hqm_system_csr_bridge_IMS_PEND_CLEAR_reg IMS_PEND_CLEAR;
  rand hqm_system_csr_bridge_WB_SCH_OUT_AFULL_AGITATE_CONTROL_reg WB_SCH_OUT_AFULL_AGITATE_CONTROL;
  rand hqm_system_csr_bridge_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_reg IG_HCW_ENQ_AFULL_AGITATE_CONTROL;
  rand hqm_system_csr_bridge_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_reg IG_HCW_ENQ_W_DB_AGITATE_CONTROL;
  rand hqm_system_csr_bridge_EG_HCW_SCHED_DB_AGITATE_CONTROL_reg EG_HCW_SCHED_DB_AGITATE_CONTROL;
  rand hqm_system_csr_bridge_AL_IMS_MSIX_DB_AGITATE_CONTROL_reg AL_IMS_MSIX_DB_AGITATE_CONTROL;
  rand hqm_system_csr_bridge_AL_CWD_ALARM_DB_AGITATE_CONTROL_reg AL_CWD_ALARM_DB_AGITATE_CONTROL;
  rand hqm_system_csr_bridge_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_reg AL_SIF_ALARM_AFULL_AGITATE_CONTROL;
  rand hqm_system_csr_bridge_AL_HQM_ALARM_DB_AGITATE_CONTROL_reg AL_HQM_ALARM_DB_AGITATE_CONTROL;
  rand hqm_system_csr_bridge_ECC_CTL_reg ECC_CTL;
  rand hqm_system_csr_bridge_PARITY_CTL_reg PARITY_CTL;
  rand hqm_system_csr_bridge_WRITE_BUFFER_CTL_reg WRITE_BUFFER_CTL;
  rand hqm_system_csr_bridge_ALARM_CTL_reg ALARM_CTL;
  rand hqm_system_csr_bridge_CFG_PATCH_CONTROL_reg CFG_PATCH_CONTROL;
  rand hqm_system_csr_bridge_INGRESS_CTL_reg INGRESS_CTL;
  rand hqm_system_csr_bridge_EGRESS_CTL_reg EGRESS_CTL;
  rand hqm_system_csr_bridge_SYS_IDLE_STATUS_reg SYS_IDLE_STATUS;
  rand hqm_system_csr_bridge_HCW_ENQ_FIFO_CTL_reg HCW_ENQ_FIFO_CTL;
  rand hqm_system_csr_bridge_SCH_OUT_FIFO_CTL_reg SCH_OUT_FIFO_CTL;
  rand hqm_system_csr_bridge_SIF_ALARM_FIFO_CTL_reg SIF_ALARM_FIFO_CTL;
  rand hqm_system_csr_bridge_HCW_ENQ_FIFO_STATUS_reg HCW_ENQ_FIFO_STATUS;
  rand hqm_system_csr_bridge_HCW_SCH_FIFO_STATUS_reg HCW_SCH_FIFO_STATUS;
  rand hqm_system_csr_bridge_SCH_OUT_FIFO_STATUS_reg SCH_OUT_FIFO_STATUS;
  rand hqm_system_csr_bridge_CFG_RX_FIFO_STATUS_reg CFG_RX_FIFO_STATUS;
  rand hqm_system_csr_bridge_CWDI_RX_FIFO_STATUS_reg CWDI_RX_FIFO_STATUS;
  rand hqm_system_csr_bridge_HQM_ALARM_RX_FIFO_STATUS_reg HQM_ALARM_RX_FIFO_STATUS;
  rand hqm_system_csr_bridge_SIF_ALARM_FIFO_STATUS_reg SIF_ALARM_FIFO_STATUS;
  rand hqm_system_csr_bridge_ALARM_DB_STATUS_reg ALARM_DB_STATUS;
  rand hqm_system_csr_bridge_INGRESS_DB_STATUS_reg INGRESS_DB_STATUS;
  rand hqm_system_csr_bridge_EGRESS_DB_STATUS_reg EGRESS_DB_STATUS;
  rand hqm_system_csr_bridge_ALARM_STATUS_reg ALARM_STATUS;
  rand hqm_system_csr_bridge_INGRESS_STATUS_reg INGRESS_STATUS;
  rand hqm_system_csr_bridge_EGRESS_STATUS_reg EGRESS_STATUS;
  rand hqm_system_csr_bridge_WBUF_STATUS_reg WBUF_STATUS;
  rand hqm_system_csr_bridge_WBUF_STATUS2_reg WBUF_STATUS2;
  rand hqm_system_csr_bridge_WBUF_DEBUG_reg WBUF_DEBUG;
  rand hqm_system_csr_bridge_ROB_SYNDROME_reg ROB_SYNDROME;
  rand hqm_system_csr_bridge_PHDR_DEBUG_0_reg PHDR_DEBUG_0;
  rand hqm_system_csr_bridge_PHDR_DEBUG_1_reg PHDR_DEBUG_1;
  rand hqm_system_csr_bridge_PHDR_DEBUG_2_reg PHDR_DEBUG_2;
  rand hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg HQM_PDATA_DEBUG[16];
  rand hqm_system_csr_bridge_HCW_REQ_DEBUG_reg HCW_REQ_DEBUG;
  rand hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg HQM_HCW_DATA_DEBUG[4];
  rand hqm_system_csr_bridge_AW_SMON_CONFIGURATION0_reg AW_SMON_CONFIGURATION0[2];
  rand hqm_system_csr_bridge_AW_SMON_CONFIGURATION1_reg AW_SMON_CONFIGURATION1[2];
  rand hqm_system_csr_bridge_AW_SMON_COMPARE0_reg AW_SMON_COMPARE0[2];
  rand hqm_system_csr_bridge_AW_SMON_COMPARE1_reg AW_SMON_COMPARE1[2];
  rand hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg AW_SMON_ACTIVITYCOUNTER0[2];
  rand hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg AW_SMON_ACTIVITYCOUNTER1[2];
  rand hqm_system_csr_bridge_AW_SMON_TIMER_reg AW_SMON_TIMER[2];
  rand hqm_system_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg AW_SMON_MAXIMUM_TIMER[2];
  rand hqm_system_csr_bridge_AW_SMON_COMP_MASK0_reg AW_SMON_COMP_MASK0[2];
  rand hqm_system_csr_bridge_AW_SMON_COMP_MASK1_reg AW_SMON_COMP_MASK1[2];

  `ovm_component_utils(hqm_system_csr_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TOTAL_CREDITS";
    `endif
    TOTAL_CREDITS = hqm_system_csr_bridge_TOTAL_CREDITS_reg::type_id::create("TOTAL_CREDITS", this);
    TOTAL_CREDITS.set_cfg(16'h0, 16'h0, 16'h0, 12'h100, 32, 32'b00000000000000000100000000000000);
    TOTAL_CREDITS.set_space_addr("MSG", 12'h100);
    TOTAL_CREDITS.set_space_addr("msg_bus_port", 'h21);
    TOTAL_CREDITS.set_space_addr("MEM-SB",12'h100);
    TOTAL_CREDITS.set_space_addr("MEM", 12'h100);
      TOTAL_CREDITS.set_space("MEM");
      TOTAL_CREDITS.set_msg_opcode("MEM-SB");
      TOTAL_CREDITS.set_fid(4'h0, "MEM-SB");
  	TOTAL_CREDITS.set_bar(4'h2, "MEM-SB");
      TOTAL_CREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TOTAL_CREDITS.set_user_attribute("diag_reg", "0");
      TOTAL_CREDITS.set_user_attribute("HqmIsFeatureReg", "0");
      TOTAL_CREDITS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TOTAL_CREDITS:dont_test") ) TOTAL_CREDITS.set_test_reg(1'b0);
      if (!add_reg( TOTAL_CREDITS )) begin
        `sla_error(get_name(), ("Could not add register TOTAL_CREDITS"));
      end
   TOTAL_CREDITS.TOTAL_CREDITS.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TOTAL_LDB_QID";
    `endif
    TOTAL_LDB_QID = hqm_system_csr_bridge_TOTAL_LDB_QID_reg::type_id::create("TOTAL_LDB_QID", this);
    TOTAL_LDB_QID.set_cfg(16'h0, 16'h0, 16'h0, 12'h104, 32, 32'b00000000000000000000000000100000);
    TOTAL_LDB_QID.set_space_addr("MSG", 12'h104);
    TOTAL_LDB_QID.set_space_addr("msg_bus_port", 'h21);
    TOTAL_LDB_QID.set_space_addr("MEM-SB",12'h104);
    TOTAL_LDB_QID.set_space_addr("MEM", 12'h104);
      TOTAL_LDB_QID.set_space("MEM");
      TOTAL_LDB_QID.set_msg_opcode("MEM-SB");
      TOTAL_LDB_QID.set_fid(4'h0, "MEM-SB");
  	TOTAL_LDB_QID.set_bar(4'h2, "MEM-SB");
      TOTAL_LDB_QID.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TOTAL_LDB_QID.set_user_attribute("diag_reg", "0");
      TOTAL_LDB_QID.set_user_attribute("HqmIsFeatureReg", "0");
      TOTAL_LDB_QID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TOTAL_LDB_QID:dont_test") ) TOTAL_LDB_QID.set_test_reg(1'b0);
      if (!add_reg( TOTAL_LDB_QID )) begin
        `sla_error(get_name(), ("Could not add register TOTAL_LDB_QID"));
      end
   TOTAL_LDB_QID.TOTAL_LDB_QID.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TOTAL_DIR_QID";
    `endif
    TOTAL_DIR_QID = hqm_system_csr_bridge_TOTAL_DIR_QID_reg::type_id::create("TOTAL_DIR_QID", this);
    TOTAL_DIR_QID.set_cfg(16'h0, 16'h0, 16'h0, 12'h108, 32, 32'b00000000000000000000000001000000);
    TOTAL_DIR_QID.set_space_addr("MSG", 12'h108);
    TOTAL_DIR_QID.set_space_addr("msg_bus_port", 'h21);
    TOTAL_DIR_QID.set_space_addr("MEM-SB",12'h108);
    TOTAL_DIR_QID.set_space_addr("MEM", 12'h108);
      TOTAL_DIR_QID.set_space("MEM");
      TOTAL_DIR_QID.set_msg_opcode("MEM-SB");
      TOTAL_DIR_QID.set_fid(4'h0, "MEM-SB");
  	TOTAL_DIR_QID.set_bar(4'h2, "MEM-SB");
      TOTAL_DIR_QID.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TOTAL_DIR_QID.set_user_attribute("diag_reg", "0");
      TOTAL_DIR_QID.set_user_attribute("HqmIsFeatureReg", "0");
      TOTAL_DIR_QID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TOTAL_DIR_QID:dont_test") ) TOTAL_DIR_QID.set_test_reg(1'b0);
      if (!add_reg( TOTAL_DIR_QID )) begin
        `sla_error(get_name(), ("Could not add register TOTAL_DIR_QID"));
      end
   TOTAL_DIR_QID.TOTAL_DIR_QID.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TOTAL_LDB_PORTS";
    `endif
    TOTAL_LDB_PORTS = hqm_system_csr_bridge_TOTAL_LDB_PORTS_reg::type_id::create("TOTAL_LDB_PORTS", this);
    TOTAL_LDB_PORTS.set_cfg(16'h0, 16'h0, 16'h0, 12'h10C, 32, 32'b00000000000000000000000001000000);
    TOTAL_LDB_PORTS.set_space_addr("MSG", 12'h10C);
    TOTAL_LDB_PORTS.set_space_addr("msg_bus_port", 'h21);
    TOTAL_LDB_PORTS.set_space_addr("MEM-SB",12'h10C);
    TOTAL_LDB_PORTS.set_space_addr("MEM", 12'h10C);
      TOTAL_LDB_PORTS.set_space("MEM");
      TOTAL_LDB_PORTS.set_msg_opcode("MEM-SB");
      TOTAL_LDB_PORTS.set_fid(4'h0, "MEM-SB");
  	TOTAL_LDB_PORTS.set_bar(4'h2, "MEM-SB");
      TOTAL_LDB_PORTS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TOTAL_LDB_PORTS.set_user_attribute("diag_reg", "0");
      TOTAL_LDB_PORTS.set_user_attribute("HqmIsFeatureReg", "0");
      TOTAL_LDB_PORTS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TOTAL_LDB_PORTS:dont_test") ) TOTAL_LDB_PORTS.set_test_reg(1'b0);
      if (!add_reg( TOTAL_LDB_PORTS )) begin
        `sla_error(get_name(), ("Could not add register TOTAL_LDB_PORTS"));
      end
   TOTAL_LDB_PORTS.TOTAL_LDB_PORTS.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TOTAL_DIR_PORTS";
    `endif
    TOTAL_DIR_PORTS = hqm_system_csr_bridge_TOTAL_DIR_PORTS_reg::type_id::create("TOTAL_DIR_PORTS", this);
    TOTAL_DIR_PORTS.set_cfg(16'h0, 16'h0, 16'h0, 12'h110, 32, 32'b00000000000000000000000001000000);
    TOTAL_DIR_PORTS.set_space_addr("MSG", 12'h110);
    TOTAL_DIR_PORTS.set_space_addr("msg_bus_port", 'h21);
    TOTAL_DIR_PORTS.set_space_addr("MEM-SB",12'h110);
    TOTAL_DIR_PORTS.set_space_addr("MEM", 12'h110);
      TOTAL_DIR_PORTS.set_space("MEM");
      TOTAL_DIR_PORTS.set_msg_opcode("MEM-SB");
      TOTAL_DIR_PORTS.set_fid(4'h0, "MEM-SB");
  	TOTAL_DIR_PORTS.set_bar(4'h2, "MEM-SB");
      TOTAL_DIR_PORTS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TOTAL_DIR_PORTS.set_user_attribute("diag_reg", "0");
      TOTAL_DIR_PORTS.set_user_attribute("HqmIsFeatureReg", "0");
      TOTAL_DIR_PORTS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TOTAL_DIR_PORTS:dont_test") ) TOTAL_DIR_PORTS.set_test_reg(1'b0);
      if (!add_reg( TOTAL_DIR_PORTS )) begin
        `sla_error(get_name(), ("Could not add register TOTAL_DIR_PORTS"));
      end
   TOTAL_DIR_PORTS.TOTAL_DIR_PORTS.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TOTAL_VAS";
    `endif
    TOTAL_VAS = hqm_system_csr_bridge_TOTAL_VAS_reg::type_id::create("TOTAL_VAS", this);
    TOTAL_VAS.set_cfg(16'h0, 16'h0, 16'h0, 12'h114, 32, 32'b00000000000000000000000000100000);
    TOTAL_VAS.set_space_addr("MSG", 12'h114);
    TOTAL_VAS.set_space_addr("msg_bus_port", 'h21);
    TOTAL_VAS.set_space_addr("MEM-SB",12'h114);
    TOTAL_VAS.set_space_addr("MEM", 12'h114);
      TOTAL_VAS.set_space("MEM");
      TOTAL_VAS.set_msg_opcode("MEM-SB");
      TOTAL_VAS.set_fid(4'h0, "MEM-SB");
  	TOTAL_VAS.set_bar(4'h2, "MEM-SB");
      TOTAL_VAS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TOTAL_VAS.set_user_attribute("diag_reg", "0");
      TOTAL_VAS.set_user_attribute("HqmIsFeatureReg", "0");
      TOTAL_VAS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TOTAL_VAS:dont_test") ) TOTAL_VAS.set_test_reg(1'b0);
      if (!add_reg( TOTAL_VAS )) begin
        `sla_error(get_name(), ("Could not add register TOTAL_VAS"));
      end
   TOTAL_VAS.TOTAL_VAS.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TOTAL_SN_REGIONS";
    `endif
    TOTAL_SN_REGIONS = hqm_system_csr_bridge_TOTAL_SN_REGIONS_reg::type_id::create("TOTAL_SN_REGIONS", this);
    TOTAL_SN_REGIONS.set_cfg(16'h0, 16'h0, 16'h0, 12'h118, 32, 32'b00000000000000100001000000000101);
    TOTAL_SN_REGIONS.set_space_addr("MSG", 12'h118);
    TOTAL_SN_REGIONS.set_space_addr("msg_bus_port", 'h21);
    TOTAL_SN_REGIONS.set_space_addr("MEM-SB",12'h118);
    TOTAL_SN_REGIONS.set_space_addr("MEM", 12'h118);
      TOTAL_SN_REGIONS.set_space("MEM");
      TOTAL_SN_REGIONS.set_msg_opcode("MEM-SB");
      TOTAL_SN_REGIONS.set_fid(4'h0, "MEM-SB");
  	TOTAL_SN_REGIONS.set_bar(4'h2, "MEM-SB");
      TOTAL_SN_REGIONS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TOTAL_SN_REGIONS.set_user_attribute("diag_reg", "0");
      TOTAL_SN_REGIONS.set_user_attribute("HqmIsFeatureReg", "0");
      TOTAL_SN_REGIONS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TOTAL_SN_REGIONS:dont_test") ) TOTAL_SN_REGIONS.set_test_reg(1'b0);
      if (!add_reg( TOTAL_SN_REGIONS )) begin
        `sla_error(get_name(), ("Could not add register TOTAL_SN_REGIONS"));
      end
   TOTAL_SN_REGIONS.MODE.set_paths({"NoSignal"});
   TOTAL_SN_REGIONS.SLOT.set_paths({"NoSignal"});
   TOTAL_SN_REGIONS.GROUP.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TOTAL_VF";
    `endif
    TOTAL_VF = hqm_system_csr_bridge_TOTAL_VF_reg::type_id::create("TOTAL_VF", this);
    TOTAL_VF.set_cfg(16'h0, 16'h0, 16'h0, 12'h11C, 32, 32'b00000000000000000000000000010000);
    TOTAL_VF.set_space_addr("MSG", 12'h11C);
    TOTAL_VF.set_space_addr("msg_bus_port", 'h21);
    TOTAL_VF.set_space_addr("MEM-SB",12'h11C);
    TOTAL_VF.set_space_addr("MEM", 12'h11C);
      TOTAL_VF.set_space("MEM");
      TOTAL_VF.set_msg_opcode("MEM-SB");
      TOTAL_VF.set_fid(4'h0, "MEM-SB");
  	TOTAL_VF.set_bar(4'h2, "MEM-SB");
      TOTAL_VF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TOTAL_VF.set_user_attribute("diag_reg", "0");
      TOTAL_VF.set_user_attribute("HqmIsFeatureReg", "0");
      TOTAL_VF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TOTAL_VF:dont_test") ) TOTAL_VF.set_test_reg(1'b0);
      if (!add_reg( TOTAL_VF )) begin
        `sla_error(get_name(), ("Could not add register TOTAL_VF"));
      end
   TOTAL_VF.TOTAL_VF.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_VERSION";
    `endif
    CFG_UNIT_VERSION = hqm_system_csr_bridge_CFG_UNIT_VERSION_reg::type_id::create("CFG_UNIT_VERSION", this);
    CFG_UNIT_VERSION.set_cfg(16'h0, 16'h0, 16'h0, 12'h200, 32, 32'b00000100000000000000000000000000);
    CFG_UNIT_VERSION.set_space_addr("MSG", 12'h200);
    CFG_UNIT_VERSION.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_VERSION.set_space_addr("MEM-SB",12'h200);
    CFG_UNIT_VERSION.set_space_addr("MEM", 12'h200);
      CFG_UNIT_VERSION.set_space("MEM");
      CFG_UNIT_VERSION.set_msg_opcode("MEM-SB");
      CFG_UNIT_VERSION.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_VERSION.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_VERSION.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_VERSION.set_user_attribute("diag_reg", "0");
      CFG_UNIT_VERSION.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_UNIT_VERSION.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_VERSION.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_VERSION:dont_test") ) CFG_UNIT_VERSION.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_VERSION )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_VERSION"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "INGRESS_ALARM_ENABLE";
    `endif
    INGRESS_ALARM_ENABLE = hqm_system_csr_bridge_INGRESS_ALARM_ENABLE_reg::type_id::create("INGRESS_ALARM_ENABLE", this);
    INGRESS_ALARM_ENABLE.set_cfg(16'h0, 16'h0, 16'h0, 12'h300, 32, 32'b00000000000000000000000000000000);
    INGRESS_ALARM_ENABLE.set_space_addr("MSG", 12'h300);
    INGRESS_ALARM_ENABLE.set_space_addr("msg_bus_port", 'h21);
    INGRESS_ALARM_ENABLE.set_space_addr("MEM-SB",12'h300);
    INGRESS_ALARM_ENABLE.set_space_addr("MEM", 12'h300);
      INGRESS_ALARM_ENABLE.set_space("MEM");
      INGRESS_ALARM_ENABLE.set_msg_opcode("MEM-SB");
      INGRESS_ALARM_ENABLE.set_fid(4'h0, "MEM-SB");
  	INGRESS_ALARM_ENABLE.set_bar(4'h2, "MEM-SB");
      INGRESS_ALARM_ENABLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      INGRESS_ALARM_ENABLE.set_user_attribute("diag_reg", "0");
      INGRESS_ALARM_ENABLE.set_user_attribute("HqmIsFeatureReg", "0");
      INGRESS_ALARM_ENABLE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("INGRESS_ALARM_ENABLE:dont_test") ) INGRESS_ALARM_ENABLE.set_test_reg(1'b0);
      if (!add_reg( INGRESS_ALARM_ENABLE )) begin
        `sla_error(get_name(), ("Could not add register INGRESS_ALARM_ENABLE"));
      end
   INGRESS_ALARM_ENABLE.ILLEGAL_HCW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_HCW"});
   INGRESS_ALARM_ENABLE.ILLEGAL_PP.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_PP"});
   INGRESS_ALARM_ENABLE.ILLEGAL_PASID.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_PASID"});
   INGRESS_ALARM_ENABLE.ILLEGAL_QID.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_QID"});
   INGRESS_ALARM_ENABLE.DISABLED_QID.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.DISABLED_QID"});
   INGRESS_ALARM_ENABLE.ILLEGAL_LDB_QID_CFG.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_LDB_QID_CFG"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_LUT_PERR";
    `endif
    ALARM_LUT_PERR = hqm_system_csr_bridge_ALARM_LUT_PERR_reg::type_id::create("ALARM_LUT_PERR", this);
    ALARM_LUT_PERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h304, 32, 32'b00000000000000000000000000000000);
    ALARM_LUT_PERR.set_space_addr("MSG", 12'h304);
    ALARM_LUT_PERR.set_space_addr("msg_bus_port", 'h21);
    ALARM_LUT_PERR.set_space_addr("MEM-SB",12'h304);
    ALARM_LUT_PERR.set_space_addr("MEM", 12'h304);
      ALARM_LUT_PERR.set_space("MEM");
      ALARM_LUT_PERR.set_msg_opcode("MEM-SB");
      ALARM_LUT_PERR.set_fid(4'h0, "MEM-SB");
  	ALARM_LUT_PERR.set_bar(4'h2, "MEM-SB");
      ALARM_LUT_PERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_LUT_PERR.set_user_attribute("diag_reg", "0");
      ALARM_LUT_PERR.set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_LUT_PERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_LUT_PERR:dont_test") ) ALARM_LUT_PERR.set_test_reg(1'b0);
      if (!add_reg( ALARM_LUT_PERR )) begin
        `sla_error(get_name(), ("Could not add register ALARM_LUT_PERR"));
      end
   ALARM_LUT_PERR.DIR_CQ_ISR_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_ISR_PERR"});
   ALARM_LUT_PERR.LDB_CQ_ISR_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_ISR_PERR"});
   ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR"});
   ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR"});
   ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR"});
   ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR"});
   ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR"});
   ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR"});
   ALARM_LUT_PERR.MSIX_TBL_W0_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W0_PERR"});
   ALARM_LUT_PERR.MSIX_TBL_W1_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W1_PERR"});
   ALARM_LUT_PERR.MSIX_TBL_W2_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W2_PERR"});
   ALARM_LUT_PERR.MSIX_TBL_W3_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W3_PERR"});
   ALARM_LUT_PERR.VF_SYND_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.VF_SYND_PERR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "EGRESS_LUT_ERR";
    `endif
    EGRESS_LUT_ERR = hqm_system_csr_bridge_EGRESS_LUT_ERR_reg::type_id::create("EGRESS_LUT_ERR", this);
    EGRESS_LUT_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h308, 32, 32'b00000000000000000000000000000000);
    EGRESS_LUT_ERR.set_space_addr("MSG", 12'h308);
    EGRESS_LUT_ERR.set_space_addr("msg_bus_port", 'h21);
    EGRESS_LUT_ERR.set_space_addr("MEM-SB",12'h308);
    EGRESS_LUT_ERR.set_space_addr("MEM", 12'h308);
      EGRESS_LUT_ERR.set_space("MEM");
      EGRESS_LUT_ERR.set_msg_opcode("MEM-SB");
      EGRESS_LUT_ERR.set_fid(4'h0, "MEM-SB");
  	EGRESS_LUT_ERR.set_bar(4'h2, "MEM-SB");
      EGRESS_LUT_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      EGRESS_LUT_ERR.set_user_attribute("diag_reg", "0");
      EGRESS_LUT_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      EGRESS_LUT_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("EGRESS_LUT_ERR:dont_test") ) EGRESS_LUT_ERR.set_test_reg(1'b0);
      if (!add_reg( EGRESS_LUT_ERR )) begin
        `sla_error(get_name(), ("Could not add register EGRESS_LUT_ERR"));
      end
   EGRESS_LUT_ERR.DIR_CQ_FMT_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_FMT_PERR"});
   EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR"});
   EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR"});
   EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR"});
   EGRESS_LUT_ERR.DIR_CQ_PASID_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_PASID_PERR"});
   EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR"});
   EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR"});
   EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR"});
   EGRESS_LUT_ERR.LDB_CQ_PASID_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_PASID_PERR"});
   EGRESS_LUT_ERR.LDB_QID2VQID_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_QID2VQID_PERR"});
   EGRESS_LUT_ERR.SCH_DATA_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_DATA_PERR"});
   EGRESS_LUT_ERR.SCH_REQ_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_PERR"});
   EGRESS_LUT_ERR.SCH_REQ_RERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_RERR"});
   EGRESS_LUT_ERR.SCH_REQ_PL_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_PL_PERR"});
   EGRESS_LUT_ERR.SCH_INT_PL_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_INT_PL_PERR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "INGRESS_LUT_ERR";
    `endif
    INGRESS_LUT_ERR = hqm_system_csr_bridge_INGRESS_LUT_ERR_reg::type_id::create("INGRESS_LUT_ERR", this);
    INGRESS_LUT_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h30C, 32, 32'b00000000000000000000000000000000);
    INGRESS_LUT_ERR.set_space_addr("MSG", 12'h30C);
    INGRESS_LUT_ERR.set_space_addr("msg_bus_port", 'h21);
    INGRESS_LUT_ERR.set_space_addr("MEM-SB",12'h30C);
    INGRESS_LUT_ERR.set_space_addr("MEM", 12'h30C);
      INGRESS_LUT_ERR.set_space("MEM");
      INGRESS_LUT_ERR.set_msg_opcode("MEM-SB");
      INGRESS_LUT_ERR.set_fid(4'h0, "MEM-SB");
  	INGRESS_LUT_ERR.set_bar(4'h2, "MEM-SB");
      INGRESS_LUT_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      INGRESS_LUT_ERR.set_user_attribute("diag_reg", "0");
      INGRESS_LUT_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      INGRESS_LUT_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("INGRESS_LUT_ERR:dont_test") ) INGRESS_LUT_ERR.set_test_reg(1'b0);
      if (!add_reg( INGRESS_LUT_ERR )) begin
        `sla_error(get_name(), ("Could not add register INGRESS_LUT_ERR"));
      end
   INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR"});
   INGRESS_LUT_ERR.DIR_PP2VAS_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_PP2VAS_PERR"});
   INGRESS_LUT_ERR.LDB_PP2VAS_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_PP2VAS_PERR"});
   INGRESS_LUT_ERR.DIR_VASQID_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_VASQID_V_PERR"});
   INGRESS_LUT_ERR.LDB_VASQID_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_VASQID_V_PERR"});
   INGRESS_LUT_ERR.LDB_QID_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_V_PERR"});
   INGRESS_LUT_ERR.DIR_QID_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_QID_V_PERR"});
   INGRESS_LUT_ERR.DIR_QID_ITS_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_QID_ITS_PERR"});
   INGRESS_LUT_ERR.LDB_QID_ITS_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_ITS_PERR"});
   INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR"});
   INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR"});
   INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR"});
   INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR"});
   INGRESS_LUT_ERR.LDB_PP_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_PP_V_PERR"});
   INGRESS_LUT_ERR.DIR_PP_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_PP_V_PERR"});
   INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR"});
   INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR"});
   INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR"});
   INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR"});
   INGRESS_LUT_ERR.PORT_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.PORT_PERR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_ERR";
    `endif
    ALARM_ERR = hqm_system_csr_bridge_ALARM_ERR_reg::type_id::create("ALARM_ERR", this);
    ALARM_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h310, 32, 32'b00000000000000000000000000000000);
    ALARM_ERR.set_space_addr("MSG", 12'h310);
    ALARM_ERR.set_space_addr("msg_bus_port", 'h21);
    ALARM_ERR.set_space_addr("MEM-SB",12'h310);
    ALARM_ERR.set_space_addr("MEM", 12'h310);
      ALARM_ERR.set_space("MEM");
      ALARM_ERR.set_msg_opcode("MEM-SB");
      ALARM_ERR.set_fid(4'h0, "MEM-SB");
  	ALARM_ERR.set_bar(4'h2, "MEM-SB");
      ALARM_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_ERR.set_user_attribute("diag_reg", "0");
      ALARM_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_ERR:dont_test") ) ALARM_ERR.set_test_reg(1'b0);
      if (!add_reg( ALARM_ERR )) begin
        `sla_error(get_name(), ("Could not add register ALARM_ERR"));
      end
   ALARM_ERR.CQ_ADDR_OVERFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.CQ_ADDR_OVERFLOW"});
   ALARM_ERR.INGRESS_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.INGRESS_PERR"});
   ALARM_ERR.EGRESS_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.EGRESS_PERR"});
   ALARM_ERR.ALARM_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ALARM_PERR"});
   ALARM_ERR.SCH_SM_ERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.SCH_SM_ERR"});
   ALARM_ERR.FIFO_UNDERFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.FIFO_UNDERFLOW"});
   ALARM_ERR.FIFO_OVERFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.FIFO_OVERFLOW"});
   ALARM_ERR.SCH_WB_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.SCH_WB_PERR"});
   ALARM_ERR.ALARM_INT_ERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ALARM_INT_ERR"});
   ALARM_ERR.RF_IPAR_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.RF_IPAR_ERROR"});
   ALARM_ERR.ROB_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ROB_ERROR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_MB_ECC_ERR";
    `endif
    ALARM_MB_ECC_ERR = hqm_system_csr_bridge_ALARM_MB_ECC_ERR_reg::type_id::create("ALARM_MB_ECC_ERR", this);
    ALARM_MB_ECC_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h314, 32, 32'b00000000000000000000000000000000);
    ALARM_MB_ECC_ERR.set_space_addr("MSG", 12'h314);
    ALARM_MB_ECC_ERR.set_space_addr("msg_bus_port", 'h21);
    ALARM_MB_ECC_ERR.set_space_addr("MEM-SB",12'h314);
    ALARM_MB_ECC_ERR.set_space_addr("MEM", 12'h314);
      ALARM_MB_ECC_ERR.set_space("MEM");
      ALARM_MB_ECC_ERR.set_msg_opcode("MEM-SB");
      ALARM_MB_ECC_ERR.set_fid(4'h0, "MEM-SB");
  	ALARM_MB_ECC_ERR.set_bar(4'h2, "MEM-SB");
      ALARM_MB_ECC_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_MB_ECC_ERR.set_user_attribute("diag_reg", "0");
      ALARM_MB_ECC_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_MB_ECC_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_MB_ECC_ERR:dont_test") ) ALARM_MB_ECC_ERR.set_test_reg(1'b0);
      if (!add_reg( ALARM_MB_ECC_ERR )) begin
        `sla_error(get_name(), ("Could not add register ALARM_MB_ECC_ERR"));
      end
   ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0"});
   ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1"});
   ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2"});
   ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3"});
   ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0"});
   ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1"});
   ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_SB_ECC_ERR";
    `endif
    ALARM_SB_ECC_ERR = hqm_system_csr_bridge_ALARM_SB_ECC_ERR_reg::type_id::create("ALARM_SB_ECC_ERR", this);
    ALARM_SB_ECC_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h318, 32, 32'b00000000000000000000000000000000);
    ALARM_SB_ECC_ERR.set_space_addr("MSG", 12'h318);
    ALARM_SB_ECC_ERR.set_space_addr("msg_bus_port", 'h21);
    ALARM_SB_ECC_ERR.set_space_addr("MEM-SB",12'h318);
    ALARM_SB_ECC_ERR.set_space_addr("MEM", 12'h318);
      ALARM_SB_ECC_ERR.set_space("MEM");
      ALARM_SB_ECC_ERR.set_msg_opcode("MEM-SB");
      ALARM_SB_ECC_ERR.set_fid(4'h0, "MEM-SB");
  	ALARM_SB_ECC_ERR.set_bar(4'h2, "MEM-SB");
      ALARM_SB_ECC_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_SB_ECC_ERR.set_user_attribute("diag_reg", "0");
      ALARM_SB_ECC_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_SB_ECC_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_SB_ECC_ERR:dont_test") ) ALARM_SB_ECC_ERR.set_test_reg(1'b0);
      if (!add_reg( ALARM_SB_ECC_ERR )) begin
        `sla_error(get_name(), ("Could not add register ALARM_SB_ECC_ERR"));
      end
   ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0"});
   ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1"});
   ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2"});
   ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3"});
   ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0"});
   ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1"});
   ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2"});
   ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3"});
   ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_CTL";
    `endif
    HQM_SYSTEM_CNT_CTL = hqm_system_csr_bridge_HQM_SYSTEM_CNT_CTL_reg::type_id::create("HQM_SYSTEM_CNT_CTL", this);
    HQM_SYSTEM_CNT_CTL.set_cfg(16'h0, 16'h0, 16'h0, 12'h31C, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_CTL.set_space_addr("MSG", 12'h31C);
    HQM_SYSTEM_CNT_CTL.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_CTL.set_space_addr("MEM-SB",12'h31C);
    HQM_SYSTEM_CNT_CTL.set_space_addr("MEM", 12'h31C);
      HQM_SYSTEM_CNT_CTL.set_space("MEM");
      HQM_SYSTEM_CNT_CTL.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_CTL.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_CTL.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_CTL.set_user_attribute("diag_reg", "0");
      HQM_SYSTEM_CNT_CTL.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_SYSTEM_CNT_CTL:dont_test") ) HQM_SYSTEM_CNT_CTL.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_CTL )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_CTL"));
      end
   HQM_SYSTEM_CNT_CTL.CNT_CLR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_CTL.CNT_CLR"});
   HQM_SYSTEM_CNT_CTL.CNT_CLRV.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_CTL.CNT_CLRV"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_ACK";
    `endif
    MSIX_ACK = hqm_system_csr_bridge_MSIX_ACK_reg::type_id::create("MSIX_ACK", this);
    MSIX_ACK.set_cfg(16'h0, 16'h0, 16'h0, 12'h400, 32, 32'b00000000000000000000000000000000);
    MSIX_ACK.set_space_addr("MSG", 12'h400);
    MSIX_ACK.set_space_addr("msg_bus_port", 'h21);
    MSIX_ACK.set_space_addr("MEM-SB",12'h400);
    MSIX_ACK.set_space_addr("MEM", 12'h400);
      MSIX_ACK.set_space("MEM");
      MSIX_ACK.set_msg_opcode("MEM-SB");
      MSIX_ACK.set_fid(4'h0, "MEM-SB");
  	MSIX_ACK.set_bar(4'h2, "MEM-SB");
      MSIX_ACK.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_ACK.set_user_attribute("diag_reg", "0");
      MSIX_ACK.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_ACK.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_ACK:dont_test") ) MSIX_ACK.set_test_reg(1'b0);
      if (!add_reg( MSIX_ACK )) begin
        `sla_error(get_name(), ("Could not add register MSIX_ACK"));
      end
   MSIX_ACK.MSIX_0_ACK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_ACK.MSIX_0_ACK"});
   MSIX_ACK.MSIX_1_ACK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_ACK.MSIX_1_ACK"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_PASSTHROUGH";
    `endif
    MSIX_PASSTHROUGH = hqm_system_csr_bridge_MSIX_PASSTHROUGH_reg::type_id::create("MSIX_PASSTHROUGH", this);
    MSIX_PASSTHROUGH.set_cfg(16'h0, 16'h0, 16'h0, 12'h404, 32, 32'b00000000000000000000000000000000);
    MSIX_PASSTHROUGH.set_space_addr("MSG", 12'h404);
    MSIX_PASSTHROUGH.set_space_addr("msg_bus_port", 'h21);
    MSIX_PASSTHROUGH.set_space_addr("MEM-SB",12'h404);
    MSIX_PASSTHROUGH.set_space_addr("MEM", 12'h404);
      MSIX_PASSTHROUGH.set_space("MEM");
      MSIX_PASSTHROUGH.set_msg_opcode("MEM-SB");
      MSIX_PASSTHROUGH.set_fid(4'h0, "MEM-SB");
  	MSIX_PASSTHROUGH.set_bar(4'h2, "MEM-SB");
      MSIX_PASSTHROUGH.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_PASSTHROUGH.set_user_attribute("diag_reg", "0");
      MSIX_PASSTHROUGH.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_PASSTHROUGH.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_PASSTHROUGH:dont_test") ) MSIX_PASSTHROUGH.set_test_reg(1'b0);
      if (!add_reg( MSIX_PASSTHROUGH )) begin
        `sla_error(get_name(), ("Could not add register MSIX_PASSTHROUGH"));
      end
   MSIX_PASSTHROUGH.MSIX_0_PASSTHRU.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PASSTHROUGH.MSIX_0_PASSTHRU"});
   MSIX_PASSTHROUGH.MSIX_1_PASSTHRU.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PASSTHROUGH.MSIX_1_PASSTHRU"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_MODE";
    `endif
    MSIX_MODE = hqm_system_csr_bridge_MSIX_MODE_reg::type_id::create("MSIX_MODE", this);
    MSIX_MODE.set_cfg(16'h0, 16'h0, 16'h0, 12'h408, 32, 32'b00000000000000000000000000000000);
    MSIX_MODE.set_space_addr("MSG", 12'h408);
    MSIX_MODE.set_space_addr("msg_bus_port", 'h21);
    MSIX_MODE.set_space_addr("MEM-SB",12'h408);
    MSIX_MODE.set_space_addr("MEM", 12'h408);
      MSIX_MODE.set_space("MEM");
      MSIX_MODE.set_msg_opcode("MEM-SB");
      MSIX_MODE.set_fid(4'h0, "MEM-SB");
  	MSIX_MODE.set_bar(4'h2, "MEM-SB");
      MSIX_MODE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_MODE.set_user_attribute("diag_reg", "0");
      MSIX_MODE.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_MODE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_MODE:dont_test") ) MSIX_MODE.set_test_reg(1'b0);
      if (!add_reg( MSIX_MODE )) begin
        `sla_error(get_name(), ("Could not add register MSIX_MODE"));
      end
   MSIX_MODE.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_MODE.MODE"});
   MSIX_MODE.IMS_POLLING.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_MODE.IMS_POLLING"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_31_0_SYND";
    `endif
    MSIX_31_0_SYND = hqm_system_csr_bridge_MSIX_31_0_SYND_reg::type_id::create("MSIX_31_0_SYND", this);
    MSIX_31_0_SYND.set_cfg(16'h0, 16'h0, 16'h0, 12'h410, 32, 32'b00000000000000000000000000000000);
    MSIX_31_0_SYND.set_space_addr("MSG", 12'h410);
    MSIX_31_0_SYND.set_space_addr("msg_bus_port", 'h21);
    MSIX_31_0_SYND.set_space_addr("MEM-SB",12'h410);
    MSIX_31_0_SYND.set_space_addr("MEM", 12'h410);
      MSIX_31_0_SYND.set_space("MEM");
      MSIX_31_0_SYND.set_msg_opcode("MEM-SB");
      MSIX_31_0_SYND.set_fid(4'h0, "MEM-SB");
  	MSIX_31_0_SYND.set_bar(4'h2, "MEM-SB");
      MSIX_31_0_SYND.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_31_0_SYND.set_user_attribute("diag_reg", "0");
      MSIX_31_0_SYND.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_31_0_SYND.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_31_0_SYND:dont_test") ) MSIX_31_0_SYND.set_test_reg(1'b0);
      if (!add_reg( MSIX_31_0_SYND )) begin
        `sla_error(get_name(), ("Could not add register MSIX_31_0_SYND"));
      end
   MSIX_31_0_SYND.MSIX_0_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_0_SENT"});
   MSIX_31_0_SYND.MSIX_1_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_1_SENT"});
   MSIX_31_0_SYND.MSIX_2_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_2_SENT"});
   MSIX_31_0_SYND.MSIX_3_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_3_SENT"});
   MSIX_31_0_SYND.MSIX_4_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_4_SENT"});
   MSIX_31_0_SYND.MSIX_5_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_5_SENT"});
   MSIX_31_0_SYND.MSIX_6_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_6_SENT"});
   MSIX_31_0_SYND.MSIX_7_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_7_SENT"});
   MSIX_31_0_SYND.MSIX_8_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_8_SENT"});
   MSIX_31_0_SYND.MSIX_9_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_9_SENT"});
   MSIX_31_0_SYND.MSIX_10_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_10_SENT"});
   MSIX_31_0_SYND.MSIX_11_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_11_SENT"});
   MSIX_31_0_SYND.MSIX_12_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_12_SENT"});
   MSIX_31_0_SYND.MSIX_13_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_13_SENT"});
   MSIX_31_0_SYND.MSIX_14_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_14_SENT"});
   MSIX_31_0_SYND.MSIX_15_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_15_SENT"});
   MSIX_31_0_SYND.MSIX_16_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_16_SENT"});
   MSIX_31_0_SYND.MSIX_17_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_17_SENT"});
   MSIX_31_0_SYND.MSIX_18_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_18_SENT"});
   MSIX_31_0_SYND.MSIX_19_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_19_SENT"});
   MSIX_31_0_SYND.MSIX_20_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_20_SENT"});
   MSIX_31_0_SYND.MSIX_21_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_21_SENT"});
   MSIX_31_0_SYND.MSIX_22_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_22_SENT"});
   MSIX_31_0_SYND.MSIX_23_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_23_SENT"});
   MSIX_31_0_SYND.MSIX_24_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_24_SENT"});
   MSIX_31_0_SYND.MSIX_25_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_25_SENT"});
   MSIX_31_0_SYND.MSIX_26_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_26_SENT"});
   MSIX_31_0_SYND.MSIX_27_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_27_SENT"});
   MSIX_31_0_SYND.MSIX_28_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_28_SENT"});
   MSIX_31_0_SYND.MSIX_29_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_29_SENT"});
   MSIX_31_0_SYND.MSIX_30_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_30_SENT"});
   MSIX_31_0_SYND.MSIX_31_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_31_SENT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_63_32_SYND";
    `endif
    MSIX_63_32_SYND = hqm_system_csr_bridge_MSIX_63_32_SYND_reg::type_id::create("MSIX_63_32_SYND", this);
    MSIX_63_32_SYND.set_cfg(16'h0, 16'h0, 16'h0, 12'h414, 32, 32'b00000000000000000000000000000000);
    MSIX_63_32_SYND.set_space_addr("MSG", 12'h414);
    MSIX_63_32_SYND.set_space_addr("msg_bus_port", 'h21);
    MSIX_63_32_SYND.set_space_addr("MEM-SB",12'h414);
    MSIX_63_32_SYND.set_space_addr("MEM", 12'h414);
      MSIX_63_32_SYND.set_space("MEM");
      MSIX_63_32_SYND.set_msg_opcode("MEM-SB");
      MSIX_63_32_SYND.set_fid(4'h0, "MEM-SB");
  	MSIX_63_32_SYND.set_bar(4'h2, "MEM-SB");
      MSIX_63_32_SYND.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_63_32_SYND.set_user_attribute("diag_reg", "0");
      MSIX_63_32_SYND.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_63_32_SYND.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_63_32_SYND:dont_test") ) MSIX_63_32_SYND.set_test_reg(1'b0);
      if (!add_reg( MSIX_63_32_SYND )) begin
        `sla_error(get_name(), ("Could not add register MSIX_63_32_SYND"));
      end
   MSIX_63_32_SYND.MSIX_32_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_32_SENT"});
   MSIX_63_32_SYND.MSIX_33_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_33_SENT"});
   MSIX_63_32_SYND.MSIX_34_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_34_SENT"});
   MSIX_63_32_SYND.MSIX_35_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_35_SENT"});
   MSIX_63_32_SYND.MSIX_36_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_36_SENT"});
   MSIX_63_32_SYND.MSIX_37_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_37_SENT"});
   MSIX_63_32_SYND.MSIX_38_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_38_SENT"});
   MSIX_63_32_SYND.MSIX_39_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_39_SENT"});
   MSIX_63_32_SYND.MSIX_40_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_40_SENT"});
   MSIX_63_32_SYND.MSIX_41_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_41_SENT"});
   MSIX_63_32_SYND.MSIX_42_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_42_SENT"});
   MSIX_63_32_SYND.MSIX_43_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_43_SENT"});
   MSIX_63_32_SYND.MSIX_44_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_44_SENT"});
   MSIX_63_32_SYND.MSIX_45_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_45_SENT"});
   MSIX_63_32_SYND.MSIX_46_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_46_SENT"});
   MSIX_63_32_SYND.MSIX_47_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_47_SENT"});
   MSIX_63_32_SYND.MSIX_48_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_48_SENT"});
   MSIX_63_32_SYND.MSIX_49_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_49_SENT"});
   MSIX_63_32_SYND.MSIX_50_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_50_SENT"});
   MSIX_63_32_SYND.MSIX_51_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_51_SENT"});
   MSIX_63_32_SYND.MSIX_52_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_52_SENT"});
   MSIX_63_32_SYND.MSIX_53_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_53_SENT"});
   MSIX_63_32_SYND.MSIX_54_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_54_SENT"});
   MSIX_63_32_SYND.MSIX_55_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_55_SENT"});
   MSIX_63_32_SYND.MSIX_56_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_56_SENT"});
   MSIX_63_32_SYND.MSIX_57_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_57_SENT"});
   MSIX_63_32_SYND.MSIX_58_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_58_SENT"});
   MSIX_63_32_SYND.MSIX_59_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_59_SENT"});
   MSIX_63_32_SYND.MSIX_60_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_60_SENT"});
   MSIX_63_32_SYND.MSIX_61_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_61_SENT"});
   MSIX_63_32_SYND.MSIX_62_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_62_SENT"});
   MSIX_63_32_SYND.MSIX_63_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_63_SENT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_64_SYND";
    `endif
    MSIX_64_SYND = hqm_system_csr_bridge_MSIX_64_SYND_reg::type_id::create("MSIX_64_SYND", this);
    MSIX_64_SYND.set_cfg(16'h0, 16'h0, 16'h0, 12'h418, 32, 32'b00000000000000000000000000000000);
    MSIX_64_SYND.set_space_addr("MSG", 12'h418);
    MSIX_64_SYND.set_space_addr("msg_bus_port", 'h21);
    MSIX_64_SYND.set_space_addr("MEM-SB",12'h418);
    MSIX_64_SYND.set_space_addr("MEM", 12'h418);
      MSIX_64_SYND.set_space("MEM");
      MSIX_64_SYND.set_msg_opcode("MEM-SB");
      MSIX_64_SYND.set_fid(4'h0, "MEM-SB");
  	MSIX_64_SYND.set_bar(4'h2, "MEM-SB");
      MSIX_64_SYND.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_64_SYND.set_user_attribute("diag_reg", "0");
      MSIX_64_SYND.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_64_SYND.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_64_SYND:dont_test") ) MSIX_64_SYND.set_test_reg(1'b0);
      if (!add_reg( MSIX_64_SYND )) begin
        `sla_error(get_name(), ("Could not add register MSIX_64_SYND"));
      end
   MSIX_64_SYND.MSIX_64_SENT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_64_SYND.MSIX_64_SENT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_PBA_31_0_CLEAR";
    `endif
    MSIX_PBA_31_0_CLEAR = hqm_system_csr_bridge_MSIX_PBA_31_0_CLEAR_reg::type_id::create("MSIX_PBA_31_0_CLEAR", this);
    MSIX_PBA_31_0_CLEAR.set_cfg(16'h0, 16'h0, 16'h0, 12'h420, 32, 32'b00000000000000000000000000000000);
    MSIX_PBA_31_0_CLEAR.set_space_addr("MSG", 12'h420);
    MSIX_PBA_31_0_CLEAR.set_space_addr("msg_bus_port", 'h21);
    MSIX_PBA_31_0_CLEAR.set_space_addr("MEM-SB",12'h420);
    MSIX_PBA_31_0_CLEAR.set_space_addr("MEM", 12'h420);
      MSIX_PBA_31_0_CLEAR.set_space("MEM");
      MSIX_PBA_31_0_CLEAR.set_msg_opcode("MEM-SB");
      MSIX_PBA_31_0_CLEAR.set_fid(4'h0, "MEM-SB");
  	MSIX_PBA_31_0_CLEAR.set_bar(4'h2, "MEM-SB");
      MSIX_PBA_31_0_CLEAR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_PBA_31_0_CLEAR.set_user_attribute("diag_reg", "0");
      MSIX_PBA_31_0_CLEAR.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_PBA_31_0_CLEAR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_PBA_31_0_CLEAR:dont_test") ) MSIX_PBA_31_0_CLEAR.set_test_reg(1'b0);
      if (!add_reg( MSIX_PBA_31_0_CLEAR )) begin
        `sla_error(get_name(), ("Could not add register MSIX_PBA_31_0_CLEAR"));
      end
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_0_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_0_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_1_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_1_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_2_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_2_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_3_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_3_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_4_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_4_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_5_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_5_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_6_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_6_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_7_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_7_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_8_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_8_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_9_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_9_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_10_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_10_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_11_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_11_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_12_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_12_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_13_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_13_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_14_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_14_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_15_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_15_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_16_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_16_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_17_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_17_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_18_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_18_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_19_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_19_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_20_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_20_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_21_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_21_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_22_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_22_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_23_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_23_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_24_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_24_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_25_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_25_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_26_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_26_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_27_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_27_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_28_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_28_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_29_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_29_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_30_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_30_CLEAR"});
   MSIX_PBA_31_0_CLEAR.MSIX_PBA_31_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_31_CLEAR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_PBA_63_32_CLEAR";
    `endif
    MSIX_PBA_63_32_CLEAR = hqm_system_csr_bridge_MSIX_PBA_63_32_CLEAR_reg::type_id::create("MSIX_PBA_63_32_CLEAR", this);
    MSIX_PBA_63_32_CLEAR.set_cfg(16'h0, 16'h0, 16'h0, 12'h424, 32, 32'b00000000000000000000000000000000);
    MSIX_PBA_63_32_CLEAR.set_space_addr("MSG", 12'h424);
    MSIX_PBA_63_32_CLEAR.set_space_addr("msg_bus_port", 'h21);
    MSIX_PBA_63_32_CLEAR.set_space_addr("MEM-SB",12'h424);
    MSIX_PBA_63_32_CLEAR.set_space_addr("MEM", 12'h424);
      MSIX_PBA_63_32_CLEAR.set_space("MEM");
      MSIX_PBA_63_32_CLEAR.set_msg_opcode("MEM-SB");
      MSIX_PBA_63_32_CLEAR.set_fid(4'h0, "MEM-SB");
  	MSIX_PBA_63_32_CLEAR.set_bar(4'h2, "MEM-SB");
      MSIX_PBA_63_32_CLEAR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_PBA_63_32_CLEAR.set_user_attribute("diag_reg", "0");
      MSIX_PBA_63_32_CLEAR.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_PBA_63_32_CLEAR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_PBA_63_32_CLEAR:dont_test") ) MSIX_PBA_63_32_CLEAR.set_test_reg(1'b0);
      if (!add_reg( MSIX_PBA_63_32_CLEAR )) begin
        `sla_error(get_name(), ("Could not add register MSIX_PBA_63_32_CLEAR"));
      end
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_32_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_32_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_33_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_33_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_34_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_34_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_35_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_35_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_36_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_36_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_37_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_37_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_38_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_38_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_39_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_39_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_40_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_40_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_41_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_41_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_42_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_42_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_43_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_43_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_44_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_44_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_45_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_45_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_46_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_46_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_47_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_47_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_48_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_48_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_49_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_49_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_50_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_50_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_51_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_51_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_52_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_52_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_53_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_53_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_54_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_54_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_55_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_55_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_56_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_56_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_57_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_57_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_58_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_58_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_59_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_59_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_60_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_60_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_61_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_61_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_62_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_62_CLEAR"});
   MSIX_PBA_63_32_CLEAR.MSIX_PBA_63_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_63_CLEAR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_PBA_64_CLEAR";
    `endif
    MSIX_PBA_64_CLEAR = hqm_system_csr_bridge_MSIX_PBA_64_CLEAR_reg::type_id::create("MSIX_PBA_64_CLEAR", this);
    MSIX_PBA_64_CLEAR.set_cfg(16'h0, 16'h0, 16'h0, 12'h428, 32, 32'b00000000000000000000000000000000);
    MSIX_PBA_64_CLEAR.set_space_addr("MSG", 12'h428);
    MSIX_PBA_64_CLEAR.set_space_addr("msg_bus_port", 'h21);
    MSIX_PBA_64_CLEAR.set_space_addr("MEM-SB",12'h428);
    MSIX_PBA_64_CLEAR.set_space_addr("MEM", 12'h428);
      MSIX_PBA_64_CLEAR.set_space("MEM");
      MSIX_PBA_64_CLEAR.set_msg_opcode("MEM-SB");
      MSIX_PBA_64_CLEAR.set_fid(4'h0, "MEM-SB");
  	MSIX_PBA_64_CLEAR.set_bar(4'h2, "MEM-SB");
      MSIX_PBA_64_CLEAR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSIX_PBA_64_CLEAR.set_user_attribute("diag_reg", "0");
      MSIX_PBA_64_CLEAR.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_PBA_64_CLEAR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_PBA_64_CLEAR:dont_test") ) MSIX_PBA_64_CLEAR.set_test_reg(1'b0);
      if (!add_reg( MSIX_PBA_64_CLEAR )) begin
        `sla_error(get_name(), ("Could not add register MSIX_PBA_64_CLEAR"));
      end
   MSIX_PBA_64_CLEAR.MSIX_PBA_64_CLEAR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_64_CLEAR.MSIX_PBA_64_CLEAR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_CQ_31_0_OCC_INT_STATUS";
    `endif
    DIR_CQ_31_0_OCC_INT_STATUS = hqm_system_csr_bridge_DIR_CQ_31_0_OCC_INT_STATUS_reg::type_id::create("DIR_CQ_31_0_OCC_INT_STATUS", this);
    DIR_CQ_31_0_OCC_INT_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 12'h440, 32, 32'b00000000000000000000000000000000);
    DIR_CQ_31_0_OCC_INT_STATUS.set_space_addr("MSG", 12'h440);
    DIR_CQ_31_0_OCC_INT_STATUS.set_space_addr("msg_bus_port", 'h21);
    DIR_CQ_31_0_OCC_INT_STATUS.set_space_addr("MEM-SB",12'h440);
    DIR_CQ_31_0_OCC_INT_STATUS.set_space_addr("MEM", 12'h440);
      DIR_CQ_31_0_OCC_INT_STATUS.set_space("MEM");
      DIR_CQ_31_0_OCC_INT_STATUS.set_msg_opcode("MEM-SB");
      DIR_CQ_31_0_OCC_INT_STATUS.set_fid(4'h0, "MEM-SB");
  	DIR_CQ_31_0_OCC_INT_STATUS.set_bar(4'h2, "MEM-SB");
      DIR_CQ_31_0_OCC_INT_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ_31_0_OCC_INT_STATUS.set_user_attribute("diag_reg", "0");
      DIR_CQ_31_0_OCC_INT_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ_31_0_OCC_INT_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_CQ_31_0_OCC_INT_STATUS:dont_test") ) DIR_CQ_31_0_OCC_INT_STATUS.set_test_reg(1'b0);
      if (!add_reg( DIR_CQ_31_0_OCC_INT_STATUS )) begin
        `sla_error(get_name(), ("Could not add register DIR_CQ_31_0_OCC_INT_STATUS"));
      end
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT"});
   DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_CQ_63_32_OCC_INT_STATUS";
    `endif
    DIR_CQ_63_32_OCC_INT_STATUS = hqm_system_csr_bridge_DIR_CQ_63_32_OCC_INT_STATUS_reg::type_id::create("DIR_CQ_63_32_OCC_INT_STATUS", this);
    DIR_CQ_63_32_OCC_INT_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 12'h444, 32, 32'b00000000000000000000000000000000);
    DIR_CQ_63_32_OCC_INT_STATUS.set_space_addr("MSG", 12'h444);
    DIR_CQ_63_32_OCC_INT_STATUS.set_space_addr("msg_bus_port", 'h21);
    DIR_CQ_63_32_OCC_INT_STATUS.set_space_addr("MEM-SB",12'h444);
    DIR_CQ_63_32_OCC_INT_STATUS.set_space_addr("MEM", 12'h444);
      DIR_CQ_63_32_OCC_INT_STATUS.set_space("MEM");
      DIR_CQ_63_32_OCC_INT_STATUS.set_msg_opcode("MEM-SB");
      DIR_CQ_63_32_OCC_INT_STATUS.set_fid(4'h0, "MEM-SB");
  	DIR_CQ_63_32_OCC_INT_STATUS.set_bar(4'h2, "MEM-SB");
      DIR_CQ_63_32_OCC_INT_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ_63_32_OCC_INT_STATUS.set_user_attribute("diag_reg", "0");
      DIR_CQ_63_32_OCC_INT_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ_63_32_OCC_INT_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_CQ_63_32_OCC_INT_STATUS:dont_test") ) DIR_CQ_63_32_OCC_INT_STATUS.set_test_reg(1'b0);
      if (!add_reg( DIR_CQ_63_32_OCC_INT_STATUS )) begin
        `sla_error(get_name(), ("Could not add register DIR_CQ_63_32_OCC_INT_STATUS"));
      end
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT"});
   DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_CQ_31_0_OCC_INT_STATUS";
    `endif
    LDB_CQ_31_0_OCC_INT_STATUS = hqm_system_csr_bridge_LDB_CQ_31_0_OCC_INT_STATUS_reg::type_id::create("LDB_CQ_31_0_OCC_INT_STATUS", this);
    LDB_CQ_31_0_OCC_INT_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 12'h460, 32, 32'b00000000000000000000000000000000);
    LDB_CQ_31_0_OCC_INT_STATUS.set_space_addr("MSG", 12'h460);
    LDB_CQ_31_0_OCC_INT_STATUS.set_space_addr("msg_bus_port", 'h21);
    LDB_CQ_31_0_OCC_INT_STATUS.set_space_addr("MEM-SB",12'h460);
    LDB_CQ_31_0_OCC_INT_STATUS.set_space_addr("MEM", 12'h460);
      LDB_CQ_31_0_OCC_INT_STATUS.set_space("MEM");
      LDB_CQ_31_0_OCC_INT_STATUS.set_msg_opcode("MEM-SB");
      LDB_CQ_31_0_OCC_INT_STATUS.set_fid(4'h0, "MEM-SB");
  	LDB_CQ_31_0_OCC_INT_STATUS.set_bar(4'h2, "MEM-SB");
      LDB_CQ_31_0_OCC_INT_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_CQ_31_0_OCC_INT_STATUS.set_user_attribute("diag_reg", "0");
      LDB_CQ_31_0_OCC_INT_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      LDB_CQ_31_0_OCC_INT_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_CQ_31_0_OCC_INT_STATUS:dont_test") ) LDB_CQ_31_0_OCC_INT_STATUS.set_test_reg(1'b0);
      if (!add_reg( LDB_CQ_31_0_OCC_INT_STATUS )) begin
        `sla_error(get_name(), ("Could not add register LDB_CQ_31_0_OCC_INT_STATUS"));
      end
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT"});
   LDB_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_CQ_63_32_OCC_INT_STATUS";
    `endif
    LDB_CQ_63_32_OCC_INT_STATUS = hqm_system_csr_bridge_LDB_CQ_63_32_OCC_INT_STATUS_reg::type_id::create("LDB_CQ_63_32_OCC_INT_STATUS", this);
    LDB_CQ_63_32_OCC_INT_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 12'h464, 32, 32'b00000000000000000000000000000000);
    LDB_CQ_63_32_OCC_INT_STATUS.set_space_addr("MSG", 12'h464);
    LDB_CQ_63_32_OCC_INT_STATUS.set_space_addr("msg_bus_port", 'h21);
    LDB_CQ_63_32_OCC_INT_STATUS.set_space_addr("MEM-SB",12'h464);
    LDB_CQ_63_32_OCC_INT_STATUS.set_space_addr("MEM", 12'h464);
      LDB_CQ_63_32_OCC_INT_STATUS.set_space("MEM");
      LDB_CQ_63_32_OCC_INT_STATUS.set_msg_opcode("MEM-SB");
      LDB_CQ_63_32_OCC_INT_STATUS.set_fid(4'h0, "MEM-SB");
  	LDB_CQ_63_32_OCC_INT_STATUS.set_bar(4'h2, "MEM-SB");
      LDB_CQ_63_32_OCC_INT_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_CQ_63_32_OCC_INT_STATUS.set_user_attribute("diag_reg", "0");
      LDB_CQ_63_32_OCC_INT_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      LDB_CQ_63_32_OCC_INT_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_CQ_63_32_OCC_INT_STATUS:dont_test") ) LDB_CQ_63_32_OCC_INT_STATUS.set_test_reg(1'b0);
      if (!add_reg( LDB_CQ_63_32_OCC_INT_STATUS )) begin
        `sla_error(get_name(), ("Could not add register LDB_CQ_63_32_OCC_INT_STATUS"));
      end
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT"});
   LDB_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SYS_ALARM_INT_ENABLE";
    `endif
    SYS_ALARM_INT_ENABLE = hqm_system_csr_bridge_SYS_ALARM_INT_ENABLE_reg::type_id::create("SYS_ALARM_INT_ENABLE", this);
    SYS_ALARM_INT_ENABLE.set_cfg(16'h0, 16'h0, 16'h0, 12'h468, 32, 32'b00000000000000000000111111111111);
    SYS_ALARM_INT_ENABLE.set_space_addr("MSG", 12'h468);
    SYS_ALARM_INT_ENABLE.set_space_addr("msg_bus_port", 'h21);
    SYS_ALARM_INT_ENABLE.set_space_addr("MEM-SB",12'h468);
    SYS_ALARM_INT_ENABLE.set_space_addr("MEM", 12'h468);
      SYS_ALARM_INT_ENABLE.set_space("MEM");
      SYS_ALARM_INT_ENABLE.set_msg_opcode("MEM-SB");
      SYS_ALARM_INT_ENABLE.set_fid(4'h0, "MEM-SB");
  	SYS_ALARM_INT_ENABLE.set_bar(4'h2, "MEM-SB");
      SYS_ALARM_INT_ENABLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SYS_ALARM_INT_ENABLE.set_user_attribute("diag_reg", "0");
      SYS_ALARM_INT_ENABLE.set_user_attribute("HqmIsFeatureReg", "0");
      SYS_ALARM_INT_ENABLE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SYS_ALARM_INT_ENABLE:dont_test") ) SYS_ALARM_INT_ENABLE.set_test_reg(1'b0);
      if (!add_reg( SYS_ALARM_INT_ENABLE )) begin
        `sla_error(get_name(), ("Could not add register SYS_ALARM_INT_ENABLE"));
      end
   SYS_ALARM_INT_ENABLE.CQ_ADDR_OVERFLOW_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.CQ_ADDR_OVERFLOW_ERROR"});
   SYS_ALARM_INT_ENABLE.INGRESS_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.INGRESS_PERR"});
   SYS_ALARM_INT_ENABLE.EGRESS_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.EGRESS_PERR"});
   SYS_ALARM_INT_ENABLE.ALARM_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.ALARM_PERR"});
   SYS_ALARM_INT_ENABLE.VF_TO_PF_ISR_PEND_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.VF_TO_PF_ISR_PEND_ERROR"});
   SYS_ALARM_INT_ENABLE.PF_TO_VF_ISR_PEND_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.PF_TO_VF_ISR_PEND_ERROR"});
   SYS_ALARM_INT_ENABLE.SCH_SM_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.SCH_SM_ERROR"});
   SYS_ALARM_INT_ENABLE.FIFO_UNDERFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.FIFO_UNDERFLOW"});
   SYS_ALARM_INT_ENABLE.FIFO_OVERFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.FIFO_OVERFLOW"});
   SYS_ALARM_INT_ENABLE.SCH_WB_PERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.SCH_WB_PERR"});
   SYS_ALARM_INT_ENABLE.ALARM_INT_ERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.ALARM_INT_ERR"});
   SYS_ALARM_INT_ENABLE.RF_IPAR_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.RF_IPAR_ERROR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SYS_ALARM_MB_ECC_INT_ENABLE";
    `endif
    SYS_ALARM_MB_ECC_INT_ENABLE = hqm_system_csr_bridge_SYS_ALARM_MB_ECC_INT_ENABLE_reg::type_id::create("SYS_ALARM_MB_ECC_INT_ENABLE", this);
    SYS_ALARM_MB_ECC_INT_ENABLE.set_cfg(16'h0, 16'h0, 16'h0, 12'h46C, 32, 32'b00000000000000000000000011111111);
    SYS_ALARM_MB_ECC_INT_ENABLE.set_space_addr("MSG", 12'h46C);
    SYS_ALARM_MB_ECC_INT_ENABLE.set_space_addr("msg_bus_port", 'h21);
    SYS_ALARM_MB_ECC_INT_ENABLE.set_space_addr("MEM-SB",12'h46C);
    SYS_ALARM_MB_ECC_INT_ENABLE.set_space_addr("MEM", 12'h46C);
      SYS_ALARM_MB_ECC_INT_ENABLE.set_space("MEM");
      SYS_ALARM_MB_ECC_INT_ENABLE.set_msg_opcode("MEM-SB");
      SYS_ALARM_MB_ECC_INT_ENABLE.set_fid(4'h0, "MEM-SB");
  	SYS_ALARM_MB_ECC_INT_ENABLE.set_bar(4'h2, "MEM-SB");
      SYS_ALARM_MB_ECC_INT_ENABLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SYS_ALARM_MB_ECC_INT_ENABLE.set_user_attribute("diag_reg", "0");
      SYS_ALARM_MB_ECC_INT_ENABLE.set_user_attribute("HqmIsFeatureReg", "0");
      SYS_ALARM_MB_ECC_INT_ENABLE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SYS_ALARM_MB_ECC_INT_ENABLE:dont_test") ) SYS_ALARM_MB_ECC_INT_ENABLE.set_test_reg(1'b0);
      if (!add_reg( SYS_ALARM_MB_ECC_INT_ENABLE )) begin
        `sla_error(get_name(), ("Could not add register SYS_ALARM_MB_ECC_INT_ENABLE"));
      end
   SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_0"});
   SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_1"});
   SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_2"});
   SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_3.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_3"});
   SYS_ALARM_MB_ECC_INT_ENABLE.SYSTEM_CSR_MB_ECC_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SYSTEM_CSR_MB_ECC_ERROR"});
   SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_0"});
   SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_1"});
   SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_2"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SYS_ALARM_SB_ECC_INT_ENABLE";
    `endif
    SYS_ALARM_SB_ECC_INT_ENABLE = hqm_system_csr_bridge_SYS_ALARM_SB_ECC_INT_ENABLE_reg::type_id::create("SYS_ALARM_SB_ECC_INT_ENABLE", this);
    SYS_ALARM_SB_ECC_INT_ENABLE.set_cfg(16'h0, 16'h0, 16'h0, 12'h470, 32, 32'b00000000000000000000000000000000);
    SYS_ALARM_SB_ECC_INT_ENABLE.set_space_addr("MSG", 12'h470);
    SYS_ALARM_SB_ECC_INT_ENABLE.set_space_addr("msg_bus_port", 'h21);
    SYS_ALARM_SB_ECC_INT_ENABLE.set_space_addr("MEM-SB",12'h470);
    SYS_ALARM_SB_ECC_INT_ENABLE.set_space_addr("MEM", 12'h470);
      SYS_ALARM_SB_ECC_INT_ENABLE.set_space("MEM");
      SYS_ALARM_SB_ECC_INT_ENABLE.set_msg_opcode("MEM-SB");
      SYS_ALARM_SB_ECC_INT_ENABLE.set_fid(4'h0, "MEM-SB");
  	SYS_ALARM_SB_ECC_INT_ENABLE.set_bar(4'h2, "MEM-SB");
      SYS_ALARM_SB_ECC_INT_ENABLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SYS_ALARM_SB_ECC_INT_ENABLE.set_user_attribute("diag_reg", "0");
      SYS_ALARM_SB_ECC_INT_ENABLE.set_user_attribute("HqmIsFeatureReg", "0");
      SYS_ALARM_SB_ECC_INT_ENABLE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SYS_ALARM_SB_ECC_INT_ENABLE:dont_test") ) SYS_ALARM_SB_ECC_INT_ENABLE.set_test_reg(1'b0);
      if (!add_reg( SYS_ALARM_SB_ECC_INT_ENABLE )) begin
        `sla_error(get_name(), ("Could not add register SYS_ALARM_SB_ECC_INT_ENABLE"));
      end
   SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_0"});
   SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_1"});
   SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_2"});
   SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_3.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_3"});
   SYS_ALARM_SB_ECC_INT_ENABLE.SYSTEM_CSR_SB_ECC_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SYSTEM_CSR_SB_ECC_ERROR"});
   SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_0"});
   SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_1"});
   SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_2"});
   SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_3.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_3"});
   SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_4.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_4"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_PF_SYND0";
    `endif
    ALARM_PF_SYND0 = hqm_system_csr_bridge_ALARM_PF_SYND0_reg::type_id::create("ALARM_PF_SYND0", this);
    ALARM_PF_SYND0.set_cfg(16'h0, 16'h0, 16'h0, 12'h500, 32, 32'b00000000000000000000000000000000);
    ALARM_PF_SYND0.set_space_addr("MSG", 12'h500);
    ALARM_PF_SYND0.set_space_addr("msg_bus_port", 'h21);
    ALARM_PF_SYND0.set_space_addr("MEM-SB",12'h500);
    ALARM_PF_SYND0.set_space_addr("MEM", 12'h500);
      ALARM_PF_SYND0.set_space("MEM");
      ALARM_PF_SYND0.set_msg_opcode("MEM-SB");
      ALARM_PF_SYND0.set_fid(4'h0, "MEM-SB");
  	ALARM_PF_SYND0.set_bar(4'h2, "MEM-SB");
      ALARM_PF_SYND0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_PF_SYND0.set_user_attribute("diag_reg", "0");
      ALARM_PF_SYND0.set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_PF_SYND0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_PF_SYND0:dont_test") ) ALARM_PF_SYND0.set_test_reg(1'b0);
      if (!add_reg( ALARM_PF_SYND0 )) begin
        `sla_error(get_name(), ("Could not add register ALARM_PF_SYND0"));
      end
   ALARM_PF_SYND0.SYNDROME.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[7:0]"});
   ALARM_PF_SYND0.RTYPE.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[9:8]"});
   ALARM_PF_SYND0.IS_LDB.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[13:13]"});
   ALARM_PF_SYND0.CLS.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[15:14]"});
   ALARM_PF_SYND0.AID.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[21:16]"});
   ALARM_PF_SYND0.UNIT.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[25:22]"});
   ALARM_PF_SYND0.SOURCE.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[29:26]"});
   ALARM_PF_SYND0.MORE.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_more_q"});
   ALARM_PF_SYND0.VALID.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_v_q"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_PF_SYND1";
    `endif
    ALARM_PF_SYND1 = hqm_system_csr_bridge_ALARM_PF_SYND1_reg::type_id::create("ALARM_PF_SYND1", this);
    ALARM_PF_SYND1.set_cfg(16'h0, 16'h0, 16'h0, 12'h504, 32, 32'b00000000000000000000000000000000);
    ALARM_PF_SYND1.set_space_addr("MSG", 12'h504);
    ALARM_PF_SYND1.set_space_addr("msg_bus_port", 'h21);
    ALARM_PF_SYND1.set_space_addr("MEM-SB",12'h504);
    ALARM_PF_SYND1.set_space_addr("MEM", 12'h504);
      ALARM_PF_SYND1.set_space("MEM");
      ALARM_PF_SYND1.set_msg_opcode("MEM-SB");
      ALARM_PF_SYND1.set_fid(4'h0, "MEM-SB");
  	ALARM_PF_SYND1.set_bar(4'h2, "MEM-SB");
      ALARM_PF_SYND1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_PF_SYND1.set_user_attribute("diag_reg", "0");
      ALARM_PF_SYND1.set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_PF_SYND1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_PF_SYND1:dont_test") ) ALARM_PF_SYND1.set_test_reg(1'b0);
      if (!add_reg( ALARM_PF_SYND1 )) begin
        `sla_error(get_name(), ("Could not add register ALARM_PF_SYND1"));
      end
   ALARM_PF_SYND1.DSI.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[45:30]"});
   ALARM_PF_SYND1.QID.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[53:46]"});
   ALARM_PF_SYND1.QTYPE.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[55:54]"});
   ALARM_PF_SYND1.QPRI.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[58:56]"});
   ALARM_PF_SYND1.MSG_TYPE.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[61:59]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_PF_SYND2";
    `endif
    ALARM_PF_SYND2 = hqm_system_csr_bridge_ALARM_PF_SYND2_reg::type_id::create("ALARM_PF_SYND2", this);
    ALARM_PF_SYND2.set_cfg(16'h0, 16'h0, 16'h0, 12'h508, 32, 32'b00000000000000000000000000000000);
    ALARM_PF_SYND2.set_space_addr("MSG", 12'h508);
    ALARM_PF_SYND2.set_space_addr("msg_bus_port", 'h21);
    ALARM_PF_SYND2.set_space_addr("MEM-SB",12'h508);
    ALARM_PF_SYND2.set_space_addr("MEM", 12'h508);
      ALARM_PF_SYND2.set_space("MEM");
      ALARM_PF_SYND2.set_msg_opcode("MEM-SB");
      ALARM_PF_SYND2.set_fid(4'h0, "MEM-SB");
  	ALARM_PF_SYND2.set_bar(4'h2, "MEM-SB");
      ALARM_PF_SYND2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_PF_SYND2.set_user_attribute("diag_reg", "0");
      ALARM_PF_SYND2.set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_PF_SYND2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_PF_SYND2:dont_test") ) ALARM_PF_SYND2.set_test_reg(1'b0);
      if (!add_reg( ALARM_PF_SYND2 )) begin
        `sla_error(get_name(), ("Could not add register ALARM_PF_SYND2"));
      end
   ALARM_PF_SYND2.LOCK_ID.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[77:62]"});
   ALARM_PF_SYND2.MEAS.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[78:78]"});
   ALARM_PF_SYND2.DEBUG.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[85:79]"});
   ALARM_PF_SYND2.CQ_POP.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[86:86]"});
   ALARM_PF_SYND2.QE_UHL.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[87:87]"});
   ALARM_PF_SYND2.QE_ORSP.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[88:88]"});
   ALARM_PF_SYND2.QE_VALID.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[89:89]"});
   ALARM_PF_SYND2.CQ_INT_REARM.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[90:90]"});
   ALARM_PF_SYND2.DSI_ERROR.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[91:91]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_HW_SYND";
    `endif
    ALARM_HW_SYND = hqm_system_csr_bridge_ALARM_HW_SYND_reg::type_id::create("ALARM_HW_SYND", this);
    ALARM_HW_SYND.set_cfg(16'h0, 16'h0, 16'h0, 12'h50C, 32, 32'b00000000000000000000000000000000);
    ALARM_HW_SYND.set_space_addr("MSG", 12'h50C);
    ALARM_HW_SYND.set_space_addr("msg_bus_port", 'h21);
    ALARM_HW_SYND.set_space_addr("MEM-SB",12'h50C);
    ALARM_HW_SYND.set_space_addr("MEM", 12'h50C);
      ALARM_HW_SYND.set_space("MEM");
      ALARM_HW_SYND.set_msg_opcode("MEM-SB");
      ALARM_HW_SYND.set_fid(4'h0, "MEM-SB");
  	ALARM_HW_SYND.set_bar(4'h2, "MEM-SB");
      ALARM_HW_SYND.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_HW_SYND.set_user_attribute("diag_reg", "0");
      ALARM_HW_SYND.set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_HW_SYND.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_HW_SYND:dont_test") ) ALARM_HW_SYND.set_test_reg(1'b0);
      if (!add_reg( ALARM_HW_SYND )) begin
        `sla_error(get_name(), ("Could not add register ALARM_HW_SYND"));
      end
   ALARM_HW_SYND.SYNDROME.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[7:0]"});
   ALARM_HW_SYND.RTYPE.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[9:8]"});
   ALARM_HW_SYND.ALARM.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[10:10]"});
   ALARM_HW_SYND.CWD.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[11:11]"});
   ALARM_HW_SYND.VF_PF_MB.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[12:12]"});
   ALARM_HW_SYND.RSVD0.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[13:13]"});
   ALARM_HW_SYND.CLS.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[15:14]"});
   ALARM_HW_SYND.AID.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[21:16]"});
   ALARM_HW_SYND.UNIT.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[25:22]"});
   ALARM_HW_SYND.SOURCE.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[29:26]"});
   ALARM_HW_SYND.MORE.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_more_q"});
   ALARM_HW_SYND.VALID.set_paths({"i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_v_q"});

for (int i=0, int cnt=0; i<1024; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("VF_LDB_VPP_V[%0d]",i);
    `endif
    VF_LDB_VPP_V[i] = hqm_system_csr_bridge_VF_LDB_VPP_V_reg::type_id::create($psprintf("VF_LDB_VPP_V[%0d]",i), this);
    VF_LDB_VPP_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F00 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    VF_LDB_VPP_V[i].set_space_addr("MSG",  (16'h0F00 + (i*4096)) );
    VF_LDB_VPP_V[i].set_space_addr("msg_bus_port", 'h21);
    VF_LDB_VPP_V[i].set_space_addr("MEM-SB", (12'hF00 + (i*4096)) );
    VF_LDB_VPP_V[i].set_space_addr("MEM",  (16'h0F00 + (i*4096)) );
      VF_LDB_VPP_V[i].set_space("MEM");
      VF_LDB_VPP_V[i].set_msg_opcode("MEM-SB");
      VF_LDB_VPP_V[i].set_fid(4'h0, "MEM-SB");
  	VF_LDB_VPP_V[i].set_bar(4'h2, "MEM-SB");
      VF_LDB_VPP_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VF_LDB_VPP_V[i].set_user_attribute("diag_reg", "0");
      VF_LDB_VPP_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      VF_LDB_VPP_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("VF_LDB_VPP_V[%0d]:dont_test",i)) ) VF_LDB_VPP_V[i].set_test_reg(1'b0);
      if (!add_reg( VF_LDB_VPP_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register VF_LDB_VPP_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<1024; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("VF_LDB_VPP2PP[%0d]",i);
    `endif
    VF_LDB_VPP2PP[i] = hqm_system_csr_bridge_VF_LDB_VPP2PP_reg::type_id::create($psprintf("VF_LDB_VPP2PP[%0d]",i), this);
    VF_LDB_VPP2PP[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F04 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    VF_LDB_VPP2PP[i].set_space_addr("MSG",  (16'h0F04 + (i*4096)) );
    VF_LDB_VPP2PP[i].set_space_addr("msg_bus_port", 'h21);
    VF_LDB_VPP2PP[i].set_space_addr("MEM-SB", (12'hF04 + (i*4096)) );
    VF_LDB_VPP2PP[i].set_space_addr("MEM",  (16'h0F04 + (i*4096)) );
      VF_LDB_VPP2PP[i].set_space("MEM");
      VF_LDB_VPP2PP[i].set_msg_opcode("MEM-SB");
      VF_LDB_VPP2PP[i].set_fid(4'h0, "MEM-SB");
  	VF_LDB_VPP2PP[i].set_bar(4'h2, "MEM-SB");
      VF_LDB_VPP2PP[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VF_LDB_VPP2PP[i].set_user_attribute("diag_reg", "0");
      VF_LDB_VPP2PP[i].set_user_attribute("HqmIsFeatureReg", "0");
      VF_LDB_VPP2PP[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("VF_LDB_VPP2PP[%0d]:dont_test",i)) ) VF_LDB_VPP2PP[i].set_test_reg(1'b0);
      if (!add_reg( VF_LDB_VPP2PP[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register VF_LDB_VPP2PP[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<1024; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("VF_DIR_VPP_V[%0d]",i);
    `endif
    VF_DIR_VPP_V[i] = hqm_system_csr_bridge_VF_DIR_VPP_V_reg::type_id::create($psprintf("VF_DIR_VPP_V[%0d]",i), this);
    VF_DIR_VPP_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F08 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    VF_DIR_VPP_V[i].set_space_addr("MSG",  (16'h0F08 + (i*4096)) );
    VF_DIR_VPP_V[i].set_space_addr("msg_bus_port", 'h21);
    VF_DIR_VPP_V[i].set_space_addr("MEM-SB", (12'hF08 + (i*4096)) );
    VF_DIR_VPP_V[i].set_space_addr("MEM",  (16'h0F08 + (i*4096)) );
      VF_DIR_VPP_V[i].set_space("MEM");
      VF_DIR_VPP_V[i].set_msg_opcode("MEM-SB");
      VF_DIR_VPP_V[i].set_fid(4'h0, "MEM-SB");
  	VF_DIR_VPP_V[i].set_bar(4'h2, "MEM-SB");
      VF_DIR_VPP_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VF_DIR_VPP_V[i].set_user_attribute("diag_reg", "0");
      VF_DIR_VPP_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      VF_DIR_VPP_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("VF_DIR_VPP_V[%0d]:dont_test",i)) ) VF_DIR_VPP_V[i].set_test_reg(1'b0);
      if (!add_reg( VF_DIR_VPP_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register VF_DIR_VPP_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<1024; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("VF_DIR_VPP2PP[%0d]",i);
    `endif
    VF_DIR_VPP2PP[i] = hqm_system_csr_bridge_VF_DIR_VPP2PP_reg::type_id::create($psprintf("VF_DIR_VPP2PP[%0d]",i), this);
    VF_DIR_VPP2PP[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F0C + (i *4096)), 32, 32'b00000000000000000000000000000000);
    VF_DIR_VPP2PP[i].set_space_addr("MSG",  (16'h0F0C + (i*4096)) );
    VF_DIR_VPP2PP[i].set_space_addr("msg_bus_port", 'h21);
    VF_DIR_VPP2PP[i].set_space_addr("MEM-SB", (12'hF0C + (i*4096)) );
    VF_DIR_VPP2PP[i].set_space_addr("MEM",  (16'h0F0C + (i*4096)) );
      VF_DIR_VPP2PP[i].set_space("MEM");
      VF_DIR_VPP2PP[i].set_msg_opcode("MEM-SB");
      VF_DIR_VPP2PP[i].set_fid(4'h0, "MEM-SB");
  	VF_DIR_VPP2PP[i].set_bar(4'h2, "MEM-SB");
      VF_DIR_VPP2PP[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VF_DIR_VPP2PP[i].set_user_attribute("diag_reg", "0");
      VF_DIR_VPP2PP[i].set_user_attribute("HqmIsFeatureReg", "0");
      VF_DIR_VPP2PP[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("VF_DIR_VPP2PP[%0d]:dont_test",i)) ) VF_DIR_VPP2PP[i].set_test_reg(1'b0);
      if (!add_reg( VF_DIR_VPP2PP[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register VF_DIR_VPP2PP[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<512; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("VF_LDB_VQID_V[%0d]",i);
    `endif
    VF_LDB_VQID_V[i] = hqm_system_csr_bridge_VF_LDB_VQID_V_reg::type_id::create($psprintf("VF_LDB_VQID_V[%0d]",i), this);
    VF_LDB_VQID_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F10 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    VF_LDB_VQID_V[i].set_space_addr("MSG",  (16'h0F10 + (i*4096)) );
    VF_LDB_VQID_V[i].set_space_addr("msg_bus_port", 'h21);
    VF_LDB_VQID_V[i].set_space_addr("MEM-SB", (12'hF10 + (i*4096)) );
    VF_LDB_VQID_V[i].set_space_addr("MEM",  (16'h0F10 + (i*4096)) );
      VF_LDB_VQID_V[i].set_space("MEM");
      VF_LDB_VQID_V[i].set_msg_opcode("MEM-SB");
      VF_LDB_VQID_V[i].set_fid(4'h0, "MEM-SB");
  	VF_LDB_VQID_V[i].set_bar(4'h2, "MEM-SB");
      VF_LDB_VQID_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VF_LDB_VQID_V[i].set_user_attribute("diag_reg", "0");
      VF_LDB_VQID_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      VF_LDB_VQID_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("VF_LDB_VQID_V[%0d]:dont_test",i)) ) VF_LDB_VQID_V[i].set_test_reg(1'b0);
      if (!add_reg( VF_LDB_VQID_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register VF_LDB_VQID_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<512; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("VF_LDB_VQID2QID[%0d]",i);
    `endif
    VF_LDB_VQID2QID[i] = hqm_system_csr_bridge_VF_LDB_VQID2QID_reg::type_id::create($psprintf("VF_LDB_VQID2QID[%0d]",i), this);
    VF_LDB_VQID2QID[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F14 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    VF_LDB_VQID2QID[i].set_space_addr("MSG",  (16'h0F14 + (i*4096)) );
    VF_LDB_VQID2QID[i].set_space_addr("msg_bus_port", 'h21);
    VF_LDB_VQID2QID[i].set_space_addr("MEM-SB", (12'hF14 + (i*4096)) );
    VF_LDB_VQID2QID[i].set_space_addr("MEM",  (16'h0F14 + (i*4096)) );
      VF_LDB_VQID2QID[i].set_space("MEM");
      VF_LDB_VQID2QID[i].set_msg_opcode("MEM-SB");
      VF_LDB_VQID2QID[i].set_fid(4'h0, "MEM-SB");
  	VF_LDB_VQID2QID[i].set_bar(4'h2, "MEM-SB");
      VF_LDB_VQID2QID[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VF_LDB_VQID2QID[i].set_user_attribute("diag_reg", "0");
      VF_LDB_VQID2QID[i].set_user_attribute("HqmIsFeatureReg", "0");
      VF_LDB_VQID2QID[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("VF_LDB_VQID2QID[%0d]:dont_test",i)) ) VF_LDB_VQID2QID[i].set_test_reg(1'b0);
      if (!add_reg( VF_LDB_VQID2QID[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register VF_LDB_VQID2QID[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_QID2VQID[%0d]",i);
    `endif
    LDB_QID2VQID[i] = hqm_system_csr_bridge_LDB_QID2VQID_reg::type_id::create($psprintf("LDB_QID2VQID[%0d]",i), this);
    LDB_QID2VQID[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F18 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_QID2VQID[i].set_space_addr("MSG",  (16'h0F18 + (i*4096)) );
    LDB_QID2VQID[i].set_space_addr("msg_bus_port", 'h21);
    LDB_QID2VQID[i].set_space_addr("MEM-SB", (12'hF18 + (i*4096)) );
    LDB_QID2VQID[i].set_space_addr("MEM",  (16'h0F18 + (i*4096)) );
      LDB_QID2VQID[i].set_space("MEM");
      LDB_QID2VQID[i].set_msg_opcode("MEM-SB");
      LDB_QID2VQID[i].set_fid(4'h0, "MEM-SB");
  	LDB_QID2VQID[i].set_bar(4'h2, "MEM-SB");
      LDB_QID2VQID[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_QID2VQID[i].set_user_attribute("diag_reg", "0");
      LDB_QID2VQID[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_QID2VQID[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_QID2VQID[%0d]:dont_test",i)) ) LDB_QID2VQID[i].set_test_reg(1'b0);
      if (!add_reg( LDB_QID2VQID[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_QID2VQID[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<1024; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("VF_DIR_VQID_V[%0d]",i);
    `endif
    VF_DIR_VQID_V[i] = hqm_system_csr_bridge_VF_DIR_VQID_V_reg::type_id::create($psprintf("VF_DIR_VQID_V[%0d]",i), this);
    VF_DIR_VQID_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F1C + (i *4096)), 32, 32'b00000000000000000000000000000000);
    VF_DIR_VQID_V[i].set_space_addr("MSG",  (16'h0F1C + (i*4096)) );
    VF_DIR_VQID_V[i].set_space_addr("msg_bus_port", 'h21);
    VF_DIR_VQID_V[i].set_space_addr("MEM-SB", (12'hF1C + (i*4096)) );
    VF_DIR_VQID_V[i].set_space_addr("MEM",  (16'h0F1C + (i*4096)) );
      VF_DIR_VQID_V[i].set_space("MEM");
      VF_DIR_VQID_V[i].set_msg_opcode("MEM-SB");
      VF_DIR_VQID_V[i].set_fid(4'h0, "MEM-SB");
  	VF_DIR_VQID_V[i].set_bar(4'h2, "MEM-SB");
      VF_DIR_VQID_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VF_DIR_VQID_V[i].set_user_attribute("diag_reg", "0");
      VF_DIR_VQID_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      VF_DIR_VQID_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("VF_DIR_VQID_V[%0d]:dont_test",i)) ) VF_DIR_VQID_V[i].set_test_reg(1'b0);
      if (!add_reg( VF_DIR_VQID_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register VF_DIR_VQID_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<1024; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("VF_DIR_VQID2QID[%0d]",i);
    `endif
    VF_DIR_VQID2QID[i] = hqm_system_csr_bridge_VF_DIR_VQID2QID_reg::type_id::create($psprintf("VF_DIR_VQID2QID[%0d]",i), this);
    VF_DIR_VQID2QID[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F20 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    VF_DIR_VQID2QID[i].set_space_addr("MSG",  (16'h0F20 + (i*4096)) );
    VF_DIR_VQID2QID[i].set_space_addr("msg_bus_port", 'h21);
    VF_DIR_VQID2QID[i].set_space_addr("MEM-SB", (12'hF20 + (i*4096)) );
    VF_DIR_VQID2QID[i].set_space_addr("MEM",  (16'h0F20 + (i*4096)) );
      VF_DIR_VQID2QID[i].set_space("MEM");
      VF_DIR_VQID2QID[i].set_msg_opcode("MEM-SB");
      VF_DIR_VQID2QID[i].set_fid(4'h0, "MEM-SB");
  	VF_DIR_VQID2QID[i].set_bar(4'h2, "MEM-SB");
      VF_DIR_VQID2QID[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VF_DIR_VQID2QID[i].set_user_attribute("diag_reg", "0");
      VF_DIR_VQID2QID[i].set_user_attribute("HqmIsFeatureReg", "0");
      VF_DIR_VQID2QID[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("VF_DIR_VQID2QID[%0d]:dont_test",i)) ) VF_DIR_VQID2QID[i].set_test_reg(1'b0);
      if (!add_reg( VF_DIR_VQID2QID[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register VF_DIR_VQID2QID[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<1024; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_VASQID_V[%0d]",i);
    `endif
    LDB_VASQID_V[i] = hqm_system_csr_bridge_LDB_VASQID_V_reg::type_id::create($psprintf("LDB_VASQID_V[%0d]",i), this);
    LDB_VASQID_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F24 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_VASQID_V[i].set_space_addr("MSG",  (16'h0F24 + (i*4096)) );
    LDB_VASQID_V[i].set_space_addr("msg_bus_port", 'h21);
    LDB_VASQID_V[i].set_space_addr("MEM-SB", (12'hF24 + (i*4096)) );
    LDB_VASQID_V[i].set_space_addr("MEM",  (16'h0F24 + (i*4096)) );
      LDB_VASQID_V[i].set_space("MEM");
      LDB_VASQID_V[i].set_msg_opcode("MEM-SB");
      LDB_VASQID_V[i].set_fid(4'h0, "MEM-SB");
  	LDB_VASQID_V[i].set_bar(4'h2, "MEM-SB");
      LDB_VASQID_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_VASQID_V[i].set_user_attribute("diag_reg", "0");
      LDB_VASQID_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_VASQID_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_VASQID_V[%0d]:dont_test",i)) ) LDB_VASQID_V[i].set_test_reg(1'b0);
      if (!add_reg( LDB_VASQID_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_VASQID_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_VASQID_V[%0d]",i);
    `endif
    DIR_VASQID_V[i] = hqm_system_csr_bridge_DIR_VASQID_V_reg::type_id::create($psprintf("DIR_VASQID_V[%0d]",i), this);
    DIR_VASQID_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F28 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_VASQID_V[i].set_space_addr("MSG",  (16'h0F28 + (i*4096)) );
    DIR_VASQID_V[i].set_space_addr("msg_bus_port", 'h21);
    DIR_VASQID_V[i].set_space_addr("MEM-SB", (12'hF28 + (i*4096)) );
    DIR_VASQID_V[i].set_space_addr("MEM",  (16'h0F28 + (i*4096)) );
      DIR_VASQID_V[i].set_space("MEM");
      DIR_VASQID_V[i].set_msg_opcode("MEM-SB");
      DIR_VASQID_V[i].set_fid(4'h0, "MEM-SB");
  	DIR_VASQID_V[i].set_bar(4'h2, "MEM-SB");
      DIR_VASQID_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_VASQID_V[i].set_user_attribute("diag_reg", "0");
      DIR_VASQID_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_VASQID_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_VASQID_V[%0d]:dont_test",i)) ) DIR_VASQID_V[i].set_test_reg(1'b0);
      if (!add_reg( DIR_VASQID_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_VASQID_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<16; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("ALARM_VF_SYND0[%0d]",i);
    `endif
    ALARM_VF_SYND0[i] = hqm_system_csr_bridge_ALARM_VF_SYND0_reg::type_id::create($psprintf("ALARM_VF_SYND0[%0d]",i), this);
    ALARM_VF_SYND0[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F40 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    ALARM_VF_SYND0[i].set_space_addr("MSG",  (16'h0F40 + (i*4096)) );
    ALARM_VF_SYND0[i].set_space_addr("msg_bus_port", 'h21);
    ALARM_VF_SYND0[i].set_space_addr("MEM-SB", (12'hF40 + (i*4096)) );
    ALARM_VF_SYND0[i].set_space_addr("MEM",  (16'h0F40 + (i*4096)) );
      ALARM_VF_SYND0[i].set_space("MEM");
      ALARM_VF_SYND0[i].set_msg_opcode("MEM-SB");
      ALARM_VF_SYND0[i].set_fid(4'h0, "MEM-SB");
  	ALARM_VF_SYND0[i].set_bar(4'h2, "MEM-SB");
      ALARM_VF_SYND0[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_VF_SYND0[i].set_user_attribute("diag_reg", "0");
      ALARM_VF_SYND0[i].set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_VF_SYND0[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("ALARM_VF_SYND0[%0d]:dont_test",i)) ) ALARM_VF_SYND0[i].set_test_reg(1'b0);
      if (!add_reg( ALARM_VF_SYND0[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register ALARM_VF_SYND0[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<16; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("ALARM_VF_SYND1[%0d]",i);
    `endif
    ALARM_VF_SYND1[i] = hqm_system_csr_bridge_ALARM_VF_SYND1_reg::type_id::create($psprintf("ALARM_VF_SYND1[%0d]",i), this);
    ALARM_VF_SYND1[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F44 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    ALARM_VF_SYND1[i].set_space_addr("MSG",  (16'h0F44 + (i*4096)) );
    ALARM_VF_SYND1[i].set_space_addr("msg_bus_port", 'h21);
    ALARM_VF_SYND1[i].set_space_addr("MEM-SB", (12'hF44 + (i*4096)) );
    ALARM_VF_SYND1[i].set_space_addr("MEM",  (16'h0F44 + (i*4096)) );
      ALARM_VF_SYND1[i].set_space("MEM");
      ALARM_VF_SYND1[i].set_msg_opcode("MEM-SB");
      ALARM_VF_SYND1[i].set_fid(4'h0, "MEM-SB");
  	ALARM_VF_SYND1[i].set_bar(4'h2, "MEM-SB");
      ALARM_VF_SYND1[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_VF_SYND1[i].set_user_attribute("diag_reg", "0");
      ALARM_VF_SYND1[i].set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_VF_SYND1[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("ALARM_VF_SYND1[%0d]:dont_test",i)) ) ALARM_VF_SYND1[i].set_test_reg(1'b0);
      if (!add_reg( ALARM_VF_SYND1[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register ALARM_VF_SYND1[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<16; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("ALARM_VF_SYND2[%0d]",i);
    `endif
    ALARM_VF_SYND2[i] = hqm_system_csr_bridge_ALARM_VF_SYND2_reg::type_id::create($psprintf("ALARM_VF_SYND2[%0d]",i), this);
    ALARM_VF_SYND2[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F48 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    ALARM_VF_SYND2[i].set_space_addr("MSG",  (16'h0F48 + (i*4096)) );
    ALARM_VF_SYND2[i].set_space_addr("msg_bus_port", 'h21);
    ALARM_VF_SYND2[i].set_space_addr("MEM-SB", (12'hF48 + (i*4096)) );
    ALARM_VF_SYND2[i].set_space_addr("MEM",  (16'h0F48 + (i*4096)) );
      ALARM_VF_SYND2[i].set_space("MEM");
      ALARM_VF_SYND2[i].set_msg_opcode("MEM-SB");
      ALARM_VF_SYND2[i].set_fid(4'h0, "MEM-SB");
  	ALARM_VF_SYND2[i].set_bar(4'h2, "MEM-SB");
      ALARM_VF_SYND2[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_VF_SYND2[i].set_user_attribute("diag_reg", "0");
      ALARM_VF_SYND2[i].set_user_attribute("HqmIsFeatureReg", "0");
      ALARM_VF_SYND2[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("ALARM_VF_SYND2[%0d]:dont_test",i)) ) ALARM_VF_SYND2[i].set_test_reg(1'b0);
      if (!add_reg( ALARM_VF_SYND2[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register ALARM_VF_SYND2[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_QID_V[%0d]",i);
    `endif
    LDB_QID_V[i] = hqm_system_csr_bridge_LDB_QID_V_reg::type_id::create($psprintf("LDB_QID_V[%0d]",i), this);
    LDB_QID_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F50 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_QID_V[i].set_space_addr("MSG",  (16'h0F50 + (i*4096)) );
    LDB_QID_V[i].set_space_addr("msg_bus_port", 'h21);
    LDB_QID_V[i].set_space_addr("MEM-SB", (12'hF50 + (i*4096)) );
    LDB_QID_V[i].set_space_addr("MEM",  (16'h0F50 + (i*4096)) );
      LDB_QID_V[i].set_space("MEM");
      LDB_QID_V[i].set_msg_opcode("MEM-SB");
      LDB_QID_V[i].set_fid(4'h0, "MEM-SB");
  	LDB_QID_V[i].set_bar(4'h2, "MEM-SB");
      LDB_QID_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_QID_V[i].set_user_attribute("diag_reg", "0");
      LDB_QID_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_QID_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_QID_V[%0d]:dont_test",i)) ) LDB_QID_V[i].set_test_reg(1'b0);
      if (!add_reg( LDB_QID_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_QID_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_QID_ITS[%0d]",i);
    `endif
    LDB_QID_ITS[i] = hqm_system_csr_bridge_LDB_QID_ITS_reg::type_id::create($psprintf("LDB_QID_ITS[%0d]",i), this);
    LDB_QID_ITS[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F54 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_QID_ITS[i].set_space_addr("MSG",  (16'h0F54 + (i*4096)) );
    LDB_QID_ITS[i].set_space_addr("msg_bus_port", 'h21);
    LDB_QID_ITS[i].set_space_addr("MEM-SB", (12'hF54 + (i*4096)) );
    LDB_QID_ITS[i].set_space_addr("MEM",  (16'h0F54 + (i*4096)) );
      LDB_QID_ITS[i].set_space("MEM");
      LDB_QID_ITS[i].set_msg_opcode("MEM-SB");
      LDB_QID_ITS[i].set_fid(4'h0, "MEM-SB");
  	LDB_QID_ITS[i].set_bar(4'h2, "MEM-SB");
      LDB_QID_ITS[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_QID_ITS[i].set_user_attribute("diag_reg", "0");
      LDB_QID_ITS[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_QID_ITS[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_QID_ITS[%0d]:dont_test",i)) ) LDB_QID_ITS[i].set_test_reg(1'b0);
      if (!add_reg( LDB_QID_ITS[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_QID_ITS[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_QID_CFG_V[%0d]",i);
    `endif
    LDB_QID_CFG_V[i] = hqm_system_csr_bridge_LDB_QID_CFG_V_reg::type_id::create($psprintf("LDB_QID_CFG_V[%0d]",i), this);
    LDB_QID_CFG_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F58 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_QID_CFG_V[i].set_space_addr("MSG",  (16'h0F58 + (i*4096)) );
    LDB_QID_CFG_V[i].set_space_addr("msg_bus_port", 'h21);
    LDB_QID_CFG_V[i].set_space_addr("MEM-SB", (12'hF58 + (i*4096)) );
    LDB_QID_CFG_V[i].set_space_addr("MEM",  (16'h0F58 + (i*4096)) );
      LDB_QID_CFG_V[i].set_space("MEM");
      LDB_QID_CFG_V[i].set_msg_opcode("MEM-SB");
      LDB_QID_CFG_V[i].set_fid(4'h0, "MEM-SB");
  	LDB_QID_CFG_V[i].set_bar(4'h2, "MEM-SB");
      LDB_QID_CFG_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_QID_CFG_V[i].set_user_attribute("diag_reg", "0");
      LDB_QID_CFG_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_QID_CFG_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_QID_CFG_V[%0d]:dont_test",i)) ) LDB_QID_CFG_V[i].set_test_reg(1'b0);
      if (!add_reg( LDB_QID_CFG_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_QID_CFG_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_QID_V[%0d]",i);
    `endif
    DIR_QID_V[i] = hqm_system_csr_bridge_DIR_QID_V_reg::type_id::create($psprintf("DIR_QID_V[%0d]",i), this);
    DIR_QID_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F60 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_QID_V[i].set_space_addr("MSG",  (16'h0F60 + (i*4096)) );
    DIR_QID_V[i].set_space_addr("msg_bus_port", 'h21);
    DIR_QID_V[i].set_space_addr("MEM-SB", (12'hF60 + (i*4096)) );
    DIR_QID_V[i].set_space_addr("MEM",  (16'h0F60 + (i*4096)) );
      DIR_QID_V[i].set_space("MEM");
      DIR_QID_V[i].set_msg_opcode("MEM-SB");
      DIR_QID_V[i].set_fid(4'h0, "MEM-SB");
  	DIR_QID_V[i].set_bar(4'h2, "MEM-SB");
      DIR_QID_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_QID_V[i].set_user_attribute("diag_reg", "0");
      DIR_QID_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_QID_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_QID_V[%0d]:dont_test",i)) ) DIR_QID_V[i].set_test_reg(1'b0);
      if (!add_reg( DIR_QID_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_QID_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_QID_ITS[%0d]",i);
    `endif
    DIR_QID_ITS[i] = hqm_system_csr_bridge_DIR_QID_ITS_reg::type_id::create($psprintf("DIR_QID_ITS[%0d]",i), this);
    DIR_QID_ITS[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F64 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_QID_ITS[i].set_space_addr("MSG",  (16'h0F64 + (i*4096)) );
    DIR_QID_ITS[i].set_space_addr("msg_bus_port", 'h21);
    DIR_QID_ITS[i].set_space_addr("MEM-SB", (12'hF64 + (i*4096)) );
    DIR_QID_ITS[i].set_space_addr("MEM",  (16'h0F64 + (i*4096)) );
      DIR_QID_ITS[i].set_space("MEM");
      DIR_QID_ITS[i].set_msg_opcode("MEM-SB");
      DIR_QID_ITS[i].set_fid(4'h0, "MEM-SB");
  	DIR_QID_ITS[i].set_bar(4'h2, "MEM-SB");
      DIR_QID_ITS[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_QID_ITS[i].set_user_attribute("diag_reg", "0");
      DIR_QID_ITS[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_QID_ITS[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_QID_ITS[%0d]:dont_test",i)) ) DIR_QID_ITS[i].set_test_reg(1'b0);
      if (!add_reg( DIR_QID_ITS[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_QID_ITS[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_CQ_ADDR_L[%0d]",i);
    `endif
    LDB_CQ_ADDR_L[i] = hqm_system_csr_bridge_LDB_CQ_ADDR_L_reg::type_id::create($psprintf("LDB_CQ_ADDR_L[%0d]",i), this);
    LDB_CQ_ADDR_L[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F80 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_CQ_ADDR_L[i].set_space_addr("MSG",  (16'h0F80 + (i*4096)) );
    LDB_CQ_ADDR_L[i].set_space_addr("msg_bus_port", 'h21);
    LDB_CQ_ADDR_L[i].set_space_addr("MEM-SB", (12'hF80 + (i*4096)) );
    LDB_CQ_ADDR_L[i].set_space_addr("MEM",  (16'h0F80 + (i*4096)) );
      LDB_CQ_ADDR_L[i].set_space("MEM");
      LDB_CQ_ADDR_L[i].set_msg_opcode("MEM-SB");
      LDB_CQ_ADDR_L[i].set_fid(4'h0, "MEM-SB");
  	LDB_CQ_ADDR_L[i].set_bar(4'h2, "MEM-SB");
      LDB_CQ_ADDR_L[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_CQ_ADDR_L[i].set_user_attribute("diag_reg", "0");
      LDB_CQ_ADDR_L[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_CQ_ADDR_L[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_CQ_ADDR_L[%0d]:dont_test",i)) ) LDB_CQ_ADDR_L[i].set_test_reg(1'b0);
      if (!add_reg( LDB_CQ_ADDR_L[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_CQ_ADDR_L[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_CQ_ADDR_U[%0d]",i);
    `endif
    LDB_CQ_ADDR_U[i] = hqm_system_csr_bridge_LDB_CQ_ADDR_U_reg::type_id::create($psprintf("LDB_CQ_ADDR_U[%0d]",i), this);
    LDB_CQ_ADDR_U[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F84 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_CQ_ADDR_U[i].set_space_addr("MSG",  (16'h0F84 + (i*4096)) );
    LDB_CQ_ADDR_U[i].set_space_addr("msg_bus_port", 'h21);
    LDB_CQ_ADDR_U[i].set_space_addr("MEM-SB", (12'hF84 + (i*4096)) );
    LDB_CQ_ADDR_U[i].set_space_addr("MEM",  (16'h0F84 + (i*4096)) );
      LDB_CQ_ADDR_U[i].set_space("MEM");
      LDB_CQ_ADDR_U[i].set_msg_opcode("MEM-SB");
      LDB_CQ_ADDR_U[i].set_fid(4'h0, "MEM-SB");
  	LDB_CQ_ADDR_U[i].set_bar(4'h2, "MEM-SB");
      LDB_CQ_ADDR_U[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_CQ_ADDR_U[i].set_user_attribute("diag_reg", "0");
      LDB_CQ_ADDR_U[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_CQ_ADDR_U[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_CQ_ADDR_U[%0d]:dont_test",i)) ) LDB_CQ_ADDR_U[i].set_test_reg(1'b0);
      if (!add_reg( LDB_CQ_ADDR_U[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_CQ_ADDR_U[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_PP2VAS[%0d]",i);
    `endif
    LDB_PP2VAS[i] = hqm_system_csr_bridge_LDB_PP2VAS_reg::type_id::create($psprintf("LDB_PP2VAS[%0d]",i), this);
    LDB_PP2VAS[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F88 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_PP2VAS[i].set_space_addr("MSG",  (16'h0F88 + (i*4096)) );
    LDB_PP2VAS[i].set_space_addr("msg_bus_port", 'h21);
    LDB_PP2VAS[i].set_space_addr("MEM-SB", (12'hF88 + (i*4096)) );
    LDB_PP2VAS[i].set_space_addr("MEM",  (16'h0F88 + (i*4096)) );
      LDB_PP2VAS[i].set_space("MEM");
      LDB_PP2VAS[i].set_msg_opcode("MEM-SB");
      LDB_PP2VAS[i].set_fid(4'h0, "MEM-SB");
  	LDB_PP2VAS[i].set_bar(4'h2, "MEM-SB");
      LDB_PP2VAS[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP2VAS[i].set_user_attribute("diag_reg", "0");
      LDB_PP2VAS[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP2VAS[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_PP2VAS[%0d]:dont_test",i)) ) LDB_PP2VAS[i].set_test_reg(1'b0);
      if (!add_reg( LDB_PP2VAS[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_PP2VAS[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[0]";
    `endif
    HQM_LDB_PP2VDEV[0] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[0]", this);
    HQM_LDB_PP2VDEV[0].set_cfg(16'h0, 16'h0, 16'h0, 16'h0F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[0].set_space_addr("MSG", 16'h0F8C);
    HQM_LDB_PP2VDEV[0].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[0].set_space_addr("MEM-SB",12'hF8C);
    HQM_LDB_PP2VDEV[0].set_space_addr("MEM", 16'h0F8C);
      HQM_LDB_PP2VDEV[0].set_space("MEM");
      HQM_LDB_PP2VDEV[0].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[0].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[0].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[0].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[0].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[0]:dont_test") ) HQM_LDB_PP2VDEV[0].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[0] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[0]"));
      end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_PP_V[%0d]",i);
    `endif
    LDB_PP_V[i] = hqm_system_csr_bridge_LDB_PP_V_reg::type_id::create($psprintf("LDB_PP_V[%0d]",i), this);
    LDB_PP_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F90 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_PP_V[i].set_space_addr("MSG",  (16'h0F90 + (i*4096)) );
    LDB_PP_V[i].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_V[i].set_space_addr("MEM-SB", (12'hF90 + (i*4096)) );
    LDB_PP_V[i].set_space_addr("MEM",  (16'h0F90 + (i*4096)) );
      LDB_PP_V[i].set_space("MEM");
      LDB_PP_V[i].set_msg_opcode("MEM-SB");
      LDB_PP_V[i].set_fid(4'h0, "MEM-SB");
  	LDB_PP_V[i].set_bar(4'h2, "MEM-SB");
      LDB_PP_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_V[i].set_user_attribute("diag_reg", "0");
      LDB_PP_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_PP_V[%0d]:dont_test",i)) ) LDB_PP_V[i].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_PP_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_CQ2VF_PF_RO[%0d]",i);
    `endif
    LDB_CQ2VF_PF_RO[i] = hqm_system_csr_bridge_LDB_CQ2VF_PF_RO_reg::type_id::create($psprintf("LDB_CQ2VF_PF_RO[%0d]",i), this);
    LDB_CQ2VF_PF_RO[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F94 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_CQ2VF_PF_RO[i].set_space_addr("MSG",  (16'h0F94 + (i*4096)) );
    LDB_CQ2VF_PF_RO[i].set_space_addr("msg_bus_port", 'h21);
    LDB_CQ2VF_PF_RO[i].set_space_addr("MEM-SB", (12'hF94 + (i*4096)) );
    LDB_CQ2VF_PF_RO[i].set_space_addr("MEM",  (16'h0F94 + (i*4096)) );
      LDB_CQ2VF_PF_RO[i].set_space("MEM");
      LDB_CQ2VF_PF_RO[i].set_msg_opcode("MEM-SB");
      LDB_CQ2VF_PF_RO[i].set_fid(4'h0, "MEM-SB");
  	LDB_CQ2VF_PF_RO[i].set_bar(4'h2, "MEM-SB");
      LDB_CQ2VF_PF_RO[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_CQ2VF_PF_RO[i].set_user_attribute("diag_reg", "0");
      LDB_CQ2VF_PF_RO[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_CQ2VF_PF_RO[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_CQ2VF_PF_RO[%0d]:dont_test",i)) ) LDB_CQ2VF_PF_RO[i].set_test_reg(1'b0);
      if (!add_reg( LDB_CQ2VF_PF_RO[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_CQ2VF_PF_RO[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_CQ_ISR[%0d]",i);
    `endif
    LDB_CQ_ISR[i] = hqm_system_csr_bridge_LDB_CQ_ISR_reg::type_id::create($psprintf("LDB_CQ_ISR[%0d]",i), this);
    LDB_CQ_ISR[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F98 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_CQ_ISR[i].set_space_addr("MSG",  (16'h0F98 + (i*4096)) );
    LDB_CQ_ISR[i].set_space_addr("msg_bus_port", 'h21);
    LDB_CQ_ISR[i].set_space_addr("MEM-SB", (12'hF98 + (i*4096)) );
    LDB_CQ_ISR[i].set_space_addr("MEM",  (16'h0F98 + (i*4096)) );
      LDB_CQ_ISR[i].set_space("MEM");
      LDB_CQ_ISR[i].set_msg_opcode("MEM-SB");
      LDB_CQ_ISR[i].set_fid(4'h0, "MEM-SB");
  	LDB_CQ_ISR[i].set_bar(4'h2, "MEM-SB");
      LDB_CQ_ISR[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_CQ_ISR[i].set_user_attribute("diag_reg", "0");
      LDB_CQ_ISR[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_CQ_ISR[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_CQ_ISR[%0d]:dont_test",i)) ) LDB_CQ_ISR[i].set_test_reg(1'b0);
      if (!add_reg( LDB_CQ_ISR[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_CQ_ISR[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("LDB_CQ_PASID[%0d]",i);
    `endif
    LDB_CQ_PASID[i] = hqm_system_csr_bridge_LDB_CQ_PASID_reg::type_id::create($psprintf("LDB_CQ_PASID[%0d]",i), this);
    LDB_CQ_PASID[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0F9C + (i *4096)), 32, 32'b00000000000000000000000000000000);
    LDB_CQ_PASID[i].set_space_addr("MSG",  (16'h0F9C + (i*4096)) );
    LDB_CQ_PASID[i].set_space_addr("msg_bus_port", 'h21);
    LDB_CQ_PASID[i].set_space_addr("MEM-SB", (12'hF9C + (i*4096)) );
    LDB_CQ_PASID[i].set_space_addr("MEM",  (16'h0F9C + (i*4096)) );
      LDB_CQ_PASID[i].set_space("MEM");
      LDB_CQ_PASID[i].set_msg_opcode("MEM-SB");
      LDB_CQ_PASID[i].set_fid(4'h0, "MEM-SB");
  	LDB_CQ_PASID[i].set_bar(4'h2, "MEM-SB");
      LDB_CQ_PASID[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_CQ_PASID[i].set_user_attribute("diag_reg", "0");
      LDB_CQ_PASID[i].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_CQ_PASID[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("LDB_CQ_PASID[%0d]:dont_test",i)) ) LDB_CQ_PASID[i].set_test_reg(1'b0);
      if (!add_reg( LDB_CQ_PASID[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register LDB_CQ_PASID[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[0]";
    `endif
    LDB_PP_ROB_V[0] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[0]", this);
    LDB_PP_ROB_V[0].set_cfg(16'h0, 16'h0, 16'h0, 16'h0FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[0].set_space_addr("MSG", 16'h0FA0);
    LDB_PP_ROB_V[0].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[0].set_space_addr("MEM-SB",12'hFA0);
    LDB_PP_ROB_V[0].set_space_addr("MEM", 16'h0FA0);
      LDB_PP_ROB_V[0].set_space("MEM");
      LDB_PP_ROB_V[0].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[0].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[0].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[0].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[0].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[0]:dont_test") ) LDB_PP_ROB_V[0].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[0] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[1]";
    `endif
    HQM_LDB_PP2VDEV[1] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[1]", this);
    HQM_LDB_PP2VDEV[1].set_cfg(16'h0, 16'h0, 16'h0, 16'h1F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[1].set_space_addr("MSG", 16'h1F8C);
    HQM_LDB_PP2VDEV[1].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[1].set_space_addr("MEM-SB",16'h1F8C);
    HQM_LDB_PP2VDEV[1].set_space_addr("MEM", 16'h1F8C);
      HQM_LDB_PP2VDEV[1].set_space("MEM");
      HQM_LDB_PP2VDEV[1].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[1].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[1].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[1].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[1].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[1]:dont_test") ) HQM_LDB_PP2VDEV[1].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[1] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[1]";
    `endif
    LDB_PP_ROB_V[1] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[1]", this);
    LDB_PP_ROB_V[1].set_cfg(16'h0, 16'h0, 16'h0, 16'h1FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[1].set_space_addr("MSG", 16'h1FA0);
    LDB_PP_ROB_V[1].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[1].set_space_addr("MEM-SB",16'h1FA0);
    LDB_PP_ROB_V[1].set_space_addr("MEM", 16'h1FA0);
      LDB_PP_ROB_V[1].set_space("MEM");
      LDB_PP_ROB_V[1].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[1].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[1].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[1].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[1].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[1]:dont_test") ) LDB_PP_ROB_V[1].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[1] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[2]";
    `endif
    HQM_LDB_PP2VDEV[2] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[2]", this);
    HQM_LDB_PP2VDEV[2].set_cfg(16'h0, 16'h0, 16'h0, 16'h2F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[2].set_space_addr("MSG", 16'h2F8C);
    HQM_LDB_PP2VDEV[2].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[2].set_space_addr("MEM-SB",16'h2F8C);
    HQM_LDB_PP2VDEV[2].set_space_addr("MEM", 16'h2F8C);
      HQM_LDB_PP2VDEV[2].set_space("MEM");
      HQM_LDB_PP2VDEV[2].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[2].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[2].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[2].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[2].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[2]:dont_test") ) HQM_LDB_PP2VDEV[2].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[2] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[2]";
    `endif
    LDB_PP_ROB_V[2] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[2]", this);
    LDB_PP_ROB_V[2].set_cfg(16'h0, 16'h0, 16'h0, 16'h2FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[2].set_space_addr("MSG", 16'h2FA0);
    LDB_PP_ROB_V[2].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[2].set_space_addr("MEM-SB",16'h2FA0);
    LDB_PP_ROB_V[2].set_space_addr("MEM", 16'h2FA0);
      LDB_PP_ROB_V[2].set_space("MEM");
      LDB_PP_ROB_V[2].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[2].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[2].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[2].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[2].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[2]:dont_test") ) LDB_PP_ROB_V[2].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[2] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[3]";
    `endif
    HQM_LDB_PP2VDEV[3] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[3]", this);
    HQM_LDB_PP2VDEV[3].set_cfg(16'h0, 16'h0, 16'h0, 16'h3F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[3].set_space_addr("MSG", 16'h3F8C);
    HQM_LDB_PP2VDEV[3].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[3].set_space_addr("MEM-SB",16'h3F8C);
    HQM_LDB_PP2VDEV[3].set_space_addr("MEM", 16'h3F8C);
      HQM_LDB_PP2VDEV[3].set_space("MEM");
      HQM_LDB_PP2VDEV[3].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[3].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[3].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[3].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[3].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[3]:dont_test") ) HQM_LDB_PP2VDEV[3].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[3] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[3]";
    `endif
    LDB_PP_ROB_V[3] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[3]", this);
    LDB_PP_ROB_V[3].set_cfg(16'h0, 16'h0, 16'h0, 16'h3FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[3].set_space_addr("MSG", 16'h3FA0);
    LDB_PP_ROB_V[3].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[3].set_space_addr("MEM-SB",16'h3FA0);
    LDB_PP_ROB_V[3].set_space_addr("MEM", 16'h3FA0);
      LDB_PP_ROB_V[3].set_space("MEM");
      LDB_PP_ROB_V[3].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[3].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[3].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[3].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[3].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[3]:dont_test") ) LDB_PP_ROB_V[3].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[3] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[4]";
    `endif
    HQM_LDB_PP2VDEV[4] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[4]", this);
    HQM_LDB_PP2VDEV[4].set_cfg(16'h0, 16'h0, 16'h0, 16'h4F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[4].set_space_addr("MSG", 16'h4F8C);
    HQM_LDB_PP2VDEV[4].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[4].set_space_addr("MEM-SB",16'h4F8C);
    HQM_LDB_PP2VDEV[4].set_space_addr("MEM", 16'h4F8C);
      HQM_LDB_PP2VDEV[4].set_space("MEM");
      HQM_LDB_PP2VDEV[4].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[4].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[4].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[4].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[4].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[4]:dont_test") ) HQM_LDB_PP2VDEV[4].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[4] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[4]";
    `endif
    LDB_PP_ROB_V[4] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[4]", this);
    LDB_PP_ROB_V[4].set_cfg(16'h0, 16'h0, 16'h0, 16'h4FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[4].set_space_addr("MSG", 16'h4FA0);
    LDB_PP_ROB_V[4].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[4].set_space_addr("MEM-SB",16'h4FA0);
    LDB_PP_ROB_V[4].set_space_addr("MEM", 16'h4FA0);
      LDB_PP_ROB_V[4].set_space("MEM");
      LDB_PP_ROB_V[4].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[4].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[4].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[4].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[4].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[4]:dont_test") ) LDB_PP_ROB_V[4].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[4] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[5]";
    `endif
    HQM_LDB_PP2VDEV[5] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[5]", this);
    HQM_LDB_PP2VDEV[5].set_cfg(16'h0, 16'h0, 16'h0, 16'h5F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[5].set_space_addr("MSG", 16'h5F8C);
    HQM_LDB_PP2VDEV[5].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[5].set_space_addr("MEM-SB",16'h5F8C);
    HQM_LDB_PP2VDEV[5].set_space_addr("MEM", 16'h5F8C);
      HQM_LDB_PP2VDEV[5].set_space("MEM");
      HQM_LDB_PP2VDEV[5].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[5].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[5].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[5].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[5].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[5]:dont_test") ) HQM_LDB_PP2VDEV[5].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[5] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[5]";
    `endif
    LDB_PP_ROB_V[5] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[5]", this);
    LDB_PP_ROB_V[5].set_cfg(16'h0, 16'h0, 16'h0, 16'h5FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[5].set_space_addr("MSG", 16'h5FA0);
    LDB_PP_ROB_V[5].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[5].set_space_addr("MEM-SB",16'h5FA0);
    LDB_PP_ROB_V[5].set_space_addr("MEM", 16'h5FA0);
      LDB_PP_ROB_V[5].set_space("MEM");
      LDB_PP_ROB_V[5].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[5].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[5].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[5].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[5].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[5]:dont_test") ) LDB_PP_ROB_V[5].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[5] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[6]";
    `endif
    HQM_LDB_PP2VDEV[6] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[6]", this);
    HQM_LDB_PP2VDEV[6].set_cfg(16'h0, 16'h0, 16'h0, 16'h6F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[6].set_space_addr("MSG", 16'h6F8C);
    HQM_LDB_PP2VDEV[6].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[6].set_space_addr("MEM-SB",16'h6F8C);
    HQM_LDB_PP2VDEV[6].set_space_addr("MEM", 16'h6F8C);
      HQM_LDB_PP2VDEV[6].set_space("MEM");
      HQM_LDB_PP2VDEV[6].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[6].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[6].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[6].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[6].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[6]:dont_test") ) HQM_LDB_PP2VDEV[6].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[6] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[6]";
    `endif
    LDB_PP_ROB_V[6] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[6]", this);
    LDB_PP_ROB_V[6].set_cfg(16'h0, 16'h0, 16'h0, 16'h6FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[6].set_space_addr("MSG", 16'h6FA0);
    LDB_PP_ROB_V[6].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[6].set_space_addr("MEM-SB",16'h6FA0);
    LDB_PP_ROB_V[6].set_space_addr("MEM", 16'h6FA0);
      LDB_PP_ROB_V[6].set_space("MEM");
      LDB_PP_ROB_V[6].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[6].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[6].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[6].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[6].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[6]:dont_test") ) LDB_PP_ROB_V[6].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[6] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[7]";
    `endif
    HQM_LDB_PP2VDEV[7] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[7]", this);
    HQM_LDB_PP2VDEV[7].set_cfg(16'h0, 16'h0, 16'h0, 16'h7F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[7].set_space_addr("MSG", 16'h7F8C);
    HQM_LDB_PP2VDEV[7].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[7].set_space_addr("MEM-SB",16'h7F8C);
    HQM_LDB_PP2VDEV[7].set_space_addr("MEM", 16'h7F8C);
      HQM_LDB_PP2VDEV[7].set_space("MEM");
      HQM_LDB_PP2VDEV[7].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[7].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[7].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[7].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[7].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[7]:dont_test") ) HQM_LDB_PP2VDEV[7].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[7] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[7]";
    `endif
    LDB_PP_ROB_V[7] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[7]", this);
    LDB_PP_ROB_V[7].set_cfg(16'h0, 16'h0, 16'h0, 16'h7FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[7].set_space_addr("MSG", 16'h7FA0);
    LDB_PP_ROB_V[7].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[7].set_space_addr("MEM-SB",16'h7FA0);
    LDB_PP_ROB_V[7].set_space_addr("MEM", 16'h7FA0);
      LDB_PP_ROB_V[7].set_space("MEM");
      LDB_PP_ROB_V[7].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[7].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[7].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[7].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[7].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[7]:dont_test") ) LDB_PP_ROB_V[7].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[7] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[8]";
    `endif
    HQM_LDB_PP2VDEV[8] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[8]", this);
    HQM_LDB_PP2VDEV[8].set_cfg(16'h0, 16'h0, 16'h0, 16'h8F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[8].set_space_addr("MSG", 16'h8F8C);
    HQM_LDB_PP2VDEV[8].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[8].set_space_addr("MEM-SB",16'h8F8C);
    HQM_LDB_PP2VDEV[8].set_space_addr("MEM", 16'h8F8C);
      HQM_LDB_PP2VDEV[8].set_space("MEM");
      HQM_LDB_PP2VDEV[8].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[8].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[8].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[8].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[8].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[8]:dont_test") ) HQM_LDB_PP2VDEV[8].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[8] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[8]";
    `endif
    LDB_PP_ROB_V[8] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[8]", this);
    LDB_PP_ROB_V[8].set_cfg(16'h0, 16'h0, 16'h0, 16'h8FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[8].set_space_addr("MSG", 16'h8FA0);
    LDB_PP_ROB_V[8].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[8].set_space_addr("MEM-SB",16'h8FA0);
    LDB_PP_ROB_V[8].set_space_addr("MEM", 16'h8FA0);
      LDB_PP_ROB_V[8].set_space("MEM");
      LDB_PP_ROB_V[8].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[8].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[8].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[8].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[8].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[8]:dont_test") ) LDB_PP_ROB_V[8].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[8] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[9]";
    `endif
    HQM_LDB_PP2VDEV[9] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[9]", this);
    HQM_LDB_PP2VDEV[9].set_cfg(16'h0, 16'h0, 16'h0, 16'h9F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[9].set_space_addr("MSG", 16'h9F8C);
    HQM_LDB_PP2VDEV[9].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[9].set_space_addr("MEM-SB",16'h9F8C);
    HQM_LDB_PP2VDEV[9].set_space_addr("MEM", 16'h9F8C);
      HQM_LDB_PP2VDEV[9].set_space("MEM");
      HQM_LDB_PP2VDEV[9].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[9].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[9].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[9].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[9].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[9]:dont_test") ) HQM_LDB_PP2VDEV[9].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[9] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[9]";
    `endif
    LDB_PP_ROB_V[9] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[9]", this);
    LDB_PP_ROB_V[9].set_cfg(16'h0, 16'h0, 16'h0, 16'h9FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[9].set_space_addr("MSG", 16'h9FA0);
    LDB_PP_ROB_V[9].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[9].set_space_addr("MEM-SB",16'h9FA0);
    LDB_PP_ROB_V[9].set_space_addr("MEM", 16'h9FA0);
      LDB_PP_ROB_V[9].set_space("MEM");
      LDB_PP_ROB_V[9].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[9].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[9].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[9].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[9].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[9]:dont_test") ) LDB_PP_ROB_V[9].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[9] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[10]";
    `endif
    HQM_LDB_PP2VDEV[10] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[10]", this);
    HQM_LDB_PP2VDEV[10].set_cfg(16'h0, 16'h0, 16'h0, 20'h0AF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[10].set_space_addr("MSG", 20'h0AF8C);
    HQM_LDB_PP2VDEV[10].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[10].set_space_addr("MEM-SB",16'hAF8C);
    HQM_LDB_PP2VDEV[10].set_space_addr("MEM", 20'h0AF8C);
      HQM_LDB_PP2VDEV[10].set_space("MEM");
      HQM_LDB_PP2VDEV[10].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[10].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[10].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[10].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[10].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[10]:dont_test") ) HQM_LDB_PP2VDEV[10].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[10] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[10]";
    `endif
    LDB_PP_ROB_V[10] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[10]", this);
    LDB_PP_ROB_V[10].set_cfg(16'h0, 16'h0, 16'h0, 20'h0AFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[10].set_space_addr("MSG", 20'h0AFA0);
    LDB_PP_ROB_V[10].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[10].set_space_addr("MEM-SB",16'hAFA0);
    LDB_PP_ROB_V[10].set_space_addr("MEM", 20'h0AFA0);
      LDB_PP_ROB_V[10].set_space("MEM");
      LDB_PP_ROB_V[10].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[10].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[10].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[10].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[10].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[10]:dont_test") ) LDB_PP_ROB_V[10].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[10] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[11]";
    `endif
    HQM_LDB_PP2VDEV[11] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[11]", this);
    HQM_LDB_PP2VDEV[11].set_cfg(16'h0, 16'h0, 16'h0, 20'h0BF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[11].set_space_addr("MSG", 20'h0BF8C);
    HQM_LDB_PP2VDEV[11].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[11].set_space_addr("MEM-SB",16'hBF8C);
    HQM_LDB_PP2VDEV[11].set_space_addr("MEM", 20'h0BF8C);
      HQM_LDB_PP2VDEV[11].set_space("MEM");
      HQM_LDB_PP2VDEV[11].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[11].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[11].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[11].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[11].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[11]:dont_test") ) HQM_LDB_PP2VDEV[11].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[11] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[11]";
    `endif
    LDB_PP_ROB_V[11] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[11]", this);
    LDB_PP_ROB_V[11].set_cfg(16'h0, 16'h0, 16'h0, 20'h0BFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[11].set_space_addr("MSG", 20'h0BFA0);
    LDB_PP_ROB_V[11].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[11].set_space_addr("MEM-SB",16'hBFA0);
    LDB_PP_ROB_V[11].set_space_addr("MEM", 20'h0BFA0);
      LDB_PP_ROB_V[11].set_space("MEM");
      LDB_PP_ROB_V[11].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[11].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[11].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[11].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[11].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[11]:dont_test") ) LDB_PP_ROB_V[11].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[11] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[12]";
    `endif
    HQM_LDB_PP2VDEV[12] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[12]", this);
    HQM_LDB_PP2VDEV[12].set_cfg(16'h0, 16'h0, 16'h0, 20'h0CF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[12].set_space_addr("MSG", 20'h0CF8C);
    HQM_LDB_PP2VDEV[12].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[12].set_space_addr("MEM-SB",16'hCF8C);
    HQM_LDB_PP2VDEV[12].set_space_addr("MEM", 20'h0CF8C);
      HQM_LDB_PP2VDEV[12].set_space("MEM");
      HQM_LDB_PP2VDEV[12].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[12].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[12].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[12].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[12].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[12]:dont_test") ) HQM_LDB_PP2VDEV[12].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[12] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[12]";
    `endif
    LDB_PP_ROB_V[12] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[12]", this);
    LDB_PP_ROB_V[12].set_cfg(16'h0, 16'h0, 16'h0, 20'h0CFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[12].set_space_addr("MSG", 20'h0CFA0);
    LDB_PP_ROB_V[12].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[12].set_space_addr("MEM-SB",16'hCFA0);
    LDB_PP_ROB_V[12].set_space_addr("MEM", 20'h0CFA0);
      LDB_PP_ROB_V[12].set_space("MEM");
      LDB_PP_ROB_V[12].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[12].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[12].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[12].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[12].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[12]:dont_test") ) LDB_PP_ROB_V[12].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[12] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[13]";
    `endif
    HQM_LDB_PP2VDEV[13] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[13]", this);
    HQM_LDB_PP2VDEV[13].set_cfg(16'h0, 16'h0, 16'h0, 20'h0DF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[13].set_space_addr("MSG", 20'h0DF8C);
    HQM_LDB_PP2VDEV[13].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[13].set_space_addr("MEM-SB",16'hDF8C);
    HQM_LDB_PP2VDEV[13].set_space_addr("MEM", 20'h0DF8C);
      HQM_LDB_PP2VDEV[13].set_space("MEM");
      HQM_LDB_PP2VDEV[13].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[13].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[13].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[13].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[13].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[13]:dont_test") ) HQM_LDB_PP2VDEV[13].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[13] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[13]";
    `endif
    LDB_PP_ROB_V[13] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[13]", this);
    LDB_PP_ROB_V[13].set_cfg(16'h0, 16'h0, 16'h0, 20'h0DFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[13].set_space_addr("MSG", 20'h0DFA0);
    LDB_PP_ROB_V[13].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[13].set_space_addr("MEM-SB",16'hDFA0);
    LDB_PP_ROB_V[13].set_space_addr("MEM", 20'h0DFA0);
      LDB_PP_ROB_V[13].set_space("MEM");
      LDB_PP_ROB_V[13].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[13].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[13].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[13].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[13].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[13]:dont_test") ) LDB_PP_ROB_V[13].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[13] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[14]";
    `endif
    HQM_LDB_PP2VDEV[14] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[14]", this);
    HQM_LDB_PP2VDEV[14].set_cfg(16'h0, 16'h0, 16'h0, 20'h0EF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[14].set_space_addr("MSG", 20'h0EF8C);
    HQM_LDB_PP2VDEV[14].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[14].set_space_addr("MEM-SB",16'hEF8C);
    HQM_LDB_PP2VDEV[14].set_space_addr("MEM", 20'h0EF8C);
      HQM_LDB_PP2VDEV[14].set_space("MEM");
      HQM_LDB_PP2VDEV[14].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[14].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[14].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[14].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[14].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[14]:dont_test") ) HQM_LDB_PP2VDEV[14].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[14] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[14]";
    `endif
    LDB_PP_ROB_V[14] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[14]", this);
    LDB_PP_ROB_V[14].set_cfg(16'h0, 16'h0, 16'h0, 20'h0EFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[14].set_space_addr("MSG", 20'h0EFA0);
    LDB_PP_ROB_V[14].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[14].set_space_addr("MEM-SB",16'hEFA0);
    LDB_PP_ROB_V[14].set_space_addr("MEM", 20'h0EFA0);
      LDB_PP_ROB_V[14].set_space("MEM");
      LDB_PP_ROB_V[14].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[14].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[14].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[14].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[14].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[14]:dont_test") ) LDB_PP_ROB_V[14].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[14] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[15]";
    `endif
    HQM_LDB_PP2VDEV[15] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[15]", this);
    HQM_LDB_PP2VDEV[15].set_cfg(16'h0, 16'h0, 16'h0, 20'h0FF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[15].set_space_addr("MSG", 20'h0FF8C);
    HQM_LDB_PP2VDEV[15].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[15].set_space_addr("MEM-SB",16'hFF8C);
    HQM_LDB_PP2VDEV[15].set_space_addr("MEM", 20'h0FF8C);
      HQM_LDB_PP2VDEV[15].set_space("MEM");
      HQM_LDB_PP2VDEV[15].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[15].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[15].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[15].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[15].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[15]:dont_test") ) HQM_LDB_PP2VDEV[15].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[15] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[15]";
    `endif
    LDB_PP_ROB_V[15] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[15]", this);
    LDB_PP_ROB_V[15].set_cfg(16'h0, 16'h0, 16'h0, 20'h0FFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[15].set_space_addr("MSG", 20'h0FFA0);
    LDB_PP_ROB_V[15].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[15].set_space_addr("MEM-SB",16'hFFA0);
    LDB_PP_ROB_V[15].set_space_addr("MEM", 20'h0FFA0);
      LDB_PP_ROB_V[15].set_space("MEM");
      LDB_PP_ROB_V[15].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[15].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[15].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[15].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[15].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[15]:dont_test") ) LDB_PP_ROB_V[15].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[15] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[16]";
    `endif
    HQM_LDB_PP2VDEV[16] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[16]", this);
    HQM_LDB_PP2VDEV[16].set_cfg(16'h0, 16'h0, 16'h0, 20'h10F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[16].set_space_addr("MSG", 20'h10F8C);
    HQM_LDB_PP2VDEV[16].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[16].set_space_addr("MEM-SB",20'h10F8C);
    HQM_LDB_PP2VDEV[16].set_space_addr("MEM", 20'h10F8C);
      HQM_LDB_PP2VDEV[16].set_space("MEM");
      HQM_LDB_PP2VDEV[16].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[16].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[16].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[16].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[16].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[16]:dont_test") ) HQM_LDB_PP2VDEV[16].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[16] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[16]";
    `endif
    LDB_PP_ROB_V[16] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[16]", this);
    LDB_PP_ROB_V[16].set_cfg(16'h0, 16'h0, 16'h0, 20'h10FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[16].set_space_addr("MSG", 20'h10FA0);
    LDB_PP_ROB_V[16].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[16].set_space_addr("MEM-SB",20'h10FA0);
    LDB_PP_ROB_V[16].set_space_addr("MEM", 20'h10FA0);
      LDB_PP_ROB_V[16].set_space("MEM");
      LDB_PP_ROB_V[16].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[16].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[16].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[16].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[16].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[16]:dont_test") ) LDB_PP_ROB_V[16].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[16] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[17]";
    `endif
    HQM_LDB_PP2VDEV[17] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[17]", this);
    HQM_LDB_PP2VDEV[17].set_cfg(16'h0, 16'h0, 16'h0, 20'h11F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[17].set_space_addr("MSG", 20'h11F8C);
    HQM_LDB_PP2VDEV[17].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[17].set_space_addr("MEM-SB",20'h11F8C);
    HQM_LDB_PP2VDEV[17].set_space_addr("MEM", 20'h11F8C);
      HQM_LDB_PP2VDEV[17].set_space("MEM");
      HQM_LDB_PP2VDEV[17].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[17].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[17].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[17].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[17].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[17]:dont_test") ) HQM_LDB_PP2VDEV[17].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[17] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[17]";
    `endif
    LDB_PP_ROB_V[17] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[17]", this);
    LDB_PP_ROB_V[17].set_cfg(16'h0, 16'h0, 16'h0, 20'h11FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[17].set_space_addr("MSG", 20'h11FA0);
    LDB_PP_ROB_V[17].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[17].set_space_addr("MEM-SB",20'h11FA0);
    LDB_PP_ROB_V[17].set_space_addr("MEM", 20'h11FA0);
      LDB_PP_ROB_V[17].set_space("MEM");
      LDB_PP_ROB_V[17].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[17].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[17].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[17].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[17].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[17]:dont_test") ) LDB_PP_ROB_V[17].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[17] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[18]";
    `endif
    HQM_LDB_PP2VDEV[18] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[18]", this);
    HQM_LDB_PP2VDEV[18].set_cfg(16'h0, 16'h0, 16'h0, 20'h12F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[18].set_space_addr("MSG", 20'h12F8C);
    HQM_LDB_PP2VDEV[18].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[18].set_space_addr("MEM-SB",20'h12F8C);
    HQM_LDB_PP2VDEV[18].set_space_addr("MEM", 20'h12F8C);
      HQM_LDB_PP2VDEV[18].set_space("MEM");
      HQM_LDB_PP2VDEV[18].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[18].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[18].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[18].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[18].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[18]:dont_test") ) HQM_LDB_PP2VDEV[18].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[18] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[18]";
    `endif
    LDB_PP_ROB_V[18] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[18]", this);
    LDB_PP_ROB_V[18].set_cfg(16'h0, 16'h0, 16'h0, 20'h12FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[18].set_space_addr("MSG", 20'h12FA0);
    LDB_PP_ROB_V[18].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[18].set_space_addr("MEM-SB",20'h12FA0);
    LDB_PP_ROB_V[18].set_space_addr("MEM", 20'h12FA0);
      LDB_PP_ROB_V[18].set_space("MEM");
      LDB_PP_ROB_V[18].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[18].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[18].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[18].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[18].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[18]:dont_test") ) LDB_PP_ROB_V[18].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[18] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[19]";
    `endif
    HQM_LDB_PP2VDEV[19] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[19]", this);
    HQM_LDB_PP2VDEV[19].set_cfg(16'h0, 16'h0, 16'h0, 20'h13F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[19].set_space_addr("MSG", 20'h13F8C);
    HQM_LDB_PP2VDEV[19].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[19].set_space_addr("MEM-SB",20'h13F8C);
    HQM_LDB_PP2VDEV[19].set_space_addr("MEM", 20'h13F8C);
      HQM_LDB_PP2VDEV[19].set_space("MEM");
      HQM_LDB_PP2VDEV[19].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[19].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[19].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[19].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[19].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[19]:dont_test") ) HQM_LDB_PP2VDEV[19].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[19] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[19]";
    `endif
    LDB_PP_ROB_V[19] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[19]", this);
    LDB_PP_ROB_V[19].set_cfg(16'h0, 16'h0, 16'h0, 20'h13FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[19].set_space_addr("MSG", 20'h13FA0);
    LDB_PP_ROB_V[19].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[19].set_space_addr("MEM-SB",20'h13FA0);
    LDB_PP_ROB_V[19].set_space_addr("MEM", 20'h13FA0);
      LDB_PP_ROB_V[19].set_space("MEM");
      LDB_PP_ROB_V[19].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[19].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[19].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[19].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[19].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[19]:dont_test") ) LDB_PP_ROB_V[19].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[19] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[20]";
    `endif
    HQM_LDB_PP2VDEV[20] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[20]", this);
    HQM_LDB_PP2VDEV[20].set_cfg(16'h0, 16'h0, 16'h0, 20'h14F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[20].set_space_addr("MSG", 20'h14F8C);
    HQM_LDB_PP2VDEV[20].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[20].set_space_addr("MEM-SB",20'h14F8C);
    HQM_LDB_PP2VDEV[20].set_space_addr("MEM", 20'h14F8C);
      HQM_LDB_PP2VDEV[20].set_space("MEM");
      HQM_LDB_PP2VDEV[20].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[20].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[20].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[20].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[20].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[20]:dont_test") ) HQM_LDB_PP2VDEV[20].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[20] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[20]";
    `endif
    LDB_PP_ROB_V[20] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[20]", this);
    LDB_PP_ROB_V[20].set_cfg(16'h0, 16'h0, 16'h0, 20'h14FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[20].set_space_addr("MSG", 20'h14FA0);
    LDB_PP_ROB_V[20].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[20].set_space_addr("MEM-SB",20'h14FA0);
    LDB_PP_ROB_V[20].set_space_addr("MEM", 20'h14FA0);
      LDB_PP_ROB_V[20].set_space("MEM");
      LDB_PP_ROB_V[20].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[20].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[20].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[20].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[20].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[20]:dont_test") ) LDB_PP_ROB_V[20].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[20] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[21]";
    `endif
    HQM_LDB_PP2VDEV[21] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[21]", this);
    HQM_LDB_PP2VDEV[21].set_cfg(16'h0, 16'h0, 16'h0, 20'h15F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[21].set_space_addr("MSG", 20'h15F8C);
    HQM_LDB_PP2VDEV[21].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[21].set_space_addr("MEM-SB",20'h15F8C);
    HQM_LDB_PP2VDEV[21].set_space_addr("MEM", 20'h15F8C);
      HQM_LDB_PP2VDEV[21].set_space("MEM");
      HQM_LDB_PP2VDEV[21].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[21].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[21].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[21].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[21].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[21]:dont_test") ) HQM_LDB_PP2VDEV[21].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[21] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[21]";
    `endif
    LDB_PP_ROB_V[21] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[21]", this);
    LDB_PP_ROB_V[21].set_cfg(16'h0, 16'h0, 16'h0, 20'h15FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[21].set_space_addr("MSG", 20'h15FA0);
    LDB_PP_ROB_V[21].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[21].set_space_addr("MEM-SB",20'h15FA0);
    LDB_PP_ROB_V[21].set_space_addr("MEM", 20'h15FA0);
      LDB_PP_ROB_V[21].set_space("MEM");
      LDB_PP_ROB_V[21].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[21].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[21].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[21].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[21].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[21]:dont_test") ) LDB_PP_ROB_V[21].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[21] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[22]";
    `endif
    HQM_LDB_PP2VDEV[22] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[22]", this);
    HQM_LDB_PP2VDEV[22].set_cfg(16'h0, 16'h0, 16'h0, 20'h16F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[22].set_space_addr("MSG", 20'h16F8C);
    HQM_LDB_PP2VDEV[22].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[22].set_space_addr("MEM-SB",20'h16F8C);
    HQM_LDB_PP2VDEV[22].set_space_addr("MEM", 20'h16F8C);
      HQM_LDB_PP2VDEV[22].set_space("MEM");
      HQM_LDB_PP2VDEV[22].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[22].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[22].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[22].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[22].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[22]:dont_test") ) HQM_LDB_PP2VDEV[22].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[22] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[22]";
    `endif
    LDB_PP_ROB_V[22] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[22]", this);
    LDB_PP_ROB_V[22].set_cfg(16'h0, 16'h0, 16'h0, 20'h16FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[22].set_space_addr("MSG", 20'h16FA0);
    LDB_PP_ROB_V[22].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[22].set_space_addr("MEM-SB",20'h16FA0);
    LDB_PP_ROB_V[22].set_space_addr("MEM", 20'h16FA0);
      LDB_PP_ROB_V[22].set_space("MEM");
      LDB_PP_ROB_V[22].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[22].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[22].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[22].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[22].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[22]:dont_test") ) LDB_PP_ROB_V[22].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[22] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[23]";
    `endif
    HQM_LDB_PP2VDEV[23] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[23]", this);
    HQM_LDB_PP2VDEV[23].set_cfg(16'h0, 16'h0, 16'h0, 20'h17F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[23].set_space_addr("MSG", 20'h17F8C);
    HQM_LDB_PP2VDEV[23].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[23].set_space_addr("MEM-SB",20'h17F8C);
    HQM_LDB_PP2VDEV[23].set_space_addr("MEM", 20'h17F8C);
      HQM_LDB_PP2VDEV[23].set_space("MEM");
      HQM_LDB_PP2VDEV[23].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[23].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[23].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[23].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[23].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[23]:dont_test") ) HQM_LDB_PP2VDEV[23].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[23] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[23]";
    `endif
    LDB_PP_ROB_V[23] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[23]", this);
    LDB_PP_ROB_V[23].set_cfg(16'h0, 16'h0, 16'h0, 20'h17FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[23].set_space_addr("MSG", 20'h17FA0);
    LDB_PP_ROB_V[23].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[23].set_space_addr("MEM-SB",20'h17FA0);
    LDB_PP_ROB_V[23].set_space_addr("MEM", 20'h17FA0);
      LDB_PP_ROB_V[23].set_space("MEM");
      LDB_PP_ROB_V[23].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[23].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[23].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[23].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[23].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[23]:dont_test") ) LDB_PP_ROB_V[23].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[23] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[24]";
    `endif
    HQM_LDB_PP2VDEV[24] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[24]", this);
    HQM_LDB_PP2VDEV[24].set_cfg(16'h0, 16'h0, 16'h0, 20'h18F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[24].set_space_addr("MSG", 20'h18F8C);
    HQM_LDB_PP2VDEV[24].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[24].set_space_addr("MEM-SB",20'h18F8C);
    HQM_LDB_PP2VDEV[24].set_space_addr("MEM", 20'h18F8C);
      HQM_LDB_PP2VDEV[24].set_space("MEM");
      HQM_LDB_PP2VDEV[24].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[24].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[24].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[24].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[24].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[24]:dont_test") ) HQM_LDB_PP2VDEV[24].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[24] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[24]";
    `endif
    LDB_PP_ROB_V[24] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[24]", this);
    LDB_PP_ROB_V[24].set_cfg(16'h0, 16'h0, 16'h0, 20'h18FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[24].set_space_addr("MSG", 20'h18FA0);
    LDB_PP_ROB_V[24].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[24].set_space_addr("MEM-SB",20'h18FA0);
    LDB_PP_ROB_V[24].set_space_addr("MEM", 20'h18FA0);
      LDB_PP_ROB_V[24].set_space("MEM");
      LDB_PP_ROB_V[24].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[24].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[24].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[24].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[24].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[24]:dont_test") ) LDB_PP_ROB_V[24].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[24] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[25]";
    `endif
    HQM_LDB_PP2VDEV[25] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[25]", this);
    HQM_LDB_PP2VDEV[25].set_cfg(16'h0, 16'h0, 16'h0, 20'h19F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[25].set_space_addr("MSG", 20'h19F8C);
    HQM_LDB_PP2VDEV[25].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[25].set_space_addr("MEM-SB",20'h19F8C);
    HQM_LDB_PP2VDEV[25].set_space_addr("MEM", 20'h19F8C);
      HQM_LDB_PP2VDEV[25].set_space("MEM");
      HQM_LDB_PP2VDEV[25].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[25].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[25].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[25].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[25].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[25]:dont_test") ) HQM_LDB_PP2VDEV[25].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[25] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[25]";
    `endif
    LDB_PP_ROB_V[25] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[25]", this);
    LDB_PP_ROB_V[25].set_cfg(16'h0, 16'h0, 16'h0, 20'h19FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[25].set_space_addr("MSG", 20'h19FA0);
    LDB_PP_ROB_V[25].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[25].set_space_addr("MEM-SB",20'h19FA0);
    LDB_PP_ROB_V[25].set_space_addr("MEM", 20'h19FA0);
      LDB_PP_ROB_V[25].set_space("MEM");
      LDB_PP_ROB_V[25].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[25].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[25].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[25].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[25].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[25]:dont_test") ) LDB_PP_ROB_V[25].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[25] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[26]";
    `endif
    HQM_LDB_PP2VDEV[26] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[26]", this);
    HQM_LDB_PP2VDEV[26].set_cfg(16'h0, 16'h0, 16'h0, 20'h1AF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[26].set_space_addr("MSG", 20'h1AF8C);
    HQM_LDB_PP2VDEV[26].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[26].set_space_addr("MEM-SB",20'h1AF8C);
    HQM_LDB_PP2VDEV[26].set_space_addr("MEM", 20'h1AF8C);
      HQM_LDB_PP2VDEV[26].set_space("MEM");
      HQM_LDB_PP2VDEV[26].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[26].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[26].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[26].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[26].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[26]:dont_test") ) HQM_LDB_PP2VDEV[26].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[26] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[26]";
    `endif
    LDB_PP_ROB_V[26] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[26]", this);
    LDB_PP_ROB_V[26].set_cfg(16'h0, 16'h0, 16'h0, 20'h1AFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[26].set_space_addr("MSG", 20'h1AFA0);
    LDB_PP_ROB_V[26].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[26].set_space_addr("MEM-SB",20'h1AFA0);
    LDB_PP_ROB_V[26].set_space_addr("MEM", 20'h1AFA0);
      LDB_PP_ROB_V[26].set_space("MEM");
      LDB_PP_ROB_V[26].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[26].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[26].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[26].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[26].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[26]:dont_test") ) LDB_PP_ROB_V[26].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[26] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[27]";
    `endif
    HQM_LDB_PP2VDEV[27] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[27]", this);
    HQM_LDB_PP2VDEV[27].set_cfg(16'h0, 16'h0, 16'h0, 20'h1BF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[27].set_space_addr("MSG", 20'h1BF8C);
    HQM_LDB_PP2VDEV[27].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[27].set_space_addr("MEM-SB",20'h1BF8C);
    HQM_LDB_PP2VDEV[27].set_space_addr("MEM", 20'h1BF8C);
      HQM_LDB_PP2VDEV[27].set_space("MEM");
      HQM_LDB_PP2VDEV[27].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[27].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[27].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[27].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[27].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[27]:dont_test") ) HQM_LDB_PP2VDEV[27].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[27] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[27]";
    `endif
    LDB_PP_ROB_V[27] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[27]", this);
    LDB_PP_ROB_V[27].set_cfg(16'h0, 16'h0, 16'h0, 20'h1BFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[27].set_space_addr("MSG", 20'h1BFA0);
    LDB_PP_ROB_V[27].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[27].set_space_addr("MEM-SB",20'h1BFA0);
    LDB_PP_ROB_V[27].set_space_addr("MEM", 20'h1BFA0);
      LDB_PP_ROB_V[27].set_space("MEM");
      LDB_PP_ROB_V[27].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[27].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[27].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[27].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[27].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[27]:dont_test") ) LDB_PP_ROB_V[27].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[27] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[28]";
    `endif
    HQM_LDB_PP2VDEV[28] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[28]", this);
    HQM_LDB_PP2VDEV[28].set_cfg(16'h0, 16'h0, 16'h0, 20'h1CF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[28].set_space_addr("MSG", 20'h1CF8C);
    HQM_LDB_PP2VDEV[28].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[28].set_space_addr("MEM-SB",20'h1CF8C);
    HQM_LDB_PP2VDEV[28].set_space_addr("MEM", 20'h1CF8C);
      HQM_LDB_PP2VDEV[28].set_space("MEM");
      HQM_LDB_PP2VDEV[28].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[28].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[28].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[28].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[28].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[28]:dont_test") ) HQM_LDB_PP2VDEV[28].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[28] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[28]";
    `endif
    LDB_PP_ROB_V[28] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[28]", this);
    LDB_PP_ROB_V[28].set_cfg(16'h0, 16'h0, 16'h0, 20'h1CFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[28].set_space_addr("MSG", 20'h1CFA0);
    LDB_PP_ROB_V[28].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[28].set_space_addr("MEM-SB",20'h1CFA0);
    LDB_PP_ROB_V[28].set_space_addr("MEM", 20'h1CFA0);
      LDB_PP_ROB_V[28].set_space("MEM");
      LDB_PP_ROB_V[28].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[28].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[28].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[28].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[28].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[28]:dont_test") ) LDB_PP_ROB_V[28].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[28] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[29]";
    `endif
    HQM_LDB_PP2VDEV[29] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[29]", this);
    HQM_LDB_PP2VDEV[29].set_cfg(16'h0, 16'h0, 16'h0, 20'h1DF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[29].set_space_addr("MSG", 20'h1DF8C);
    HQM_LDB_PP2VDEV[29].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[29].set_space_addr("MEM-SB",20'h1DF8C);
    HQM_LDB_PP2VDEV[29].set_space_addr("MEM", 20'h1DF8C);
      HQM_LDB_PP2VDEV[29].set_space("MEM");
      HQM_LDB_PP2VDEV[29].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[29].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[29].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[29].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[29].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[29]:dont_test") ) HQM_LDB_PP2VDEV[29].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[29] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[29]";
    `endif
    LDB_PP_ROB_V[29] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[29]", this);
    LDB_PP_ROB_V[29].set_cfg(16'h0, 16'h0, 16'h0, 20'h1DFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[29].set_space_addr("MSG", 20'h1DFA0);
    LDB_PP_ROB_V[29].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[29].set_space_addr("MEM-SB",20'h1DFA0);
    LDB_PP_ROB_V[29].set_space_addr("MEM", 20'h1DFA0);
      LDB_PP_ROB_V[29].set_space("MEM");
      LDB_PP_ROB_V[29].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[29].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[29].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[29].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[29].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[29]:dont_test") ) LDB_PP_ROB_V[29].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[29] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[30]";
    `endif
    HQM_LDB_PP2VDEV[30] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[30]", this);
    HQM_LDB_PP2VDEV[30].set_cfg(16'h0, 16'h0, 16'h0, 20'h1EF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[30].set_space_addr("MSG", 20'h1EF8C);
    HQM_LDB_PP2VDEV[30].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[30].set_space_addr("MEM-SB",20'h1EF8C);
    HQM_LDB_PP2VDEV[30].set_space_addr("MEM", 20'h1EF8C);
      HQM_LDB_PP2VDEV[30].set_space("MEM");
      HQM_LDB_PP2VDEV[30].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[30].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[30].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[30].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[30].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[30]:dont_test") ) HQM_LDB_PP2VDEV[30].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[30] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[30]";
    `endif
    LDB_PP_ROB_V[30] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[30]", this);
    LDB_PP_ROB_V[30].set_cfg(16'h0, 16'h0, 16'h0, 20'h1EFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[30].set_space_addr("MSG", 20'h1EFA0);
    LDB_PP_ROB_V[30].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[30].set_space_addr("MEM-SB",20'h1EFA0);
    LDB_PP_ROB_V[30].set_space_addr("MEM", 20'h1EFA0);
      LDB_PP_ROB_V[30].set_space("MEM");
      LDB_PP_ROB_V[30].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[30].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[30].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[30].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[30].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[30]:dont_test") ) LDB_PP_ROB_V[30].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[30] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[31]";
    `endif
    HQM_LDB_PP2VDEV[31] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[31]", this);
    HQM_LDB_PP2VDEV[31].set_cfg(16'h0, 16'h0, 16'h0, 20'h1FF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[31].set_space_addr("MSG", 20'h1FF8C);
    HQM_LDB_PP2VDEV[31].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[31].set_space_addr("MEM-SB",20'h1FF8C);
    HQM_LDB_PP2VDEV[31].set_space_addr("MEM", 20'h1FF8C);
      HQM_LDB_PP2VDEV[31].set_space("MEM");
      HQM_LDB_PP2VDEV[31].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[31].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[31].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[31].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[31].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[31]:dont_test") ) HQM_LDB_PP2VDEV[31].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[31] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[31]";
    `endif
    LDB_PP_ROB_V[31] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[31]", this);
    LDB_PP_ROB_V[31].set_cfg(16'h0, 16'h0, 16'h0, 20'h1FFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[31].set_space_addr("MSG", 20'h1FFA0);
    LDB_PP_ROB_V[31].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[31].set_space_addr("MEM-SB",20'h1FFA0);
    LDB_PP_ROB_V[31].set_space_addr("MEM", 20'h1FFA0);
      LDB_PP_ROB_V[31].set_space("MEM");
      LDB_PP_ROB_V[31].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[31].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[31].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[31].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[31].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[31]:dont_test") ) LDB_PP_ROB_V[31].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[31] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[32]";
    `endif
    HQM_LDB_PP2VDEV[32] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[32]", this);
    HQM_LDB_PP2VDEV[32].set_cfg(16'h0, 16'h0, 16'h0, 20'h20F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[32].set_space_addr("MSG", 20'h20F8C);
    HQM_LDB_PP2VDEV[32].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[32].set_space_addr("MEM-SB",20'h20F8C);
    HQM_LDB_PP2VDEV[32].set_space_addr("MEM", 20'h20F8C);
      HQM_LDB_PP2VDEV[32].set_space("MEM");
      HQM_LDB_PP2VDEV[32].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[32].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[32].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[32].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[32].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[32]:dont_test") ) HQM_LDB_PP2VDEV[32].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[32] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[32]";
    `endif
    LDB_PP_ROB_V[32] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[32]", this);
    LDB_PP_ROB_V[32].set_cfg(16'h0, 16'h0, 16'h0, 20'h20FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[32].set_space_addr("MSG", 20'h20FA0);
    LDB_PP_ROB_V[32].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[32].set_space_addr("MEM-SB",20'h20FA0);
    LDB_PP_ROB_V[32].set_space_addr("MEM", 20'h20FA0);
      LDB_PP_ROB_V[32].set_space("MEM");
      LDB_PP_ROB_V[32].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[32].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[32].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[32].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[32].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[32]:dont_test") ) LDB_PP_ROB_V[32].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[32] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[33]";
    `endif
    HQM_LDB_PP2VDEV[33] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[33]", this);
    HQM_LDB_PP2VDEV[33].set_cfg(16'h0, 16'h0, 16'h0, 20'h21F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[33].set_space_addr("MSG", 20'h21F8C);
    HQM_LDB_PP2VDEV[33].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[33].set_space_addr("MEM-SB",20'h21F8C);
    HQM_LDB_PP2VDEV[33].set_space_addr("MEM", 20'h21F8C);
      HQM_LDB_PP2VDEV[33].set_space("MEM");
      HQM_LDB_PP2VDEV[33].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[33].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[33].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[33].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[33].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[33]:dont_test") ) HQM_LDB_PP2VDEV[33].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[33] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[33]";
    `endif
    LDB_PP_ROB_V[33] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[33]", this);
    LDB_PP_ROB_V[33].set_cfg(16'h0, 16'h0, 16'h0, 20'h21FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[33].set_space_addr("MSG", 20'h21FA0);
    LDB_PP_ROB_V[33].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[33].set_space_addr("MEM-SB",20'h21FA0);
    LDB_PP_ROB_V[33].set_space_addr("MEM", 20'h21FA0);
      LDB_PP_ROB_V[33].set_space("MEM");
      LDB_PP_ROB_V[33].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[33].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[33].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[33].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[33].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[33]:dont_test") ) LDB_PP_ROB_V[33].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[33] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[34]";
    `endif
    HQM_LDB_PP2VDEV[34] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[34]", this);
    HQM_LDB_PP2VDEV[34].set_cfg(16'h0, 16'h0, 16'h0, 20'h22F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[34].set_space_addr("MSG", 20'h22F8C);
    HQM_LDB_PP2VDEV[34].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[34].set_space_addr("MEM-SB",20'h22F8C);
    HQM_LDB_PP2VDEV[34].set_space_addr("MEM", 20'h22F8C);
      HQM_LDB_PP2VDEV[34].set_space("MEM");
      HQM_LDB_PP2VDEV[34].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[34].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[34].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[34].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[34].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[34]:dont_test") ) HQM_LDB_PP2VDEV[34].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[34] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[34]";
    `endif
    LDB_PP_ROB_V[34] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[34]", this);
    LDB_PP_ROB_V[34].set_cfg(16'h0, 16'h0, 16'h0, 20'h22FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[34].set_space_addr("MSG", 20'h22FA0);
    LDB_PP_ROB_V[34].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[34].set_space_addr("MEM-SB",20'h22FA0);
    LDB_PP_ROB_V[34].set_space_addr("MEM", 20'h22FA0);
      LDB_PP_ROB_V[34].set_space("MEM");
      LDB_PP_ROB_V[34].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[34].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[34].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[34].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[34].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[34]:dont_test") ) LDB_PP_ROB_V[34].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[34] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[35]";
    `endif
    HQM_LDB_PP2VDEV[35] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[35]", this);
    HQM_LDB_PP2VDEV[35].set_cfg(16'h0, 16'h0, 16'h0, 20'h23F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[35].set_space_addr("MSG", 20'h23F8C);
    HQM_LDB_PP2VDEV[35].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[35].set_space_addr("MEM-SB",20'h23F8C);
    HQM_LDB_PP2VDEV[35].set_space_addr("MEM", 20'h23F8C);
      HQM_LDB_PP2VDEV[35].set_space("MEM");
      HQM_LDB_PP2VDEV[35].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[35].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[35].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[35].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[35].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[35]:dont_test") ) HQM_LDB_PP2VDEV[35].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[35] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[35]";
    `endif
    LDB_PP_ROB_V[35] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[35]", this);
    LDB_PP_ROB_V[35].set_cfg(16'h0, 16'h0, 16'h0, 20'h23FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[35].set_space_addr("MSG", 20'h23FA0);
    LDB_PP_ROB_V[35].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[35].set_space_addr("MEM-SB",20'h23FA0);
    LDB_PP_ROB_V[35].set_space_addr("MEM", 20'h23FA0);
      LDB_PP_ROB_V[35].set_space("MEM");
      LDB_PP_ROB_V[35].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[35].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[35].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[35].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[35].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[35]:dont_test") ) LDB_PP_ROB_V[35].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[35] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[36]";
    `endif
    HQM_LDB_PP2VDEV[36] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[36]", this);
    HQM_LDB_PP2VDEV[36].set_cfg(16'h0, 16'h0, 16'h0, 20'h24F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[36].set_space_addr("MSG", 20'h24F8C);
    HQM_LDB_PP2VDEV[36].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[36].set_space_addr("MEM-SB",20'h24F8C);
    HQM_LDB_PP2VDEV[36].set_space_addr("MEM", 20'h24F8C);
      HQM_LDB_PP2VDEV[36].set_space("MEM");
      HQM_LDB_PP2VDEV[36].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[36].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[36].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[36].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[36].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[36]:dont_test") ) HQM_LDB_PP2VDEV[36].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[36] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[36]";
    `endif
    LDB_PP_ROB_V[36] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[36]", this);
    LDB_PP_ROB_V[36].set_cfg(16'h0, 16'h0, 16'h0, 20'h24FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[36].set_space_addr("MSG", 20'h24FA0);
    LDB_PP_ROB_V[36].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[36].set_space_addr("MEM-SB",20'h24FA0);
    LDB_PP_ROB_V[36].set_space_addr("MEM", 20'h24FA0);
      LDB_PP_ROB_V[36].set_space("MEM");
      LDB_PP_ROB_V[36].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[36].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[36].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[36].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[36].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[36]:dont_test") ) LDB_PP_ROB_V[36].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[36] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[37]";
    `endif
    HQM_LDB_PP2VDEV[37] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[37]", this);
    HQM_LDB_PP2VDEV[37].set_cfg(16'h0, 16'h0, 16'h0, 20'h25F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[37].set_space_addr("MSG", 20'h25F8C);
    HQM_LDB_PP2VDEV[37].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[37].set_space_addr("MEM-SB",20'h25F8C);
    HQM_LDB_PP2VDEV[37].set_space_addr("MEM", 20'h25F8C);
      HQM_LDB_PP2VDEV[37].set_space("MEM");
      HQM_LDB_PP2VDEV[37].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[37].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[37].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[37].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[37].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[37]:dont_test") ) HQM_LDB_PP2VDEV[37].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[37] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[37]";
    `endif
    LDB_PP_ROB_V[37] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[37]", this);
    LDB_PP_ROB_V[37].set_cfg(16'h0, 16'h0, 16'h0, 20'h25FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[37].set_space_addr("MSG", 20'h25FA0);
    LDB_PP_ROB_V[37].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[37].set_space_addr("MEM-SB",20'h25FA0);
    LDB_PP_ROB_V[37].set_space_addr("MEM", 20'h25FA0);
      LDB_PP_ROB_V[37].set_space("MEM");
      LDB_PP_ROB_V[37].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[37].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[37].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[37].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[37].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[37]:dont_test") ) LDB_PP_ROB_V[37].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[37] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[38]";
    `endif
    HQM_LDB_PP2VDEV[38] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[38]", this);
    HQM_LDB_PP2VDEV[38].set_cfg(16'h0, 16'h0, 16'h0, 20'h26F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[38].set_space_addr("MSG", 20'h26F8C);
    HQM_LDB_PP2VDEV[38].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[38].set_space_addr("MEM-SB",20'h26F8C);
    HQM_LDB_PP2VDEV[38].set_space_addr("MEM", 20'h26F8C);
      HQM_LDB_PP2VDEV[38].set_space("MEM");
      HQM_LDB_PP2VDEV[38].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[38].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[38].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[38].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[38].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[38]:dont_test") ) HQM_LDB_PP2VDEV[38].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[38] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[38]";
    `endif
    LDB_PP_ROB_V[38] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[38]", this);
    LDB_PP_ROB_V[38].set_cfg(16'h0, 16'h0, 16'h0, 20'h26FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[38].set_space_addr("MSG", 20'h26FA0);
    LDB_PP_ROB_V[38].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[38].set_space_addr("MEM-SB",20'h26FA0);
    LDB_PP_ROB_V[38].set_space_addr("MEM", 20'h26FA0);
      LDB_PP_ROB_V[38].set_space("MEM");
      LDB_PP_ROB_V[38].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[38].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[38].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[38].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[38].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[38]:dont_test") ) LDB_PP_ROB_V[38].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[38] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[39]";
    `endif
    HQM_LDB_PP2VDEV[39] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[39]", this);
    HQM_LDB_PP2VDEV[39].set_cfg(16'h0, 16'h0, 16'h0, 20'h27F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[39].set_space_addr("MSG", 20'h27F8C);
    HQM_LDB_PP2VDEV[39].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[39].set_space_addr("MEM-SB",20'h27F8C);
    HQM_LDB_PP2VDEV[39].set_space_addr("MEM", 20'h27F8C);
      HQM_LDB_PP2VDEV[39].set_space("MEM");
      HQM_LDB_PP2VDEV[39].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[39].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[39].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[39].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[39].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[39]:dont_test") ) HQM_LDB_PP2VDEV[39].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[39] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[39]";
    `endif
    LDB_PP_ROB_V[39] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[39]", this);
    LDB_PP_ROB_V[39].set_cfg(16'h0, 16'h0, 16'h0, 20'h27FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[39].set_space_addr("MSG", 20'h27FA0);
    LDB_PP_ROB_V[39].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[39].set_space_addr("MEM-SB",20'h27FA0);
    LDB_PP_ROB_V[39].set_space_addr("MEM", 20'h27FA0);
      LDB_PP_ROB_V[39].set_space("MEM");
      LDB_PP_ROB_V[39].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[39].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[39].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[39].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[39].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[39]:dont_test") ) LDB_PP_ROB_V[39].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[39] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[40]";
    `endif
    HQM_LDB_PP2VDEV[40] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[40]", this);
    HQM_LDB_PP2VDEV[40].set_cfg(16'h0, 16'h0, 16'h0, 20'h28F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[40].set_space_addr("MSG", 20'h28F8C);
    HQM_LDB_PP2VDEV[40].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[40].set_space_addr("MEM-SB",20'h28F8C);
    HQM_LDB_PP2VDEV[40].set_space_addr("MEM", 20'h28F8C);
      HQM_LDB_PP2VDEV[40].set_space("MEM");
      HQM_LDB_PP2VDEV[40].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[40].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[40].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[40].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[40].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[40]:dont_test") ) HQM_LDB_PP2VDEV[40].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[40] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[40]";
    `endif
    LDB_PP_ROB_V[40] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[40]", this);
    LDB_PP_ROB_V[40].set_cfg(16'h0, 16'h0, 16'h0, 20'h28FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[40].set_space_addr("MSG", 20'h28FA0);
    LDB_PP_ROB_V[40].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[40].set_space_addr("MEM-SB",20'h28FA0);
    LDB_PP_ROB_V[40].set_space_addr("MEM", 20'h28FA0);
      LDB_PP_ROB_V[40].set_space("MEM");
      LDB_PP_ROB_V[40].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[40].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[40].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[40].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[40].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[40]:dont_test") ) LDB_PP_ROB_V[40].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[40] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[41]";
    `endif
    HQM_LDB_PP2VDEV[41] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[41]", this);
    HQM_LDB_PP2VDEV[41].set_cfg(16'h0, 16'h0, 16'h0, 20'h29F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[41].set_space_addr("MSG", 20'h29F8C);
    HQM_LDB_PP2VDEV[41].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[41].set_space_addr("MEM-SB",20'h29F8C);
    HQM_LDB_PP2VDEV[41].set_space_addr("MEM", 20'h29F8C);
      HQM_LDB_PP2VDEV[41].set_space("MEM");
      HQM_LDB_PP2VDEV[41].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[41].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[41].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[41].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[41].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[41]:dont_test") ) HQM_LDB_PP2VDEV[41].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[41] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[41]";
    `endif
    LDB_PP_ROB_V[41] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[41]", this);
    LDB_PP_ROB_V[41].set_cfg(16'h0, 16'h0, 16'h0, 20'h29FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[41].set_space_addr("MSG", 20'h29FA0);
    LDB_PP_ROB_V[41].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[41].set_space_addr("MEM-SB",20'h29FA0);
    LDB_PP_ROB_V[41].set_space_addr("MEM", 20'h29FA0);
      LDB_PP_ROB_V[41].set_space("MEM");
      LDB_PP_ROB_V[41].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[41].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[41].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[41].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[41].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[41]:dont_test") ) LDB_PP_ROB_V[41].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[41] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[42]";
    `endif
    HQM_LDB_PP2VDEV[42] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[42]", this);
    HQM_LDB_PP2VDEV[42].set_cfg(16'h0, 16'h0, 16'h0, 20'h2AF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[42].set_space_addr("MSG", 20'h2AF8C);
    HQM_LDB_PP2VDEV[42].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[42].set_space_addr("MEM-SB",20'h2AF8C);
    HQM_LDB_PP2VDEV[42].set_space_addr("MEM", 20'h2AF8C);
      HQM_LDB_PP2VDEV[42].set_space("MEM");
      HQM_LDB_PP2VDEV[42].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[42].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[42].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[42].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[42].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[42]:dont_test") ) HQM_LDB_PP2VDEV[42].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[42] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[42]";
    `endif
    LDB_PP_ROB_V[42] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[42]", this);
    LDB_PP_ROB_V[42].set_cfg(16'h0, 16'h0, 16'h0, 20'h2AFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[42].set_space_addr("MSG", 20'h2AFA0);
    LDB_PP_ROB_V[42].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[42].set_space_addr("MEM-SB",20'h2AFA0);
    LDB_PP_ROB_V[42].set_space_addr("MEM", 20'h2AFA0);
      LDB_PP_ROB_V[42].set_space("MEM");
      LDB_PP_ROB_V[42].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[42].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[42].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[42].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[42].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[42]:dont_test") ) LDB_PP_ROB_V[42].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[42] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[43]";
    `endif
    HQM_LDB_PP2VDEV[43] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[43]", this);
    HQM_LDB_PP2VDEV[43].set_cfg(16'h0, 16'h0, 16'h0, 20'h2BF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[43].set_space_addr("MSG", 20'h2BF8C);
    HQM_LDB_PP2VDEV[43].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[43].set_space_addr("MEM-SB",20'h2BF8C);
    HQM_LDB_PP2VDEV[43].set_space_addr("MEM", 20'h2BF8C);
      HQM_LDB_PP2VDEV[43].set_space("MEM");
      HQM_LDB_PP2VDEV[43].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[43].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[43].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[43].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[43].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[43]:dont_test") ) HQM_LDB_PP2VDEV[43].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[43] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[43]";
    `endif
    LDB_PP_ROB_V[43] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[43]", this);
    LDB_PP_ROB_V[43].set_cfg(16'h0, 16'h0, 16'h0, 20'h2BFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[43].set_space_addr("MSG", 20'h2BFA0);
    LDB_PP_ROB_V[43].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[43].set_space_addr("MEM-SB",20'h2BFA0);
    LDB_PP_ROB_V[43].set_space_addr("MEM", 20'h2BFA0);
      LDB_PP_ROB_V[43].set_space("MEM");
      LDB_PP_ROB_V[43].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[43].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[43].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[43].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[43].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[43]:dont_test") ) LDB_PP_ROB_V[43].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[43] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[44]";
    `endif
    HQM_LDB_PP2VDEV[44] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[44]", this);
    HQM_LDB_PP2VDEV[44].set_cfg(16'h0, 16'h0, 16'h0, 20'h2CF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[44].set_space_addr("MSG", 20'h2CF8C);
    HQM_LDB_PP2VDEV[44].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[44].set_space_addr("MEM-SB",20'h2CF8C);
    HQM_LDB_PP2VDEV[44].set_space_addr("MEM", 20'h2CF8C);
      HQM_LDB_PP2VDEV[44].set_space("MEM");
      HQM_LDB_PP2VDEV[44].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[44].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[44].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[44].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[44].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[44]:dont_test") ) HQM_LDB_PP2VDEV[44].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[44] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[44]";
    `endif
    LDB_PP_ROB_V[44] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[44]", this);
    LDB_PP_ROB_V[44].set_cfg(16'h0, 16'h0, 16'h0, 20'h2CFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[44].set_space_addr("MSG", 20'h2CFA0);
    LDB_PP_ROB_V[44].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[44].set_space_addr("MEM-SB",20'h2CFA0);
    LDB_PP_ROB_V[44].set_space_addr("MEM", 20'h2CFA0);
      LDB_PP_ROB_V[44].set_space("MEM");
      LDB_PP_ROB_V[44].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[44].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[44].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[44].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[44].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[44]:dont_test") ) LDB_PP_ROB_V[44].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[44] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[45]";
    `endif
    HQM_LDB_PP2VDEV[45] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[45]", this);
    HQM_LDB_PP2VDEV[45].set_cfg(16'h0, 16'h0, 16'h0, 20'h2DF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[45].set_space_addr("MSG", 20'h2DF8C);
    HQM_LDB_PP2VDEV[45].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[45].set_space_addr("MEM-SB",20'h2DF8C);
    HQM_LDB_PP2VDEV[45].set_space_addr("MEM", 20'h2DF8C);
      HQM_LDB_PP2VDEV[45].set_space("MEM");
      HQM_LDB_PP2VDEV[45].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[45].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[45].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[45].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[45].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[45]:dont_test") ) HQM_LDB_PP2VDEV[45].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[45] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[45]";
    `endif
    LDB_PP_ROB_V[45] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[45]", this);
    LDB_PP_ROB_V[45].set_cfg(16'h0, 16'h0, 16'h0, 20'h2DFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[45].set_space_addr("MSG", 20'h2DFA0);
    LDB_PP_ROB_V[45].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[45].set_space_addr("MEM-SB",20'h2DFA0);
    LDB_PP_ROB_V[45].set_space_addr("MEM", 20'h2DFA0);
      LDB_PP_ROB_V[45].set_space("MEM");
      LDB_PP_ROB_V[45].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[45].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[45].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[45].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[45].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[45]:dont_test") ) LDB_PP_ROB_V[45].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[45] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[46]";
    `endif
    HQM_LDB_PP2VDEV[46] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[46]", this);
    HQM_LDB_PP2VDEV[46].set_cfg(16'h0, 16'h0, 16'h0, 20'h2EF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[46].set_space_addr("MSG", 20'h2EF8C);
    HQM_LDB_PP2VDEV[46].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[46].set_space_addr("MEM-SB",20'h2EF8C);
    HQM_LDB_PP2VDEV[46].set_space_addr("MEM", 20'h2EF8C);
      HQM_LDB_PP2VDEV[46].set_space("MEM");
      HQM_LDB_PP2VDEV[46].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[46].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[46].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[46].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[46].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[46]:dont_test") ) HQM_LDB_PP2VDEV[46].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[46] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[46]";
    `endif
    LDB_PP_ROB_V[46] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[46]", this);
    LDB_PP_ROB_V[46].set_cfg(16'h0, 16'h0, 16'h0, 20'h2EFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[46].set_space_addr("MSG", 20'h2EFA0);
    LDB_PP_ROB_V[46].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[46].set_space_addr("MEM-SB",20'h2EFA0);
    LDB_PP_ROB_V[46].set_space_addr("MEM", 20'h2EFA0);
      LDB_PP_ROB_V[46].set_space("MEM");
      LDB_PP_ROB_V[46].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[46].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[46].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[46].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[46].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[46]:dont_test") ) LDB_PP_ROB_V[46].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[46] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[47]";
    `endif
    HQM_LDB_PP2VDEV[47] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[47]", this);
    HQM_LDB_PP2VDEV[47].set_cfg(16'h0, 16'h0, 16'h0, 20'h2FF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[47].set_space_addr("MSG", 20'h2FF8C);
    HQM_LDB_PP2VDEV[47].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[47].set_space_addr("MEM-SB",20'h2FF8C);
    HQM_LDB_PP2VDEV[47].set_space_addr("MEM", 20'h2FF8C);
      HQM_LDB_PP2VDEV[47].set_space("MEM");
      HQM_LDB_PP2VDEV[47].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[47].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[47].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[47].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[47].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[47]:dont_test") ) HQM_LDB_PP2VDEV[47].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[47] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[47]";
    `endif
    LDB_PP_ROB_V[47] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[47]", this);
    LDB_PP_ROB_V[47].set_cfg(16'h0, 16'h0, 16'h0, 20'h2FFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[47].set_space_addr("MSG", 20'h2FFA0);
    LDB_PP_ROB_V[47].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[47].set_space_addr("MEM-SB",20'h2FFA0);
    LDB_PP_ROB_V[47].set_space_addr("MEM", 20'h2FFA0);
      LDB_PP_ROB_V[47].set_space("MEM");
      LDB_PP_ROB_V[47].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[47].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[47].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[47].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[47].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[47]:dont_test") ) LDB_PP_ROB_V[47].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[47] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[48]";
    `endif
    HQM_LDB_PP2VDEV[48] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[48]", this);
    HQM_LDB_PP2VDEV[48].set_cfg(16'h0, 16'h0, 16'h0, 20'h30F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[48].set_space_addr("MSG", 20'h30F8C);
    HQM_LDB_PP2VDEV[48].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[48].set_space_addr("MEM-SB",20'h30F8C);
    HQM_LDB_PP2VDEV[48].set_space_addr("MEM", 20'h30F8C);
      HQM_LDB_PP2VDEV[48].set_space("MEM");
      HQM_LDB_PP2VDEV[48].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[48].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[48].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[48].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[48].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[48]:dont_test") ) HQM_LDB_PP2VDEV[48].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[48] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[48]";
    `endif
    LDB_PP_ROB_V[48] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[48]", this);
    LDB_PP_ROB_V[48].set_cfg(16'h0, 16'h0, 16'h0, 20'h30FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[48].set_space_addr("MSG", 20'h30FA0);
    LDB_PP_ROB_V[48].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[48].set_space_addr("MEM-SB",20'h30FA0);
    LDB_PP_ROB_V[48].set_space_addr("MEM", 20'h30FA0);
      LDB_PP_ROB_V[48].set_space("MEM");
      LDB_PP_ROB_V[48].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[48].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[48].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[48].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[48].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[48]:dont_test") ) LDB_PP_ROB_V[48].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[48] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[49]";
    `endif
    HQM_LDB_PP2VDEV[49] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[49]", this);
    HQM_LDB_PP2VDEV[49].set_cfg(16'h0, 16'h0, 16'h0, 20'h31F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[49].set_space_addr("MSG", 20'h31F8C);
    HQM_LDB_PP2VDEV[49].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[49].set_space_addr("MEM-SB",20'h31F8C);
    HQM_LDB_PP2VDEV[49].set_space_addr("MEM", 20'h31F8C);
      HQM_LDB_PP2VDEV[49].set_space("MEM");
      HQM_LDB_PP2VDEV[49].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[49].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[49].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[49].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[49].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[49]:dont_test") ) HQM_LDB_PP2VDEV[49].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[49] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[49]";
    `endif
    LDB_PP_ROB_V[49] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[49]", this);
    LDB_PP_ROB_V[49].set_cfg(16'h0, 16'h0, 16'h0, 20'h31FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[49].set_space_addr("MSG", 20'h31FA0);
    LDB_PP_ROB_V[49].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[49].set_space_addr("MEM-SB",20'h31FA0);
    LDB_PP_ROB_V[49].set_space_addr("MEM", 20'h31FA0);
      LDB_PP_ROB_V[49].set_space("MEM");
      LDB_PP_ROB_V[49].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[49].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[49].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[49].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[49].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[49]:dont_test") ) LDB_PP_ROB_V[49].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[49] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[50]";
    `endif
    HQM_LDB_PP2VDEV[50] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[50]", this);
    HQM_LDB_PP2VDEV[50].set_cfg(16'h0, 16'h0, 16'h0, 20'h32F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[50].set_space_addr("MSG", 20'h32F8C);
    HQM_LDB_PP2VDEV[50].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[50].set_space_addr("MEM-SB",20'h32F8C);
    HQM_LDB_PP2VDEV[50].set_space_addr("MEM", 20'h32F8C);
      HQM_LDB_PP2VDEV[50].set_space("MEM");
      HQM_LDB_PP2VDEV[50].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[50].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[50].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[50].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[50].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[50]:dont_test") ) HQM_LDB_PP2VDEV[50].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[50] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[50]";
    `endif
    LDB_PP_ROB_V[50] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[50]", this);
    LDB_PP_ROB_V[50].set_cfg(16'h0, 16'h0, 16'h0, 20'h32FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[50].set_space_addr("MSG", 20'h32FA0);
    LDB_PP_ROB_V[50].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[50].set_space_addr("MEM-SB",20'h32FA0);
    LDB_PP_ROB_V[50].set_space_addr("MEM", 20'h32FA0);
      LDB_PP_ROB_V[50].set_space("MEM");
      LDB_PP_ROB_V[50].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[50].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[50].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[50].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[50].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[50]:dont_test") ) LDB_PP_ROB_V[50].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[50] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[51]";
    `endif
    HQM_LDB_PP2VDEV[51] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[51]", this);
    HQM_LDB_PP2VDEV[51].set_cfg(16'h0, 16'h0, 16'h0, 20'h33F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[51].set_space_addr("MSG", 20'h33F8C);
    HQM_LDB_PP2VDEV[51].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[51].set_space_addr("MEM-SB",20'h33F8C);
    HQM_LDB_PP2VDEV[51].set_space_addr("MEM", 20'h33F8C);
      HQM_LDB_PP2VDEV[51].set_space("MEM");
      HQM_LDB_PP2VDEV[51].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[51].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[51].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[51].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[51].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[51]:dont_test") ) HQM_LDB_PP2VDEV[51].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[51] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[51]";
    `endif
    LDB_PP_ROB_V[51] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[51]", this);
    LDB_PP_ROB_V[51].set_cfg(16'h0, 16'h0, 16'h0, 20'h33FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[51].set_space_addr("MSG", 20'h33FA0);
    LDB_PP_ROB_V[51].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[51].set_space_addr("MEM-SB",20'h33FA0);
    LDB_PP_ROB_V[51].set_space_addr("MEM", 20'h33FA0);
      LDB_PP_ROB_V[51].set_space("MEM");
      LDB_PP_ROB_V[51].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[51].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[51].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[51].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[51].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[51]:dont_test") ) LDB_PP_ROB_V[51].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[51] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[52]";
    `endif
    HQM_LDB_PP2VDEV[52] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[52]", this);
    HQM_LDB_PP2VDEV[52].set_cfg(16'h0, 16'h0, 16'h0, 20'h34F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[52].set_space_addr("MSG", 20'h34F8C);
    HQM_LDB_PP2VDEV[52].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[52].set_space_addr("MEM-SB",20'h34F8C);
    HQM_LDB_PP2VDEV[52].set_space_addr("MEM", 20'h34F8C);
      HQM_LDB_PP2VDEV[52].set_space("MEM");
      HQM_LDB_PP2VDEV[52].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[52].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[52].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[52].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[52].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[52]:dont_test") ) HQM_LDB_PP2VDEV[52].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[52] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[52]";
    `endif
    LDB_PP_ROB_V[52] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[52]", this);
    LDB_PP_ROB_V[52].set_cfg(16'h0, 16'h0, 16'h0, 20'h34FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[52].set_space_addr("MSG", 20'h34FA0);
    LDB_PP_ROB_V[52].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[52].set_space_addr("MEM-SB",20'h34FA0);
    LDB_PP_ROB_V[52].set_space_addr("MEM", 20'h34FA0);
      LDB_PP_ROB_V[52].set_space("MEM");
      LDB_PP_ROB_V[52].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[52].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[52].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[52].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[52].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[52]:dont_test") ) LDB_PP_ROB_V[52].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[52] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[53]";
    `endif
    HQM_LDB_PP2VDEV[53] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[53]", this);
    HQM_LDB_PP2VDEV[53].set_cfg(16'h0, 16'h0, 16'h0, 20'h35F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[53].set_space_addr("MSG", 20'h35F8C);
    HQM_LDB_PP2VDEV[53].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[53].set_space_addr("MEM-SB",20'h35F8C);
    HQM_LDB_PP2VDEV[53].set_space_addr("MEM", 20'h35F8C);
      HQM_LDB_PP2VDEV[53].set_space("MEM");
      HQM_LDB_PP2VDEV[53].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[53].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[53].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[53].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[53].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[53]:dont_test") ) HQM_LDB_PP2VDEV[53].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[53] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[53]";
    `endif
    LDB_PP_ROB_V[53] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[53]", this);
    LDB_PP_ROB_V[53].set_cfg(16'h0, 16'h0, 16'h0, 20'h35FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[53].set_space_addr("MSG", 20'h35FA0);
    LDB_PP_ROB_V[53].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[53].set_space_addr("MEM-SB",20'h35FA0);
    LDB_PP_ROB_V[53].set_space_addr("MEM", 20'h35FA0);
      LDB_PP_ROB_V[53].set_space("MEM");
      LDB_PP_ROB_V[53].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[53].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[53].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[53].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[53].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[53]:dont_test") ) LDB_PP_ROB_V[53].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[53] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[54]";
    `endif
    HQM_LDB_PP2VDEV[54] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[54]", this);
    HQM_LDB_PP2VDEV[54].set_cfg(16'h0, 16'h0, 16'h0, 20'h36F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[54].set_space_addr("MSG", 20'h36F8C);
    HQM_LDB_PP2VDEV[54].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[54].set_space_addr("MEM-SB",20'h36F8C);
    HQM_LDB_PP2VDEV[54].set_space_addr("MEM", 20'h36F8C);
      HQM_LDB_PP2VDEV[54].set_space("MEM");
      HQM_LDB_PP2VDEV[54].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[54].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[54].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[54].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[54].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[54]:dont_test") ) HQM_LDB_PP2VDEV[54].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[54] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[54]";
    `endif
    LDB_PP_ROB_V[54] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[54]", this);
    LDB_PP_ROB_V[54].set_cfg(16'h0, 16'h0, 16'h0, 20'h36FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[54].set_space_addr("MSG", 20'h36FA0);
    LDB_PP_ROB_V[54].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[54].set_space_addr("MEM-SB",20'h36FA0);
    LDB_PP_ROB_V[54].set_space_addr("MEM", 20'h36FA0);
      LDB_PP_ROB_V[54].set_space("MEM");
      LDB_PP_ROB_V[54].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[54].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[54].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[54].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[54].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[54]:dont_test") ) LDB_PP_ROB_V[54].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[54] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[55]";
    `endif
    HQM_LDB_PP2VDEV[55] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[55]", this);
    HQM_LDB_PP2VDEV[55].set_cfg(16'h0, 16'h0, 16'h0, 20'h37F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[55].set_space_addr("MSG", 20'h37F8C);
    HQM_LDB_PP2VDEV[55].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[55].set_space_addr("MEM-SB",20'h37F8C);
    HQM_LDB_PP2VDEV[55].set_space_addr("MEM", 20'h37F8C);
      HQM_LDB_PP2VDEV[55].set_space("MEM");
      HQM_LDB_PP2VDEV[55].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[55].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[55].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[55].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[55].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[55]:dont_test") ) HQM_LDB_PP2VDEV[55].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[55] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[55]";
    `endif
    LDB_PP_ROB_V[55] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[55]", this);
    LDB_PP_ROB_V[55].set_cfg(16'h0, 16'h0, 16'h0, 20'h37FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[55].set_space_addr("MSG", 20'h37FA0);
    LDB_PP_ROB_V[55].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[55].set_space_addr("MEM-SB",20'h37FA0);
    LDB_PP_ROB_V[55].set_space_addr("MEM", 20'h37FA0);
      LDB_PP_ROB_V[55].set_space("MEM");
      LDB_PP_ROB_V[55].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[55].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[55].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[55].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[55].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[55]:dont_test") ) LDB_PP_ROB_V[55].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[55] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[56]";
    `endif
    HQM_LDB_PP2VDEV[56] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[56]", this);
    HQM_LDB_PP2VDEV[56].set_cfg(16'h0, 16'h0, 16'h0, 20'h38F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[56].set_space_addr("MSG", 20'h38F8C);
    HQM_LDB_PP2VDEV[56].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[56].set_space_addr("MEM-SB",20'h38F8C);
    HQM_LDB_PP2VDEV[56].set_space_addr("MEM", 20'h38F8C);
      HQM_LDB_PP2VDEV[56].set_space("MEM");
      HQM_LDB_PP2VDEV[56].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[56].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[56].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[56].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[56].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[56]:dont_test") ) HQM_LDB_PP2VDEV[56].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[56] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[56]";
    `endif
    LDB_PP_ROB_V[56] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[56]", this);
    LDB_PP_ROB_V[56].set_cfg(16'h0, 16'h0, 16'h0, 20'h38FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[56].set_space_addr("MSG", 20'h38FA0);
    LDB_PP_ROB_V[56].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[56].set_space_addr("MEM-SB",20'h38FA0);
    LDB_PP_ROB_V[56].set_space_addr("MEM", 20'h38FA0);
      LDB_PP_ROB_V[56].set_space("MEM");
      LDB_PP_ROB_V[56].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[56].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[56].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[56].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[56].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[56]:dont_test") ) LDB_PP_ROB_V[56].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[56] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[57]";
    `endif
    HQM_LDB_PP2VDEV[57] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[57]", this);
    HQM_LDB_PP2VDEV[57].set_cfg(16'h0, 16'h0, 16'h0, 20'h39F8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[57].set_space_addr("MSG", 20'h39F8C);
    HQM_LDB_PP2VDEV[57].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[57].set_space_addr("MEM-SB",20'h39F8C);
    HQM_LDB_PP2VDEV[57].set_space_addr("MEM", 20'h39F8C);
      HQM_LDB_PP2VDEV[57].set_space("MEM");
      HQM_LDB_PP2VDEV[57].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[57].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[57].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[57].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[57].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[57]:dont_test") ) HQM_LDB_PP2VDEV[57].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[57] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[57]";
    `endif
    LDB_PP_ROB_V[57] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[57]", this);
    LDB_PP_ROB_V[57].set_cfg(16'h0, 16'h0, 16'h0, 20'h39FA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[57].set_space_addr("MSG", 20'h39FA0);
    LDB_PP_ROB_V[57].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[57].set_space_addr("MEM-SB",20'h39FA0);
    LDB_PP_ROB_V[57].set_space_addr("MEM", 20'h39FA0);
      LDB_PP_ROB_V[57].set_space("MEM");
      LDB_PP_ROB_V[57].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[57].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[57].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[57].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[57].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[57]:dont_test") ) LDB_PP_ROB_V[57].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[57] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[58]";
    `endif
    HQM_LDB_PP2VDEV[58] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[58]", this);
    HQM_LDB_PP2VDEV[58].set_cfg(16'h0, 16'h0, 16'h0, 20'h3AF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[58].set_space_addr("MSG", 20'h3AF8C);
    HQM_LDB_PP2VDEV[58].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[58].set_space_addr("MEM-SB",20'h3AF8C);
    HQM_LDB_PP2VDEV[58].set_space_addr("MEM", 20'h3AF8C);
      HQM_LDB_PP2VDEV[58].set_space("MEM");
      HQM_LDB_PP2VDEV[58].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[58].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[58].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[58].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[58].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[58]:dont_test") ) HQM_LDB_PP2VDEV[58].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[58] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[58]";
    `endif
    LDB_PP_ROB_V[58] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[58]", this);
    LDB_PP_ROB_V[58].set_cfg(16'h0, 16'h0, 16'h0, 20'h3AFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[58].set_space_addr("MSG", 20'h3AFA0);
    LDB_PP_ROB_V[58].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[58].set_space_addr("MEM-SB",20'h3AFA0);
    LDB_PP_ROB_V[58].set_space_addr("MEM", 20'h3AFA0);
      LDB_PP_ROB_V[58].set_space("MEM");
      LDB_PP_ROB_V[58].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[58].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[58].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[58].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[58].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[58]:dont_test") ) LDB_PP_ROB_V[58].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[58] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[59]";
    `endif
    HQM_LDB_PP2VDEV[59] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[59]", this);
    HQM_LDB_PP2VDEV[59].set_cfg(16'h0, 16'h0, 16'h0, 20'h3BF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[59].set_space_addr("MSG", 20'h3BF8C);
    HQM_LDB_PP2VDEV[59].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[59].set_space_addr("MEM-SB",20'h3BF8C);
    HQM_LDB_PP2VDEV[59].set_space_addr("MEM", 20'h3BF8C);
      HQM_LDB_PP2VDEV[59].set_space("MEM");
      HQM_LDB_PP2VDEV[59].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[59].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[59].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[59].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[59].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[59]:dont_test") ) HQM_LDB_PP2VDEV[59].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[59] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[59]";
    `endif
    LDB_PP_ROB_V[59] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[59]", this);
    LDB_PP_ROB_V[59].set_cfg(16'h0, 16'h0, 16'h0, 20'h3BFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[59].set_space_addr("MSG", 20'h3BFA0);
    LDB_PP_ROB_V[59].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[59].set_space_addr("MEM-SB",20'h3BFA0);
    LDB_PP_ROB_V[59].set_space_addr("MEM", 20'h3BFA0);
      LDB_PP_ROB_V[59].set_space("MEM");
      LDB_PP_ROB_V[59].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[59].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[59].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[59].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[59].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[59]:dont_test") ) LDB_PP_ROB_V[59].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[59] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[60]";
    `endif
    HQM_LDB_PP2VDEV[60] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[60]", this);
    HQM_LDB_PP2VDEV[60].set_cfg(16'h0, 16'h0, 16'h0, 20'h3CF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[60].set_space_addr("MSG", 20'h3CF8C);
    HQM_LDB_PP2VDEV[60].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[60].set_space_addr("MEM-SB",20'h3CF8C);
    HQM_LDB_PP2VDEV[60].set_space_addr("MEM", 20'h3CF8C);
      HQM_LDB_PP2VDEV[60].set_space("MEM");
      HQM_LDB_PP2VDEV[60].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[60].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[60].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[60].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[60].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[60]:dont_test") ) HQM_LDB_PP2VDEV[60].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[60] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[60]";
    `endif
    LDB_PP_ROB_V[60] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[60]", this);
    LDB_PP_ROB_V[60].set_cfg(16'h0, 16'h0, 16'h0, 20'h3CFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[60].set_space_addr("MSG", 20'h3CFA0);
    LDB_PP_ROB_V[60].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[60].set_space_addr("MEM-SB",20'h3CFA0);
    LDB_PP_ROB_V[60].set_space_addr("MEM", 20'h3CFA0);
      LDB_PP_ROB_V[60].set_space("MEM");
      LDB_PP_ROB_V[60].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[60].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[60].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[60].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[60].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[60]:dont_test") ) LDB_PP_ROB_V[60].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[60] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[61]";
    `endif
    HQM_LDB_PP2VDEV[61] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[61]", this);
    HQM_LDB_PP2VDEV[61].set_cfg(16'h0, 16'h0, 16'h0, 20'h3DF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[61].set_space_addr("MSG", 20'h3DF8C);
    HQM_LDB_PP2VDEV[61].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[61].set_space_addr("MEM-SB",20'h3DF8C);
    HQM_LDB_PP2VDEV[61].set_space_addr("MEM", 20'h3DF8C);
      HQM_LDB_PP2VDEV[61].set_space("MEM");
      HQM_LDB_PP2VDEV[61].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[61].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[61].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[61].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[61].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[61]:dont_test") ) HQM_LDB_PP2VDEV[61].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[61] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[61]";
    `endif
    LDB_PP_ROB_V[61] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[61]", this);
    LDB_PP_ROB_V[61].set_cfg(16'h0, 16'h0, 16'h0, 20'h3DFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[61].set_space_addr("MSG", 20'h3DFA0);
    LDB_PP_ROB_V[61].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[61].set_space_addr("MEM-SB",20'h3DFA0);
    LDB_PP_ROB_V[61].set_space_addr("MEM", 20'h3DFA0);
      LDB_PP_ROB_V[61].set_space("MEM");
      LDB_PP_ROB_V[61].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[61].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[61].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[61].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[61].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[61]:dont_test") ) LDB_PP_ROB_V[61].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[61] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[62]";
    `endif
    HQM_LDB_PP2VDEV[62] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[62]", this);
    HQM_LDB_PP2VDEV[62].set_cfg(16'h0, 16'h0, 16'h0, 20'h3EF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[62].set_space_addr("MSG", 20'h3EF8C);
    HQM_LDB_PP2VDEV[62].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[62].set_space_addr("MEM-SB",20'h3EF8C);
    HQM_LDB_PP2VDEV[62].set_space_addr("MEM", 20'h3EF8C);
      HQM_LDB_PP2VDEV[62].set_space("MEM");
      HQM_LDB_PP2VDEV[62].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[62].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[62].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[62].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[62].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[62]:dont_test") ) HQM_LDB_PP2VDEV[62].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[62] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[62]";
    `endif
    LDB_PP_ROB_V[62] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[62]", this);
    LDB_PP_ROB_V[62].set_cfg(16'h0, 16'h0, 16'h0, 20'h3EFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[62].set_space_addr("MSG", 20'h3EFA0);
    LDB_PP_ROB_V[62].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[62].set_space_addr("MEM-SB",20'h3EFA0);
    LDB_PP_ROB_V[62].set_space_addr("MEM", 20'h3EFA0);
      LDB_PP_ROB_V[62].set_space("MEM");
      LDB_PP_ROB_V[62].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[62].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[62].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[62].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[62].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[62]:dont_test") ) LDB_PP_ROB_V[62].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[62] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_LDB_PP2VDEV[63]";
    `endif
    HQM_LDB_PP2VDEV[63] = hqm_system_csr_bridge_HQM_LDB_PP2VDEV_reg::type_id::create("HQM_LDB_PP2VDEV[63]", this);
    HQM_LDB_PP2VDEV[63].set_cfg(16'h0, 16'h0, 16'h0, 20'h3FF8C, 32, 32'b00000000000000000000000000000000);
    HQM_LDB_PP2VDEV[63].set_space_addr("MSG", 20'h3FF8C);
    HQM_LDB_PP2VDEV[63].set_space_addr("msg_bus_port", 'h21);
    HQM_LDB_PP2VDEV[63].set_space_addr("MEM-SB",20'h3FF8C);
    HQM_LDB_PP2VDEV[63].set_space_addr("MEM", 20'h3FF8C);
      HQM_LDB_PP2VDEV[63].set_space("MEM");
      HQM_LDB_PP2VDEV[63].set_msg_opcode("MEM-SB");
      HQM_LDB_PP2VDEV[63].set_fid(4'h0, "MEM-SB");
  	HQM_LDB_PP2VDEV[63].set_bar(4'h2, "MEM-SB");
      HQM_LDB_PP2VDEV[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_LDB_PP2VDEV[63].set_user_attribute("diag_reg", "0");
      HQM_LDB_PP2VDEV[63].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_LDB_PP2VDEV[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_LDB_PP2VDEV[63]:dont_test") ) HQM_LDB_PP2VDEV[63].set_test_reg(1'b0);
      if (!add_reg( HQM_LDB_PP2VDEV[63] )) begin
        `sla_error(get_name(), ("Could not add register HQM_LDB_PP2VDEV[63]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_PP_ROB_V[63]";
    `endif
    LDB_PP_ROB_V[63] = hqm_system_csr_bridge_LDB_PP_ROB_V_reg::type_id::create("LDB_PP_ROB_V[63]", this);
    LDB_PP_ROB_V[63].set_cfg(16'h0, 16'h0, 16'h0, 20'h3FFA0, 32, 32'b00000000000000000000000000000000);
    LDB_PP_ROB_V[63].set_space_addr("MSG", 20'h3FFA0);
    LDB_PP_ROB_V[63].set_space_addr("msg_bus_port", 'h21);
    LDB_PP_ROB_V[63].set_space_addr("MEM-SB",20'h3FFA0);
    LDB_PP_ROB_V[63].set_space_addr("MEM", 20'h3FFA0);
      LDB_PP_ROB_V[63].set_space("MEM");
      LDB_PP_ROB_V[63].set_msg_opcode("MEM-SB");
      LDB_PP_ROB_V[63].set_fid(4'h0, "MEM-SB");
  	LDB_PP_ROB_V[63].set_bar(4'h2, "MEM-SB");
      LDB_PP_ROB_V[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_PP_ROB_V[63].set_user_attribute("diag_reg", "0");
      LDB_PP_ROB_V[63].set_user_attribute("HqmIsFeatureReg", "0");
      LDB_PP_ROB_V[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_PP_ROB_V[63]:dont_test") ) LDB_PP_ROB_V[63].set_test_reg(1'b0);
      if (!add_reg( LDB_PP_ROB_V[63] )) begin
        `sla_error(get_name(), ("Could not add register LDB_PP_ROB_V[63]"));
      end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_CQ_ADDR_L[%0d]",i);
    `endif
    DIR_CQ_ADDR_L[i] = hqm_system_csr_bridge_DIR_CQ_ADDR_L_reg::type_id::create($psprintf("DIR_CQ_ADDR_L[%0d]",i), this);
    DIR_CQ_ADDR_L[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0FC0 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_CQ_ADDR_L[i].set_space_addr("MSG",  (16'h0FC0 + (i*4096)) );
    DIR_CQ_ADDR_L[i].set_space_addr("msg_bus_port", 'h21);
    DIR_CQ_ADDR_L[i].set_space_addr("MEM-SB", (12'hFC0 + (i*4096)) );
    DIR_CQ_ADDR_L[i].set_space_addr("MEM",  (16'h0FC0 + (i*4096)) );
      DIR_CQ_ADDR_L[i].set_space("MEM");
      DIR_CQ_ADDR_L[i].set_msg_opcode("MEM-SB");
      DIR_CQ_ADDR_L[i].set_fid(4'h0, "MEM-SB");
  	DIR_CQ_ADDR_L[i].set_bar(4'h2, "MEM-SB");
      DIR_CQ_ADDR_L[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ_ADDR_L[i].set_user_attribute("diag_reg", "0");
      DIR_CQ_ADDR_L[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ_ADDR_L[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_CQ_ADDR_L[%0d]:dont_test",i)) ) DIR_CQ_ADDR_L[i].set_test_reg(1'b0);
      if (!add_reg( DIR_CQ_ADDR_L[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_CQ_ADDR_L[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_CQ_ADDR_U[%0d]",i);
    `endif
    DIR_CQ_ADDR_U[i] = hqm_system_csr_bridge_DIR_CQ_ADDR_U_reg::type_id::create($psprintf("DIR_CQ_ADDR_U[%0d]",i), this);
    DIR_CQ_ADDR_U[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0FC4 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_CQ_ADDR_U[i].set_space_addr("MSG",  (16'h0FC4 + (i*4096)) );
    DIR_CQ_ADDR_U[i].set_space_addr("msg_bus_port", 'h21);
    DIR_CQ_ADDR_U[i].set_space_addr("MEM-SB", (12'hFC4 + (i*4096)) );
    DIR_CQ_ADDR_U[i].set_space_addr("MEM",  (16'h0FC4 + (i*4096)) );
      DIR_CQ_ADDR_U[i].set_space("MEM");
      DIR_CQ_ADDR_U[i].set_msg_opcode("MEM-SB");
      DIR_CQ_ADDR_U[i].set_fid(4'h0, "MEM-SB");
  	DIR_CQ_ADDR_U[i].set_bar(4'h2, "MEM-SB");
      DIR_CQ_ADDR_U[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ_ADDR_U[i].set_user_attribute("diag_reg", "0");
      DIR_CQ_ADDR_U[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ_ADDR_U[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_CQ_ADDR_U[%0d]:dont_test",i)) ) DIR_CQ_ADDR_U[i].set_test_reg(1'b0);
      if (!add_reg( DIR_CQ_ADDR_U[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_CQ_ADDR_U[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_PP2VAS[%0d]",i);
    `endif
    DIR_PP2VAS[i] = hqm_system_csr_bridge_DIR_PP2VAS_reg::type_id::create($psprintf("DIR_PP2VAS[%0d]",i), this);
    DIR_PP2VAS[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0FC8 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_PP2VAS[i].set_space_addr("MSG",  (16'h0FC8 + (i*4096)) );
    DIR_PP2VAS[i].set_space_addr("msg_bus_port", 'h21);
    DIR_PP2VAS[i].set_space_addr("MEM-SB", (12'hFC8 + (i*4096)) );
    DIR_PP2VAS[i].set_space_addr("MEM",  (16'h0FC8 + (i*4096)) );
      DIR_PP2VAS[i].set_space("MEM");
      DIR_PP2VAS[i].set_msg_opcode("MEM-SB");
      DIR_PP2VAS[i].set_fid(4'h0, "MEM-SB");
  	DIR_PP2VAS[i].set_bar(4'h2, "MEM-SB");
      DIR_PP2VAS[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP2VAS[i].set_user_attribute("diag_reg", "0");
      DIR_PP2VAS[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP2VAS[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_PP2VAS[%0d]:dont_test",i)) ) DIR_PP2VAS[i].set_test_reg(1'b0);
      if (!add_reg( DIR_PP2VAS[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_PP2VAS[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[0]";
    `endif
    HQM_DIR_PP2VDEV[0] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[0]", this);
    HQM_DIR_PP2VDEV[0].set_cfg(16'h0, 16'h0, 16'h0, 16'h0FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[0].set_space_addr("MSG", 16'h0FCC);
    HQM_DIR_PP2VDEV[0].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[0].set_space_addr("MEM-SB",12'hFCC);
    HQM_DIR_PP2VDEV[0].set_space_addr("MEM", 16'h0FCC);
      HQM_DIR_PP2VDEV[0].set_space("MEM");
      HQM_DIR_PP2VDEV[0].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[0].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[0].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[0].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[0].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[0]:dont_test") ) HQM_DIR_PP2VDEV[0].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[0] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[0]"));
      end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_PP_V[%0d]",i);
    `endif
    DIR_PP_V[i] = hqm_system_csr_bridge_DIR_PP_V_reg::type_id::create($psprintf("DIR_PP_V[%0d]",i), this);
    DIR_PP_V[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0FD0 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_PP_V[i].set_space_addr("MSG",  (16'h0FD0 + (i*4096)) );
    DIR_PP_V[i].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_V[i].set_space_addr("MEM-SB", (12'hFD0 + (i*4096)) );
    DIR_PP_V[i].set_space_addr("MEM",  (16'h0FD0 + (i*4096)) );
      DIR_PP_V[i].set_space("MEM");
      DIR_PP_V[i].set_msg_opcode("MEM-SB");
      DIR_PP_V[i].set_fid(4'h0, "MEM-SB");
  	DIR_PP_V[i].set_bar(4'h2, "MEM-SB");
      DIR_PP_V[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_V[i].set_user_attribute("diag_reg", "0");
      DIR_PP_V[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_V[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_PP_V[%0d]:dont_test",i)) ) DIR_PP_V[i].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_V[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_PP_V[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_CQ2VF_PF_RO[%0d]",i);
    `endif
    DIR_CQ2VF_PF_RO[i] = hqm_system_csr_bridge_DIR_CQ2VF_PF_RO_reg::type_id::create($psprintf("DIR_CQ2VF_PF_RO[%0d]",i), this);
    DIR_CQ2VF_PF_RO[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0FD4 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_CQ2VF_PF_RO[i].set_space_addr("MSG",  (16'h0FD4 + (i*4096)) );
    DIR_CQ2VF_PF_RO[i].set_space_addr("msg_bus_port", 'h21);
    DIR_CQ2VF_PF_RO[i].set_space_addr("MEM-SB", (12'hFD4 + (i*4096)) );
    DIR_CQ2VF_PF_RO[i].set_space_addr("MEM",  (16'h0FD4 + (i*4096)) );
      DIR_CQ2VF_PF_RO[i].set_space("MEM");
      DIR_CQ2VF_PF_RO[i].set_msg_opcode("MEM-SB");
      DIR_CQ2VF_PF_RO[i].set_fid(4'h0, "MEM-SB");
  	DIR_CQ2VF_PF_RO[i].set_bar(4'h2, "MEM-SB");
      DIR_CQ2VF_PF_RO[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ2VF_PF_RO[i].set_user_attribute("diag_reg", "0");
      DIR_CQ2VF_PF_RO[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ2VF_PF_RO[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_CQ2VF_PF_RO[%0d]:dont_test",i)) ) DIR_CQ2VF_PF_RO[i].set_test_reg(1'b0);
      if (!add_reg( DIR_CQ2VF_PF_RO[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_CQ2VF_PF_RO[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_CQ_ISR[%0d]",i);
    `endif
    DIR_CQ_ISR[i] = hqm_system_csr_bridge_DIR_CQ_ISR_reg::type_id::create($psprintf("DIR_CQ_ISR[%0d]",i), this);
    DIR_CQ_ISR[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0FD8 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_CQ_ISR[i].set_space_addr("MSG",  (16'h0FD8 + (i*4096)) );
    DIR_CQ_ISR[i].set_space_addr("msg_bus_port", 'h21);
    DIR_CQ_ISR[i].set_space_addr("MEM-SB", (12'hFD8 + (i*4096)) );
    DIR_CQ_ISR[i].set_space_addr("MEM",  (16'h0FD8 + (i*4096)) );
      DIR_CQ_ISR[i].set_space("MEM");
      DIR_CQ_ISR[i].set_msg_opcode("MEM-SB");
      DIR_CQ_ISR[i].set_fid(4'h0, "MEM-SB");
  	DIR_CQ_ISR[i].set_bar(4'h2, "MEM-SB");
      DIR_CQ_ISR[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ_ISR[i].set_user_attribute("diag_reg", "0");
      DIR_CQ_ISR[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ_ISR[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_CQ_ISR[%0d]:dont_test",i)) ) DIR_CQ_ISR[i].set_test_reg(1'b0);
      if (!add_reg( DIR_CQ_ISR[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_CQ_ISR[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_CQ_PASID[%0d]",i);
    `endif
    DIR_CQ_PASID[i] = hqm_system_csr_bridge_DIR_CQ_PASID_reg::type_id::create($psprintf("DIR_CQ_PASID[%0d]",i), this);
    DIR_CQ_PASID[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0FDC + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_CQ_PASID[i].set_space_addr("MSG",  (16'h0FDC + (i*4096)) );
    DIR_CQ_PASID[i].set_space_addr("msg_bus_port", 'h21);
    DIR_CQ_PASID[i].set_space_addr("MEM-SB", (12'hFDC + (i*4096)) );
    DIR_CQ_PASID[i].set_space_addr("MEM",  (16'h0FDC + (i*4096)) );
      DIR_CQ_PASID[i].set_space("MEM");
      DIR_CQ_PASID[i].set_msg_opcode("MEM-SB");
      DIR_CQ_PASID[i].set_fid(4'h0, "MEM-SB");
  	DIR_CQ_PASID[i].set_bar(4'h2, "MEM-SB");
      DIR_CQ_PASID[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ_PASID[i].set_user_attribute("diag_reg", "0");
      DIR_CQ_PASID[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ_PASID[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_CQ_PASID[%0d]:dont_test",i)) ) DIR_CQ_PASID[i].set_test_reg(1'b0);
      if (!add_reg( DIR_CQ_PASID[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_CQ_PASID[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("DIR_CQ_FMT[%0d]",i);
    `endif
    DIR_CQ_FMT[i] = hqm_system_csr_bridge_DIR_CQ_FMT_reg::type_id::create($psprintf("DIR_CQ_FMT[%0d]",i), this);
    DIR_CQ_FMT[i].set_cfg(16'h0, 16'h0, 16'h0, (16'h0FE0 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    DIR_CQ_FMT[i].set_space_addr("MSG",  (16'h0FE0 + (i*4096)) );
    DIR_CQ_FMT[i].set_space_addr("msg_bus_port", 'h21);
    DIR_CQ_FMT[i].set_space_addr("MEM-SB", (12'hFE0 + (i*4096)) );
    DIR_CQ_FMT[i].set_space_addr("MEM",  (16'h0FE0 + (i*4096)) );
      DIR_CQ_FMT[i].set_space("MEM");
      DIR_CQ_FMT[i].set_msg_opcode("MEM-SB");
      DIR_CQ_FMT[i].set_fid(4'h0, "MEM-SB");
  	DIR_CQ_FMT[i].set_bar(4'h2, "MEM-SB");
      DIR_CQ_FMT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ_FMT[i].set_user_attribute("diag_reg", "0");
      DIR_CQ_FMT[i].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ_FMT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("DIR_CQ_FMT[%0d]:dont_test",i)) ) DIR_CQ_FMT[i].set_test_reg(1'b0);
      if (!add_reg( DIR_CQ_FMT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register DIR_CQ_FMT[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[0]";
    `endif
    DIR_PP_ROB_V[0] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[0]", this);
    DIR_PP_ROB_V[0].set_cfg(16'h0, 16'h0, 16'h0, 16'h0FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[0].set_space_addr("MSG", 16'h0FE4);
    DIR_PP_ROB_V[0].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[0].set_space_addr("MEM-SB",12'hFE4);
    DIR_PP_ROB_V[0].set_space_addr("MEM", 16'h0FE4);
      DIR_PP_ROB_V[0].set_space("MEM");
      DIR_PP_ROB_V[0].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[0].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[0].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[0].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[0].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[0]:dont_test") ) DIR_PP_ROB_V[0].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[0] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[1]";
    `endif
    HQM_DIR_PP2VDEV[1] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[1]", this);
    HQM_DIR_PP2VDEV[1].set_cfg(16'h0, 16'h0, 16'h0, 16'h1FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[1].set_space_addr("MSG", 16'h1FCC);
    HQM_DIR_PP2VDEV[1].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[1].set_space_addr("MEM-SB",16'h1FCC);
    HQM_DIR_PP2VDEV[1].set_space_addr("MEM", 16'h1FCC);
      HQM_DIR_PP2VDEV[1].set_space("MEM");
      HQM_DIR_PP2VDEV[1].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[1].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[1].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[1].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[1].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[1]:dont_test") ) HQM_DIR_PP2VDEV[1].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[1] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[1]";
    `endif
    DIR_PP_ROB_V[1] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[1]", this);
    DIR_PP_ROB_V[1].set_cfg(16'h0, 16'h0, 16'h0, 16'h1FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[1].set_space_addr("MSG", 16'h1FE4);
    DIR_PP_ROB_V[1].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[1].set_space_addr("MEM-SB",16'h1FE4);
    DIR_PP_ROB_V[1].set_space_addr("MEM", 16'h1FE4);
      DIR_PP_ROB_V[1].set_space("MEM");
      DIR_PP_ROB_V[1].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[1].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[1].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[1].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[1].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[1]:dont_test") ) DIR_PP_ROB_V[1].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[1] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[2]";
    `endif
    HQM_DIR_PP2VDEV[2] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[2]", this);
    HQM_DIR_PP2VDEV[2].set_cfg(16'h0, 16'h0, 16'h0, 16'h2FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[2].set_space_addr("MSG", 16'h2FCC);
    HQM_DIR_PP2VDEV[2].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[2].set_space_addr("MEM-SB",16'h2FCC);
    HQM_DIR_PP2VDEV[2].set_space_addr("MEM", 16'h2FCC);
      HQM_DIR_PP2VDEV[2].set_space("MEM");
      HQM_DIR_PP2VDEV[2].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[2].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[2].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[2].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[2].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[2]:dont_test") ) HQM_DIR_PP2VDEV[2].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[2] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[2]";
    `endif
    DIR_PP_ROB_V[2] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[2]", this);
    DIR_PP_ROB_V[2].set_cfg(16'h0, 16'h0, 16'h0, 16'h2FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[2].set_space_addr("MSG", 16'h2FE4);
    DIR_PP_ROB_V[2].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[2].set_space_addr("MEM-SB",16'h2FE4);
    DIR_PP_ROB_V[2].set_space_addr("MEM", 16'h2FE4);
      DIR_PP_ROB_V[2].set_space("MEM");
      DIR_PP_ROB_V[2].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[2].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[2].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[2].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[2].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[2]:dont_test") ) DIR_PP_ROB_V[2].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[2] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[3]";
    `endif
    HQM_DIR_PP2VDEV[3] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[3]", this);
    HQM_DIR_PP2VDEV[3].set_cfg(16'h0, 16'h0, 16'h0, 16'h3FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[3].set_space_addr("MSG", 16'h3FCC);
    HQM_DIR_PP2VDEV[3].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[3].set_space_addr("MEM-SB",16'h3FCC);
    HQM_DIR_PP2VDEV[3].set_space_addr("MEM", 16'h3FCC);
      HQM_DIR_PP2VDEV[3].set_space("MEM");
      HQM_DIR_PP2VDEV[3].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[3].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[3].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[3].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[3].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[3]:dont_test") ) HQM_DIR_PP2VDEV[3].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[3] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[3]";
    `endif
    DIR_PP_ROB_V[3] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[3]", this);
    DIR_PP_ROB_V[3].set_cfg(16'h0, 16'h0, 16'h0, 16'h3FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[3].set_space_addr("MSG", 16'h3FE4);
    DIR_PP_ROB_V[3].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[3].set_space_addr("MEM-SB",16'h3FE4);
    DIR_PP_ROB_V[3].set_space_addr("MEM", 16'h3FE4);
      DIR_PP_ROB_V[3].set_space("MEM");
      DIR_PP_ROB_V[3].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[3].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[3].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[3].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[3].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[3]:dont_test") ) DIR_PP_ROB_V[3].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[3] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[4]";
    `endif
    HQM_DIR_PP2VDEV[4] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[4]", this);
    HQM_DIR_PP2VDEV[4].set_cfg(16'h0, 16'h0, 16'h0, 16'h4FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[4].set_space_addr("MSG", 16'h4FCC);
    HQM_DIR_PP2VDEV[4].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[4].set_space_addr("MEM-SB",16'h4FCC);
    HQM_DIR_PP2VDEV[4].set_space_addr("MEM", 16'h4FCC);
      HQM_DIR_PP2VDEV[4].set_space("MEM");
      HQM_DIR_PP2VDEV[4].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[4].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[4].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[4].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[4].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[4]:dont_test") ) HQM_DIR_PP2VDEV[4].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[4] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[4]";
    `endif
    DIR_PP_ROB_V[4] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[4]", this);
    DIR_PP_ROB_V[4].set_cfg(16'h0, 16'h0, 16'h0, 16'h4FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[4].set_space_addr("MSG", 16'h4FE4);
    DIR_PP_ROB_V[4].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[4].set_space_addr("MEM-SB",16'h4FE4);
    DIR_PP_ROB_V[4].set_space_addr("MEM", 16'h4FE4);
      DIR_PP_ROB_V[4].set_space("MEM");
      DIR_PP_ROB_V[4].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[4].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[4].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[4].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[4].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[4]:dont_test") ) DIR_PP_ROB_V[4].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[4] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[5]";
    `endif
    HQM_DIR_PP2VDEV[5] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[5]", this);
    HQM_DIR_PP2VDEV[5].set_cfg(16'h0, 16'h0, 16'h0, 16'h5FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[5].set_space_addr("MSG", 16'h5FCC);
    HQM_DIR_PP2VDEV[5].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[5].set_space_addr("MEM-SB",16'h5FCC);
    HQM_DIR_PP2VDEV[5].set_space_addr("MEM", 16'h5FCC);
      HQM_DIR_PP2VDEV[5].set_space("MEM");
      HQM_DIR_PP2VDEV[5].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[5].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[5].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[5].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[5].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[5]:dont_test") ) HQM_DIR_PP2VDEV[5].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[5] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[5]";
    `endif
    DIR_PP_ROB_V[5] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[5]", this);
    DIR_PP_ROB_V[5].set_cfg(16'h0, 16'h0, 16'h0, 16'h5FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[5].set_space_addr("MSG", 16'h5FE4);
    DIR_PP_ROB_V[5].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[5].set_space_addr("MEM-SB",16'h5FE4);
    DIR_PP_ROB_V[5].set_space_addr("MEM", 16'h5FE4);
      DIR_PP_ROB_V[5].set_space("MEM");
      DIR_PP_ROB_V[5].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[5].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[5].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[5].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[5].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[5]:dont_test") ) DIR_PP_ROB_V[5].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[5] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[6]";
    `endif
    HQM_DIR_PP2VDEV[6] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[6]", this);
    HQM_DIR_PP2VDEV[6].set_cfg(16'h0, 16'h0, 16'h0, 16'h6FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[6].set_space_addr("MSG", 16'h6FCC);
    HQM_DIR_PP2VDEV[6].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[6].set_space_addr("MEM-SB",16'h6FCC);
    HQM_DIR_PP2VDEV[6].set_space_addr("MEM", 16'h6FCC);
      HQM_DIR_PP2VDEV[6].set_space("MEM");
      HQM_DIR_PP2VDEV[6].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[6].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[6].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[6].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[6].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[6]:dont_test") ) HQM_DIR_PP2VDEV[6].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[6] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[6]";
    `endif
    DIR_PP_ROB_V[6] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[6]", this);
    DIR_PP_ROB_V[6].set_cfg(16'h0, 16'h0, 16'h0, 16'h6FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[6].set_space_addr("MSG", 16'h6FE4);
    DIR_PP_ROB_V[6].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[6].set_space_addr("MEM-SB",16'h6FE4);
    DIR_PP_ROB_V[6].set_space_addr("MEM", 16'h6FE4);
      DIR_PP_ROB_V[6].set_space("MEM");
      DIR_PP_ROB_V[6].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[6].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[6].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[6].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[6].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[6]:dont_test") ) DIR_PP_ROB_V[6].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[6] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[7]";
    `endif
    HQM_DIR_PP2VDEV[7] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[7]", this);
    HQM_DIR_PP2VDEV[7].set_cfg(16'h0, 16'h0, 16'h0, 16'h7FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[7].set_space_addr("MSG", 16'h7FCC);
    HQM_DIR_PP2VDEV[7].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[7].set_space_addr("MEM-SB",16'h7FCC);
    HQM_DIR_PP2VDEV[7].set_space_addr("MEM", 16'h7FCC);
      HQM_DIR_PP2VDEV[7].set_space("MEM");
      HQM_DIR_PP2VDEV[7].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[7].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[7].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[7].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[7].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[7]:dont_test") ) HQM_DIR_PP2VDEV[7].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[7] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[7]";
    `endif
    DIR_PP_ROB_V[7] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[7]", this);
    DIR_PP_ROB_V[7].set_cfg(16'h0, 16'h0, 16'h0, 16'h7FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[7].set_space_addr("MSG", 16'h7FE4);
    DIR_PP_ROB_V[7].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[7].set_space_addr("MEM-SB",16'h7FE4);
    DIR_PP_ROB_V[7].set_space_addr("MEM", 16'h7FE4);
      DIR_PP_ROB_V[7].set_space("MEM");
      DIR_PP_ROB_V[7].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[7].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[7].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[7].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[7].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[7]:dont_test") ) DIR_PP_ROB_V[7].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[7] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[8]";
    `endif
    HQM_DIR_PP2VDEV[8] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[8]", this);
    HQM_DIR_PP2VDEV[8].set_cfg(16'h0, 16'h0, 16'h0, 16'h8FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[8].set_space_addr("MSG", 16'h8FCC);
    HQM_DIR_PP2VDEV[8].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[8].set_space_addr("MEM-SB",16'h8FCC);
    HQM_DIR_PP2VDEV[8].set_space_addr("MEM", 16'h8FCC);
      HQM_DIR_PP2VDEV[8].set_space("MEM");
      HQM_DIR_PP2VDEV[8].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[8].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[8].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[8].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[8].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[8]:dont_test") ) HQM_DIR_PP2VDEV[8].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[8] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[8]";
    `endif
    DIR_PP_ROB_V[8] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[8]", this);
    DIR_PP_ROB_V[8].set_cfg(16'h0, 16'h0, 16'h0, 16'h8FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[8].set_space_addr("MSG", 16'h8FE4);
    DIR_PP_ROB_V[8].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[8].set_space_addr("MEM-SB",16'h8FE4);
    DIR_PP_ROB_V[8].set_space_addr("MEM", 16'h8FE4);
      DIR_PP_ROB_V[8].set_space("MEM");
      DIR_PP_ROB_V[8].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[8].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[8].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[8].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[8].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[8]:dont_test") ) DIR_PP_ROB_V[8].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[8] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[9]";
    `endif
    HQM_DIR_PP2VDEV[9] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[9]", this);
    HQM_DIR_PP2VDEV[9].set_cfg(16'h0, 16'h0, 16'h0, 16'h9FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[9].set_space_addr("MSG", 16'h9FCC);
    HQM_DIR_PP2VDEV[9].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[9].set_space_addr("MEM-SB",16'h9FCC);
    HQM_DIR_PP2VDEV[9].set_space_addr("MEM", 16'h9FCC);
      HQM_DIR_PP2VDEV[9].set_space("MEM");
      HQM_DIR_PP2VDEV[9].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[9].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[9].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[9].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[9].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[9]:dont_test") ) HQM_DIR_PP2VDEV[9].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[9] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[9]";
    `endif
    DIR_PP_ROB_V[9] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[9]", this);
    DIR_PP_ROB_V[9].set_cfg(16'h0, 16'h0, 16'h0, 16'h9FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[9].set_space_addr("MSG", 16'h9FE4);
    DIR_PP_ROB_V[9].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[9].set_space_addr("MEM-SB",16'h9FE4);
    DIR_PP_ROB_V[9].set_space_addr("MEM", 16'h9FE4);
      DIR_PP_ROB_V[9].set_space("MEM");
      DIR_PP_ROB_V[9].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[9].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[9].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[9].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[9].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[9]:dont_test") ) DIR_PP_ROB_V[9].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[9] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[10]";
    `endif
    HQM_DIR_PP2VDEV[10] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[10]", this);
    HQM_DIR_PP2VDEV[10].set_cfg(16'h0, 16'h0, 16'h0, 20'h0AFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[10].set_space_addr("MSG", 20'h0AFCC);
    HQM_DIR_PP2VDEV[10].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[10].set_space_addr("MEM-SB",16'hAFCC);
    HQM_DIR_PP2VDEV[10].set_space_addr("MEM", 20'h0AFCC);
      HQM_DIR_PP2VDEV[10].set_space("MEM");
      HQM_DIR_PP2VDEV[10].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[10].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[10].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[10].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[10].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[10]:dont_test") ) HQM_DIR_PP2VDEV[10].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[10] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[10]";
    `endif
    DIR_PP_ROB_V[10] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[10]", this);
    DIR_PP_ROB_V[10].set_cfg(16'h0, 16'h0, 16'h0, 20'h0AFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[10].set_space_addr("MSG", 20'h0AFE4);
    DIR_PP_ROB_V[10].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[10].set_space_addr("MEM-SB",16'hAFE4);
    DIR_PP_ROB_V[10].set_space_addr("MEM", 20'h0AFE4);
      DIR_PP_ROB_V[10].set_space("MEM");
      DIR_PP_ROB_V[10].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[10].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[10].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[10].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[10].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[10]:dont_test") ) DIR_PP_ROB_V[10].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[10] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[11]";
    `endif
    HQM_DIR_PP2VDEV[11] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[11]", this);
    HQM_DIR_PP2VDEV[11].set_cfg(16'h0, 16'h0, 16'h0, 20'h0BFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[11].set_space_addr("MSG", 20'h0BFCC);
    HQM_DIR_PP2VDEV[11].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[11].set_space_addr("MEM-SB",16'hBFCC);
    HQM_DIR_PP2VDEV[11].set_space_addr("MEM", 20'h0BFCC);
      HQM_DIR_PP2VDEV[11].set_space("MEM");
      HQM_DIR_PP2VDEV[11].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[11].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[11].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[11].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[11].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[11]:dont_test") ) HQM_DIR_PP2VDEV[11].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[11] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[11]";
    `endif
    DIR_PP_ROB_V[11] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[11]", this);
    DIR_PP_ROB_V[11].set_cfg(16'h0, 16'h0, 16'h0, 20'h0BFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[11].set_space_addr("MSG", 20'h0BFE4);
    DIR_PP_ROB_V[11].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[11].set_space_addr("MEM-SB",16'hBFE4);
    DIR_PP_ROB_V[11].set_space_addr("MEM", 20'h0BFE4);
      DIR_PP_ROB_V[11].set_space("MEM");
      DIR_PP_ROB_V[11].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[11].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[11].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[11].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[11].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[11]:dont_test") ) DIR_PP_ROB_V[11].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[11] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[12]";
    `endif
    HQM_DIR_PP2VDEV[12] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[12]", this);
    HQM_DIR_PP2VDEV[12].set_cfg(16'h0, 16'h0, 16'h0, 20'h0CFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[12].set_space_addr("MSG", 20'h0CFCC);
    HQM_DIR_PP2VDEV[12].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[12].set_space_addr("MEM-SB",16'hCFCC);
    HQM_DIR_PP2VDEV[12].set_space_addr("MEM", 20'h0CFCC);
      HQM_DIR_PP2VDEV[12].set_space("MEM");
      HQM_DIR_PP2VDEV[12].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[12].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[12].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[12].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[12].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[12]:dont_test") ) HQM_DIR_PP2VDEV[12].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[12] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[12]";
    `endif
    DIR_PP_ROB_V[12] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[12]", this);
    DIR_PP_ROB_V[12].set_cfg(16'h0, 16'h0, 16'h0, 20'h0CFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[12].set_space_addr("MSG", 20'h0CFE4);
    DIR_PP_ROB_V[12].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[12].set_space_addr("MEM-SB",16'hCFE4);
    DIR_PP_ROB_V[12].set_space_addr("MEM", 20'h0CFE4);
      DIR_PP_ROB_V[12].set_space("MEM");
      DIR_PP_ROB_V[12].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[12].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[12].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[12].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[12].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[12]:dont_test") ) DIR_PP_ROB_V[12].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[12] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[13]";
    `endif
    HQM_DIR_PP2VDEV[13] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[13]", this);
    HQM_DIR_PP2VDEV[13].set_cfg(16'h0, 16'h0, 16'h0, 20'h0DFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[13].set_space_addr("MSG", 20'h0DFCC);
    HQM_DIR_PP2VDEV[13].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[13].set_space_addr("MEM-SB",16'hDFCC);
    HQM_DIR_PP2VDEV[13].set_space_addr("MEM", 20'h0DFCC);
      HQM_DIR_PP2VDEV[13].set_space("MEM");
      HQM_DIR_PP2VDEV[13].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[13].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[13].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[13].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[13].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[13]:dont_test") ) HQM_DIR_PP2VDEV[13].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[13] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[13]";
    `endif
    DIR_PP_ROB_V[13] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[13]", this);
    DIR_PP_ROB_V[13].set_cfg(16'h0, 16'h0, 16'h0, 20'h0DFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[13].set_space_addr("MSG", 20'h0DFE4);
    DIR_PP_ROB_V[13].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[13].set_space_addr("MEM-SB",16'hDFE4);
    DIR_PP_ROB_V[13].set_space_addr("MEM", 20'h0DFE4);
      DIR_PP_ROB_V[13].set_space("MEM");
      DIR_PP_ROB_V[13].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[13].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[13].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[13].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[13].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[13]:dont_test") ) DIR_PP_ROB_V[13].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[13] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[14]";
    `endif
    HQM_DIR_PP2VDEV[14] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[14]", this);
    HQM_DIR_PP2VDEV[14].set_cfg(16'h0, 16'h0, 16'h0, 20'h0EFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[14].set_space_addr("MSG", 20'h0EFCC);
    HQM_DIR_PP2VDEV[14].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[14].set_space_addr("MEM-SB",16'hEFCC);
    HQM_DIR_PP2VDEV[14].set_space_addr("MEM", 20'h0EFCC);
      HQM_DIR_PP2VDEV[14].set_space("MEM");
      HQM_DIR_PP2VDEV[14].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[14].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[14].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[14].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[14].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[14]:dont_test") ) HQM_DIR_PP2VDEV[14].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[14] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[14]";
    `endif
    DIR_PP_ROB_V[14] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[14]", this);
    DIR_PP_ROB_V[14].set_cfg(16'h0, 16'h0, 16'h0, 20'h0EFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[14].set_space_addr("MSG", 20'h0EFE4);
    DIR_PP_ROB_V[14].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[14].set_space_addr("MEM-SB",16'hEFE4);
    DIR_PP_ROB_V[14].set_space_addr("MEM", 20'h0EFE4);
      DIR_PP_ROB_V[14].set_space("MEM");
      DIR_PP_ROB_V[14].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[14].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[14].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[14].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[14].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[14]:dont_test") ) DIR_PP_ROB_V[14].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[14] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[15]";
    `endif
    HQM_DIR_PP2VDEV[15] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[15]", this);
    HQM_DIR_PP2VDEV[15].set_cfg(16'h0, 16'h0, 16'h0, 20'h0FFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[15].set_space_addr("MSG", 20'h0FFCC);
    HQM_DIR_PP2VDEV[15].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[15].set_space_addr("MEM-SB",16'hFFCC);
    HQM_DIR_PP2VDEV[15].set_space_addr("MEM", 20'h0FFCC);
      HQM_DIR_PP2VDEV[15].set_space("MEM");
      HQM_DIR_PP2VDEV[15].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[15].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[15].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[15].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[15].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[15]:dont_test") ) HQM_DIR_PP2VDEV[15].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[15] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[15]";
    `endif
    DIR_PP_ROB_V[15] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[15]", this);
    DIR_PP_ROB_V[15].set_cfg(16'h0, 16'h0, 16'h0, 20'h0FFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[15].set_space_addr("MSG", 20'h0FFE4);
    DIR_PP_ROB_V[15].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[15].set_space_addr("MEM-SB",16'hFFE4);
    DIR_PP_ROB_V[15].set_space_addr("MEM", 20'h0FFE4);
      DIR_PP_ROB_V[15].set_space("MEM");
      DIR_PP_ROB_V[15].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[15].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[15].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[15].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[15].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[15]:dont_test") ) DIR_PP_ROB_V[15].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[15] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[16]";
    `endif
    HQM_DIR_PP2VDEV[16] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[16]", this);
    HQM_DIR_PP2VDEV[16].set_cfg(16'h0, 16'h0, 16'h0, 20'h10FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[16].set_space_addr("MSG", 20'h10FCC);
    HQM_DIR_PP2VDEV[16].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[16].set_space_addr("MEM-SB",20'h10FCC);
    HQM_DIR_PP2VDEV[16].set_space_addr("MEM", 20'h10FCC);
      HQM_DIR_PP2VDEV[16].set_space("MEM");
      HQM_DIR_PP2VDEV[16].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[16].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[16].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[16].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[16].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[16]:dont_test") ) HQM_DIR_PP2VDEV[16].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[16] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[16]";
    `endif
    DIR_PP_ROB_V[16] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[16]", this);
    DIR_PP_ROB_V[16].set_cfg(16'h0, 16'h0, 16'h0, 20'h10FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[16].set_space_addr("MSG", 20'h10FE4);
    DIR_PP_ROB_V[16].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[16].set_space_addr("MEM-SB",20'h10FE4);
    DIR_PP_ROB_V[16].set_space_addr("MEM", 20'h10FE4);
      DIR_PP_ROB_V[16].set_space("MEM");
      DIR_PP_ROB_V[16].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[16].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[16].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[16].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[16].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[16]:dont_test") ) DIR_PP_ROB_V[16].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[16] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[17]";
    `endif
    HQM_DIR_PP2VDEV[17] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[17]", this);
    HQM_DIR_PP2VDEV[17].set_cfg(16'h0, 16'h0, 16'h0, 20'h11FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[17].set_space_addr("MSG", 20'h11FCC);
    HQM_DIR_PP2VDEV[17].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[17].set_space_addr("MEM-SB",20'h11FCC);
    HQM_DIR_PP2VDEV[17].set_space_addr("MEM", 20'h11FCC);
      HQM_DIR_PP2VDEV[17].set_space("MEM");
      HQM_DIR_PP2VDEV[17].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[17].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[17].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[17].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[17].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[17]:dont_test") ) HQM_DIR_PP2VDEV[17].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[17] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[17]";
    `endif
    DIR_PP_ROB_V[17] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[17]", this);
    DIR_PP_ROB_V[17].set_cfg(16'h0, 16'h0, 16'h0, 20'h11FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[17].set_space_addr("MSG", 20'h11FE4);
    DIR_PP_ROB_V[17].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[17].set_space_addr("MEM-SB",20'h11FE4);
    DIR_PP_ROB_V[17].set_space_addr("MEM", 20'h11FE4);
      DIR_PP_ROB_V[17].set_space("MEM");
      DIR_PP_ROB_V[17].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[17].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[17].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[17].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[17].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[17]:dont_test") ) DIR_PP_ROB_V[17].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[17] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[18]";
    `endif
    HQM_DIR_PP2VDEV[18] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[18]", this);
    HQM_DIR_PP2VDEV[18].set_cfg(16'h0, 16'h0, 16'h0, 20'h12FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[18].set_space_addr("MSG", 20'h12FCC);
    HQM_DIR_PP2VDEV[18].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[18].set_space_addr("MEM-SB",20'h12FCC);
    HQM_DIR_PP2VDEV[18].set_space_addr("MEM", 20'h12FCC);
      HQM_DIR_PP2VDEV[18].set_space("MEM");
      HQM_DIR_PP2VDEV[18].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[18].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[18].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[18].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[18].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[18]:dont_test") ) HQM_DIR_PP2VDEV[18].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[18] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[18]";
    `endif
    DIR_PP_ROB_V[18] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[18]", this);
    DIR_PP_ROB_V[18].set_cfg(16'h0, 16'h0, 16'h0, 20'h12FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[18].set_space_addr("MSG", 20'h12FE4);
    DIR_PP_ROB_V[18].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[18].set_space_addr("MEM-SB",20'h12FE4);
    DIR_PP_ROB_V[18].set_space_addr("MEM", 20'h12FE4);
      DIR_PP_ROB_V[18].set_space("MEM");
      DIR_PP_ROB_V[18].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[18].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[18].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[18].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[18].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[18]:dont_test") ) DIR_PP_ROB_V[18].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[18] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[19]";
    `endif
    HQM_DIR_PP2VDEV[19] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[19]", this);
    HQM_DIR_PP2VDEV[19].set_cfg(16'h0, 16'h0, 16'h0, 20'h13FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[19].set_space_addr("MSG", 20'h13FCC);
    HQM_DIR_PP2VDEV[19].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[19].set_space_addr("MEM-SB",20'h13FCC);
    HQM_DIR_PP2VDEV[19].set_space_addr("MEM", 20'h13FCC);
      HQM_DIR_PP2VDEV[19].set_space("MEM");
      HQM_DIR_PP2VDEV[19].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[19].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[19].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[19].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[19].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[19]:dont_test") ) HQM_DIR_PP2VDEV[19].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[19] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[19]";
    `endif
    DIR_PP_ROB_V[19] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[19]", this);
    DIR_PP_ROB_V[19].set_cfg(16'h0, 16'h0, 16'h0, 20'h13FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[19].set_space_addr("MSG", 20'h13FE4);
    DIR_PP_ROB_V[19].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[19].set_space_addr("MEM-SB",20'h13FE4);
    DIR_PP_ROB_V[19].set_space_addr("MEM", 20'h13FE4);
      DIR_PP_ROB_V[19].set_space("MEM");
      DIR_PP_ROB_V[19].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[19].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[19].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[19].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[19].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[19]:dont_test") ) DIR_PP_ROB_V[19].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[19] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[20]";
    `endif
    HQM_DIR_PP2VDEV[20] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[20]", this);
    HQM_DIR_PP2VDEV[20].set_cfg(16'h0, 16'h0, 16'h0, 20'h14FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[20].set_space_addr("MSG", 20'h14FCC);
    HQM_DIR_PP2VDEV[20].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[20].set_space_addr("MEM-SB",20'h14FCC);
    HQM_DIR_PP2VDEV[20].set_space_addr("MEM", 20'h14FCC);
      HQM_DIR_PP2VDEV[20].set_space("MEM");
      HQM_DIR_PP2VDEV[20].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[20].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[20].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[20].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[20].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[20]:dont_test") ) HQM_DIR_PP2VDEV[20].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[20] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[20]";
    `endif
    DIR_PP_ROB_V[20] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[20]", this);
    DIR_PP_ROB_V[20].set_cfg(16'h0, 16'h0, 16'h0, 20'h14FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[20].set_space_addr("MSG", 20'h14FE4);
    DIR_PP_ROB_V[20].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[20].set_space_addr("MEM-SB",20'h14FE4);
    DIR_PP_ROB_V[20].set_space_addr("MEM", 20'h14FE4);
      DIR_PP_ROB_V[20].set_space("MEM");
      DIR_PP_ROB_V[20].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[20].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[20].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[20].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[20].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[20]:dont_test") ) DIR_PP_ROB_V[20].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[20] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[21]";
    `endif
    HQM_DIR_PP2VDEV[21] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[21]", this);
    HQM_DIR_PP2VDEV[21].set_cfg(16'h0, 16'h0, 16'h0, 20'h15FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[21].set_space_addr("MSG", 20'h15FCC);
    HQM_DIR_PP2VDEV[21].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[21].set_space_addr("MEM-SB",20'h15FCC);
    HQM_DIR_PP2VDEV[21].set_space_addr("MEM", 20'h15FCC);
      HQM_DIR_PP2VDEV[21].set_space("MEM");
      HQM_DIR_PP2VDEV[21].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[21].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[21].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[21].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[21].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[21]:dont_test") ) HQM_DIR_PP2VDEV[21].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[21] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[21]";
    `endif
    DIR_PP_ROB_V[21] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[21]", this);
    DIR_PP_ROB_V[21].set_cfg(16'h0, 16'h0, 16'h0, 20'h15FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[21].set_space_addr("MSG", 20'h15FE4);
    DIR_PP_ROB_V[21].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[21].set_space_addr("MEM-SB",20'h15FE4);
    DIR_PP_ROB_V[21].set_space_addr("MEM", 20'h15FE4);
      DIR_PP_ROB_V[21].set_space("MEM");
      DIR_PP_ROB_V[21].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[21].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[21].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[21].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[21].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[21]:dont_test") ) DIR_PP_ROB_V[21].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[21] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[22]";
    `endif
    HQM_DIR_PP2VDEV[22] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[22]", this);
    HQM_DIR_PP2VDEV[22].set_cfg(16'h0, 16'h0, 16'h0, 20'h16FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[22].set_space_addr("MSG", 20'h16FCC);
    HQM_DIR_PP2VDEV[22].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[22].set_space_addr("MEM-SB",20'h16FCC);
    HQM_DIR_PP2VDEV[22].set_space_addr("MEM", 20'h16FCC);
      HQM_DIR_PP2VDEV[22].set_space("MEM");
      HQM_DIR_PP2VDEV[22].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[22].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[22].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[22].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[22].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[22]:dont_test") ) HQM_DIR_PP2VDEV[22].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[22] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[22]";
    `endif
    DIR_PP_ROB_V[22] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[22]", this);
    DIR_PP_ROB_V[22].set_cfg(16'h0, 16'h0, 16'h0, 20'h16FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[22].set_space_addr("MSG", 20'h16FE4);
    DIR_PP_ROB_V[22].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[22].set_space_addr("MEM-SB",20'h16FE4);
    DIR_PP_ROB_V[22].set_space_addr("MEM", 20'h16FE4);
      DIR_PP_ROB_V[22].set_space("MEM");
      DIR_PP_ROB_V[22].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[22].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[22].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[22].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[22].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[22]:dont_test") ) DIR_PP_ROB_V[22].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[22] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[23]";
    `endif
    HQM_DIR_PP2VDEV[23] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[23]", this);
    HQM_DIR_PP2VDEV[23].set_cfg(16'h0, 16'h0, 16'h0, 20'h17FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[23].set_space_addr("MSG", 20'h17FCC);
    HQM_DIR_PP2VDEV[23].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[23].set_space_addr("MEM-SB",20'h17FCC);
    HQM_DIR_PP2VDEV[23].set_space_addr("MEM", 20'h17FCC);
      HQM_DIR_PP2VDEV[23].set_space("MEM");
      HQM_DIR_PP2VDEV[23].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[23].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[23].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[23].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[23].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[23]:dont_test") ) HQM_DIR_PP2VDEV[23].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[23] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[23]";
    `endif
    DIR_PP_ROB_V[23] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[23]", this);
    DIR_PP_ROB_V[23].set_cfg(16'h0, 16'h0, 16'h0, 20'h17FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[23].set_space_addr("MSG", 20'h17FE4);
    DIR_PP_ROB_V[23].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[23].set_space_addr("MEM-SB",20'h17FE4);
    DIR_PP_ROB_V[23].set_space_addr("MEM", 20'h17FE4);
      DIR_PP_ROB_V[23].set_space("MEM");
      DIR_PP_ROB_V[23].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[23].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[23].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[23].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[23].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[23]:dont_test") ) DIR_PP_ROB_V[23].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[23] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[24]";
    `endif
    HQM_DIR_PP2VDEV[24] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[24]", this);
    HQM_DIR_PP2VDEV[24].set_cfg(16'h0, 16'h0, 16'h0, 20'h18FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[24].set_space_addr("MSG", 20'h18FCC);
    HQM_DIR_PP2VDEV[24].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[24].set_space_addr("MEM-SB",20'h18FCC);
    HQM_DIR_PP2VDEV[24].set_space_addr("MEM", 20'h18FCC);
      HQM_DIR_PP2VDEV[24].set_space("MEM");
      HQM_DIR_PP2VDEV[24].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[24].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[24].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[24].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[24].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[24]:dont_test") ) HQM_DIR_PP2VDEV[24].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[24] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[24]";
    `endif
    DIR_PP_ROB_V[24] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[24]", this);
    DIR_PP_ROB_V[24].set_cfg(16'h0, 16'h0, 16'h0, 20'h18FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[24].set_space_addr("MSG", 20'h18FE4);
    DIR_PP_ROB_V[24].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[24].set_space_addr("MEM-SB",20'h18FE4);
    DIR_PP_ROB_V[24].set_space_addr("MEM", 20'h18FE4);
      DIR_PP_ROB_V[24].set_space("MEM");
      DIR_PP_ROB_V[24].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[24].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[24].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[24].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[24].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[24]:dont_test") ) DIR_PP_ROB_V[24].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[24] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[25]";
    `endif
    HQM_DIR_PP2VDEV[25] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[25]", this);
    HQM_DIR_PP2VDEV[25].set_cfg(16'h0, 16'h0, 16'h0, 20'h19FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[25].set_space_addr("MSG", 20'h19FCC);
    HQM_DIR_PP2VDEV[25].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[25].set_space_addr("MEM-SB",20'h19FCC);
    HQM_DIR_PP2VDEV[25].set_space_addr("MEM", 20'h19FCC);
      HQM_DIR_PP2VDEV[25].set_space("MEM");
      HQM_DIR_PP2VDEV[25].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[25].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[25].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[25].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[25].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[25]:dont_test") ) HQM_DIR_PP2VDEV[25].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[25] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[25]";
    `endif
    DIR_PP_ROB_V[25] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[25]", this);
    DIR_PP_ROB_V[25].set_cfg(16'h0, 16'h0, 16'h0, 20'h19FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[25].set_space_addr("MSG", 20'h19FE4);
    DIR_PP_ROB_V[25].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[25].set_space_addr("MEM-SB",20'h19FE4);
    DIR_PP_ROB_V[25].set_space_addr("MEM", 20'h19FE4);
      DIR_PP_ROB_V[25].set_space("MEM");
      DIR_PP_ROB_V[25].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[25].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[25].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[25].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[25].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[25]:dont_test") ) DIR_PP_ROB_V[25].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[25] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[26]";
    `endif
    HQM_DIR_PP2VDEV[26] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[26]", this);
    HQM_DIR_PP2VDEV[26].set_cfg(16'h0, 16'h0, 16'h0, 20'h1AFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[26].set_space_addr("MSG", 20'h1AFCC);
    HQM_DIR_PP2VDEV[26].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[26].set_space_addr("MEM-SB",20'h1AFCC);
    HQM_DIR_PP2VDEV[26].set_space_addr("MEM", 20'h1AFCC);
      HQM_DIR_PP2VDEV[26].set_space("MEM");
      HQM_DIR_PP2VDEV[26].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[26].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[26].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[26].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[26].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[26]:dont_test") ) HQM_DIR_PP2VDEV[26].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[26] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[26]";
    `endif
    DIR_PP_ROB_V[26] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[26]", this);
    DIR_PP_ROB_V[26].set_cfg(16'h0, 16'h0, 16'h0, 20'h1AFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[26].set_space_addr("MSG", 20'h1AFE4);
    DIR_PP_ROB_V[26].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[26].set_space_addr("MEM-SB",20'h1AFE4);
    DIR_PP_ROB_V[26].set_space_addr("MEM", 20'h1AFE4);
      DIR_PP_ROB_V[26].set_space("MEM");
      DIR_PP_ROB_V[26].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[26].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[26].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[26].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[26].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[26]:dont_test") ) DIR_PP_ROB_V[26].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[26] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[27]";
    `endif
    HQM_DIR_PP2VDEV[27] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[27]", this);
    HQM_DIR_PP2VDEV[27].set_cfg(16'h0, 16'h0, 16'h0, 20'h1BFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[27].set_space_addr("MSG", 20'h1BFCC);
    HQM_DIR_PP2VDEV[27].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[27].set_space_addr("MEM-SB",20'h1BFCC);
    HQM_DIR_PP2VDEV[27].set_space_addr("MEM", 20'h1BFCC);
      HQM_DIR_PP2VDEV[27].set_space("MEM");
      HQM_DIR_PP2VDEV[27].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[27].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[27].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[27].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[27].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[27]:dont_test") ) HQM_DIR_PP2VDEV[27].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[27] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[27]";
    `endif
    DIR_PP_ROB_V[27] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[27]", this);
    DIR_PP_ROB_V[27].set_cfg(16'h0, 16'h0, 16'h0, 20'h1BFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[27].set_space_addr("MSG", 20'h1BFE4);
    DIR_PP_ROB_V[27].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[27].set_space_addr("MEM-SB",20'h1BFE4);
    DIR_PP_ROB_V[27].set_space_addr("MEM", 20'h1BFE4);
      DIR_PP_ROB_V[27].set_space("MEM");
      DIR_PP_ROB_V[27].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[27].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[27].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[27].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[27].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[27]:dont_test") ) DIR_PP_ROB_V[27].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[27] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[28]";
    `endif
    HQM_DIR_PP2VDEV[28] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[28]", this);
    HQM_DIR_PP2VDEV[28].set_cfg(16'h0, 16'h0, 16'h0, 20'h1CFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[28].set_space_addr("MSG", 20'h1CFCC);
    HQM_DIR_PP2VDEV[28].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[28].set_space_addr("MEM-SB",20'h1CFCC);
    HQM_DIR_PP2VDEV[28].set_space_addr("MEM", 20'h1CFCC);
      HQM_DIR_PP2VDEV[28].set_space("MEM");
      HQM_DIR_PP2VDEV[28].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[28].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[28].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[28].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[28].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[28]:dont_test") ) HQM_DIR_PP2VDEV[28].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[28] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[28]";
    `endif
    DIR_PP_ROB_V[28] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[28]", this);
    DIR_PP_ROB_V[28].set_cfg(16'h0, 16'h0, 16'h0, 20'h1CFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[28].set_space_addr("MSG", 20'h1CFE4);
    DIR_PP_ROB_V[28].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[28].set_space_addr("MEM-SB",20'h1CFE4);
    DIR_PP_ROB_V[28].set_space_addr("MEM", 20'h1CFE4);
      DIR_PP_ROB_V[28].set_space("MEM");
      DIR_PP_ROB_V[28].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[28].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[28].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[28].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[28].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[28]:dont_test") ) DIR_PP_ROB_V[28].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[28] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[29]";
    `endif
    HQM_DIR_PP2VDEV[29] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[29]", this);
    HQM_DIR_PP2VDEV[29].set_cfg(16'h0, 16'h0, 16'h0, 20'h1DFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[29].set_space_addr("MSG", 20'h1DFCC);
    HQM_DIR_PP2VDEV[29].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[29].set_space_addr("MEM-SB",20'h1DFCC);
    HQM_DIR_PP2VDEV[29].set_space_addr("MEM", 20'h1DFCC);
      HQM_DIR_PP2VDEV[29].set_space("MEM");
      HQM_DIR_PP2VDEV[29].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[29].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[29].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[29].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[29].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[29]:dont_test") ) HQM_DIR_PP2VDEV[29].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[29] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[29]";
    `endif
    DIR_PP_ROB_V[29] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[29]", this);
    DIR_PP_ROB_V[29].set_cfg(16'h0, 16'h0, 16'h0, 20'h1DFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[29].set_space_addr("MSG", 20'h1DFE4);
    DIR_PP_ROB_V[29].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[29].set_space_addr("MEM-SB",20'h1DFE4);
    DIR_PP_ROB_V[29].set_space_addr("MEM", 20'h1DFE4);
      DIR_PP_ROB_V[29].set_space("MEM");
      DIR_PP_ROB_V[29].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[29].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[29].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[29].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[29].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[29]:dont_test") ) DIR_PP_ROB_V[29].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[29] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[30]";
    `endif
    HQM_DIR_PP2VDEV[30] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[30]", this);
    HQM_DIR_PP2VDEV[30].set_cfg(16'h0, 16'h0, 16'h0, 20'h1EFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[30].set_space_addr("MSG", 20'h1EFCC);
    HQM_DIR_PP2VDEV[30].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[30].set_space_addr("MEM-SB",20'h1EFCC);
    HQM_DIR_PP2VDEV[30].set_space_addr("MEM", 20'h1EFCC);
      HQM_DIR_PP2VDEV[30].set_space("MEM");
      HQM_DIR_PP2VDEV[30].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[30].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[30].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[30].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[30].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[30]:dont_test") ) HQM_DIR_PP2VDEV[30].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[30] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[30]";
    `endif
    DIR_PP_ROB_V[30] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[30]", this);
    DIR_PP_ROB_V[30].set_cfg(16'h0, 16'h0, 16'h0, 20'h1EFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[30].set_space_addr("MSG", 20'h1EFE4);
    DIR_PP_ROB_V[30].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[30].set_space_addr("MEM-SB",20'h1EFE4);
    DIR_PP_ROB_V[30].set_space_addr("MEM", 20'h1EFE4);
      DIR_PP_ROB_V[30].set_space("MEM");
      DIR_PP_ROB_V[30].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[30].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[30].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[30].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[30].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[30]:dont_test") ) DIR_PP_ROB_V[30].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[30] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[31]";
    `endif
    HQM_DIR_PP2VDEV[31] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[31]", this);
    HQM_DIR_PP2VDEV[31].set_cfg(16'h0, 16'h0, 16'h0, 20'h1FFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[31].set_space_addr("MSG", 20'h1FFCC);
    HQM_DIR_PP2VDEV[31].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[31].set_space_addr("MEM-SB",20'h1FFCC);
    HQM_DIR_PP2VDEV[31].set_space_addr("MEM", 20'h1FFCC);
      HQM_DIR_PP2VDEV[31].set_space("MEM");
      HQM_DIR_PP2VDEV[31].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[31].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[31].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[31].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[31].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[31]:dont_test") ) HQM_DIR_PP2VDEV[31].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[31] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[31]";
    `endif
    DIR_PP_ROB_V[31] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[31]", this);
    DIR_PP_ROB_V[31].set_cfg(16'h0, 16'h0, 16'h0, 20'h1FFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[31].set_space_addr("MSG", 20'h1FFE4);
    DIR_PP_ROB_V[31].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[31].set_space_addr("MEM-SB",20'h1FFE4);
    DIR_PP_ROB_V[31].set_space_addr("MEM", 20'h1FFE4);
      DIR_PP_ROB_V[31].set_space("MEM");
      DIR_PP_ROB_V[31].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[31].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[31].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[31].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[31].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[31]:dont_test") ) DIR_PP_ROB_V[31].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[31] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[32]";
    `endif
    HQM_DIR_PP2VDEV[32] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[32]", this);
    HQM_DIR_PP2VDEV[32].set_cfg(16'h0, 16'h0, 16'h0, 20'h20FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[32].set_space_addr("MSG", 20'h20FCC);
    HQM_DIR_PP2VDEV[32].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[32].set_space_addr("MEM-SB",20'h20FCC);
    HQM_DIR_PP2VDEV[32].set_space_addr("MEM", 20'h20FCC);
      HQM_DIR_PP2VDEV[32].set_space("MEM");
      HQM_DIR_PP2VDEV[32].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[32].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[32].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[32].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[32].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[32]:dont_test") ) HQM_DIR_PP2VDEV[32].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[32] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[32]";
    `endif
    DIR_PP_ROB_V[32] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[32]", this);
    DIR_PP_ROB_V[32].set_cfg(16'h0, 16'h0, 16'h0, 20'h20FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[32].set_space_addr("MSG", 20'h20FE4);
    DIR_PP_ROB_V[32].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[32].set_space_addr("MEM-SB",20'h20FE4);
    DIR_PP_ROB_V[32].set_space_addr("MEM", 20'h20FE4);
      DIR_PP_ROB_V[32].set_space("MEM");
      DIR_PP_ROB_V[32].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[32].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[32].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[32].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[32].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[32]:dont_test") ) DIR_PP_ROB_V[32].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[32] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[33]";
    `endif
    HQM_DIR_PP2VDEV[33] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[33]", this);
    HQM_DIR_PP2VDEV[33].set_cfg(16'h0, 16'h0, 16'h0, 20'h21FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[33].set_space_addr("MSG", 20'h21FCC);
    HQM_DIR_PP2VDEV[33].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[33].set_space_addr("MEM-SB",20'h21FCC);
    HQM_DIR_PP2VDEV[33].set_space_addr("MEM", 20'h21FCC);
      HQM_DIR_PP2VDEV[33].set_space("MEM");
      HQM_DIR_PP2VDEV[33].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[33].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[33].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[33].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[33].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[33]:dont_test") ) HQM_DIR_PP2VDEV[33].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[33] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[33]";
    `endif
    DIR_PP_ROB_V[33] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[33]", this);
    DIR_PP_ROB_V[33].set_cfg(16'h0, 16'h0, 16'h0, 20'h21FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[33].set_space_addr("MSG", 20'h21FE4);
    DIR_PP_ROB_V[33].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[33].set_space_addr("MEM-SB",20'h21FE4);
    DIR_PP_ROB_V[33].set_space_addr("MEM", 20'h21FE4);
      DIR_PP_ROB_V[33].set_space("MEM");
      DIR_PP_ROB_V[33].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[33].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[33].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[33].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[33].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[33]:dont_test") ) DIR_PP_ROB_V[33].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[33] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[34]";
    `endif
    HQM_DIR_PP2VDEV[34] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[34]", this);
    HQM_DIR_PP2VDEV[34].set_cfg(16'h0, 16'h0, 16'h0, 20'h22FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[34].set_space_addr("MSG", 20'h22FCC);
    HQM_DIR_PP2VDEV[34].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[34].set_space_addr("MEM-SB",20'h22FCC);
    HQM_DIR_PP2VDEV[34].set_space_addr("MEM", 20'h22FCC);
      HQM_DIR_PP2VDEV[34].set_space("MEM");
      HQM_DIR_PP2VDEV[34].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[34].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[34].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[34].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[34].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[34]:dont_test") ) HQM_DIR_PP2VDEV[34].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[34] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[34]";
    `endif
    DIR_PP_ROB_V[34] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[34]", this);
    DIR_PP_ROB_V[34].set_cfg(16'h0, 16'h0, 16'h0, 20'h22FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[34].set_space_addr("MSG", 20'h22FE4);
    DIR_PP_ROB_V[34].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[34].set_space_addr("MEM-SB",20'h22FE4);
    DIR_PP_ROB_V[34].set_space_addr("MEM", 20'h22FE4);
      DIR_PP_ROB_V[34].set_space("MEM");
      DIR_PP_ROB_V[34].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[34].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[34].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[34].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[34].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[34]:dont_test") ) DIR_PP_ROB_V[34].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[34] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[35]";
    `endif
    HQM_DIR_PP2VDEV[35] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[35]", this);
    HQM_DIR_PP2VDEV[35].set_cfg(16'h0, 16'h0, 16'h0, 20'h23FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[35].set_space_addr("MSG", 20'h23FCC);
    HQM_DIR_PP2VDEV[35].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[35].set_space_addr("MEM-SB",20'h23FCC);
    HQM_DIR_PP2VDEV[35].set_space_addr("MEM", 20'h23FCC);
      HQM_DIR_PP2VDEV[35].set_space("MEM");
      HQM_DIR_PP2VDEV[35].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[35].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[35].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[35].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[35].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[35]:dont_test") ) HQM_DIR_PP2VDEV[35].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[35] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[35]";
    `endif
    DIR_PP_ROB_V[35] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[35]", this);
    DIR_PP_ROB_V[35].set_cfg(16'h0, 16'h0, 16'h0, 20'h23FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[35].set_space_addr("MSG", 20'h23FE4);
    DIR_PP_ROB_V[35].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[35].set_space_addr("MEM-SB",20'h23FE4);
    DIR_PP_ROB_V[35].set_space_addr("MEM", 20'h23FE4);
      DIR_PP_ROB_V[35].set_space("MEM");
      DIR_PP_ROB_V[35].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[35].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[35].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[35].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[35].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[35]:dont_test") ) DIR_PP_ROB_V[35].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[35] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[36]";
    `endif
    HQM_DIR_PP2VDEV[36] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[36]", this);
    HQM_DIR_PP2VDEV[36].set_cfg(16'h0, 16'h0, 16'h0, 20'h24FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[36].set_space_addr("MSG", 20'h24FCC);
    HQM_DIR_PP2VDEV[36].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[36].set_space_addr("MEM-SB",20'h24FCC);
    HQM_DIR_PP2VDEV[36].set_space_addr("MEM", 20'h24FCC);
      HQM_DIR_PP2VDEV[36].set_space("MEM");
      HQM_DIR_PP2VDEV[36].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[36].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[36].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[36].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[36].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[36]:dont_test") ) HQM_DIR_PP2VDEV[36].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[36] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[36]";
    `endif
    DIR_PP_ROB_V[36] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[36]", this);
    DIR_PP_ROB_V[36].set_cfg(16'h0, 16'h0, 16'h0, 20'h24FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[36].set_space_addr("MSG", 20'h24FE4);
    DIR_PP_ROB_V[36].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[36].set_space_addr("MEM-SB",20'h24FE4);
    DIR_PP_ROB_V[36].set_space_addr("MEM", 20'h24FE4);
      DIR_PP_ROB_V[36].set_space("MEM");
      DIR_PP_ROB_V[36].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[36].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[36].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[36].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[36].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[36]:dont_test") ) DIR_PP_ROB_V[36].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[36] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[37]";
    `endif
    HQM_DIR_PP2VDEV[37] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[37]", this);
    HQM_DIR_PP2VDEV[37].set_cfg(16'h0, 16'h0, 16'h0, 20'h25FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[37].set_space_addr("MSG", 20'h25FCC);
    HQM_DIR_PP2VDEV[37].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[37].set_space_addr("MEM-SB",20'h25FCC);
    HQM_DIR_PP2VDEV[37].set_space_addr("MEM", 20'h25FCC);
      HQM_DIR_PP2VDEV[37].set_space("MEM");
      HQM_DIR_PP2VDEV[37].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[37].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[37].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[37].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[37].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[37]:dont_test") ) HQM_DIR_PP2VDEV[37].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[37] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[37]";
    `endif
    DIR_PP_ROB_V[37] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[37]", this);
    DIR_PP_ROB_V[37].set_cfg(16'h0, 16'h0, 16'h0, 20'h25FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[37].set_space_addr("MSG", 20'h25FE4);
    DIR_PP_ROB_V[37].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[37].set_space_addr("MEM-SB",20'h25FE4);
    DIR_PP_ROB_V[37].set_space_addr("MEM", 20'h25FE4);
      DIR_PP_ROB_V[37].set_space("MEM");
      DIR_PP_ROB_V[37].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[37].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[37].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[37].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[37].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[37]:dont_test") ) DIR_PP_ROB_V[37].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[37] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[38]";
    `endif
    HQM_DIR_PP2VDEV[38] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[38]", this);
    HQM_DIR_PP2VDEV[38].set_cfg(16'h0, 16'h0, 16'h0, 20'h26FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[38].set_space_addr("MSG", 20'h26FCC);
    HQM_DIR_PP2VDEV[38].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[38].set_space_addr("MEM-SB",20'h26FCC);
    HQM_DIR_PP2VDEV[38].set_space_addr("MEM", 20'h26FCC);
      HQM_DIR_PP2VDEV[38].set_space("MEM");
      HQM_DIR_PP2VDEV[38].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[38].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[38].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[38].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[38].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[38]:dont_test") ) HQM_DIR_PP2VDEV[38].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[38] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[38]";
    `endif
    DIR_PP_ROB_V[38] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[38]", this);
    DIR_PP_ROB_V[38].set_cfg(16'h0, 16'h0, 16'h0, 20'h26FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[38].set_space_addr("MSG", 20'h26FE4);
    DIR_PP_ROB_V[38].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[38].set_space_addr("MEM-SB",20'h26FE4);
    DIR_PP_ROB_V[38].set_space_addr("MEM", 20'h26FE4);
      DIR_PP_ROB_V[38].set_space("MEM");
      DIR_PP_ROB_V[38].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[38].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[38].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[38].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[38].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[38]:dont_test") ) DIR_PP_ROB_V[38].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[38] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[39]";
    `endif
    HQM_DIR_PP2VDEV[39] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[39]", this);
    HQM_DIR_PP2VDEV[39].set_cfg(16'h0, 16'h0, 16'h0, 20'h27FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[39].set_space_addr("MSG", 20'h27FCC);
    HQM_DIR_PP2VDEV[39].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[39].set_space_addr("MEM-SB",20'h27FCC);
    HQM_DIR_PP2VDEV[39].set_space_addr("MEM", 20'h27FCC);
      HQM_DIR_PP2VDEV[39].set_space("MEM");
      HQM_DIR_PP2VDEV[39].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[39].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[39].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[39].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[39].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[39]:dont_test") ) HQM_DIR_PP2VDEV[39].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[39] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[39]";
    `endif
    DIR_PP_ROB_V[39] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[39]", this);
    DIR_PP_ROB_V[39].set_cfg(16'h0, 16'h0, 16'h0, 20'h27FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[39].set_space_addr("MSG", 20'h27FE4);
    DIR_PP_ROB_V[39].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[39].set_space_addr("MEM-SB",20'h27FE4);
    DIR_PP_ROB_V[39].set_space_addr("MEM", 20'h27FE4);
      DIR_PP_ROB_V[39].set_space("MEM");
      DIR_PP_ROB_V[39].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[39].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[39].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[39].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[39].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[39]:dont_test") ) DIR_PP_ROB_V[39].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[39] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[40]";
    `endif
    HQM_DIR_PP2VDEV[40] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[40]", this);
    HQM_DIR_PP2VDEV[40].set_cfg(16'h0, 16'h0, 16'h0, 20'h28FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[40].set_space_addr("MSG", 20'h28FCC);
    HQM_DIR_PP2VDEV[40].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[40].set_space_addr("MEM-SB",20'h28FCC);
    HQM_DIR_PP2VDEV[40].set_space_addr("MEM", 20'h28FCC);
      HQM_DIR_PP2VDEV[40].set_space("MEM");
      HQM_DIR_PP2VDEV[40].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[40].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[40].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[40].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[40].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[40]:dont_test") ) HQM_DIR_PP2VDEV[40].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[40] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[40]";
    `endif
    DIR_PP_ROB_V[40] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[40]", this);
    DIR_PP_ROB_V[40].set_cfg(16'h0, 16'h0, 16'h0, 20'h28FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[40].set_space_addr("MSG", 20'h28FE4);
    DIR_PP_ROB_V[40].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[40].set_space_addr("MEM-SB",20'h28FE4);
    DIR_PP_ROB_V[40].set_space_addr("MEM", 20'h28FE4);
      DIR_PP_ROB_V[40].set_space("MEM");
      DIR_PP_ROB_V[40].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[40].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[40].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[40].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[40].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[40]:dont_test") ) DIR_PP_ROB_V[40].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[40] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[41]";
    `endif
    HQM_DIR_PP2VDEV[41] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[41]", this);
    HQM_DIR_PP2VDEV[41].set_cfg(16'h0, 16'h0, 16'h0, 20'h29FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[41].set_space_addr("MSG", 20'h29FCC);
    HQM_DIR_PP2VDEV[41].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[41].set_space_addr("MEM-SB",20'h29FCC);
    HQM_DIR_PP2VDEV[41].set_space_addr("MEM", 20'h29FCC);
      HQM_DIR_PP2VDEV[41].set_space("MEM");
      HQM_DIR_PP2VDEV[41].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[41].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[41].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[41].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[41].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[41]:dont_test") ) HQM_DIR_PP2VDEV[41].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[41] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[41]";
    `endif
    DIR_PP_ROB_V[41] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[41]", this);
    DIR_PP_ROB_V[41].set_cfg(16'h0, 16'h0, 16'h0, 20'h29FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[41].set_space_addr("MSG", 20'h29FE4);
    DIR_PP_ROB_V[41].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[41].set_space_addr("MEM-SB",20'h29FE4);
    DIR_PP_ROB_V[41].set_space_addr("MEM", 20'h29FE4);
      DIR_PP_ROB_V[41].set_space("MEM");
      DIR_PP_ROB_V[41].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[41].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[41].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[41].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[41].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[41]:dont_test") ) DIR_PP_ROB_V[41].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[41] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[42]";
    `endif
    HQM_DIR_PP2VDEV[42] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[42]", this);
    HQM_DIR_PP2VDEV[42].set_cfg(16'h0, 16'h0, 16'h0, 20'h2AFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[42].set_space_addr("MSG", 20'h2AFCC);
    HQM_DIR_PP2VDEV[42].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[42].set_space_addr("MEM-SB",20'h2AFCC);
    HQM_DIR_PP2VDEV[42].set_space_addr("MEM", 20'h2AFCC);
      HQM_DIR_PP2VDEV[42].set_space("MEM");
      HQM_DIR_PP2VDEV[42].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[42].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[42].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[42].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[42].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[42]:dont_test") ) HQM_DIR_PP2VDEV[42].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[42] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[42]";
    `endif
    DIR_PP_ROB_V[42] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[42]", this);
    DIR_PP_ROB_V[42].set_cfg(16'h0, 16'h0, 16'h0, 20'h2AFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[42].set_space_addr("MSG", 20'h2AFE4);
    DIR_PP_ROB_V[42].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[42].set_space_addr("MEM-SB",20'h2AFE4);
    DIR_PP_ROB_V[42].set_space_addr("MEM", 20'h2AFE4);
      DIR_PP_ROB_V[42].set_space("MEM");
      DIR_PP_ROB_V[42].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[42].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[42].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[42].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[42].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[42]:dont_test") ) DIR_PP_ROB_V[42].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[42] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[43]";
    `endif
    HQM_DIR_PP2VDEV[43] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[43]", this);
    HQM_DIR_PP2VDEV[43].set_cfg(16'h0, 16'h0, 16'h0, 20'h2BFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[43].set_space_addr("MSG", 20'h2BFCC);
    HQM_DIR_PP2VDEV[43].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[43].set_space_addr("MEM-SB",20'h2BFCC);
    HQM_DIR_PP2VDEV[43].set_space_addr("MEM", 20'h2BFCC);
      HQM_DIR_PP2VDEV[43].set_space("MEM");
      HQM_DIR_PP2VDEV[43].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[43].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[43].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[43].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[43].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[43]:dont_test") ) HQM_DIR_PP2VDEV[43].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[43] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[43]";
    `endif
    DIR_PP_ROB_V[43] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[43]", this);
    DIR_PP_ROB_V[43].set_cfg(16'h0, 16'h0, 16'h0, 20'h2BFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[43].set_space_addr("MSG", 20'h2BFE4);
    DIR_PP_ROB_V[43].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[43].set_space_addr("MEM-SB",20'h2BFE4);
    DIR_PP_ROB_V[43].set_space_addr("MEM", 20'h2BFE4);
      DIR_PP_ROB_V[43].set_space("MEM");
      DIR_PP_ROB_V[43].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[43].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[43].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[43].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[43].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[43]:dont_test") ) DIR_PP_ROB_V[43].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[43] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[44]";
    `endif
    HQM_DIR_PP2VDEV[44] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[44]", this);
    HQM_DIR_PP2VDEV[44].set_cfg(16'h0, 16'h0, 16'h0, 20'h2CFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[44].set_space_addr("MSG", 20'h2CFCC);
    HQM_DIR_PP2VDEV[44].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[44].set_space_addr("MEM-SB",20'h2CFCC);
    HQM_DIR_PP2VDEV[44].set_space_addr("MEM", 20'h2CFCC);
      HQM_DIR_PP2VDEV[44].set_space("MEM");
      HQM_DIR_PP2VDEV[44].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[44].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[44].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[44].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[44].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[44]:dont_test") ) HQM_DIR_PP2VDEV[44].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[44] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[44]";
    `endif
    DIR_PP_ROB_V[44] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[44]", this);
    DIR_PP_ROB_V[44].set_cfg(16'h0, 16'h0, 16'h0, 20'h2CFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[44].set_space_addr("MSG", 20'h2CFE4);
    DIR_PP_ROB_V[44].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[44].set_space_addr("MEM-SB",20'h2CFE4);
    DIR_PP_ROB_V[44].set_space_addr("MEM", 20'h2CFE4);
      DIR_PP_ROB_V[44].set_space("MEM");
      DIR_PP_ROB_V[44].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[44].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[44].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[44].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[44].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[44]:dont_test") ) DIR_PP_ROB_V[44].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[44] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[45]";
    `endif
    HQM_DIR_PP2VDEV[45] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[45]", this);
    HQM_DIR_PP2VDEV[45].set_cfg(16'h0, 16'h0, 16'h0, 20'h2DFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[45].set_space_addr("MSG", 20'h2DFCC);
    HQM_DIR_PP2VDEV[45].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[45].set_space_addr("MEM-SB",20'h2DFCC);
    HQM_DIR_PP2VDEV[45].set_space_addr("MEM", 20'h2DFCC);
      HQM_DIR_PP2VDEV[45].set_space("MEM");
      HQM_DIR_PP2VDEV[45].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[45].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[45].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[45].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[45].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[45]:dont_test") ) HQM_DIR_PP2VDEV[45].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[45] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[45]";
    `endif
    DIR_PP_ROB_V[45] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[45]", this);
    DIR_PP_ROB_V[45].set_cfg(16'h0, 16'h0, 16'h0, 20'h2DFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[45].set_space_addr("MSG", 20'h2DFE4);
    DIR_PP_ROB_V[45].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[45].set_space_addr("MEM-SB",20'h2DFE4);
    DIR_PP_ROB_V[45].set_space_addr("MEM", 20'h2DFE4);
      DIR_PP_ROB_V[45].set_space("MEM");
      DIR_PP_ROB_V[45].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[45].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[45].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[45].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[45].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[45]:dont_test") ) DIR_PP_ROB_V[45].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[45] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[46]";
    `endif
    HQM_DIR_PP2VDEV[46] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[46]", this);
    HQM_DIR_PP2VDEV[46].set_cfg(16'h0, 16'h0, 16'h0, 20'h2EFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[46].set_space_addr("MSG", 20'h2EFCC);
    HQM_DIR_PP2VDEV[46].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[46].set_space_addr("MEM-SB",20'h2EFCC);
    HQM_DIR_PP2VDEV[46].set_space_addr("MEM", 20'h2EFCC);
      HQM_DIR_PP2VDEV[46].set_space("MEM");
      HQM_DIR_PP2VDEV[46].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[46].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[46].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[46].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[46].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[46]:dont_test") ) HQM_DIR_PP2VDEV[46].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[46] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[46]";
    `endif
    DIR_PP_ROB_V[46] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[46]", this);
    DIR_PP_ROB_V[46].set_cfg(16'h0, 16'h0, 16'h0, 20'h2EFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[46].set_space_addr("MSG", 20'h2EFE4);
    DIR_PP_ROB_V[46].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[46].set_space_addr("MEM-SB",20'h2EFE4);
    DIR_PP_ROB_V[46].set_space_addr("MEM", 20'h2EFE4);
      DIR_PP_ROB_V[46].set_space("MEM");
      DIR_PP_ROB_V[46].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[46].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[46].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[46].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[46].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[46]:dont_test") ) DIR_PP_ROB_V[46].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[46] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[47]";
    `endif
    HQM_DIR_PP2VDEV[47] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[47]", this);
    HQM_DIR_PP2VDEV[47].set_cfg(16'h0, 16'h0, 16'h0, 20'h2FFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[47].set_space_addr("MSG", 20'h2FFCC);
    HQM_DIR_PP2VDEV[47].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[47].set_space_addr("MEM-SB",20'h2FFCC);
    HQM_DIR_PP2VDEV[47].set_space_addr("MEM", 20'h2FFCC);
      HQM_DIR_PP2VDEV[47].set_space("MEM");
      HQM_DIR_PP2VDEV[47].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[47].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[47].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[47].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[47].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[47]:dont_test") ) HQM_DIR_PP2VDEV[47].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[47] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[47]";
    `endif
    DIR_PP_ROB_V[47] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[47]", this);
    DIR_PP_ROB_V[47].set_cfg(16'h0, 16'h0, 16'h0, 20'h2FFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[47].set_space_addr("MSG", 20'h2FFE4);
    DIR_PP_ROB_V[47].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[47].set_space_addr("MEM-SB",20'h2FFE4);
    DIR_PP_ROB_V[47].set_space_addr("MEM", 20'h2FFE4);
      DIR_PP_ROB_V[47].set_space("MEM");
      DIR_PP_ROB_V[47].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[47].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[47].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[47].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[47].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[47]:dont_test") ) DIR_PP_ROB_V[47].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[47] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[48]";
    `endif
    HQM_DIR_PP2VDEV[48] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[48]", this);
    HQM_DIR_PP2VDEV[48].set_cfg(16'h0, 16'h0, 16'h0, 20'h30FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[48].set_space_addr("MSG", 20'h30FCC);
    HQM_DIR_PP2VDEV[48].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[48].set_space_addr("MEM-SB",20'h30FCC);
    HQM_DIR_PP2VDEV[48].set_space_addr("MEM", 20'h30FCC);
      HQM_DIR_PP2VDEV[48].set_space("MEM");
      HQM_DIR_PP2VDEV[48].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[48].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[48].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[48].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[48].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[48]:dont_test") ) HQM_DIR_PP2VDEV[48].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[48] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[48]";
    `endif
    DIR_PP_ROB_V[48] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[48]", this);
    DIR_PP_ROB_V[48].set_cfg(16'h0, 16'h0, 16'h0, 20'h30FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[48].set_space_addr("MSG", 20'h30FE4);
    DIR_PP_ROB_V[48].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[48].set_space_addr("MEM-SB",20'h30FE4);
    DIR_PP_ROB_V[48].set_space_addr("MEM", 20'h30FE4);
      DIR_PP_ROB_V[48].set_space("MEM");
      DIR_PP_ROB_V[48].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[48].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[48].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[48].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[48].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[48]:dont_test") ) DIR_PP_ROB_V[48].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[48] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[49]";
    `endif
    HQM_DIR_PP2VDEV[49] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[49]", this);
    HQM_DIR_PP2VDEV[49].set_cfg(16'h0, 16'h0, 16'h0, 20'h31FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[49].set_space_addr("MSG", 20'h31FCC);
    HQM_DIR_PP2VDEV[49].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[49].set_space_addr("MEM-SB",20'h31FCC);
    HQM_DIR_PP2VDEV[49].set_space_addr("MEM", 20'h31FCC);
      HQM_DIR_PP2VDEV[49].set_space("MEM");
      HQM_DIR_PP2VDEV[49].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[49].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[49].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[49].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[49].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[49]:dont_test") ) HQM_DIR_PP2VDEV[49].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[49] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[49]";
    `endif
    DIR_PP_ROB_V[49] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[49]", this);
    DIR_PP_ROB_V[49].set_cfg(16'h0, 16'h0, 16'h0, 20'h31FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[49].set_space_addr("MSG", 20'h31FE4);
    DIR_PP_ROB_V[49].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[49].set_space_addr("MEM-SB",20'h31FE4);
    DIR_PP_ROB_V[49].set_space_addr("MEM", 20'h31FE4);
      DIR_PP_ROB_V[49].set_space("MEM");
      DIR_PP_ROB_V[49].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[49].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[49].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[49].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[49].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[49]:dont_test") ) DIR_PP_ROB_V[49].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[49] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[50]";
    `endif
    HQM_DIR_PP2VDEV[50] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[50]", this);
    HQM_DIR_PP2VDEV[50].set_cfg(16'h0, 16'h0, 16'h0, 20'h32FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[50].set_space_addr("MSG", 20'h32FCC);
    HQM_DIR_PP2VDEV[50].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[50].set_space_addr("MEM-SB",20'h32FCC);
    HQM_DIR_PP2VDEV[50].set_space_addr("MEM", 20'h32FCC);
      HQM_DIR_PP2VDEV[50].set_space("MEM");
      HQM_DIR_PP2VDEV[50].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[50].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[50].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[50].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[50].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[50]:dont_test") ) HQM_DIR_PP2VDEV[50].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[50] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[50]";
    `endif
    DIR_PP_ROB_V[50] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[50]", this);
    DIR_PP_ROB_V[50].set_cfg(16'h0, 16'h0, 16'h0, 20'h32FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[50].set_space_addr("MSG", 20'h32FE4);
    DIR_PP_ROB_V[50].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[50].set_space_addr("MEM-SB",20'h32FE4);
    DIR_PP_ROB_V[50].set_space_addr("MEM", 20'h32FE4);
      DIR_PP_ROB_V[50].set_space("MEM");
      DIR_PP_ROB_V[50].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[50].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[50].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[50].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[50].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[50]:dont_test") ) DIR_PP_ROB_V[50].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[50] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[51]";
    `endif
    HQM_DIR_PP2VDEV[51] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[51]", this);
    HQM_DIR_PP2VDEV[51].set_cfg(16'h0, 16'h0, 16'h0, 20'h33FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[51].set_space_addr("MSG", 20'h33FCC);
    HQM_DIR_PP2VDEV[51].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[51].set_space_addr("MEM-SB",20'h33FCC);
    HQM_DIR_PP2VDEV[51].set_space_addr("MEM", 20'h33FCC);
      HQM_DIR_PP2VDEV[51].set_space("MEM");
      HQM_DIR_PP2VDEV[51].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[51].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[51].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[51].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[51].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[51]:dont_test") ) HQM_DIR_PP2VDEV[51].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[51] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[51]";
    `endif
    DIR_PP_ROB_V[51] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[51]", this);
    DIR_PP_ROB_V[51].set_cfg(16'h0, 16'h0, 16'h0, 20'h33FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[51].set_space_addr("MSG", 20'h33FE4);
    DIR_PP_ROB_V[51].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[51].set_space_addr("MEM-SB",20'h33FE4);
    DIR_PP_ROB_V[51].set_space_addr("MEM", 20'h33FE4);
      DIR_PP_ROB_V[51].set_space("MEM");
      DIR_PP_ROB_V[51].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[51].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[51].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[51].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[51].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[51]:dont_test") ) DIR_PP_ROB_V[51].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[51] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[52]";
    `endif
    HQM_DIR_PP2VDEV[52] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[52]", this);
    HQM_DIR_PP2VDEV[52].set_cfg(16'h0, 16'h0, 16'h0, 20'h34FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[52].set_space_addr("MSG", 20'h34FCC);
    HQM_DIR_PP2VDEV[52].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[52].set_space_addr("MEM-SB",20'h34FCC);
    HQM_DIR_PP2VDEV[52].set_space_addr("MEM", 20'h34FCC);
      HQM_DIR_PP2VDEV[52].set_space("MEM");
      HQM_DIR_PP2VDEV[52].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[52].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[52].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[52].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[52].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[52]:dont_test") ) HQM_DIR_PP2VDEV[52].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[52] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[52]";
    `endif
    DIR_PP_ROB_V[52] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[52]", this);
    DIR_PP_ROB_V[52].set_cfg(16'h0, 16'h0, 16'h0, 20'h34FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[52].set_space_addr("MSG", 20'h34FE4);
    DIR_PP_ROB_V[52].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[52].set_space_addr("MEM-SB",20'h34FE4);
    DIR_PP_ROB_V[52].set_space_addr("MEM", 20'h34FE4);
      DIR_PP_ROB_V[52].set_space("MEM");
      DIR_PP_ROB_V[52].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[52].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[52].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[52].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[52].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[52]:dont_test") ) DIR_PP_ROB_V[52].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[52] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[53]";
    `endif
    HQM_DIR_PP2VDEV[53] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[53]", this);
    HQM_DIR_PP2VDEV[53].set_cfg(16'h0, 16'h0, 16'h0, 20'h35FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[53].set_space_addr("MSG", 20'h35FCC);
    HQM_DIR_PP2VDEV[53].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[53].set_space_addr("MEM-SB",20'h35FCC);
    HQM_DIR_PP2VDEV[53].set_space_addr("MEM", 20'h35FCC);
      HQM_DIR_PP2VDEV[53].set_space("MEM");
      HQM_DIR_PP2VDEV[53].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[53].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[53].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[53].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[53].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[53]:dont_test") ) HQM_DIR_PP2VDEV[53].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[53] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[53]";
    `endif
    DIR_PP_ROB_V[53] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[53]", this);
    DIR_PP_ROB_V[53].set_cfg(16'h0, 16'h0, 16'h0, 20'h35FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[53].set_space_addr("MSG", 20'h35FE4);
    DIR_PP_ROB_V[53].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[53].set_space_addr("MEM-SB",20'h35FE4);
    DIR_PP_ROB_V[53].set_space_addr("MEM", 20'h35FE4);
      DIR_PP_ROB_V[53].set_space("MEM");
      DIR_PP_ROB_V[53].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[53].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[53].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[53].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[53].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[53]:dont_test") ) DIR_PP_ROB_V[53].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[53] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[54]";
    `endif
    HQM_DIR_PP2VDEV[54] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[54]", this);
    HQM_DIR_PP2VDEV[54].set_cfg(16'h0, 16'h0, 16'h0, 20'h36FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[54].set_space_addr("MSG", 20'h36FCC);
    HQM_DIR_PP2VDEV[54].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[54].set_space_addr("MEM-SB",20'h36FCC);
    HQM_DIR_PP2VDEV[54].set_space_addr("MEM", 20'h36FCC);
      HQM_DIR_PP2VDEV[54].set_space("MEM");
      HQM_DIR_PP2VDEV[54].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[54].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[54].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[54].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[54].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[54]:dont_test") ) HQM_DIR_PP2VDEV[54].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[54] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[54]";
    `endif
    DIR_PP_ROB_V[54] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[54]", this);
    DIR_PP_ROB_V[54].set_cfg(16'h0, 16'h0, 16'h0, 20'h36FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[54].set_space_addr("MSG", 20'h36FE4);
    DIR_PP_ROB_V[54].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[54].set_space_addr("MEM-SB",20'h36FE4);
    DIR_PP_ROB_V[54].set_space_addr("MEM", 20'h36FE4);
      DIR_PP_ROB_V[54].set_space("MEM");
      DIR_PP_ROB_V[54].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[54].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[54].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[54].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[54].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[54]:dont_test") ) DIR_PP_ROB_V[54].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[54] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[55]";
    `endif
    HQM_DIR_PP2VDEV[55] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[55]", this);
    HQM_DIR_PP2VDEV[55].set_cfg(16'h0, 16'h0, 16'h0, 20'h37FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[55].set_space_addr("MSG", 20'h37FCC);
    HQM_DIR_PP2VDEV[55].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[55].set_space_addr("MEM-SB",20'h37FCC);
    HQM_DIR_PP2VDEV[55].set_space_addr("MEM", 20'h37FCC);
      HQM_DIR_PP2VDEV[55].set_space("MEM");
      HQM_DIR_PP2VDEV[55].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[55].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[55].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[55].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[55].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[55]:dont_test") ) HQM_DIR_PP2VDEV[55].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[55] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[55]";
    `endif
    DIR_PP_ROB_V[55] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[55]", this);
    DIR_PP_ROB_V[55].set_cfg(16'h0, 16'h0, 16'h0, 20'h37FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[55].set_space_addr("MSG", 20'h37FE4);
    DIR_PP_ROB_V[55].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[55].set_space_addr("MEM-SB",20'h37FE4);
    DIR_PP_ROB_V[55].set_space_addr("MEM", 20'h37FE4);
      DIR_PP_ROB_V[55].set_space("MEM");
      DIR_PP_ROB_V[55].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[55].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[55].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[55].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[55].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[55]:dont_test") ) DIR_PP_ROB_V[55].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[55] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[56]";
    `endif
    HQM_DIR_PP2VDEV[56] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[56]", this);
    HQM_DIR_PP2VDEV[56].set_cfg(16'h0, 16'h0, 16'h0, 20'h38FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[56].set_space_addr("MSG", 20'h38FCC);
    HQM_DIR_PP2VDEV[56].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[56].set_space_addr("MEM-SB",20'h38FCC);
    HQM_DIR_PP2VDEV[56].set_space_addr("MEM", 20'h38FCC);
      HQM_DIR_PP2VDEV[56].set_space("MEM");
      HQM_DIR_PP2VDEV[56].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[56].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[56].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[56].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[56].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[56]:dont_test") ) HQM_DIR_PP2VDEV[56].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[56] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[56]";
    `endif
    DIR_PP_ROB_V[56] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[56]", this);
    DIR_PP_ROB_V[56].set_cfg(16'h0, 16'h0, 16'h0, 20'h38FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[56].set_space_addr("MSG", 20'h38FE4);
    DIR_PP_ROB_V[56].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[56].set_space_addr("MEM-SB",20'h38FE4);
    DIR_PP_ROB_V[56].set_space_addr("MEM", 20'h38FE4);
      DIR_PP_ROB_V[56].set_space("MEM");
      DIR_PP_ROB_V[56].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[56].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[56].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[56].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[56].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[56]:dont_test") ) DIR_PP_ROB_V[56].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[56] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[57]";
    `endif
    HQM_DIR_PP2VDEV[57] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[57]", this);
    HQM_DIR_PP2VDEV[57].set_cfg(16'h0, 16'h0, 16'h0, 20'h39FCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[57].set_space_addr("MSG", 20'h39FCC);
    HQM_DIR_PP2VDEV[57].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[57].set_space_addr("MEM-SB",20'h39FCC);
    HQM_DIR_PP2VDEV[57].set_space_addr("MEM", 20'h39FCC);
      HQM_DIR_PP2VDEV[57].set_space("MEM");
      HQM_DIR_PP2VDEV[57].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[57].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[57].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[57].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[57].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[57]:dont_test") ) HQM_DIR_PP2VDEV[57].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[57] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[57]";
    `endif
    DIR_PP_ROB_V[57] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[57]", this);
    DIR_PP_ROB_V[57].set_cfg(16'h0, 16'h0, 16'h0, 20'h39FE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[57].set_space_addr("MSG", 20'h39FE4);
    DIR_PP_ROB_V[57].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[57].set_space_addr("MEM-SB",20'h39FE4);
    DIR_PP_ROB_V[57].set_space_addr("MEM", 20'h39FE4);
      DIR_PP_ROB_V[57].set_space("MEM");
      DIR_PP_ROB_V[57].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[57].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[57].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[57].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[57].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[57]:dont_test") ) DIR_PP_ROB_V[57].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[57] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[58]";
    `endif
    HQM_DIR_PP2VDEV[58] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[58]", this);
    HQM_DIR_PP2VDEV[58].set_cfg(16'h0, 16'h0, 16'h0, 20'h3AFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[58].set_space_addr("MSG", 20'h3AFCC);
    HQM_DIR_PP2VDEV[58].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[58].set_space_addr("MEM-SB",20'h3AFCC);
    HQM_DIR_PP2VDEV[58].set_space_addr("MEM", 20'h3AFCC);
      HQM_DIR_PP2VDEV[58].set_space("MEM");
      HQM_DIR_PP2VDEV[58].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[58].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[58].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[58].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[58].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[58]:dont_test") ) HQM_DIR_PP2VDEV[58].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[58] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[58]";
    `endif
    DIR_PP_ROB_V[58] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[58]", this);
    DIR_PP_ROB_V[58].set_cfg(16'h0, 16'h0, 16'h0, 20'h3AFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[58].set_space_addr("MSG", 20'h3AFE4);
    DIR_PP_ROB_V[58].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[58].set_space_addr("MEM-SB",20'h3AFE4);
    DIR_PP_ROB_V[58].set_space_addr("MEM", 20'h3AFE4);
      DIR_PP_ROB_V[58].set_space("MEM");
      DIR_PP_ROB_V[58].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[58].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[58].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[58].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[58].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[58]:dont_test") ) DIR_PP_ROB_V[58].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[58] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[59]";
    `endif
    HQM_DIR_PP2VDEV[59] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[59]", this);
    HQM_DIR_PP2VDEV[59].set_cfg(16'h0, 16'h0, 16'h0, 20'h3BFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[59].set_space_addr("MSG", 20'h3BFCC);
    HQM_DIR_PP2VDEV[59].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[59].set_space_addr("MEM-SB",20'h3BFCC);
    HQM_DIR_PP2VDEV[59].set_space_addr("MEM", 20'h3BFCC);
      HQM_DIR_PP2VDEV[59].set_space("MEM");
      HQM_DIR_PP2VDEV[59].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[59].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[59].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[59].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[59].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[59]:dont_test") ) HQM_DIR_PP2VDEV[59].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[59] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[59]";
    `endif
    DIR_PP_ROB_V[59] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[59]", this);
    DIR_PP_ROB_V[59].set_cfg(16'h0, 16'h0, 16'h0, 20'h3BFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[59].set_space_addr("MSG", 20'h3BFE4);
    DIR_PP_ROB_V[59].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[59].set_space_addr("MEM-SB",20'h3BFE4);
    DIR_PP_ROB_V[59].set_space_addr("MEM", 20'h3BFE4);
      DIR_PP_ROB_V[59].set_space("MEM");
      DIR_PP_ROB_V[59].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[59].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[59].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[59].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[59].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[59]:dont_test") ) DIR_PP_ROB_V[59].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[59] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[60]";
    `endif
    HQM_DIR_PP2VDEV[60] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[60]", this);
    HQM_DIR_PP2VDEV[60].set_cfg(16'h0, 16'h0, 16'h0, 20'h3CFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[60].set_space_addr("MSG", 20'h3CFCC);
    HQM_DIR_PP2VDEV[60].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[60].set_space_addr("MEM-SB",20'h3CFCC);
    HQM_DIR_PP2VDEV[60].set_space_addr("MEM", 20'h3CFCC);
      HQM_DIR_PP2VDEV[60].set_space("MEM");
      HQM_DIR_PP2VDEV[60].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[60].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[60].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[60].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[60].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[60]:dont_test") ) HQM_DIR_PP2VDEV[60].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[60] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[60]";
    `endif
    DIR_PP_ROB_V[60] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[60]", this);
    DIR_PP_ROB_V[60].set_cfg(16'h0, 16'h0, 16'h0, 20'h3CFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[60].set_space_addr("MSG", 20'h3CFE4);
    DIR_PP_ROB_V[60].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[60].set_space_addr("MEM-SB",20'h3CFE4);
    DIR_PP_ROB_V[60].set_space_addr("MEM", 20'h3CFE4);
      DIR_PP_ROB_V[60].set_space("MEM");
      DIR_PP_ROB_V[60].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[60].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[60].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[60].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[60].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[60]:dont_test") ) DIR_PP_ROB_V[60].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[60] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[61]";
    `endif
    HQM_DIR_PP2VDEV[61] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[61]", this);
    HQM_DIR_PP2VDEV[61].set_cfg(16'h0, 16'h0, 16'h0, 20'h3DFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[61].set_space_addr("MSG", 20'h3DFCC);
    HQM_DIR_PP2VDEV[61].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[61].set_space_addr("MEM-SB",20'h3DFCC);
    HQM_DIR_PP2VDEV[61].set_space_addr("MEM", 20'h3DFCC);
      HQM_DIR_PP2VDEV[61].set_space("MEM");
      HQM_DIR_PP2VDEV[61].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[61].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[61].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[61].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[61].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[61]:dont_test") ) HQM_DIR_PP2VDEV[61].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[61] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[61]";
    `endif
    DIR_PP_ROB_V[61] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[61]", this);
    DIR_PP_ROB_V[61].set_cfg(16'h0, 16'h0, 16'h0, 20'h3DFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[61].set_space_addr("MSG", 20'h3DFE4);
    DIR_PP_ROB_V[61].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[61].set_space_addr("MEM-SB",20'h3DFE4);
    DIR_PP_ROB_V[61].set_space_addr("MEM", 20'h3DFE4);
      DIR_PP_ROB_V[61].set_space("MEM");
      DIR_PP_ROB_V[61].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[61].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[61].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[61].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[61].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[61]:dont_test") ) DIR_PP_ROB_V[61].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[61] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[62]";
    `endif
    HQM_DIR_PP2VDEV[62] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[62]", this);
    HQM_DIR_PP2VDEV[62].set_cfg(16'h0, 16'h0, 16'h0, 20'h3EFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[62].set_space_addr("MSG", 20'h3EFCC);
    HQM_DIR_PP2VDEV[62].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[62].set_space_addr("MEM-SB",20'h3EFCC);
    HQM_DIR_PP2VDEV[62].set_space_addr("MEM", 20'h3EFCC);
      HQM_DIR_PP2VDEV[62].set_space("MEM");
      HQM_DIR_PP2VDEV[62].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[62].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[62].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[62].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[62].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[62]:dont_test") ) HQM_DIR_PP2VDEV[62].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[62] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[62]";
    `endif
    DIR_PP_ROB_V[62] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[62]", this);
    DIR_PP_ROB_V[62].set_cfg(16'h0, 16'h0, 16'h0, 20'h3EFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[62].set_space_addr("MSG", 20'h3EFE4);
    DIR_PP_ROB_V[62].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[62].set_space_addr("MEM-SB",20'h3EFE4);
    DIR_PP_ROB_V[62].set_space_addr("MEM", 20'h3EFE4);
      DIR_PP_ROB_V[62].set_space("MEM");
      DIR_PP_ROB_V[62].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[62].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[62].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[62].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[62].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[62]:dont_test") ) DIR_PP_ROB_V[62].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[62] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_DIR_PP2VDEV[63]";
    `endif
    HQM_DIR_PP2VDEV[63] = hqm_system_csr_bridge_HQM_DIR_PP2VDEV_reg::type_id::create("HQM_DIR_PP2VDEV[63]", this);
    HQM_DIR_PP2VDEV[63].set_cfg(16'h0, 16'h0, 16'h0, 20'h3FFCC, 32, 32'b00000000000000000000000000000000);
    HQM_DIR_PP2VDEV[63].set_space_addr("MSG", 20'h3FFCC);
    HQM_DIR_PP2VDEV[63].set_space_addr("msg_bus_port", 'h21);
    HQM_DIR_PP2VDEV[63].set_space_addr("MEM-SB",20'h3FFCC);
    HQM_DIR_PP2VDEV[63].set_space_addr("MEM", 20'h3FFCC);
      HQM_DIR_PP2VDEV[63].set_space("MEM");
      HQM_DIR_PP2VDEV[63].set_msg_opcode("MEM-SB");
      HQM_DIR_PP2VDEV[63].set_fid(4'h0, "MEM-SB");
  	HQM_DIR_PP2VDEV[63].set_bar(4'h2, "MEM-SB");
      HQM_DIR_PP2VDEV[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_DIR_PP2VDEV[63].set_user_attribute("diag_reg", "0");
      HQM_DIR_PP2VDEV[63].set_user_attribute("HqmIsFeatureReg", "0");
      HQM_DIR_PP2VDEV[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_DIR_PP2VDEV[63]:dont_test") ) HQM_DIR_PP2VDEV[63].set_test_reg(1'b0);
      if (!add_reg( HQM_DIR_PP2VDEV[63] )) begin
        `sla_error(get_name(), ("Could not add register HQM_DIR_PP2VDEV[63]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_PP_ROB_V[63]";
    `endif
    DIR_PP_ROB_V[63] = hqm_system_csr_bridge_DIR_PP_ROB_V_reg::type_id::create("DIR_PP_ROB_V[63]", this);
    DIR_PP_ROB_V[63].set_cfg(16'h0, 16'h0, 16'h0, 20'h3FFE4, 32, 32'b00000000000000000000000000000000);
    DIR_PP_ROB_V[63].set_space_addr("MSG", 20'h3FFE4);
    DIR_PP_ROB_V[63].set_space_addr("msg_bus_port", 'h21);
    DIR_PP_ROB_V[63].set_space_addr("MEM-SB",20'h3FFE4);
    DIR_PP_ROB_V[63].set_space_addr("MEM", 20'h3FFE4);
      DIR_PP_ROB_V[63].set_space("MEM");
      DIR_PP_ROB_V[63].set_msg_opcode("MEM-SB");
      DIR_PP_ROB_V[63].set_fid(4'h0, "MEM-SB");
  	DIR_PP_ROB_V[63].set_bar(4'h2, "MEM-SB");
      DIR_PP_ROB_V[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_PP_ROB_V[63].set_user_attribute("diag_reg", "0");
      DIR_PP_ROB_V[63].set_user_attribute("HqmIsFeatureReg", "0");
      DIR_PP_ROB_V[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_PP_ROB_V[63]:dont_test") ) DIR_PP_ROB_V[63].set_test_reg(1'b0);
      if (!add_reg( DIR_PP_ROB_V[63] )) begin
        `sla_error(get_name(), ("Could not add register DIR_PP_ROB_V[63]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_0";
    `endif
    HQM_SYSTEM_CNT_0 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_0_reg::type_id::create("HQM_SYSTEM_CNT_0", this);
    HQM_SYSTEM_CNT_0.set_cfg(16'h0, 16'h0, 16'h0, 16'h1000, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_0.set_space_addr("MSG", 16'h1000);
    HQM_SYSTEM_CNT_0.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_0.set_space_addr("MEM-SB",16'h1000);
    HQM_SYSTEM_CNT_0.set_space_addr("MEM", 16'h1000);
      HQM_SYSTEM_CNT_0.set_space("MEM");
      HQM_SYSTEM_CNT_0.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_0.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_0.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_0.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_0.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_0.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_0.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_0:dont_test") ) HQM_SYSTEM_CNT_0.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_0 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_0"));
      end
   HQM_SYSTEM_CNT_0.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_0.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_1";
    `endif
    HQM_SYSTEM_CNT_1 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_1_reg::type_id::create("HQM_SYSTEM_CNT_1", this);
    HQM_SYSTEM_CNT_1.set_cfg(16'h0, 16'h0, 16'h0, 16'h1004, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_1.set_space_addr("MSG", 16'h1004);
    HQM_SYSTEM_CNT_1.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_1.set_space_addr("MEM-SB",16'h1004);
    HQM_SYSTEM_CNT_1.set_space_addr("MEM", 16'h1004);
      HQM_SYSTEM_CNT_1.set_space("MEM");
      HQM_SYSTEM_CNT_1.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_1.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_1.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_1.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_1.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_1.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_1.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_1:dont_test") ) HQM_SYSTEM_CNT_1.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_1 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_1"));
      end
   HQM_SYSTEM_CNT_1.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_1.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_2";
    `endif
    HQM_SYSTEM_CNT_2 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_2_reg::type_id::create("HQM_SYSTEM_CNT_2", this);
    HQM_SYSTEM_CNT_2.set_cfg(16'h0, 16'h0, 16'h0, 16'h1008, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_2.set_space_addr("MSG", 16'h1008);
    HQM_SYSTEM_CNT_2.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_2.set_space_addr("MEM-SB",16'h1008);
    HQM_SYSTEM_CNT_2.set_space_addr("MEM", 16'h1008);
      HQM_SYSTEM_CNT_2.set_space("MEM");
      HQM_SYSTEM_CNT_2.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_2.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_2.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_2.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_2.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_2.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_2.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_2:dont_test") ) HQM_SYSTEM_CNT_2.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_2 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_2"));
      end
   HQM_SYSTEM_CNT_2.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_2.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_3";
    `endif
    HQM_SYSTEM_CNT_3 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_3_reg::type_id::create("HQM_SYSTEM_CNT_3", this);
    HQM_SYSTEM_CNT_3.set_cfg(16'h0, 16'h0, 16'h0, 16'h100C, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_3.set_space_addr("MSG", 16'h100C);
    HQM_SYSTEM_CNT_3.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_3.set_space_addr("MEM-SB",16'h100C);
    HQM_SYSTEM_CNT_3.set_space_addr("MEM", 16'h100C);
      HQM_SYSTEM_CNT_3.set_space("MEM");
      HQM_SYSTEM_CNT_3.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_3.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_3.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_3.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_3.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_3.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_3.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_3.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_3:dont_test") ) HQM_SYSTEM_CNT_3.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_3 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_3"));
      end
   HQM_SYSTEM_CNT_3.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_3.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_4";
    `endif
    HQM_SYSTEM_CNT_4 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_4_reg::type_id::create("HQM_SYSTEM_CNT_4", this);
    HQM_SYSTEM_CNT_4.set_cfg(16'h0, 16'h0, 16'h0, 16'h1010, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_4.set_space_addr("MSG", 16'h1010);
    HQM_SYSTEM_CNT_4.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_4.set_space_addr("MEM-SB",16'h1010);
    HQM_SYSTEM_CNT_4.set_space_addr("MEM", 16'h1010);
      HQM_SYSTEM_CNT_4.set_space("MEM");
      HQM_SYSTEM_CNT_4.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_4.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_4.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_4.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_4.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_4.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_4.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_4.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_4:dont_test") ) HQM_SYSTEM_CNT_4.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_4 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_4"));
      end
   HQM_SYSTEM_CNT_4.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_4.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_5";
    `endif
    HQM_SYSTEM_CNT_5 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_5_reg::type_id::create("HQM_SYSTEM_CNT_5", this);
    HQM_SYSTEM_CNT_5.set_cfg(16'h0, 16'h0, 16'h0, 16'h1014, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_5.set_space_addr("MSG", 16'h1014);
    HQM_SYSTEM_CNT_5.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_5.set_space_addr("MEM-SB",16'h1014);
    HQM_SYSTEM_CNT_5.set_space_addr("MEM", 16'h1014);
      HQM_SYSTEM_CNT_5.set_space("MEM");
      HQM_SYSTEM_CNT_5.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_5.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_5.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_5.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_5.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_5.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_5.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_5.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_5:dont_test") ) HQM_SYSTEM_CNT_5.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_5 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_5"));
      end
   HQM_SYSTEM_CNT_5.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_5.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_6";
    `endif
    HQM_SYSTEM_CNT_6 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_6_reg::type_id::create("HQM_SYSTEM_CNT_6", this);
    HQM_SYSTEM_CNT_6.set_cfg(16'h0, 16'h0, 16'h0, 16'h1018, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_6.set_space_addr("MSG", 16'h1018);
    HQM_SYSTEM_CNT_6.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_6.set_space_addr("MEM-SB",16'h1018);
    HQM_SYSTEM_CNT_6.set_space_addr("MEM", 16'h1018);
      HQM_SYSTEM_CNT_6.set_space("MEM");
      HQM_SYSTEM_CNT_6.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_6.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_6.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_6.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_6.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_6.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_6.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_6.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_6:dont_test") ) HQM_SYSTEM_CNT_6.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_6 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_6"));
      end
   HQM_SYSTEM_CNT_6.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_6.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_7";
    `endif
    HQM_SYSTEM_CNT_7 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_7_reg::type_id::create("HQM_SYSTEM_CNT_7", this);
    HQM_SYSTEM_CNT_7.set_cfg(16'h0, 16'h0, 16'h0, 16'h101C, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_7.set_space_addr("MSG", 16'h101C);
    HQM_SYSTEM_CNT_7.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_7.set_space_addr("MEM-SB",16'h101C);
    HQM_SYSTEM_CNT_7.set_space_addr("MEM", 16'h101C);
      HQM_SYSTEM_CNT_7.set_space("MEM");
      HQM_SYSTEM_CNT_7.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_7.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_7.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_7.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_7.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_7.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_7.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_7.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_7:dont_test") ) HQM_SYSTEM_CNT_7.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_7 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_7"));
      end
   HQM_SYSTEM_CNT_7.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_7.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_8";
    `endif
    HQM_SYSTEM_CNT_8 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_8_reg::type_id::create("HQM_SYSTEM_CNT_8", this);
    HQM_SYSTEM_CNT_8.set_cfg(16'h0, 16'h0, 16'h0, 16'h1020, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_8.set_space_addr("MSG", 16'h1020);
    HQM_SYSTEM_CNT_8.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_8.set_space_addr("MEM-SB",16'h1020);
    HQM_SYSTEM_CNT_8.set_space_addr("MEM", 16'h1020);
      HQM_SYSTEM_CNT_8.set_space("MEM");
      HQM_SYSTEM_CNT_8.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_8.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_8.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_8.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_8.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_8.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_8.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_8.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_8:dont_test") ) HQM_SYSTEM_CNT_8.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_8 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_8"));
      end
   HQM_SYSTEM_CNT_8.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_8.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_9";
    `endif
    HQM_SYSTEM_CNT_9 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_9_reg::type_id::create("HQM_SYSTEM_CNT_9", this);
    HQM_SYSTEM_CNT_9.set_cfg(16'h0, 16'h0, 16'h0, 16'h1024, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_9.set_space_addr("MSG", 16'h1024);
    HQM_SYSTEM_CNT_9.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_9.set_space_addr("MEM-SB",16'h1024);
    HQM_SYSTEM_CNT_9.set_space_addr("MEM", 16'h1024);
      HQM_SYSTEM_CNT_9.set_space("MEM");
      HQM_SYSTEM_CNT_9.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_9.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_9.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_9.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_9.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_9.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_9.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_9.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_9:dont_test") ) HQM_SYSTEM_CNT_9.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_9 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_9"));
      end
   HQM_SYSTEM_CNT_9.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_9.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_10";
    `endif
    HQM_SYSTEM_CNT_10 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_10_reg::type_id::create("HQM_SYSTEM_CNT_10", this);
    HQM_SYSTEM_CNT_10.set_cfg(16'h0, 16'h0, 16'h0, 16'h1028, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_10.set_space_addr("MSG", 16'h1028);
    HQM_SYSTEM_CNT_10.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_10.set_space_addr("MEM-SB",16'h1028);
    HQM_SYSTEM_CNT_10.set_space_addr("MEM", 16'h1028);
      HQM_SYSTEM_CNT_10.set_space("MEM");
      HQM_SYSTEM_CNT_10.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_10.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_10.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_10.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_10.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_10.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_10.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_10.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_10:dont_test") ) HQM_SYSTEM_CNT_10.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_10 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_10"));
      end
   HQM_SYSTEM_CNT_10.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_10.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_11";
    `endif
    HQM_SYSTEM_CNT_11 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_11_reg::type_id::create("HQM_SYSTEM_CNT_11", this);
    HQM_SYSTEM_CNT_11.set_cfg(16'h0, 16'h0, 16'h0, 16'h102C, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_11.set_space_addr("MSG", 16'h102C);
    HQM_SYSTEM_CNT_11.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_11.set_space_addr("MEM-SB",16'h102C);
    HQM_SYSTEM_CNT_11.set_space_addr("MEM", 16'h102C);
      HQM_SYSTEM_CNT_11.set_space("MEM");
      HQM_SYSTEM_CNT_11.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_11.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_11.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_11.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_11.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_11.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_11.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_11.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_11:dont_test") ) HQM_SYSTEM_CNT_11.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_11 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_11"));
      end
   HQM_SYSTEM_CNT_11.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_11.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_12";
    `endif
    HQM_SYSTEM_CNT_12 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_12_reg::type_id::create("HQM_SYSTEM_CNT_12", this);
    HQM_SYSTEM_CNT_12.set_cfg(16'h0, 16'h0, 16'h0, 16'h1030, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_12.set_space_addr("MSG", 16'h1030);
    HQM_SYSTEM_CNT_12.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_12.set_space_addr("MEM-SB",16'h1030);
    HQM_SYSTEM_CNT_12.set_space_addr("MEM", 16'h1030);
      HQM_SYSTEM_CNT_12.set_space("MEM");
      HQM_SYSTEM_CNT_12.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_12.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_12.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_12.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_12.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_12.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_12.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_12.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_12:dont_test") ) HQM_SYSTEM_CNT_12.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_12 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_12"));
      end
   HQM_SYSTEM_CNT_12.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_12.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_13";
    `endif
    HQM_SYSTEM_CNT_13 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_13_reg::type_id::create("HQM_SYSTEM_CNT_13", this);
    HQM_SYSTEM_CNT_13.set_cfg(16'h0, 16'h0, 16'h0, 16'h1034, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_13.set_space_addr("MSG", 16'h1034);
    HQM_SYSTEM_CNT_13.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_13.set_space_addr("MEM-SB",16'h1034);
    HQM_SYSTEM_CNT_13.set_space_addr("MEM", 16'h1034);
      HQM_SYSTEM_CNT_13.set_space("MEM");
      HQM_SYSTEM_CNT_13.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_13.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_13.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_13.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_13.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_13.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_13.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_13.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_13:dont_test") ) HQM_SYSTEM_CNT_13.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_13 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_13"));
      end
   HQM_SYSTEM_CNT_13.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_13.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_14";
    `endif
    HQM_SYSTEM_CNT_14 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_14_reg::type_id::create("HQM_SYSTEM_CNT_14", this);
    HQM_SYSTEM_CNT_14.set_cfg(16'h0, 16'h0, 16'h0, 16'h1038, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_14.set_space_addr("MSG", 16'h1038);
    HQM_SYSTEM_CNT_14.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_14.set_space_addr("MEM-SB",16'h1038);
    HQM_SYSTEM_CNT_14.set_space_addr("MEM", 16'h1038);
      HQM_SYSTEM_CNT_14.set_space("MEM");
      HQM_SYSTEM_CNT_14.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_14.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_14.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_14.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_14.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_14.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_14.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_14.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_14:dont_test") ) HQM_SYSTEM_CNT_14.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_14 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_14"));
      end
   HQM_SYSTEM_CNT_14.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_14.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_15";
    `endif
    HQM_SYSTEM_CNT_15 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_15_reg::type_id::create("HQM_SYSTEM_CNT_15", this);
    HQM_SYSTEM_CNT_15.set_cfg(16'h0, 16'h0, 16'h0, 16'h103C, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_15.set_space_addr("MSG", 16'h103C);
    HQM_SYSTEM_CNT_15.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_15.set_space_addr("MEM-SB",16'h103C);
    HQM_SYSTEM_CNT_15.set_space_addr("MEM", 16'h103C);
      HQM_SYSTEM_CNT_15.set_space("MEM");
      HQM_SYSTEM_CNT_15.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_15.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_15.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_15.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_15.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_15.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_15.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_15.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_15:dont_test") ) HQM_SYSTEM_CNT_15.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_15 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_15"));
      end
   HQM_SYSTEM_CNT_15.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_15.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_16";
    `endif
    HQM_SYSTEM_CNT_16 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_16_reg::type_id::create("HQM_SYSTEM_CNT_16", this);
    HQM_SYSTEM_CNT_16.set_cfg(16'h0, 16'h0, 16'h0, 16'h1040, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_16.set_space_addr("MSG", 16'h1040);
    HQM_SYSTEM_CNT_16.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_16.set_space_addr("MEM-SB",16'h1040);
    HQM_SYSTEM_CNT_16.set_space_addr("MEM", 16'h1040);
      HQM_SYSTEM_CNT_16.set_space("MEM");
      HQM_SYSTEM_CNT_16.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_16.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_16.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_16.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_16.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_16.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_16.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_16.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_16:dont_test") ) HQM_SYSTEM_CNT_16.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_16 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_16"));
      end
   HQM_SYSTEM_CNT_16.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_16.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_17";
    `endif
    HQM_SYSTEM_CNT_17 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_17_reg::type_id::create("HQM_SYSTEM_CNT_17", this);
    HQM_SYSTEM_CNT_17.set_cfg(16'h0, 16'h0, 16'h0, 16'h1044, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_17.set_space_addr("MSG", 16'h1044);
    HQM_SYSTEM_CNT_17.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_17.set_space_addr("MEM-SB",16'h1044);
    HQM_SYSTEM_CNT_17.set_space_addr("MEM", 16'h1044);
      HQM_SYSTEM_CNT_17.set_space("MEM");
      HQM_SYSTEM_CNT_17.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_17.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_17.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_17.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_17.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_17.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_17.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_17.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_17:dont_test") ) HQM_SYSTEM_CNT_17.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_17 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_17"));
      end
   HQM_SYSTEM_CNT_17.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_17.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_18";
    `endif
    HQM_SYSTEM_CNT_18 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_18_reg::type_id::create("HQM_SYSTEM_CNT_18", this);
    HQM_SYSTEM_CNT_18.set_cfg(16'h0, 16'h0, 16'h0, 16'h1048, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_18.set_space_addr("MSG", 16'h1048);
    HQM_SYSTEM_CNT_18.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_18.set_space_addr("MEM-SB",16'h1048);
    HQM_SYSTEM_CNT_18.set_space_addr("MEM", 16'h1048);
      HQM_SYSTEM_CNT_18.set_space("MEM");
      HQM_SYSTEM_CNT_18.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_18.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_18.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_18.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_18.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_18.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_18.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_18.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_18:dont_test") ) HQM_SYSTEM_CNT_18.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_18 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_18"));
      end
   HQM_SYSTEM_CNT_18.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_18.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_19";
    `endif
    HQM_SYSTEM_CNT_19 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_19_reg::type_id::create("HQM_SYSTEM_CNT_19", this);
    HQM_SYSTEM_CNT_19.set_cfg(16'h0, 16'h0, 16'h0, 16'h104C, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_19.set_space_addr("MSG", 16'h104C);
    HQM_SYSTEM_CNT_19.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_19.set_space_addr("MEM-SB",16'h104C);
    HQM_SYSTEM_CNT_19.set_space_addr("MEM", 16'h104C);
      HQM_SYSTEM_CNT_19.set_space("MEM");
      HQM_SYSTEM_CNT_19.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_19.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_19.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_19.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_19.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_19.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_19.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_19.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_19:dont_test") ) HQM_SYSTEM_CNT_19.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_19 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_19"));
      end
   HQM_SYSTEM_CNT_19.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_19.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_20";
    `endif
    HQM_SYSTEM_CNT_20 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_20_reg::type_id::create("HQM_SYSTEM_CNT_20", this);
    HQM_SYSTEM_CNT_20.set_cfg(16'h0, 16'h0, 16'h0, 16'h1050, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_20.set_space_addr("MSG", 16'h1050);
    HQM_SYSTEM_CNT_20.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_20.set_space_addr("MEM-SB",16'h1050);
    HQM_SYSTEM_CNT_20.set_space_addr("MEM", 16'h1050);
      HQM_SYSTEM_CNT_20.set_space("MEM");
      HQM_SYSTEM_CNT_20.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_20.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_20.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_20.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_20.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_20.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_20.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_20.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_20:dont_test") ) HQM_SYSTEM_CNT_20.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_20 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_20"));
      end
   HQM_SYSTEM_CNT_20.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_20.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SYSTEM_CNT_21";
    `endif
    HQM_SYSTEM_CNT_21 = hqm_system_csr_bridge_HQM_SYSTEM_CNT_21_reg::type_id::create("HQM_SYSTEM_CNT_21", this);
    HQM_SYSTEM_CNT_21.set_cfg(16'h0, 16'h0, 16'h0, 16'h1054, 32, 32'b00000000000000000000000000000000);
    HQM_SYSTEM_CNT_21.set_space_addr("MSG", 16'h1054);
    HQM_SYSTEM_CNT_21.set_space_addr("msg_bus_port", 'h21);
    HQM_SYSTEM_CNT_21.set_space_addr("MEM-SB",16'h1054);
    HQM_SYSTEM_CNT_21.set_space_addr("MEM", 16'h1054);
      HQM_SYSTEM_CNT_21.set_space("MEM");
      HQM_SYSTEM_CNT_21.set_msg_opcode("MEM-SB");
      HQM_SYSTEM_CNT_21.set_fid(4'h0, "MEM-SB");
  	HQM_SYSTEM_CNT_21.set_bar(4'h2, "MEM-SB");
      HQM_SYSTEM_CNT_21.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SYSTEM_CNT_21.set_user_attribute("diag_reg", "1");
      HQM_SYSTEM_CNT_21.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SYSTEM_CNT_21.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SYSTEM_CNT_21.set_test_reg(0);
      if ( $test$plusargs("HQM_SYSTEM_CNT_21:dont_test") ) HQM_SYSTEM_CNT_21.set_test_reg(1'b0);
      if (!add_reg( HQM_SYSTEM_CNT_21 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SYSTEM_CNT_21"));
      end
   HQM_SYSTEM_CNT_21.CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_21.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SBE_CNT_0";
    `endif
    SBE_CNT_0 = hqm_system_csr_bridge_SBE_CNT_0_reg::type_id::create("SBE_CNT_0", this);
    SBE_CNT_0.set_cfg(16'h0, 16'h0, 16'h0, 16'h2000, 32, 32'b00000000000000000000000000000000);
    SBE_CNT_0.set_space_addr("MSG", 16'h2000);
    SBE_CNT_0.set_space_addr("msg_bus_port", 'h21);
    SBE_CNT_0.set_space_addr("MEM-SB",16'h2000);
    SBE_CNT_0.set_space_addr("MEM", 16'h2000);
      SBE_CNT_0.set_space("MEM");
      SBE_CNT_0.set_msg_opcode("MEM-SB");
      SBE_CNT_0.set_fid(4'h0, "MEM-SB");
  	SBE_CNT_0.set_bar(4'h2, "MEM-SB");
      SBE_CNT_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SBE_CNT_0.set_user_attribute("diag_reg", "1");
      SBE_CNT_0.set_user_attribute("HqmIsFeatureReg", "0");
      SBE_CNT_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SBE_CNT_0:dont_test") ) SBE_CNT_0.set_test_reg(1'b0);
      if (!add_reg( SBE_CNT_0 )) begin
        `sla_error(get_name(), ("Could not add register SBE_CNT_0"));
      end
   SBE_CNT_0.CNT.set_paths({"i_hqm_system_core.i_hqm_system_alarm.sbe_cnt_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SBE_CNT_1";
    `endif
    SBE_CNT_1 = hqm_system_csr_bridge_SBE_CNT_1_reg::type_id::create("SBE_CNT_1", this);
    SBE_CNT_1.set_cfg(16'h0, 16'h0, 16'h0, 16'h2004, 32, 32'b00000000000000000000000000000000);
    SBE_CNT_1.set_space_addr("MSG", 16'h2004);
    SBE_CNT_1.set_space_addr("msg_bus_port", 'h21);
    SBE_CNT_1.set_space_addr("MEM-SB",16'h2004);
    SBE_CNT_1.set_space_addr("MEM", 16'h2004);
      SBE_CNT_1.set_space("MEM");
      SBE_CNT_1.set_msg_opcode("MEM-SB");
      SBE_CNT_1.set_fid(4'h0, "MEM-SB");
  	SBE_CNT_1.set_bar(4'h2, "MEM-SB");
      SBE_CNT_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SBE_CNT_1.set_user_attribute("diag_reg", "1");
      SBE_CNT_1.set_user_attribute("HqmIsFeatureReg", "0");
      SBE_CNT_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SBE_CNT_1:dont_test") ) SBE_CNT_1.set_test_reg(1'b0);
      if (!add_reg( SBE_CNT_1 )) begin
        `sla_error(get_name(), ("Could not add register SBE_CNT_1"));
      end
   SBE_CNT_1.CNT.set_paths({"i_hqm_system_core.i_hqm_system_alarm.sbe_cnt_q[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_CONFIGURATION0";
    `endif
    PERF_SMON_CONFIGURATION0 = hqm_system_csr_bridge_PERF_SMON_CONFIGURATION0_reg::type_id::create("PERF_SMON_CONFIGURATION0", this);
    PERF_SMON_CONFIGURATION0.set_cfg(16'h0, 16'h0, 16'h0, 16'h3000, 32, 32'b01000000000000000000000000000000);
    PERF_SMON_CONFIGURATION0.set_space_addr("MSG", 16'h3000);
    PERF_SMON_CONFIGURATION0.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_CONFIGURATION0.set_space_addr("MEM-SB",16'h3000);
    PERF_SMON_CONFIGURATION0.set_space_addr("MEM", 16'h3000);
      PERF_SMON_CONFIGURATION0.set_space("MEM");
      PERF_SMON_CONFIGURATION0.set_msg_opcode("MEM-SB");
      PERF_SMON_CONFIGURATION0.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_CONFIGURATION0.set_bar(4'h2, "MEM-SB");
      PERF_SMON_CONFIGURATION0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_CONFIGURATION0.set_user_attribute("diag_reg", "0");
      PERF_SMON_CONFIGURATION0.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_CONFIGURATION0.set_user_attribute("SubnetPortID", "8'h00");
      PERF_SMON_CONFIGURATION0.set_test_reg(0);
      if ( $test$plusargs("PERF_SMON_CONFIGURATION0:dont_test") ) PERF_SMON_CONFIGURATION0.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_CONFIGURATION0 )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_CONFIGURATION0"));
      end
   PERF_SMON_CONFIGURATION0.SMON_ENABLE.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[0:0]"});
   PERF_SMON_CONFIGURATION0.SMON0_FUNCTION.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[6:4]"});
   PERF_SMON_CONFIGURATION0.SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[7:7]"});
   PERF_SMON_CONFIGURATION0.SMON1_FUNCTION.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[10:8]"});
   PERF_SMON_CONFIGURATION0.SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[11:11]"});
   PERF_SMON_CONFIGURATION0.SMON_MODE.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[15:12]"});
   PERF_SMON_CONFIGURATION0.STOPCOUNTEROVFL.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[16:16]"});
   PERF_SMON_CONFIGURATION0.INTCOUNTEROVFL.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[17:17]"});
   PERF_SMON_CONFIGURATION0.STATCOUNTER0OVFL.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[18:18]"});
   PERF_SMON_CONFIGURATION0.STATCOUNTER1OVFL.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[19:19]"});
   PERF_SMON_CONFIGURATION0.STOPTIMEROVFL.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[20:20]"});
   PERF_SMON_CONFIGURATION0.INTTIMEROVFL.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[21:21]"});
   PERF_SMON_CONFIGURATION0.STATTIMEROVFL.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[22:22]"});
   PERF_SMON_CONFIGURATION0.TIMER_PRESCALE.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg0_q[28:24]"});
   PERF_SMON_CONFIGURATION0.VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_CONFIGURATION1";
    `endif
    PERF_SMON_CONFIGURATION1 = hqm_system_csr_bridge_PERF_SMON_CONFIGURATION1_reg::type_id::create("PERF_SMON_CONFIGURATION1", this);
    PERF_SMON_CONFIGURATION1.set_cfg(16'h0, 16'h0, 16'h0, 16'h3004, 32, 32'b00000000000000000000000000000000);
    PERF_SMON_CONFIGURATION1.set_space_addr("MSG", 16'h3004);
    PERF_SMON_CONFIGURATION1.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_CONFIGURATION1.set_space_addr("MEM-SB",16'h3004);
    PERF_SMON_CONFIGURATION1.set_space_addr("MEM", 16'h3004);
      PERF_SMON_CONFIGURATION1.set_space("MEM");
      PERF_SMON_CONFIGURATION1.set_msg_opcode("MEM-SB");
      PERF_SMON_CONFIGURATION1.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_CONFIGURATION1.set_bar(4'h2, "MEM-SB");
      PERF_SMON_CONFIGURATION1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_CONFIGURATION1.set_user_attribute("diag_reg", "0");
      PERF_SMON_CONFIGURATION1.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_CONFIGURATION1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_CONFIGURATION1:dont_test") ) PERF_SMON_CONFIGURATION1.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_CONFIGURATION1 )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_CONFIGURATION1"));
      end
   PERF_SMON_CONFIGURATION1.MODE0.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg1_q[7:0]"});
   PERF_SMON_CONFIGURATION1.MODE1.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg1_q[15:8]"});
   PERF_SMON_CONFIGURATION1.RSVD.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cfg1_q[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_COMPARE0";
    `endif
    PERF_SMON_COMPARE0 = hqm_system_csr_bridge_PERF_SMON_COMPARE0_reg::type_id::create("PERF_SMON_COMPARE0", this);
    PERF_SMON_COMPARE0.set_cfg(16'h0, 16'h0, 16'h0, 16'h3008, 32, 32'b00000000000000000000000000000000);
    PERF_SMON_COMPARE0.set_space_addr("MSG", 16'h3008);
    PERF_SMON_COMPARE0.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_COMPARE0.set_space_addr("MEM-SB",16'h3008);
    PERF_SMON_COMPARE0.set_space_addr("MEM", 16'h3008);
      PERF_SMON_COMPARE0.set_space("MEM");
      PERF_SMON_COMPARE0.set_msg_opcode("MEM-SB");
      PERF_SMON_COMPARE0.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_COMPARE0.set_bar(4'h2, "MEM-SB");
      PERF_SMON_COMPARE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_COMPARE0.set_user_attribute("diag_reg", "0");
      PERF_SMON_COMPARE0.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_COMPARE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_COMPARE0:dont_test") ) PERF_SMON_COMPARE0.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_COMPARE0 )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_COMPARE0"));
      end
   PERF_SMON_COMPARE0.COMPARE0.set_paths({"i_hqm_system_core.i_smon2.reg_smon_comp0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_COMPARE1";
    `endif
    PERF_SMON_COMPARE1 = hqm_system_csr_bridge_PERF_SMON_COMPARE1_reg::type_id::create("PERF_SMON_COMPARE1", this);
    PERF_SMON_COMPARE1.set_cfg(16'h0, 16'h0, 16'h0, 16'h300C, 32, 32'b00000000000000000000000000000000);
    PERF_SMON_COMPARE1.set_space_addr("MSG", 16'h300C);
    PERF_SMON_COMPARE1.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_COMPARE1.set_space_addr("MEM-SB",16'h300C);
    PERF_SMON_COMPARE1.set_space_addr("MEM", 16'h300C);
      PERF_SMON_COMPARE1.set_space("MEM");
      PERF_SMON_COMPARE1.set_msg_opcode("MEM-SB");
      PERF_SMON_COMPARE1.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_COMPARE1.set_bar(4'h2, "MEM-SB");
      PERF_SMON_COMPARE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_COMPARE1.set_user_attribute("diag_reg", "0");
      PERF_SMON_COMPARE1.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_COMPARE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_COMPARE1:dont_test") ) PERF_SMON_COMPARE1.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_COMPARE1 )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_COMPARE1"));
      end
   PERF_SMON_COMPARE1.COMPARE1.set_paths({"i_hqm_system_core.i_smon2.reg_smon_comp1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_ACTIVITYCOUNTER0";
    `endif
    PERF_SMON_ACTIVITYCOUNTER0 = hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER0_reg::type_id::create("PERF_SMON_ACTIVITYCOUNTER0", this);
    PERF_SMON_ACTIVITYCOUNTER0.set_cfg(16'h0, 16'h0, 16'h0, 16'h3010, 32, 32'b00000000000000000000000000000000);
    PERF_SMON_ACTIVITYCOUNTER0.set_space_addr("MSG", 16'h3010);
    PERF_SMON_ACTIVITYCOUNTER0.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM-SB",16'h3010);
    PERF_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM", 16'h3010);
      PERF_SMON_ACTIVITYCOUNTER0.set_space("MEM");
      PERF_SMON_ACTIVITYCOUNTER0.set_msg_opcode("MEM-SB");
      PERF_SMON_ACTIVITYCOUNTER0.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_ACTIVITYCOUNTER0.set_bar(4'h2, "MEM-SB");
      PERF_SMON_ACTIVITYCOUNTER0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_ACTIVITYCOUNTER0.set_user_attribute("diag_reg", "0");
      PERF_SMON_ACTIVITYCOUNTER0.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_ACTIVITYCOUNTER0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_ACTIVITYCOUNTER0:dont_test") ) PERF_SMON_ACTIVITYCOUNTER0.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_ACTIVITYCOUNTER0 )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_ACTIVITYCOUNTER0"));
      end
   PERF_SMON_ACTIVITYCOUNTER0.COUNTER0.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cnt0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_ACTIVITYCOUNTER1";
    `endif
    PERF_SMON_ACTIVITYCOUNTER1 = hqm_system_csr_bridge_PERF_SMON_ACTIVITYCOUNTER1_reg::type_id::create("PERF_SMON_ACTIVITYCOUNTER1", this);
    PERF_SMON_ACTIVITYCOUNTER1.set_cfg(16'h0, 16'h0, 16'h0, 16'h3014, 32, 32'b00000000000000000000000000000000);
    PERF_SMON_ACTIVITYCOUNTER1.set_space_addr("MSG", 16'h3014);
    PERF_SMON_ACTIVITYCOUNTER1.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM-SB",16'h3014);
    PERF_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM", 16'h3014);
      PERF_SMON_ACTIVITYCOUNTER1.set_space("MEM");
      PERF_SMON_ACTIVITYCOUNTER1.set_msg_opcode("MEM-SB");
      PERF_SMON_ACTIVITYCOUNTER1.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_ACTIVITYCOUNTER1.set_bar(4'h2, "MEM-SB");
      PERF_SMON_ACTIVITYCOUNTER1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_ACTIVITYCOUNTER1.set_user_attribute("diag_reg", "0");
      PERF_SMON_ACTIVITYCOUNTER1.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_ACTIVITYCOUNTER1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_ACTIVITYCOUNTER1:dont_test") ) PERF_SMON_ACTIVITYCOUNTER1.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_ACTIVITYCOUNTER1 )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_ACTIVITYCOUNTER1"));
      end
   PERF_SMON_ACTIVITYCOUNTER1.COUNTER1.set_paths({"i_hqm_system_core.i_smon2.reg_smon_cnt1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_TIMER";
    `endif
    PERF_SMON_TIMER = hqm_system_csr_bridge_PERF_SMON_TIMER_reg::type_id::create("PERF_SMON_TIMER", this);
    PERF_SMON_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 16'h3018, 32, 32'b00000000000000000000000000000000);
    PERF_SMON_TIMER.set_space_addr("MSG", 16'h3018);
    PERF_SMON_TIMER.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_TIMER.set_space_addr("MEM-SB",16'h3018);
    PERF_SMON_TIMER.set_space_addr("MEM", 16'h3018);
      PERF_SMON_TIMER.set_space("MEM");
      PERF_SMON_TIMER.set_msg_opcode("MEM-SB");
      PERF_SMON_TIMER.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_TIMER.set_bar(4'h2, "MEM-SB");
      PERF_SMON_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_TIMER.set_user_attribute("diag_reg", "0");
      PERF_SMON_TIMER.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_TIMER:dont_test") ) PERF_SMON_TIMER.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_TIMER )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_TIMER"));
      end
   PERF_SMON_TIMER.TIMER_VAL.set_paths({"i_hqm_system_core.i_smon2.reg_smon_timer_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_MAXIMUM_TIMER";
    `endif
    PERF_SMON_MAXIMUM_TIMER = hqm_system_csr_bridge_PERF_SMON_MAXIMUM_TIMER_reg::type_id::create("PERF_SMON_MAXIMUM_TIMER", this);
    PERF_SMON_MAXIMUM_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 16'h301C, 32, 32'b00000000000000000000000000000000);
    PERF_SMON_MAXIMUM_TIMER.set_space_addr("MSG", 16'h301C);
    PERF_SMON_MAXIMUM_TIMER.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_MAXIMUM_TIMER.set_space_addr("MEM-SB",16'h301C);
    PERF_SMON_MAXIMUM_TIMER.set_space_addr("MEM", 16'h301C);
      PERF_SMON_MAXIMUM_TIMER.set_space("MEM");
      PERF_SMON_MAXIMUM_TIMER.set_msg_opcode("MEM-SB");
      PERF_SMON_MAXIMUM_TIMER.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_MAXIMUM_TIMER.set_bar(4'h2, "MEM-SB");
      PERF_SMON_MAXIMUM_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_MAXIMUM_TIMER.set_user_attribute("diag_reg", "0");
      PERF_SMON_MAXIMUM_TIMER.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_MAXIMUM_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_MAXIMUM_TIMER:dont_test") ) PERF_SMON_MAXIMUM_TIMER.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_MAXIMUM_TIMER )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_MAXIMUM_TIMER"));
      end
   PERF_SMON_MAXIMUM_TIMER.MAXVALUE.set_paths({"i_hqm_system_core.i_smon2.reg_smon_maxval_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_COMP_MASK0";
    `endif
    PERF_SMON_COMP_MASK0 = hqm_system_csr_bridge_PERF_SMON_COMP_MASK0_reg::type_id::create("PERF_SMON_COMP_MASK0", this);
    PERF_SMON_COMP_MASK0.set_cfg(16'h0, 16'h0, 16'h0, 16'h3020, 32, 32'b11111111111111111111111111111111);
    PERF_SMON_COMP_MASK0.set_space_addr("MSG", 16'h3020);
    PERF_SMON_COMP_MASK0.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_COMP_MASK0.set_space_addr("MEM-SB",16'h3020);
    PERF_SMON_COMP_MASK0.set_space_addr("MEM", 16'h3020);
      PERF_SMON_COMP_MASK0.set_space("MEM");
      PERF_SMON_COMP_MASK0.set_msg_opcode("MEM-SB");
      PERF_SMON_COMP_MASK0.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_COMP_MASK0.set_bar(4'h2, "MEM-SB");
      PERF_SMON_COMP_MASK0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_COMP_MASK0.set_user_attribute("diag_reg", "0");
      PERF_SMON_COMP_MASK0.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_COMP_MASK0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_COMP_MASK0:dont_test") ) PERF_SMON_COMP_MASK0.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_COMP_MASK0 )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_COMP_MASK0"));
      end
   PERF_SMON_COMP_MASK0.COMP_MASK0.set_paths({"i_hqm_system_core.i_smon2.reg_smon_mask0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PERF_SMON_COMP_MASK1";
    `endif
    PERF_SMON_COMP_MASK1 = hqm_system_csr_bridge_PERF_SMON_COMP_MASK1_reg::type_id::create("PERF_SMON_COMP_MASK1", this);
    PERF_SMON_COMP_MASK1.set_cfg(16'h0, 16'h0, 16'h0, 16'h3024, 32, 32'b11111111111111111111111111111111);
    PERF_SMON_COMP_MASK1.set_space_addr("MSG", 16'h3024);
    PERF_SMON_COMP_MASK1.set_space_addr("msg_bus_port", 'h21);
    PERF_SMON_COMP_MASK1.set_space_addr("MEM-SB",16'h3024);
    PERF_SMON_COMP_MASK1.set_space_addr("MEM", 16'h3024);
      PERF_SMON_COMP_MASK1.set_space("MEM");
      PERF_SMON_COMP_MASK1.set_msg_opcode("MEM-SB");
      PERF_SMON_COMP_MASK1.set_fid(4'h0, "MEM-SB");
  	PERF_SMON_COMP_MASK1.set_bar(4'h2, "MEM-SB");
      PERF_SMON_COMP_MASK1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PERF_SMON_COMP_MASK1.set_user_attribute("diag_reg", "0");
      PERF_SMON_COMP_MASK1.set_user_attribute("HqmIsFeatureReg", "0");
      PERF_SMON_COMP_MASK1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PERF_SMON_COMP_MASK1:dont_test") ) PERF_SMON_COMP_MASK1.set_test_reg(1'b0);
      if (!add_reg( PERF_SMON_COMP_MASK1 )) begin
        `sla_error(get_name(), ("Could not add register PERF_SMON_COMP_MASK1"));
      end
   PERF_SMON_COMP_MASK1.COMP_MASK1.set_paths({"i_hqm_system_core.i_smon2.reg_smon_mask1_q[31:0]"});

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("WB_DIR_CQ_STATE[%0d]",i);
    `endif
    WB_DIR_CQ_STATE[i] = hqm_system_csr_bridge_WB_DIR_CQ_STATE_reg::type_id::create($psprintf("WB_DIR_CQ_STATE[%0d]",i), this);
    WB_DIR_CQ_STATE[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1C00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    WB_DIR_CQ_STATE[i].set_space_addr("MSG",  (28'h1C00000 + (i*4096)) );
    WB_DIR_CQ_STATE[i].set_space_addr("msg_bus_port", 'h21);
    WB_DIR_CQ_STATE[i].set_space_addr("MEM-SB", (28'h1C00000 + (i*4096)) );
    WB_DIR_CQ_STATE[i].set_space_addr("MEM",  (28'h1C00000 + (i*4096)) );
      WB_DIR_CQ_STATE[i].set_space("MEM");
      WB_DIR_CQ_STATE[i].set_msg_opcode("MEM-SB");
      WB_DIR_CQ_STATE[i].set_fid(4'h0, "MEM-SB");
  	WB_DIR_CQ_STATE[i].set_bar(4'h2, "MEM-SB");
      WB_DIR_CQ_STATE[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      WB_DIR_CQ_STATE[i].set_user_attribute("diag_reg", "0");
      WB_DIR_CQ_STATE[i].set_user_attribute("HqmIsFeatureReg", "0");
      WB_DIR_CQ_STATE[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("WB_DIR_CQ_STATE[%0d]:dont_test",i)) ) WB_DIR_CQ_STATE[i].set_test_reg(1'b0);
      if (!add_reg( WB_DIR_CQ_STATE[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register WB_DIR_CQ_STATE[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("WB_LDB_CQ_STATE[%0d]",i);
    `endif
    WB_LDB_CQ_STATE[i] = hqm_system_csr_bridge_WB_LDB_CQ_STATE_reg::type_id::create($psprintf("WB_LDB_CQ_STATE[%0d]",i), this);
    WB_LDB_CQ_STATE[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1D00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    WB_LDB_CQ_STATE[i].set_space_addr("MSG",  (28'h1D00000 + (i*4096)) );
    WB_LDB_CQ_STATE[i].set_space_addr("msg_bus_port", 'h21);
    WB_LDB_CQ_STATE[i].set_space_addr("MEM-SB", (28'h1D00000 + (i*4096)) );
    WB_LDB_CQ_STATE[i].set_space_addr("MEM",  (28'h1D00000 + (i*4096)) );
      WB_LDB_CQ_STATE[i].set_space("MEM");
      WB_LDB_CQ_STATE[i].set_msg_opcode("MEM-SB");
      WB_LDB_CQ_STATE[i].set_fid(4'h0, "MEM-SB");
  	WB_LDB_CQ_STATE[i].set_bar(4'h2, "MEM-SB");
      WB_LDB_CQ_STATE[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      WB_LDB_CQ_STATE[i].set_user_attribute("diag_reg", "0");
      WB_LDB_CQ_STATE[i].set_user_attribute("HqmIsFeatureReg", "0");
      WB_LDB_CQ_STATE[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("WB_LDB_CQ_STATE[%0d]:dont_test",i)) ) WB_LDB_CQ_STATE[i].set_test_reg(1'b0);
      if (!add_reg( WB_LDB_CQ_STATE[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register WB_LDB_CQ_STATE[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<128; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("AI_ADDR_L[%0d]",i);
    `endif
    AI_ADDR_L[i] = hqm_system_csr_bridge_AI_ADDR_L_reg::type_id::create($psprintf("AI_ADDR_L[%0d]",i), this);
    AI_ADDR_L[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1E00000 + (i *16)), 32, 32'b00000000000000000000000000000000);
    AI_ADDR_L[i].set_space_addr("MSG",  (28'h1E00000 + (i*16)) );
    AI_ADDR_L[i].set_space_addr("msg_bus_port", 'h21);
    AI_ADDR_L[i].set_space_addr("MEM-SB", (28'h1E00000 + (i*16)) );
    AI_ADDR_L[i].set_space_addr("MEM",  (28'h1E00000 + (i*16)) );
      AI_ADDR_L[i].set_space("MEM");
      AI_ADDR_L[i].set_msg_opcode("MEM-SB");
      AI_ADDR_L[i].set_fid(4'h0, "MEM-SB");
  	AI_ADDR_L[i].set_bar(4'h2, "MEM-SB");
      AI_ADDR_L[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_ADDR_L[i].set_user_attribute("diag_reg", "0");
      AI_ADDR_L[i].set_user_attribute("HqmIsFeatureReg", "0");
      AI_ADDR_L[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("AI_ADDR_L[%0d]:dont_test",i)) ) AI_ADDR_L[i].set_test_reg(1'b0);
      if (!add_reg( AI_ADDR_L[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register AI_ADDR_L[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<128; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("AI_ADDR_U[%0d]",i);
    `endif
    AI_ADDR_U[i] = hqm_system_csr_bridge_AI_ADDR_U_reg::type_id::create($psprintf("AI_ADDR_U[%0d]",i), this);
    AI_ADDR_U[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1E00004 + (i *16)), 32, 32'b00000000000000000000000000000000);
    AI_ADDR_U[i].set_space_addr("MSG",  (28'h1E00004 + (i*16)) );
    AI_ADDR_U[i].set_space_addr("msg_bus_port", 'h21);
    AI_ADDR_U[i].set_space_addr("MEM-SB", (28'h1E00004 + (i*16)) );
    AI_ADDR_U[i].set_space_addr("MEM",  (28'h1E00004 + (i*16)) );
      AI_ADDR_U[i].set_space("MEM");
      AI_ADDR_U[i].set_msg_opcode("MEM-SB");
      AI_ADDR_U[i].set_fid(4'h0, "MEM-SB");
  	AI_ADDR_U[i].set_bar(4'h2, "MEM-SB");
      AI_ADDR_U[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_ADDR_U[i].set_user_attribute("diag_reg", "0");
      AI_ADDR_U[i].set_user_attribute("HqmIsFeatureReg", "0");
      AI_ADDR_U[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("AI_ADDR_U[%0d]:dont_test",i)) ) AI_ADDR_U[i].set_test_reg(1'b0);
      if (!add_reg( AI_ADDR_U[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register AI_ADDR_U[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<128; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("AI_DATA[%0d]",i);
    `endif
    AI_DATA[i] = hqm_system_csr_bridge_AI_DATA_reg::type_id::create($psprintf("AI_DATA[%0d]",i), this);
    AI_DATA[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1E00008 + (i *16)), 32, 32'b00000000000000000000000000000000);
    AI_DATA[i].set_space_addr("MSG",  (28'h1E00008 + (i*16)) );
    AI_DATA[i].set_space_addr("msg_bus_port", 'h21);
    AI_DATA[i].set_space_addr("MEM-SB", (28'h1E00008 + (i*16)) );
    AI_DATA[i].set_space_addr("MEM",  (28'h1E00008 + (i*16)) );
      AI_DATA[i].set_space("MEM");
      AI_DATA[i].set_msg_opcode("MEM-SB");
      AI_DATA[i].set_fid(4'h0, "MEM-SB");
  	AI_DATA[i].set_bar(4'h2, "MEM-SB");
      AI_DATA[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_DATA[i].set_user_attribute("diag_reg", "0");
      AI_DATA[i].set_user_attribute("HqmIsFeatureReg", "0");
      AI_DATA[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("AI_DATA[%0d]:dont_test",i)) ) AI_DATA[i].set_test_reg(1'b0);
      if (!add_reg( AI_DATA[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register AI_DATA[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[0]";
    `endif
    AI_CTRL[0] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[0]", this);
    AI_CTRL[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0000C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[0].set_space_addr("MSG", 28'h1E0000C);
    AI_CTRL[0].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[0].set_space_addr("MEM-SB",28'h1E0000C);
    AI_CTRL[0].set_space_addr("MEM", 28'h1E0000C);
      AI_CTRL[0].set_space("MEM");
      AI_CTRL[0].set_msg_opcode("MEM-SB");
      AI_CTRL[0].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[0].set_bar(4'h2, "MEM-SB");
      AI_CTRL[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[0].set_user_attribute("diag_reg", "0");
      AI_CTRL[0].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[0]:dont_test") ) AI_CTRL[0].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[0] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[0]"));
      end
   AI_CTRL[0].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[0].IMS_MASK"});
   AI_CTRL[0].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[0].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[1]";
    `endif
    AI_CTRL[1] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[1]", this);
    AI_CTRL[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0001C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[1].set_space_addr("MSG", 28'h1E0001C);
    AI_CTRL[1].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[1].set_space_addr("MEM-SB",28'h1E0001C);
    AI_CTRL[1].set_space_addr("MEM", 28'h1E0001C);
      AI_CTRL[1].set_space("MEM");
      AI_CTRL[1].set_msg_opcode("MEM-SB");
      AI_CTRL[1].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[1].set_bar(4'h2, "MEM-SB");
      AI_CTRL[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[1].set_user_attribute("diag_reg", "0");
      AI_CTRL[1].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[1]:dont_test") ) AI_CTRL[1].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[1] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[1]"));
      end
   AI_CTRL[1].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[1].IMS_MASK"});
   AI_CTRL[1].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[1].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[2]";
    `endif
    AI_CTRL[2] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[2]", this);
    AI_CTRL[2].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0002C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[2].set_space_addr("MSG", 28'h1E0002C);
    AI_CTRL[2].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[2].set_space_addr("MEM-SB",28'h1E0002C);
    AI_CTRL[2].set_space_addr("MEM", 28'h1E0002C);
      AI_CTRL[2].set_space("MEM");
      AI_CTRL[2].set_msg_opcode("MEM-SB");
      AI_CTRL[2].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[2].set_bar(4'h2, "MEM-SB");
      AI_CTRL[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[2].set_user_attribute("diag_reg", "0");
      AI_CTRL[2].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[2]:dont_test") ) AI_CTRL[2].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[2] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[2]"));
      end
   AI_CTRL[2].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[2].IMS_MASK"});
   AI_CTRL[2].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[2].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[3]";
    `endif
    AI_CTRL[3] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[3]", this);
    AI_CTRL[3].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0003C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[3].set_space_addr("MSG", 28'h1E0003C);
    AI_CTRL[3].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[3].set_space_addr("MEM-SB",28'h1E0003C);
    AI_CTRL[3].set_space_addr("MEM", 28'h1E0003C);
      AI_CTRL[3].set_space("MEM");
      AI_CTRL[3].set_msg_opcode("MEM-SB");
      AI_CTRL[3].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[3].set_bar(4'h2, "MEM-SB");
      AI_CTRL[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[3].set_user_attribute("diag_reg", "0");
      AI_CTRL[3].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[3]:dont_test") ) AI_CTRL[3].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[3] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[3]"));
      end
   AI_CTRL[3].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[3].IMS_MASK"});
   AI_CTRL[3].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[3].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[4]";
    `endif
    AI_CTRL[4] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[4]", this);
    AI_CTRL[4].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0004C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[4].set_space_addr("MSG", 28'h1E0004C);
    AI_CTRL[4].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[4].set_space_addr("MEM-SB",28'h1E0004C);
    AI_CTRL[4].set_space_addr("MEM", 28'h1E0004C);
      AI_CTRL[4].set_space("MEM");
      AI_CTRL[4].set_msg_opcode("MEM-SB");
      AI_CTRL[4].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[4].set_bar(4'h2, "MEM-SB");
      AI_CTRL[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[4].set_user_attribute("diag_reg", "0");
      AI_CTRL[4].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[4]:dont_test") ) AI_CTRL[4].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[4] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[4]"));
      end
   AI_CTRL[4].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[4].IMS_MASK"});
   AI_CTRL[4].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[4].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[5]";
    `endif
    AI_CTRL[5] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[5]", this);
    AI_CTRL[5].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0005C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[5].set_space_addr("MSG", 28'h1E0005C);
    AI_CTRL[5].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[5].set_space_addr("MEM-SB",28'h1E0005C);
    AI_CTRL[5].set_space_addr("MEM", 28'h1E0005C);
      AI_CTRL[5].set_space("MEM");
      AI_CTRL[5].set_msg_opcode("MEM-SB");
      AI_CTRL[5].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[5].set_bar(4'h2, "MEM-SB");
      AI_CTRL[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[5].set_user_attribute("diag_reg", "0");
      AI_CTRL[5].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[5]:dont_test") ) AI_CTRL[5].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[5] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[5]"));
      end
   AI_CTRL[5].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[5].IMS_MASK"});
   AI_CTRL[5].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[5].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[6]";
    `endif
    AI_CTRL[6] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[6]", this);
    AI_CTRL[6].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0006C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[6].set_space_addr("MSG", 28'h1E0006C);
    AI_CTRL[6].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[6].set_space_addr("MEM-SB",28'h1E0006C);
    AI_CTRL[6].set_space_addr("MEM", 28'h1E0006C);
      AI_CTRL[6].set_space("MEM");
      AI_CTRL[6].set_msg_opcode("MEM-SB");
      AI_CTRL[6].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[6].set_bar(4'h2, "MEM-SB");
      AI_CTRL[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[6].set_user_attribute("diag_reg", "0");
      AI_CTRL[6].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[6]:dont_test") ) AI_CTRL[6].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[6] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[6]"));
      end
   AI_CTRL[6].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[6].IMS_MASK"});
   AI_CTRL[6].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[6].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[7]";
    `endif
    AI_CTRL[7] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[7]", this);
    AI_CTRL[7].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0007C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[7].set_space_addr("MSG", 28'h1E0007C);
    AI_CTRL[7].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[7].set_space_addr("MEM-SB",28'h1E0007C);
    AI_CTRL[7].set_space_addr("MEM", 28'h1E0007C);
      AI_CTRL[7].set_space("MEM");
      AI_CTRL[7].set_msg_opcode("MEM-SB");
      AI_CTRL[7].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[7].set_bar(4'h2, "MEM-SB");
      AI_CTRL[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[7].set_user_attribute("diag_reg", "0");
      AI_CTRL[7].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[7]:dont_test") ) AI_CTRL[7].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[7] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[7]"));
      end
   AI_CTRL[7].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[7].IMS_MASK"});
   AI_CTRL[7].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[7].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[8]";
    `endif
    AI_CTRL[8] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[8]", this);
    AI_CTRL[8].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0008C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[8].set_space_addr("MSG", 28'h1E0008C);
    AI_CTRL[8].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[8].set_space_addr("MEM-SB",28'h1E0008C);
    AI_CTRL[8].set_space_addr("MEM", 28'h1E0008C);
      AI_CTRL[8].set_space("MEM");
      AI_CTRL[8].set_msg_opcode("MEM-SB");
      AI_CTRL[8].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[8].set_bar(4'h2, "MEM-SB");
      AI_CTRL[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[8].set_user_attribute("diag_reg", "0");
      AI_CTRL[8].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[8]:dont_test") ) AI_CTRL[8].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[8] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[8]"));
      end
   AI_CTRL[8].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[8].IMS_MASK"});
   AI_CTRL[8].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[8].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[9]";
    `endif
    AI_CTRL[9] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[9]", this);
    AI_CTRL[9].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0009C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[9].set_space_addr("MSG", 28'h1E0009C);
    AI_CTRL[9].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[9].set_space_addr("MEM-SB",28'h1E0009C);
    AI_CTRL[9].set_space_addr("MEM", 28'h1E0009C);
      AI_CTRL[9].set_space("MEM");
      AI_CTRL[9].set_msg_opcode("MEM-SB");
      AI_CTRL[9].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[9].set_bar(4'h2, "MEM-SB");
      AI_CTRL[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[9].set_user_attribute("diag_reg", "0");
      AI_CTRL[9].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[9]:dont_test") ) AI_CTRL[9].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[9] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[9]"));
      end
   AI_CTRL[9].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[9].IMS_MASK"});
   AI_CTRL[9].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[9].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[10]";
    `endif
    AI_CTRL[10] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[10]", this);
    AI_CTRL[10].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E000AC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[10].set_space_addr("MSG", 28'h1E000AC);
    AI_CTRL[10].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[10].set_space_addr("MEM-SB",28'h1E000AC);
    AI_CTRL[10].set_space_addr("MEM", 28'h1E000AC);
      AI_CTRL[10].set_space("MEM");
      AI_CTRL[10].set_msg_opcode("MEM-SB");
      AI_CTRL[10].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[10].set_bar(4'h2, "MEM-SB");
      AI_CTRL[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[10].set_user_attribute("diag_reg", "0");
      AI_CTRL[10].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[10]:dont_test") ) AI_CTRL[10].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[10] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[10]"));
      end
   AI_CTRL[10].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[10].IMS_MASK"});
   AI_CTRL[10].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[10].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[11]";
    `endif
    AI_CTRL[11] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[11]", this);
    AI_CTRL[11].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E000BC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[11].set_space_addr("MSG", 28'h1E000BC);
    AI_CTRL[11].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[11].set_space_addr("MEM-SB",28'h1E000BC);
    AI_CTRL[11].set_space_addr("MEM", 28'h1E000BC);
      AI_CTRL[11].set_space("MEM");
      AI_CTRL[11].set_msg_opcode("MEM-SB");
      AI_CTRL[11].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[11].set_bar(4'h2, "MEM-SB");
      AI_CTRL[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[11].set_user_attribute("diag_reg", "0");
      AI_CTRL[11].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[11]:dont_test") ) AI_CTRL[11].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[11] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[11]"));
      end
   AI_CTRL[11].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[11].IMS_MASK"});
   AI_CTRL[11].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[11].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[12]";
    `endif
    AI_CTRL[12] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[12]", this);
    AI_CTRL[12].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E000CC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[12].set_space_addr("MSG", 28'h1E000CC);
    AI_CTRL[12].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[12].set_space_addr("MEM-SB",28'h1E000CC);
    AI_CTRL[12].set_space_addr("MEM", 28'h1E000CC);
      AI_CTRL[12].set_space("MEM");
      AI_CTRL[12].set_msg_opcode("MEM-SB");
      AI_CTRL[12].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[12].set_bar(4'h2, "MEM-SB");
      AI_CTRL[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[12].set_user_attribute("diag_reg", "0");
      AI_CTRL[12].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[12]:dont_test") ) AI_CTRL[12].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[12] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[12]"));
      end
   AI_CTRL[12].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[12].IMS_MASK"});
   AI_CTRL[12].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[12].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[13]";
    `endif
    AI_CTRL[13] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[13]", this);
    AI_CTRL[13].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E000DC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[13].set_space_addr("MSG", 28'h1E000DC);
    AI_CTRL[13].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[13].set_space_addr("MEM-SB",28'h1E000DC);
    AI_CTRL[13].set_space_addr("MEM", 28'h1E000DC);
      AI_CTRL[13].set_space("MEM");
      AI_CTRL[13].set_msg_opcode("MEM-SB");
      AI_CTRL[13].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[13].set_bar(4'h2, "MEM-SB");
      AI_CTRL[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[13].set_user_attribute("diag_reg", "0");
      AI_CTRL[13].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[13]:dont_test") ) AI_CTRL[13].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[13] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[13]"));
      end
   AI_CTRL[13].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[13].IMS_MASK"});
   AI_CTRL[13].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[13].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[14]";
    `endif
    AI_CTRL[14] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[14]", this);
    AI_CTRL[14].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E000EC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[14].set_space_addr("MSG", 28'h1E000EC);
    AI_CTRL[14].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[14].set_space_addr("MEM-SB",28'h1E000EC);
    AI_CTRL[14].set_space_addr("MEM", 28'h1E000EC);
      AI_CTRL[14].set_space("MEM");
      AI_CTRL[14].set_msg_opcode("MEM-SB");
      AI_CTRL[14].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[14].set_bar(4'h2, "MEM-SB");
      AI_CTRL[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[14].set_user_attribute("diag_reg", "0");
      AI_CTRL[14].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[14]:dont_test") ) AI_CTRL[14].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[14] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[14]"));
      end
   AI_CTRL[14].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[14].IMS_MASK"});
   AI_CTRL[14].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[14].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[15]";
    `endif
    AI_CTRL[15] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[15]", this);
    AI_CTRL[15].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E000FC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[15].set_space_addr("MSG", 28'h1E000FC);
    AI_CTRL[15].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[15].set_space_addr("MEM-SB",28'h1E000FC);
    AI_CTRL[15].set_space_addr("MEM", 28'h1E000FC);
      AI_CTRL[15].set_space("MEM");
      AI_CTRL[15].set_msg_opcode("MEM-SB");
      AI_CTRL[15].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[15].set_bar(4'h2, "MEM-SB");
      AI_CTRL[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[15].set_user_attribute("diag_reg", "0");
      AI_CTRL[15].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[15]:dont_test") ) AI_CTRL[15].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[15] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[15]"));
      end
   AI_CTRL[15].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[15].IMS_MASK"});
   AI_CTRL[15].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[15].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[16]";
    `endif
    AI_CTRL[16] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[16]", this);
    AI_CTRL[16].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0010C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[16].set_space_addr("MSG", 28'h1E0010C);
    AI_CTRL[16].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[16].set_space_addr("MEM-SB",28'h1E0010C);
    AI_CTRL[16].set_space_addr("MEM", 28'h1E0010C);
      AI_CTRL[16].set_space("MEM");
      AI_CTRL[16].set_msg_opcode("MEM-SB");
      AI_CTRL[16].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[16].set_bar(4'h2, "MEM-SB");
      AI_CTRL[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[16].set_user_attribute("diag_reg", "0");
      AI_CTRL[16].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[16]:dont_test") ) AI_CTRL[16].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[16] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[16]"));
      end
   AI_CTRL[16].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[16].IMS_MASK"});
   AI_CTRL[16].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[16].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[17]";
    `endif
    AI_CTRL[17] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[17]", this);
    AI_CTRL[17].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0011C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[17].set_space_addr("MSG", 28'h1E0011C);
    AI_CTRL[17].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[17].set_space_addr("MEM-SB",28'h1E0011C);
    AI_CTRL[17].set_space_addr("MEM", 28'h1E0011C);
      AI_CTRL[17].set_space("MEM");
      AI_CTRL[17].set_msg_opcode("MEM-SB");
      AI_CTRL[17].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[17].set_bar(4'h2, "MEM-SB");
      AI_CTRL[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[17].set_user_attribute("diag_reg", "0");
      AI_CTRL[17].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[17]:dont_test") ) AI_CTRL[17].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[17] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[17]"));
      end
   AI_CTRL[17].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[17].IMS_MASK"});
   AI_CTRL[17].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[17].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[18]";
    `endif
    AI_CTRL[18] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[18]", this);
    AI_CTRL[18].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0012C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[18].set_space_addr("MSG", 28'h1E0012C);
    AI_CTRL[18].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[18].set_space_addr("MEM-SB",28'h1E0012C);
    AI_CTRL[18].set_space_addr("MEM", 28'h1E0012C);
      AI_CTRL[18].set_space("MEM");
      AI_CTRL[18].set_msg_opcode("MEM-SB");
      AI_CTRL[18].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[18].set_bar(4'h2, "MEM-SB");
      AI_CTRL[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[18].set_user_attribute("diag_reg", "0");
      AI_CTRL[18].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[18]:dont_test") ) AI_CTRL[18].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[18] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[18]"));
      end
   AI_CTRL[18].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[18].IMS_MASK"});
   AI_CTRL[18].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[18].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[19]";
    `endif
    AI_CTRL[19] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[19]", this);
    AI_CTRL[19].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0013C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[19].set_space_addr("MSG", 28'h1E0013C);
    AI_CTRL[19].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[19].set_space_addr("MEM-SB",28'h1E0013C);
    AI_CTRL[19].set_space_addr("MEM", 28'h1E0013C);
      AI_CTRL[19].set_space("MEM");
      AI_CTRL[19].set_msg_opcode("MEM-SB");
      AI_CTRL[19].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[19].set_bar(4'h2, "MEM-SB");
      AI_CTRL[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[19].set_user_attribute("diag_reg", "0");
      AI_CTRL[19].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[19]:dont_test") ) AI_CTRL[19].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[19] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[19]"));
      end
   AI_CTRL[19].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[19].IMS_MASK"});
   AI_CTRL[19].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[19].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[20]";
    `endif
    AI_CTRL[20] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[20]", this);
    AI_CTRL[20].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0014C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[20].set_space_addr("MSG", 28'h1E0014C);
    AI_CTRL[20].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[20].set_space_addr("MEM-SB",28'h1E0014C);
    AI_CTRL[20].set_space_addr("MEM", 28'h1E0014C);
      AI_CTRL[20].set_space("MEM");
      AI_CTRL[20].set_msg_opcode("MEM-SB");
      AI_CTRL[20].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[20].set_bar(4'h2, "MEM-SB");
      AI_CTRL[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[20].set_user_attribute("diag_reg", "0");
      AI_CTRL[20].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[20]:dont_test") ) AI_CTRL[20].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[20] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[20]"));
      end
   AI_CTRL[20].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[20].IMS_MASK"});
   AI_CTRL[20].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[20].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[21]";
    `endif
    AI_CTRL[21] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[21]", this);
    AI_CTRL[21].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0015C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[21].set_space_addr("MSG", 28'h1E0015C);
    AI_CTRL[21].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[21].set_space_addr("MEM-SB",28'h1E0015C);
    AI_CTRL[21].set_space_addr("MEM", 28'h1E0015C);
      AI_CTRL[21].set_space("MEM");
      AI_CTRL[21].set_msg_opcode("MEM-SB");
      AI_CTRL[21].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[21].set_bar(4'h2, "MEM-SB");
      AI_CTRL[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[21].set_user_attribute("diag_reg", "0");
      AI_CTRL[21].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[21]:dont_test") ) AI_CTRL[21].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[21] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[21]"));
      end
   AI_CTRL[21].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[21].IMS_MASK"});
   AI_CTRL[21].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[21].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[22]";
    `endif
    AI_CTRL[22] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[22]", this);
    AI_CTRL[22].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0016C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[22].set_space_addr("MSG", 28'h1E0016C);
    AI_CTRL[22].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[22].set_space_addr("MEM-SB",28'h1E0016C);
    AI_CTRL[22].set_space_addr("MEM", 28'h1E0016C);
      AI_CTRL[22].set_space("MEM");
      AI_CTRL[22].set_msg_opcode("MEM-SB");
      AI_CTRL[22].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[22].set_bar(4'h2, "MEM-SB");
      AI_CTRL[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[22].set_user_attribute("diag_reg", "0");
      AI_CTRL[22].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[22]:dont_test") ) AI_CTRL[22].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[22] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[22]"));
      end
   AI_CTRL[22].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[22].IMS_MASK"});
   AI_CTRL[22].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[22].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[23]";
    `endif
    AI_CTRL[23] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[23]", this);
    AI_CTRL[23].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0017C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[23].set_space_addr("MSG", 28'h1E0017C);
    AI_CTRL[23].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[23].set_space_addr("MEM-SB",28'h1E0017C);
    AI_CTRL[23].set_space_addr("MEM", 28'h1E0017C);
      AI_CTRL[23].set_space("MEM");
      AI_CTRL[23].set_msg_opcode("MEM-SB");
      AI_CTRL[23].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[23].set_bar(4'h2, "MEM-SB");
      AI_CTRL[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[23].set_user_attribute("diag_reg", "0");
      AI_CTRL[23].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[23]:dont_test") ) AI_CTRL[23].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[23] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[23]"));
      end
   AI_CTRL[23].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[23].IMS_MASK"});
   AI_CTRL[23].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[23].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[24]";
    `endif
    AI_CTRL[24] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[24]", this);
    AI_CTRL[24].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0018C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[24].set_space_addr("MSG", 28'h1E0018C);
    AI_CTRL[24].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[24].set_space_addr("MEM-SB",28'h1E0018C);
    AI_CTRL[24].set_space_addr("MEM", 28'h1E0018C);
      AI_CTRL[24].set_space("MEM");
      AI_CTRL[24].set_msg_opcode("MEM-SB");
      AI_CTRL[24].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[24].set_bar(4'h2, "MEM-SB");
      AI_CTRL[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[24].set_user_attribute("diag_reg", "0");
      AI_CTRL[24].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[24]:dont_test") ) AI_CTRL[24].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[24] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[24]"));
      end
   AI_CTRL[24].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[24].IMS_MASK"});
   AI_CTRL[24].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[24].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[25]";
    `endif
    AI_CTRL[25] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[25]", this);
    AI_CTRL[25].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0019C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[25].set_space_addr("MSG", 28'h1E0019C);
    AI_CTRL[25].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[25].set_space_addr("MEM-SB",28'h1E0019C);
    AI_CTRL[25].set_space_addr("MEM", 28'h1E0019C);
      AI_CTRL[25].set_space("MEM");
      AI_CTRL[25].set_msg_opcode("MEM-SB");
      AI_CTRL[25].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[25].set_bar(4'h2, "MEM-SB");
      AI_CTRL[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[25].set_user_attribute("diag_reg", "0");
      AI_CTRL[25].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[25]:dont_test") ) AI_CTRL[25].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[25] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[25]"));
      end
   AI_CTRL[25].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[25].IMS_MASK"});
   AI_CTRL[25].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[25].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[26]";
    `endif
    AI_CTRL[26] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[26]", this);
    AI_CTRL[26].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E001AC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[26].set_space_addr("MSG", 28'h1E001AC);
    AI_CTRL[26].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[26].set_space_addr("MEM-SB",28'h1E001AC);
    AI_CTRL[26].set_space_addr("MEM", 28'h1E001AC);
      AI_CTRL[26].set_space("MEM");
      AI_CTRL[26].set_msg_opcode("MEM-SB");
      AI_CTRL[26].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[26].set_bar(4'h2, "MEM-SB");
      AI_CTRL[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[26].set_user_attribute("diag_reg", "0");
      AI_CTRL[26].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[26]:dont_test") ) AI_CTRL[26].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[26] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[26]"));
      end
   AI_CTRL[26].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[26].IMS_MASK"});
   AI_CTRL[26].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[26].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[27]";
    `endif
    AI_CTRL[27] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[27]", this);
    AI_CTRL[27].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E001BC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[27].set_space_addr("MSG", 28'h1E001BC);
    AI_CTRL[27].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[27].set_space_addr("MEM-SB",28'h1E001BC);
    AI_CTRL[27].set_space_addr("MEM", 28'h1E001BC);
      AI_CTRL[27].set_space("MEM");
      AI_CTRL[27].set_msg_opcode("MEM-SB");
      AI_CTRL[27].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[27].set_bar(4'h2, "MEM-SB");
      AI_CTRL[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[27].set_user_attribute("diag_reg", "0");
      AI_CTRL[27].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[27]:dont_test") ) AI_CTRL[27].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[27] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[27]"));
      end
   AI_CTRL[27].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[27].IMS_MASK"});
   AI_CTRL[27].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[27].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[28]";
    `endif
    AI_CTRL[28] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[28]", this);
    AI_CTRL[28].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E001CC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[28].set_space_addr("MSG", 28'h1E001CC);
    AI_CTRL[28].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[28].set_space_addr("MEM-SB",28'h1E001CC);
    AI_CTRL[28].set_space_addr("MEM", 28'h1E001CC);
      AI_CTRL[28].set_space("MEM");
      AI_CTRL[28].set_msg_opcode("MEM-SB");
      AI_CTRL[28].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[28].set_bar(4'h2, "MEM-SB");
      AI_CTRL[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[28].set_user_attribute("diag_reg", "0");
      AI_CTRL[28].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[28]:dont_test") ) AI_CTRL[28].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[28] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[28]"));
      end
   AI_CTRL[28].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[28].IMS_MASK"});
   AI_CTRL[28].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[28].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[29]";
    `endif
    AI_CTRL[29] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[29]", this);
    AI_CTRL[29].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E001DC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[29].set_space_addr("MSG", 28'h1E001DC);
    AI_CTRL[29].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[29].set_space_addr("MEM-SB",28'h1E001DC);
    AI_CTRL[29].set_space_addr("MEM", 28'h1E001DC);
      AI_CTRL[29].set_space("MEM");
      AI_CTRL[29].set_msg_opcode("MEM-SB");
      AI_CTRL[29].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[29].set_bar(4'h2, "MEM-SB");
      AI_CTRL[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[29].set_user_attribute("diag_reg", "0");
      AI_CTRL[29].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[29]:dont_test") ) AI_CTRL[29].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[29] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[29]"));
      end
   AI_CTRL[29].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[29].IMS_MASK"});
   AI_CTRL[29].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[29].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[30]";
    `endif
    AI_CTRL[30] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[30]", this);
    AI_CTRL[30].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E001EC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[30].set_space_addr("MSG", 28'h1E001EC);
    AI_CTRL[30].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[30].set_space_addr("MEM-SB",28'h1E001EC);
    AI_CTRL[30].set_space_addr("MEM", 28'h1E001EC);
      AI_CTRL[30].set_space("MEM");
      AI_CTRL[30].set_msg_opcode("MEM-SB");
      AI_CTRL[30].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[30].set_bar(4'h2, "MEM-SB");
      AI_CTRL[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[30].set_user_attribute("diag_reg", "0");
      AI_CTRL[30].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[30]:dont_test") ) AI_CTRL[30].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[30] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[30]"));
      end
   AI_CTRL[30].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[30].IMS_MASK"});
   AI_CTRL[30].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[30].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[31]";
    `endif
    AI_CTRL[31] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[31]", this);
    AI_CTRL[31].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E001FC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[31].set_space_addr("MSG", 28'h1E001FC);
    AI_CTRL[31].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[31].set_space_addr("MEM-SB",28'h1E001FC);
    AI_CTRL[31].set_space_addr("MEM", 28'h1E001FC);
      AI_CTRL[31].set_space("MEM");
      AI_CTRL[31].set_msg_opcode("MEM-SB");
      AI_CTRL[31].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[31].set_bar(4'h2, "MEM-SB");
      AI_CTRL[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[31].set_user_attribute("diag_reg", "0");
      AI_CTRL[31].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[31]:dont_test") ) AI_CTRL[31].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[31] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[31]"));
      end
   AI_CTRL[31].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[31].IMS_MASK"});
   AI_CTRL[31].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[31].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[32]";
    `endif
    AI_CTRL[32] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[32]", this);
    AI_CTRL[32].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0020C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[32].set_space_addr("MSG", 28'h1E0020C);
    AI_CTRL[32].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[32].set_space_addr("MEM-SB",28'h1E0020C);
    AI_CTRL[32].set_space_addr("MEM", 28'h1E0020C);
      AI_CTRL[32].set_space("MEM");
      AI_CTRL[32].set_msg_opcode("MEM-SB");
      AI_CTRL[32].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[32].set_bar(4'h2, "MEM-SB");
      AI_CTRL[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[32].set_user_attribute("diag_reg", "0");
      AI_CTRL[32].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[32]:dont_test") ) AI_CTRL[32].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[32] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[32]"));
      end
   AI_CTRL[32].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[32].IMS_MASK"});
   AI_CTRL[32].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[32].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[33]";
    `endif
    AI_CTRL[33] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[33]", this);
    AI_CTRL[33].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0021C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[33].set_space_addr("MSG", 28'h1E0021C);
    AI_CTRL[33].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[33].set_space_addr("MEM-SB",28'h1E0021C);
    AI_CTRL[33].set_space_addr("MEM", 28'h1E0021C);
      AI_CTRL[33].set_space("MEM");
      AI_CTRL[33].set_msg_opcode("MEM-SB");
      AI_CTRL[33].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[33].set_bar(4'h2, "MEM-SB");
      AI_CTRL[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[33].set_user_attribute("diag_reg", "0");
      AI_CTRL[33].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[33]:dont_test") ) AI_CTRL[33].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[33] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[33]"));
      end
   AI_CTRL[33].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[33].IMS_MASK"});
   AI_CTRL[33].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[33].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[34]";
    `endif
    AI_CTRL[34] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[34]", this);
    AI_CTRL[34].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0022C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[34].set_space_addr("MSG", 28'h1E0022C);
    AI_CTRL[34].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[34].set_space_addr("MEM-SB",28'h1E0022C);
    AI_CTRL[34].set_space_addr("MEM", 28'h1E0022C);
      AI_CTRL[34].set_space("MEM");
      AI_CTRL[34].set_msg_opcode("MEM-SB");
      AI_CTRL[34].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[34].set_bar(4'h2, "MEM-SB");
      AI_CTRL[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[34].set_user_attribute("diag_reg", "0");
      AI_CTRL[34].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[34]:dont_test") ) AI_CTRL[34].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[34] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[34]"));
      end
   AI_CTRL[34].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[34].IMS_MASK"});
   AI_CTRL[34].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[34].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[35]";
    `endif
    AI_CTRL[35] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[35]", this);
    AI_CTRL[35].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0023C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[35].set_space_addr("MSG", 28'h1E0023C);
    AI_CTRL[35].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[35].set_space_addr("MEM-SB",28'h1E0023C);
    AI_CTRL[35].set_space_addr("MEM", 28'h1E0023C);
      AI_CTRL[35].set_space("MEM");
      AI_CTRL[35].set_msg_opcode("MEM-SB");
      AI_CTRL[35].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[35].set_bar(4'h2, "MEM-SB");
      AI_CTRL[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[35].set_user_attribute("diag_reg", "0");
      AI_CTRL[35].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[35]:dont_test") ) AI_CTRL[35].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[35] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[35]"));
      end
   AI_CTRL[35].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[35].IMS_MASK"});
   AI_CTRL[35].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[35].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[36]";
    `endif
    AI_CTRL[36] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[36]", this);
    AI_CTRL[36].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0024C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[36].set_space_addr("MSG", 28'h1E0024C);
    AI_CTRL[36].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[36].set_space_addr("MEM-SB",28'h1E0024C);
    AI_CTRL[36].set_space_addr("MEM", 28'h1E0024C);
      AI_CTRL[36].set_space("MEM");
      AI_CTRL[36].set_msg_opcode("MEM-SB");
      AI_CTRL[36].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[36].set_bar(4'h2, "MEM-SB");
      AI_CTRL[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[36].set_user_attribute("diag_reg", "0");
      AI_CTRL[36].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[36]:dont_test") ) AI_CTRL[36].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[36] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[36]"));
      end
   AI_CTRL[36].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[36].IMS_MASK"});
   AI_CTRL[36].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[36].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[37]";
    `endif
    AI_CTRL[37] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[37]", this);
    AI_CTRL[37].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0025C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[37].set_space_addr("MSG", 28'h1E0025C);
    AI_CTRL[37].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[37].set_space_addr("MEM-SB",28'h1E0025C);
    AI_CTRL[37].set_space_addr("MEM", 28'h1E0025C);
      AI_CTRL[37].set_space("MEM");
      AI_CTRL[37].set_msg_opcode("MEM-SB");
      AI_CTRL[37].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[37].set_bar(4'h2, "MEM-SB");
      AI_CTRL[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[37].set_user_attribute("diag_reg", "0");
      AI_CTRL[37].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[37]:dont_test") ) AI_CTRL[37].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[37] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[37]"));
      end
   AI_CTRL[37].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[37].IMS_MASK"});
   AI_CTRL[37].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[37].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[38]";
    `endif
    AI_CTRL[38] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[38]", this);
    AI_CTRL[38].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0026C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[38].set_space_addr("MSG", 28'h1E0026C);
    AI_CTRL[38].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[38].set_space_addr("MEM-SB",28'h1E0026C);
    AI_CTRL[38].set_space_addr("MEM", 28'h1E0026C);
      AI_CTRL[38].set_space("MEM");
      AI_CTRL[38].set_msg_opcode("MEM-SB");
      AI_CTRL[38].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[38].set_bar(4'h2, "MEM-SB");
      AI_CTRL[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[38].set_user_attribute("diag_reg", "0");
      AI_CTRL[38].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[38]:dont_test") ) AI_CTRL[38].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[38] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[38]"));
      end
   AI_CTRL[38].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[38].IMS_MASK"});
   AI_CTRL[38].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[38].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[39]";
    `endif
    AI_CTRL[39] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[39]", this);
    AI_CTRL[39].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0027C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[39].set_space_addr("MSG", 28'h1E0027C);
    AI_CTRL[39].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[39].set_space_addr("MEM-SB",28'h1E0027C);
    AI_CTRL[39].set_space_addr("MEM", 28'h1E0027C);
      AI_CTRL[39].set_space("MEM");
      AI_CTRL[39].set_msg_opcode("MEM-SB");
      AI_CTRL[39].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[39].set_bar(4'h2, "MEM-SB");
      AI_CTRL[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[39].set_user_attribute("diag_reg", "0");
      AI_CTRL[39].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[39]:dont_test") ) AI_CTRL[39].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[39] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[39]"));
      end
   AI_CTRL[39].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[39].IMS_MASK"});
   AI_CTRL[39].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[39].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[40]";
    `endif
    AI_CTRL[40] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[40]", this);
    AI_CTRL[40].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0028C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[40].set_space_addr("MSG", 28'h1E0028C);
    AI_CTRL[40].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[40].set_space_addr("MEM-SB",28'h1E0028C);
    AI_CTRL[40].set_space_addr("MEM", 28'h1E0028C);
      AI_CTRL[40].set_space("MEM");
      AI_CTRL[40].set_msg_opcode("MEM-SB");
      AI_CTRL[40].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[40].set_bar(4'h2, "MEM-SB");
      AI_CTRL[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[40].set_user_attribute("diag_reg", "0");
      AI_CTRL[40].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[40]:dont_test") ) AI_CTRL[40].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[40] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[40]"));
      end
   AI_CTRL[40].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[40].IMS_MASK"});
   AI_CTRL[40].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[40].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[41]";
    `endif
    AI_CTRL[41] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[41]", this);
    AI_CTRL[41].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0029C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[41].set_space_addr("MSG", 28'h1E0029C);
    AI_CTRL[41].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[41].set_space_addr("MEM-SB",28'h1E0029C);
    AI_CTRL[41].set_space_addr("MEM", 28'h1E0029C);
      AI_CTRL[41].set_space("MEM");
      AI_CTRL[41].set_msg_opcode("MEM-SB");
      AI_CTRL[41].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[41].set_bar(4'h2, "MEM-SB");
      AI_CTRL[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[41].set_user_attribute("diag_reg", "0");
      AI_CTRL[41].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[41]:dont_test") ) AI_CTRL[41].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[41] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[41]"));
      end
   AI_CTRL[41].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[41].IMS_MASK"});
   AI_CTRL[41].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[41].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[42]";
    `endif
    AI_CTRL[42] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[42]", this);
    AI_CTRL[42].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E002AC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[42].set_space_addr("MSG", 28'h1E002AC);
    AI_CTRL[42].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[42].set_space_addr("MEM-SB",28'h1E002AC);
    AI_CTRL[42].set_space_addr("MEM", 28'h1E002AC);
      AI_CTRL[42].set_space("MEM");
      AI_CTRL[42].set_msg_opcode("MEM-SB");
      AI_CTRL[42].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[42].set_bar(4'h2, "MEM-SB");
      AI_CTRL[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[42].set_user_attribute("diag_reg", "0");
      AI_CTRL[42].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[42]:dont_test") ) AI_CTRL[42].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[42] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[42]"));
      end
   AI_CTRL[42].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[42].IMS_MASK"});
   AI_CTRL[42].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[42].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[43]";
    `endif
    AI_CTRL[43] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[43]", this);
    AI_CTRL[43].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E002BC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[43].set_space_addr("MSG", 28'h1E002BC);
    AI_CTRL[43].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[43].set_space_addr("MEM-SB",28'h1E002BC);
    AI_CTRL[43].set_space_addr("MEM", 28'h1E002BC);
      AI_CTRL[43].set_space("MEM");
      AI_CTRL[43].set_msg_opcode("MEM-SB");
      AI_CTRL[43].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[43].set_bar(4'h2, "MEM-SB");
      AI_CTRL[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[43].set_user_attribute("diag_reg", "0");
      AI_CTRL[43].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[43]:dont_test") ) AI_CTRL[43].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[43] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[43]"));
      end
   AI_CTRL[43].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[43].IMS_MASK"});
   AI_CTRL[43].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[43].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[44]";
    `endif
    AI_CTRL[44] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[44]", this);
    AI_CTRL[44].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E002CC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[44].set_space_addr("MSG", 28'h1E002CC);
    AI_CTRL[44].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[44].set_space_addr("MEM-SB",28'h1E002CC);
    AI_CTRL[44].set_space_addr("MEM", 28'h1E002CC);
      AI_CTRL[44].set_space("MEM");
      AI_CTRL[44].set_msg_opcode("MEM-SB");
      AI_CTRL[44].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[44].set_bar(4'h2, "MEM-SB");
      AI_CTRL[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[44].set_user_attribute("diag_reg", "0");
      AI_CTRL[44].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[44]:dont_test") ) AI_CTRL[44].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[44] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[44]"));
      end
   AI_CTRL[44].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[44].IMS_MASK"});
   AI_CTRL[44].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[44].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[45]";
    `endif
    AI_CTRL[45] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[45]", this);
    AI_CTRL[45].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E002DC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[45].set_space_addr("MSG", 28'h1E002DC);
    AI_CTRL[45].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[45].set_space_addr("MEM-SB",28'h1E002DC);
    AI_CTRL[45].set_space_addr("MEM", 28'h1E002DC);
      AI_CTRL[45].set_space("MEM");
      AI_CTRL[45].set_msg_opcode("MEM-SB");
      AI_CTRL[45].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[45].set_bar(4'h2, "MEM-SB");
      AI_CTRL[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[45].set_user_attribute("diag_reg", "0");
      AI_CTRL[45].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[45]:dont_test") ) AI_CTRL[45].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[45] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[45]"));
      end
   AI_CTRL[45].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[45].IMS_MASK"});
   AI_CTRL[45].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[45].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[46]";
    `endif
    AI_CTRL[46] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[46]", this);
    AI_CTRL[46].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E002EC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[46].set_space_addr("MSG", 28'h1E002EC);
    AI_CTRL[46].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[46].set_space_addr("MEM-SB",28'h1E002EC);
    AI_CTRL[46].set_space_addr("MEM", 28'h1E002EC);
      AI_CTRL[46].set_space("MEM");
      AI_CTRL[46].set_msg_opcode("MEM-SB");
      AI_CTRL[46].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[46].set_bar(4'h2, "MEM-SB");
      AI_CTRL[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[46].set_user_attribute("diag_reg", "0");
      AI_CTRL[46].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[46]:dont_test") ) AI_CTRL[46].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[46] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[46]"));
      end
   AI_CTRL[46].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[46].IMS_MASK"});
   AI_CTRL[46].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[46].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[47]";
    `endif
    AI_CTRL[47] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[47]", this);
    AI_CTRL[47].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E002FC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[47].set_space_addr("MSG", 28'h1E002FC);
    AI_CTRL[47].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[47].set_space_addr("MEM-SB",28'h1E002FC);
    AI_CTRL[47].set_space_addr("MEM", 28'h1E002FC);
      AI_CTRL[47].set_space("MEM");
      AI_CTRL[47].set_msg_opcode("MEM-SB");
      AI_CTRL[47].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[47].set_bar(4'h2, "MEM-SB");
      AI_CTRL[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[47].set_user_attribute("diag_reg", "0");
      AI_CTRL[47].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[47]:dont_test") ) AI_CTRL[47].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[47] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[47]"));
      end
   AI_CTRL[47].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[47].IMS_MASK"});
   AI_CTRL[47].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[47].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[48]";
    `endif
    AI_CTRL[48] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[48]", this);
    AI_CTRL[48].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0030C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[48].set_space_addr("MSG", 28'h1E0030C);
    AI_CTRL[48].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[48].set_space_addr("MEM-SB",28'h1E0030C);
    AI_CTRL[48].set_space_addr("MEM", 28'h1E0030C);
      AI_CTRL[48].set_space("MEM");
      AI_CTRL[48].set_msg_opcode("MEM-SB");
      AI_CTRL[48].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[48].set_bar(4'h2, "MEM-SB");
      AI_CTRL[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[48].set_user_attribute("diag_reg", "0");
      AI_CTRL[48].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[48]:dont_test") ) AI_CTRL[48].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[48] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[48]"));
      end
   AI_CTRL[48].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[48].IMS_MASK"});
   AI_CTRL[48].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[48].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[49]";
    `endif
    AI_CTRL[49] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[49]", this);
    AI_CTRL[49].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0031C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[49].set_space_addr("MSG", 28'h1E0031C);
    AI_CTRL[49].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[49].set_space_addr("MEM-SB",28'h1E0031C);
    AI_CTRL[49].set_space_addr("MEM", 28'h1E0031C);
      AI_CTRL[49].set_space("MEM");
      AI_CTRL[49].set_msg_opcode("MEM-SB");
      AI_CTRL[49].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[49].set_bar(4'h2, "MEM-SB");
      AI_CTRL[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[49].set_user_attribute("diag_reg", "0");
      AI_CTRL[49].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[49]:dont_test") ) AI_CTRL[49].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[49] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[49]"));
      end
   AI_CTRL[49].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[49].IMS_MASK"});
   AI_CTRL[49].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[49].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[50]";
    `endif
    AI_CTRL[50] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[50]", this);
    AI_CTRL[50].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0032C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[50].set_space_addr("MSG", 28'h1E0032C);
    AI_CTRL[50].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[50].set_space_addr("MEM-SB",28'h1E0032C);
    AI_CTRL[50].set_space_addr("MEM", 28'h1E0032C);
      AI_CTRL[50].set_space("MEM");
      AI_CTRL[50].set_msg_opcode("MEM-SB");
      AI_CTRL[50].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[50].set_bar(4'h2, "MEM-SB");
      AI_CTRL[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[50].set_user_attribute("diag_reg", "0");
      AI_CTRL[50].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[50]:dont_test") ) AI_CTRL[50].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[50] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[50]"));
      end
   AI_CTRL[50].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[50].IMS_MASK"});
   AI_CTRL[50].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[50].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[51]";
    `endif
    AI_CTRL[51] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[51]", this);
    AI_CTRL[51].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0033C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[51].set_space_addr("MSG", 28'h1E0033C);
    AI_CTRL[51].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[51].set_space_addr("MEM-SB",28'h1E0033C);
    AI_CTRL[51].set_space_addr("MEM", 28'h1E0033C);
      AI_CTRL[51].set_space("MEM");
      AI_CTRL[51].set_msg_opcode("MEM-SB");
      AI_CTRL[51].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[51].set_bar(4'h2, "MEM-SB");
      AI_CTRL[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[51].set_user_attribute("diag_reg", "0");
      AI_CTRL[51].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[51]:dont_test") ) AI_CTRL[51].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[51] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[51]"));
      end
   AI_CTRL[51].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[51].IMS_MASK"});
   AI_CTRL[51].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[51].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[52]";
    `endif
    AI_CTRL[52] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[52]", this);
    AI_CTRL[52].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0034C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[52].set_space_addr("MSG", 28'h1E0034C);
    AI_CTRL[52].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[52].set_space_addr("MEM-SB",28'h1E0034C);
    AI_CTRL[52].set_space_addr("MEM", 28'h1E0034C);
      AI_CTRL[52].set_space("MEM");
      AI_CTRL[52].set_msg_opcode("MEM-SB");
      AI_CTRL[52].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[52].set_bar(4'h2, "MEM-SB");
      AI_CTRL[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[52].set_user_attribute("diag_reg", "0");
      AI_CTRL[52].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[52]:dont_test") ) AI_CTRL[52].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[52] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[52]"));
      end
   AI_CTRL[52].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[52].IMS_MASK"});
   AI_CTRL[52].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[52].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[53]";
    `endif
    AI_CTRL[53] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[53]", this);
    AI_CTRL[53].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0035C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[53].set_space_addr("MSG", 28'h1E0035C);
    AI_CTRL[53].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[53].set_space_addr("MEM-SB",28'h1E0035C);
    AI_CTRL[53].set_space_addr("MEM", 28'h1E0035C);
      AI_CTRL[53].set_space("MEM");
      AI_CTRL[53].set_msg_opcode("MEM-SB");
      AI_CTRL[53].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[53].set_bar(4'h2, "MEM-SB");
      AI_CTRL[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[53].set_user_attribute("diag_reg", "0");
      AI_CTRL[53].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[53]:dont_test") ) AI_CTRL[53].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[53] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[53]"));
      end
   AI_CTRL[53].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[53].IMS_MASK"});
   AI_CTRL[53].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[53].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[54]";
    `endif
    AI_CTRL[54] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[54]", this);
    AI_CTRL[54].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0036C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[54].set_space_addr("MSG", 28'h1E0036C);
    AI_CTRL[54].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[54].set_space_addr("MEM-SB",28'h1E0036C);
    AI_CTRL[54].set_space_addr("MEM", 28'h1E0036C);
      AI_CTRL[54].set_space("MEM");
      AI_CTRL[54].set_msg_opcode("MEM-SB");
      AI_CTRL[54].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[54].set_bar(4'h2, "MEM-SB");
      AI_CTRL[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[54].set_user_attribute("diag_reg", "0");
      AI_CTRL[54].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[54]:dont_test") ) AI_CTRL[54].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[54] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[54]"));
      end
   AI_CTRL[54].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[54].IMS_MASK"});
   AI_CTRL[54].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[54].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[55]";
    `endif
    AI_CTRL[55] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[55]", this);
    AI_CTRL[55].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0037C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[55].set_space_addr("MSG", 28'h1E0037C);
    AI_CTRL[55].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[55].set_space_addr("MEM-SB",28'h1E0037C);
    AI_CTRL[55].set_space_addr("MEM", 28'h1E0037C);
      AI_CTRL[55].set_space("MEM");
      AI_CTRL[55].set_msg_opcode("MEM-SB");
      AI_CTRL[55].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[55].set_bar(4'h2, "MEM-SB");
      AI_CTRL[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[55].set_user_attribute("diag_reg", "0");
      AI_CTRL[55].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[55]:dont_test") ) AI_CTRL[55].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[55] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[55]"));
      end
   AI_CTRL[55].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[55].IMS_MASK"});
   AI_CTRL[55].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[55].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[56]";
    `endif
    AI_CTRL[56] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[56]", this);
    AI_CTRL[56].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0038C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[56].set_space_addr("MSG", 28'h1E0038C);
    AI_CTRL[56].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[56].set_space_addr("MEM-SB",28'h1E0038C);
    AI_CTRL[56].set_space_addr("MEM", 28'h1E0038C);
      AI_CTRL[56].set_space("MEM");
      AI_CTRL[56].set_msg_opcode("MEM-SB");
      AI_CTRL[56].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[56].set_bar(4'h2, "MEM-SB");
      AI_CTRL[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[56].set_user_attribute("diag_reg", "0");
      AI_CTRL[56].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[56]:dont_test") ) AI_CTRL[56].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[56] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[56]"));
      end
   AI_CTRL[56].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[56].IMS_MASK"});
   AI_CTRL[56].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[56].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[57]";
    `endif
    AI_CTRL[57] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[57]", this);
    AI_CTRL[57].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0039C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[57].set_space_addr("MSG", 28'h1E0039C);
    AI_CTRL[57].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[57].set_space_addr("MEM-SB",28'h1E0039C);
    AI_CTRL[57].set_space_addr("MEM", 28'h1E0039C);
      AI_CTRL[57].set_space("MEM");
      AI_CTRL[57].set_msg_opcode("MEM-SB");
      AI_CTRL[57].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[57].set_bar(4'h2, "MEM-SB");
      AI_CTRL[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[57].set_user_attribute("diag_reg", "0");
      AI_CTRL[57].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[57]:dont_test") ) AI_CTRL[57].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[57] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[57]"));
      end
   AI_CTRL[57].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[57].IMS_MASK"});
   AI_CTRL[57].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[57].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[58]";
    `endif
    AI_CTRL[58] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[58]", this);
    AI_CTRL[58].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E003AC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[58].set_space_addr("MSG", 28'h1E003AC);
    AI_CTRL[58].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[58].set_space_addr("MEM-SB",28'h1E003AC);
    AI_CTRL[58].set_space_addr("MEM", 28'h1E003AC);
      AI_CTRL[58].set_space("MEM");
      AI_CTRL[58].set_msg_opcode("MEM-SB");
      AI_CTRL[58].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[58].set_bar(4'h2, "MEM-SB");
      AI_CTRL[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[58].set_user_attribute("diag_reg", "0");
      AI_CTRL[58].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[58]:dont_test") ) AI_CTRL[58].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[58] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[58]"));
      end
   AI_CTRL[58].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[58].IMS_MASK"});
   AI_CTRL[58].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[58].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[59]";
    `endif
    AI_CTRL[59] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[59]", this);
    AI_CTRL[59].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E003BC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[59].set_space_addr("MSG", 28'h1E003BC);
    AI_CTRL[59].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[59].set_space_addr("MEM-SB",28'h1E003BC);
    AI_CTRL[59].set_space_addr("MEM", 28'h1E003BC);
      AI_CTRL[59].set_space("MEM");
      AI_CTRL[59].set_msg_opcode("MEM-SB");
      AI_CTRL[59].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[59].set_bar(4'h2, "MEM-SB");
      AI_CTRL[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[59].set_user_attribute("diag_reg", "0");
      AI_CTRL[59].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[59]:dont_test") ) AI_CTRL[59].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[59] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[59]"));
      end
   AI_CTRL[59].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[59].IMS_MASK"});
   AI_CTRL[59].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[59].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[60]";
    `endif
    AI_CTRL[60] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[60]", this);
    AI_CTRL[60].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E003CC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[60].set_space_addr("MSG", 28'h1E003CC);
    AI_CTRL[60].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[60].set_space_addr("MEM-SB",28'h1E003CC);
    AI_CTRL[60].set_space_addr("MEM", 28'h1E003CC);
      AI_CTRL[60].set_space("MEM");
      AI_CTRL[60].set_msg_opcode("MEM-SB");
      AI_CTRL[60].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[60].set_bar(4'h2, "MEM-SB");
      AI_CTRL[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[60].set_user_attribute("diag_reg", "0");
      AI_CTRL[60].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[60]:dont_test") ) AI_CTRL[60].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[60] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[60]"));
      end
   AI_CTRL[60].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[60].IMS_MASK"});
   AI_CTRL[60].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[60].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[61]";
    `endif
    AI_CTRL[61] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[61]", this);
    AI_CTRL[61].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E003DC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[61].set_space_addr("MSG", 28'h1E003DC);
    AI_CTRL[61].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[61].set_space_addr("MEM-SB",28'h1E003DC);
    AI_CTRL[61].set_space_addr("MEM", 28'h1E003DC);
      AI_CTRL[61].set_space("MEM");
      AI_CTRL[61].set_msg_opcode("MEM-SB");
      AI_CTRL[61].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[61].set_bar(4'h2, "MEM-SB");
      AI_CTRL[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[61].set_user_attribute("diag_reg", "0");
      AI_CTRL[61].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[61]:dont_test") ) AI_CTRL[61].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[61] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[61]"));
      end
   AI_CTRL[61].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[61].IMS_MASK"});
   AI_CTRL[61].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[61].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[62]";
    `endif
    AI_CTRL[62] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[62]", this);
    AI_CTRL[62].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E003EC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[62].set_space_addr("MSG", 28'h1E003EC);
    AI_CTRL[62].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[62].set_space_addr("MEM-SB",28'h1E003EC);
    AI_CTRL[62].set_space_addr("MEM", 28'h1E003EC);
      AI_CTRL[62].set_space("MEM");
      AI_CTRL[62].set_msg_opcode("MEM-SB");
      AI_CTRL[62].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[62].set_bar(4'h2, "MEM-SB");
      AI_CTRL[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[62].set_user_attribute("diag_reg", "0");
      AI_CTRL[62].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[62]:dont_test") ) AI_CTRL[62].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[62] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[62]"));
      end
   AI_CTRL[62].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[62].IMS_MASK"});
   AI_CTRL[62].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[62].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[63]";
    `endif
    AI_CTRL[63] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[63]", this);
    AI_CTRL[63].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E003FC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[63].set_space_addr("MSG", 28'h1E003FC);
    AI_CTRL[63].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[63].set_space_addr("MEM-SB",28'h1E003FC);
    AI_CTRL[63].set_space_addr("MEM", 28'h1E003FC);
      AI_CTRL[63].set_space("MEM");
      AI_CTRL[63].set_msg_opcode("MEM-SB");
      AI_CTRL[63].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[63].set_bar(4'h2, "MEM-SB");
      AI_CTRL[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[63].set_user_attribute("diag_reg", "0");
      AI_CTRL[63].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[63]:dont_test") ) AI_CTRL[63].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[63] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[63]"));
      end
   AI_CTRL[63].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[63].IMS_MASK"});
   AI_CTRL[63].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[63].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[64]";
    `endif
    AI_CTRL[64] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[64]", this);
    AI_CTRL[64].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0040C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[64].set_space_addr("MSG", 28'h1E0040C);
    AI_CTRL[64].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[64].set_space_addr("MEM-SB",28'h1E0040C);
    AI_CTRL[64].set_space_addr("MEM", 28'h1E0040C);
      AI_CTRL[64].set_space("MEM");
      AI_CTRL[64].set_msg_opcode("MEM-SB");
      AI_CTRL[64].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[64].set_bar(4'h2, "MEM-SB");
      AI_CTRL[64].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[64].set_user_attribute("diag_reg", "0");
      AI_CTRL[64].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[64].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[64]:dont_test") ) AI_CTRL[64].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[64] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[64]"));
      end
   AI_CTRL[64].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[64].IMS_MASK"});
   AI_CTRL[64].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[64].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[65]";
    `endif
    AI_CTRL[65] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[65]", this);
    AI_CTRL[65].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0041C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[65].set_space_addr("MSG", 28'h1E0041C);
    AI_CTRL[65].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[65].set_space_addr("MEM-SB",28'h1E0041C);
    AI_CTRL[65].set_space_addr("MEM", 28'h1E0041C);
      AI_CTRL[65].set_space("MEM");
      AI_CTRL[65].set_msg_opcode("MEM-SB");
      AI_CTRL[65].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[65].set_bar(4'h2, "MEM-SB");
      AI_CTRL[65].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[65].set_user_attribute("diag_reg", "0");
      AI_CTRL[65].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[65].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[65]:dont_test") ) AI_CTRL[65].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[65] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[65]"));
      end
   AI_CTRL[65].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[65].IMS_MASK"});
   AI_CTRL[65].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[65].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[66]";
    `endif
    AI_CTRL[66] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[66]", this);
    AI_CTRL[66].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0042C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[66].set_space_addr("MSG", 28'h1E0042C);
    AI_CTRL[66].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[66].set_space_addr("MEM-SB",28'h1E0042C);
    AI_CTRL[66].set_space_addr("MEM", 28'h1E0042C);
      AI_CTRL[66].set_space("MEM");
      AI_CTRL[66].set_msg_opcode("MEM-SB");
      AI_CTRL[66].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[66].set_bar(4'h2, "MEM-SB");
      AI_CTRL[66].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[66].set_user_attribute("diag_reg", "0");
      AI_CTRL[66].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[66].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[66]:dont_test") ) AI_CTRL[66].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[66] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[66]"));
      end
   AI_CTRL[66].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[66].IMS_MASK"});
   AI_CTRL[66].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[66].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[67]";
    `endif
    AI_CTRL[67] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[67]", this);
    AI_CTRL[67].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0043C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[67].set_space_addr("MSG", 28'h1E0043C);
    AI_CTRL[67].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[67].set_space_addr("MEM-SB",28'h1E0043C);
    AI_CTRL[67].set_space_addr("MEM", 28'h1E0043C);
      AI_CTRL[67].set_space("MEM");
      AI_CTRL[67].set_msg_opcode("MEM-SB");
      AI_CTRL[67].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[67].set_bar(4'h2, "MEM-SB");
      AI_CTRL[67].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[67].set_user_attribute("diag_reg", "0");
      AI_CTRL[67].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[67].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[67]:dont_test") ) AI_CTRL[67].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[67] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[67]"));
      end
   AI_CTRL[67].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[67].IMS_MASK"});
   AI_CTRL[67].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[67].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[68]";
    `endif
    AI_CTRL[68] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[68]", this);
    AI_CTRL[68].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0044C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[68].set_space_addr("MSG", 28'h1E0044C);
    AI_CTRL[68].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[68].set_space_addr("MEM-SB",28'h1E0044C);
    AI_CTRL[68].set_space_addr("MEM", 28'h1E0044C);
      AI_CTRL[68].set_space("MEM");
      AI_CTRL[68].set_msg_opcode("MEM-SB");
      AI_CTRL[68].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[68].set_bar(4'h2, "MEM-SB");
      AI_CTRL[68].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[68].set_user_attribute("diag_reg", "0");
      AI_CTRL[68].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[68].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[68]:dont_test") ) AI_CTRL[68].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[68] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[68]"));
      end
   AI_CTRL[68].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[68].IMS_MASK"});
   AI_CTRL[68].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[68].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[69]";
    `endif
    AI_CTRL[69] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[69]", this);
    AI_CTRL[69].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0045C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[69].set_space_addr("MSG", 28'h1E0045C);
    AI_CTRL[69].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[69].set_space_addr("MEM-SB",28'h1E0045C);
    AI_CTRL[69].set_space_addr("MEM", 28'h1E0045C);
      AI_CTRL[69].set_space("MEM");
      AI_CTRL[69].set_msg_opcode("MEM-SB");
      AI_CTRL[69].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[69].set_bar(4'h2, "MEM-SB");
      AI_CTRL[69].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[69].set_user_attribute("diag_reg", "0");
      AI_CTRL[69].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[69].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[69]:dont_test") ) AI_CTRL[69].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[69] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[69]"));
      end
   AI_CTRL[69].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[69].IMS_MASK"});
   AI_CTRL[69].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[69].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[70]";
    `endif
    AI_CTRL[70] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[70]", this);
    AI_CTRL[70].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0046C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[70].set_space_addr("MSG", 28'h1E0046C);
    AI_CTRL[70].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[70].set_space_addr("MEM-SB",28'h1E0046C);
    AI_CTRL[70].set_space_addr("MEM", 28'h1E0046C);
      AI_CTRL[70].set_space("MEM");
      AI_CTRL[70].set_msg_opcode("MEM-SB");
      AI_CTRL[70].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[70].set_bar(4'h2, "MEM-SB");
      AI_CTRL[70].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[70].set_user_attribute("diag_reg", "0");
      AI_CTRL[70].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[70].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[70]:dont_test") ) AI_CTRL[70].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[70] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[70]"));
      end
   AI_CTRL[70].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[70].IMS_MASK"});
   AI_CTRL[70].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[70].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[71]";
    `endif
    AI_CTRL[71] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[71]", this);
    AI_CTRL[71].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0047C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[71].set_space_addr("MSG", 28'h1E0047C);
    AI_CTRL[71].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[71].set_space_addr("MEM-SB",28'h1E0047C);
    AI_CTRL[71].set_space_addr("MEM", 28'h1E0047C);
      AI_CTRL[71].set_space("MEM");
      AI_CTRL[71].set_msg_opcode("MEM-SB");
      AI_CTRL[71].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[71].set_bar(4'h2, "MEM-SB");
      AI_CTRL[71].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[71].set_user_attribute("diag_reg", "0");
      AI_CTRL[71].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[71].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[71]:dont_test") ) AI_CTRL[71].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[71] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[71]"));
      end
   AI_CTRL[71].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[71].IMS_MASK"});
   AI_CTRL[71].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[71].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[72]";
    `endif
    AI_CTRL[72] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[72]", this);
    AI_CTRL[72].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0048C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[72].set_space_addr("MSG", 28'h1E0048C);
    AI_CTRL[72].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[72].set_space_addr("MEM-SB",28'h1E0048C);
    AI_CTRL[72].set_space_addr("MEM", 28'h1E0048C);
      AI_CTRL[72].set_space("MEM");
      AI_CTRL[72].set_msg_opcode("MEM-SB");
      AI_CTRL[72].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[72].set_bar(4'h2, "MEM-SB");
      AI_CTRL[72].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[72].set_user_attribute("diag_reg", "0");
      AI_CTRL[72].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[72].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[72]:dont_test") ) AI_CTRL[72].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[72] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[72]"));
      end
   AI_CTRL[72].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[72].IMS_MASK"});
   AI_CTRL[72].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[72].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[73]";
    `endif
    AI_CTRL[73] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[73]", this);
    AI_CTRL[73].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0049C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[73].set_space_addr("MSG", 28'h1E0049C);
    AI_CTRL[73].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[73].set_space_addr("MEM-SB",28'h1E0049C);
    AI_CTRL[73].set_space_addr("MEM", 28'h1E0049C);
      AI_CTRL[73].set_space("MEM");
      AI_CTRL[73].set_msg_opcode("MEM-SB");
      AI_CTRL[73].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[73].set_bar(4'h2, "MEM-SB");
      AI_CTRL[73].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[73].set_user_attribute("diag_reg", "0");
      AI_CTRL[73].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[73].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[73]:dont_test") ) AI_CTRL[73].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[73] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[73]"));
      end
   AI_CTRL[73].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[73].IMS_MASK"});
   AI_CTRL[73].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[73].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[74]";
    `endif
    AI_CTRL[74] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[74]", this);
    AI_CTRL[74].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E004AC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[74].set_space_addr("MSG", 28'h1E004AC);
    AI_CTRL[74].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[74].set_space_addr("MEM-SB",28'h1E004AC);
    AI_CTRL[74].set_space_addr("MEM", 28'h1E004AC);
      AI_CTRL[74].set_space("MEM");
      AI_CTRL[74].set_msg_opcode("MEM-SB");
      AI_CTRL[74].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[74].set_bar(4'h2, "MEM-SB");
      AI_CTRL[74].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[74].set_user_attribute("diag_reg", "0");
      AI_CTRL[74].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[74].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[74]:dont_test") ) AI_CTRL[74].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[74] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[74]"));
      end
   AI_CTRL[74].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[74].IMS_MASK"});
   AI_CTRL[74].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[74].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[75]";
    `endif
    AI_CTRL[75] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[75]", this);
    AI_CTRL[75].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E004BC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[75].set_space_addr("MSG", 28'h1E004BC);
    AI_CTRL[75].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[75].set_space_addr("MEM-SB",28'h1E004BC);
    AI_CTRL[75].set_space_addr("MEM", 28'h1E004BC);
      AI_CTRL[75].set_space("MEM");
      AI_CTRL[75].set_msg_opcode("MEM-SB");
      AI_CTRL[75].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[75].set_bar(4'h2, "MEM-SB");
      AI_CTRL[75].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[75].set_user_attribute("diag_reg", "0");
      AI_CTRL[75].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[75].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[75]:dont_test") ) AI_CTRL[75].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[75] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[75]"));
      end
   AI_CTRL[75].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[75].IMS_MASK"});
   AI_CTRL[75].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[75].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[76]";
    `endif
    AI_CTRL[76] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[76]", this);
    AI_CTRL[76].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E004CC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[76].set_space_addr("MSG", 28'h1E004CC);
    AI_CTRL[76].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[76].set_space_addr("MEM-SB",28'h1E004CC);
    AI_CTRL[76].set_space_addr("MEM", 28'h1E004CC);
      AI_CTRL[76].set_space("MEM");
      AI_CTRL[76].set_msg_opcode("MEM-SB");
      AI_CTRL[76].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[76].set_bar(4'h2, "MEM-SB");
      AI_CTRL[76].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[76].set_user_attribute("diag_reg", "0");
      AI_CTRL[76].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[76].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[76]:dont_test") ) AI_CTRL[76].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[76] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[76]"));
      end
   AI_CTRL[76].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[76].IMS_MASK"});
   AI_CTRL[76].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[76].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[77]";
    `endif
    AI_CTRL[77] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[77]", this);
    AI_CTRL[77].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E004DC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[77].set_space_addr("MSG", 28'h1E004DC);
    AI_CTRL[77].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[77].set_space_addr("MEM-SB",28'h1E004DC);
    AI_CTRL[77].set_space_addr("MEM", 28'h1E004DC);
      AI_CTRL[77].set_space("MEM");
      AI_CTRL[77].set_msg_opcode("MEM-SB");
      AI_CTRL[77].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[77].set_bar(4'h2, "MEM-SB");
      AI_CTRL[77].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[77].set_user_attribute("diag_reg", "0");
      AI_CTRL[77].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[77].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[77]:dont_test") ) AI_CTRL[77].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[77] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[77]"));
      end
   AI_CTRL[77].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[77].IMS_MASK"});
   AI_CTRL[77].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[77].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[78]";
    `endif
    AI_CTRL[78] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[78]", this);
    AI_CTRL[78].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E004EC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[78].set_space_addr("MSG", 28'h1E004EC);
    AI_CTRL[78].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[78].set_space_addr("MEM-SB",28'h1E004EC);
    AI_CTRL[78].set_space_addr("MEM", 28'h1E004EC);
      AI_CTRL[78].set_space("MEM");
      AI_CTRL[78].set_msg_opcode("MEM-SB");
      AI_CTRL[78].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[78].set_bar(4'h2, "MEM-SB");
      AI_CTRL[78].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[78].set_user_attribute("diag_reg", "0");
      AI_CTRL[78].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[78].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[78]:dont_test") ) AI_CTRL[78].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[78] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[78]"));
      end
   AI_CTRL[78].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[78].IMS_MASK"});
   AI_CTRL[78].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[78].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[79]";
    `endif
    AI_CTRL[79] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[79]", this);
    AI_CTRL[79].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E004FC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[79].set_space_addr("MSG", 28'h1E004FC);
    AI_CTRL[79].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[79].set_space_addr("MEM-SB",28'h1E004FC);
    AI_CTRL[79].set_space_addr("MEM", 28'h1E004FC);
      AI_CTRL[79].set_space("MEM");
      AI_CTRL[79].set_msg_opcode("MEM-SB");
      AI_CTRL[79].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[79].set_bar(4'h2, "MEM-SB");
      AI_CTRL[79].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[79].set_user_attribute("diag_reg", "0");
      AI_CTRL[79].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[79].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[79]:dont_test") ) AI_CTRL[79].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[79] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[79]"));
      end
   AI_CTRL[79].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[79].IMS_MASK"});
   AI_CTRL[79].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[79].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[80]";
    `endif
    AI_CTRL[80] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[80]", this);
    AI_CTRL[80].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0050C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[80].set_space_addr("MSG", 28'h1E0050C);
    AI_CTRL[80].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[80].set_space_addr("MEM-SB",28'h1E0050C);
    AI_CTRL[80].set_space_addr("MEM", 28'h1E0050C);
      AI_CTRL[80].set_space("MEM");
      AI_CTRL[80].set_msg_opcode("MEM-SB");
      AI_CTRL[80].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[80].set_bar(4'h2, "MEM-SB");
      AI_CTRL[80].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[80].set_user_attribute("diag_reg", "0");
      AI_CTRL[80].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[80].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[80]:dont_test") ) AI_CTRL[80].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[80] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[80]"));
      end
   AI_CTRL[80].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[80].IMS_MASK"});
   AI_CTRL[80].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[80].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[81]";
    `endif
    AI_CTRL[81] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[81]", this);
    AI_CTRL[81].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0051C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[81].set_space_addr("MSG", 28'h1E0051C);
    AI_CTRL[81].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[81].set_space_addr("MEM-SB",28'h1E0051C);
    AI_CTRL[81].set_space_addr("MEM", 28'h1E0051C);
      AI_CTRL[81].set_space("MEM");
      AI_CTRL[81].set_msg_opcode("MEM-SB");
      AI_CTRL[81].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[81].set_bar(4'h2, "MEM-SB");
      AI_CTRL[81].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[81].set_user_attribute("diag_reg", "0");
      AI_CTRL[81].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[81].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[81]:dont_test") ) AI_CTRL[81].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[81] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[81]"));
      end
   AI_CTRL[81].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[81].IMS_MASK"});
   AI_CTRL[81].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[81].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[82]";
    `endif
    AI_CTRL[82] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[82]", this);
    AI_CTRL[82].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0052C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[82].set_space_addr("MSG", 28'h1E0052C);
    AI_CTRL[82].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[82].set_space_addr("MEM-SB",28'h1E0052C);
    AI_CTRL[82].set_space_addr("MEM", 28'h1E0052C);
      AI_CTRL[82].set_space("MEM");
      AI_CTRL[82].set_msg_opcode("MEM-SB");
      AI_CTRL[82].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[82].set_bar(4'h2, "MEM-SB");
      AI_CTRL[82].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[82].set_user_attribute("diag_reg", "0");
      AI_CTRL[82].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[82].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[82]:dont_test") ) AI_CTRL[82].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[82] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[82]"));
      end
   AI_CTRL[82].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[82].IMS_MASK"});
   AI_CTRL[82].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[82].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[83]";
    `endif
    AI_CTRL[83] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[83]", this);
    AI_CTRL[83].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0053C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[83].set_space_addr("MSG", 28'h1E0053C);
    AI_CTRL[83].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[83].set_space_addr("MEM-SB",28'h1E0053C);
    AI_CTRL[83].set_space_addr("MEM", 28'h1E0053C);
      AI_CTRL[83].set_space("MEM");
      AI_CTRL[83].set_msg_opcode("MEM-SB");
      AI_CTRL[83].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[83].set_bar(4'h2, "MEM-SB");
      AI_CTRL[83].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[83].set_user_attribute("diag_reg", "0");
      AI_CTRL[83].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[83].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[83]:dont_test") ) AI_CTRL[83].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[83] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[83]"));
      end
   AI_CTRL[83].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[83].IMS_MASK"});
   AI_CTRL[83].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[83].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[84]";
    `endif
    AI_CTRL[84] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[84]", this);
    AI_CTRL[84].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0054C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[84].set_space_addr("MSG", 28'h1E0054C);
    AI_CTRL[84].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[84].set_space_addr("MEM-SB",28'h1E0054C);
    AI_CTRL[84].set_space_addr("MEM", 28'h1E0054C);
      AI_CTRL[84].set_space("MEM");
      AI_CTRL[84].set_msg_opcode("MEM-SB");
      AI_CTRL[84].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[84].set_bar(4'h2, "MEM-SB");
      AI_CTRL[84].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[84].set_user_attribute("diag_reg", "0");
      AI_CTRL[84].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[84].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[84]:dont_test") ) AI_CTRL[84].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[84] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[84]"));
      end
   AI_CTRL[84].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[84].IMS_MASK"});
   AI_CTRL[84].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[84].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[85]";
    `endif
    AI_CTRL[85] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[85]", this);
    AI_CTRL[85].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0055C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[85].set_space_addr("MSG", 28'h1E0055C);
    AI_CTRL[85].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[85].set_space_addr("MEM-SB",28'h1E0055C);
    AI_CTRL[85].set_space_addr("MEM", 28'h1E0055C);
      AI_CTRL[85].set_space("MEM");
      AI_CTRL[85].set_msg_opcode("MEM-SB");
      AI_CTRL[85].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[85].set_bar(4'h2, "MEM-SB");
      AI_CTRL[85].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[85].set_user_attribute("diag_reg", "0");
      AI_CTRL[85].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[85].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[85]:dont_test") ) AI_CTRL[85].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[85] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[85]"));
      end
   AI_CTRL[85].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[85].IMS_MASK"});
   AI_CTRL[85].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[85].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[86]";
    `endif
    AI_CTRL[86] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[86]", this);
    AI_CTRL[86].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0056C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[86].set_space_addr("MSG", 28'h1E0056C);
    AI_CTRL[86].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[86].set_space_addr("MEM-SB",28'h1E0056C);
    AI_CTRL[86].set_space_addr("MEM", 28'h1E0056C);
      AI_CTRL[86].set_space("MEM");
      AI_CTRL[86].set_msg_opcode("MEM-SB");
      AI_CTRL[86].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[86].set_bar(4'h2, "MEM-SB");
      AI_CTRL[86].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[86].set_user_attribute("diag_reg", "0");
      AI_CTRL[86].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[86].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[86]:dont_test") ) AI_CTRL[86].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[86] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[86]"));
      end
   AI_CTRL[86].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[86].IMS_MASK"});
   AI_CTRL[86].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[86].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[87]";
    `endif
    AI_CTRL[87] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[87]", this);
    AI_CTRL[87].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0057C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[87].set_space_addr("MSG", 28'h1E0057C);
    AI_CTRL[87].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[87].set_space_addr("MEM-SB",28'h1E0057C);
    AI_CTRL[87].set_space_addr("MEM", 28'h1E0057C);
      AI_CTRL[87].set_space("MEM");
      AI_CTRL[87].set_msg_opcode("MEM-SB");
      AI_CTRL[87].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[87].set_bar(4'h2, "MEM-SB");
      AI_CTRL[87].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[87].set_user_attribute("diag_reg", "0");
      AI_CTRL[87].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[87].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[87]:dont_test") ) AI_CTRL[87].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[87] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[87]"));
      end
   AI_CTRL[87].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[87].IMS_MASK"});
   AI_CTRL[87].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[87].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[88]";
    `endif
    AI_CTRL[88] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[88]", this);
    AI_CTRL[88].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0058C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[88].set_space_addr("MSG", 28'h1E0058C);
    AI_CTRL[88].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[88].set_space_addr("MEM-SB",28'h1E0058C);
    AI_CTRL[88].set_space_addr("MEM", 28'h1E0058C);
      AI_CTRL[88].set_space("MEM");
      AI_CTRL[88].set_msg_opcode("MEM-SB");
      AI_CTRL[88].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[88].set_bar(4'h2, "MEM-SB");
      AI_CTRL[88].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[88].set_user_attribute("diag_reg", "0");
      AI_CTRL[88].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[88].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[88]:dont_test") ) AI_CTRL[88].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[88] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[88]"));
      end
   AI_CTRL[88].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[88].IMS_MASK"});
   AI_CTRL[88].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[88].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[89]";
    `endif
    AI_CTRL[89] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[89]", this);
    AI_CTRL[89].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0059C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[89].set_space_addr("MSG", 28'h1E0059C);
    AI_CTRL[89].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[89].set_space_addr("MEM-SB",28'h1E0059C);
    AI_CTRL[89].set_space_addr("MEM", 28'h1E0059C);
      AI_CTRL[89].set_space("MEM");
      AI_CTRL[89].set_msg_opcode("MEM-SB");
      AI_CTRL[89].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[89].set_bar(4'h2, "MEM-SB");
      AI_CTRL[89].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[89].set_user_attribute("diag_reg", "0");
      AI_CTRL[89].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[89].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[89]:dont_test") ) AI_CTRL[89].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[89] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[89]"));
      end
   AI_CTRL[89].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[89].IMS_MASK"});
   AI_CTRL[89].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[89].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[90]";
    `endif
    AI_CTRL[90] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[90]", this);
    AI_CTRL[90].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E005AC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[90].set_space_addr("MSG", 28'h1E005AC);
    AI_CTRL[90].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[90].set_space_addr("MEM-SB",28'h1E005AC);
    AI_CTRL[90].set_space_addr("MEM", 28'h1E005AC);
      AI_CTRL[90].set_space("MEM");
      AI_CTRL[90].set_msg_opcode("MEM-SB");
      AI_CTRL[90].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[90].set_bar(4'h2, "MEM-SB");
      AI_CTRL[90].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[90].set_user_attribute("diag_reg", "0");
      AI_CTRL[90].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[90].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[90]:dont_test") ) AI_CTRL[90].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[90] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[90]"));
      end
   AI_CTRL[90].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[90].IMS_MASK"});
   AI_CTRL[90].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[90].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[91]";
    `endif
    AI_CTRL[91] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[91]", this);
    AI_CTRL[91].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E005BC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[91].set_space_addr("MSG", 28'h1E005BC);
    AI_CTRL[91].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[91].set_space_addr("MEM-SB",28'h1E005BC);
    AI_CTRL[91].set_space_addr("MEM", 28'h1E005BC);
      AI_CTRL[91].set_space("MEM");
      AI_CTRL[91].set_msg_opcode("MEM-SB");
      AI_CTRL[91].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[91].set_bar(4'h2, "MEM-SB");
      AI_CTRL[91].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[91].set_user_attribute("diag_reg", "0");
      AI_CTRL[91].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[91].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[91]:dont_test") ) AI_CTRL[91].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[91] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[91]"));
      end
   AI_CTRL[91].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[91].IMS_MASK"});
   AI_CTRL[91].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[91].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[92]";
    `endif
    AI_CTRL[92] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[92]", this);
    AI_CTRL[92].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E005CC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[92].set_space_addr("MSG", 28'h1E005CC);
    AI_CTRL[92].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[92].set_space_addr("MEM-SB",28'h1E005CC);
    AI_CTRL[92].set_space_addr("MEM", 28'h1E005CC);
      AI_CTRL[92].set_space("MEM");
      AI_CTRL[92].set_msg_opcode("MEM-SB");
      AI_CTRL[92].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[92].set_bar(4'h2, "MEM-SB");
      AI_CTRL[92].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[92].set_user_attribute("diag_reg", "0");
      AI_CTRL[92].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[92].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[92]:dont_test") ) AI_CTRL[92].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[92] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[92]"));
      end
   AI_CTRL[92].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[92].IMS_MASK"});
   AI_CTRL[92].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[92].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[93]";
    `endif
    AI_CTRL[93] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[93]", this);
    AI_CTRL[93].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E005DC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[93].set_space_addr("MSG", 28'h1E005DC);
    AI_CTRL[93].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[93].set_space_addr("MEM-SB",28'h1E005DC);
    AI_CTRL[93].set_space_addr("MEM", 28'h1E005DC);
      AI_CTRL[93].set_space("MEM");
      AI_CTRL[93].set_msg_opcode("MEM-SB");
      AI_CTRL[93].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[93].set_bar(4'h2, "MEM-SB");
      AI_CTRL[93].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[93].set_user_attribute("diag_reg", "0");
      AI_CTRL[93].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[93].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[93]:dont_test") ) AI_CTRL[93].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[93] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[93]"));
      end
   AI_CTRL[93].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[93].IMS_MASK"});
   AI_CTRL[93].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[93].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[94]";
    `endif
    AI_CTRL[94] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[94]", this);
    AI_CTRL[94].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E005EC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[94].set_space_addr("MSG", 28'h1E005EC);
    AI_CTRL[94].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[94].set_space_addr("MEM-SB",28'h1E005EC);
    AI_CTRL[94].set_space_addr("MEM", 28'h1E005EC);
      AI_CTRL[94].set_space("MEM");
      AI_CTRL[94].set_msg_opcode("MEM-SB");
      AI_CTRL[94].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[94].set_bar(4'h2, "MEM-SB");
      AI_CTRL[94].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[94].set_user_attribute("diag_reg", "0");
      AI_CTRL[94].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[94].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[94]:dont_test") ) AI_CTRL[94].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[94] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[94]"));
      end
   AI_CTRL[94].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[94].IMS_MASK"});
   AI_CTRL[94].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[94].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[95]";
    `endif
    AI_CTRL[95] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[95]", this);
    AI_CTRL[95].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E005FC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[95].set_space_addr("MSG", 28'h1E005FC);
    AI_CTRL[95].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[95].set_space_addr("MEM-SB",28'h1E005FC);
    AI_CTRL[95].set_space_addr("MEM", 28'h1E005FC);
      AI_CTRL[95].set_space("MEM");
      AI_CTRL[95].set_msg_opcode("MEM-SB");
      AI_CTRL[95].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[95].set_bar(4'h2, "MEM-SB");
      AI_CTRL[95].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[95].set_user_attribute("diag_reg", "0");
      AI_CTRL[95].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[95].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[95]:dont_test") ) AI_CTRL[95].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[95] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[95]"));
      end
   AI_CTRL[95].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[95].IMS_MASK"});
   AI_CTRL[95].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[95].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[96]";
    `endif
    AI_CTRL[96] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[96]", this);
    AI_CTRL[96].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0060C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[96].set_space_addr("MSG", 28'h1E0060C);
    AI_CTRL[96].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[96].set_space_addr("MEM-SB",28'h1E0060C);
    AI_CTRL[96].set_space_addr("MEM", 28'h1E0060C);
      AI_CTRL[96].set_space("MEM");
      AI_CTRL[96].set_msg_opcode("MEM-SB");
      AI_CTRL[96].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[96].set_bar(4'h2, "MEM-SB");
      AI_CTRL[96].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[96].set_user_attribute("diag_reg", "0");
      AI_CTRL[96].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[96].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[96]:dont_test") ) AI_CTRL[96].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[96] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[96]"));
      end
   AI_CTRL[96].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[96].IMS_MASK"});
   AI_CTRL[96].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[96].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[97]";
    `endif
    AI_CTRL[97] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[97]", this);
    AI_CTRL[97].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0061C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[97].set_space_addr("MSG", 28'h1E0061C);
    AI_CTRL[97].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[97].set_space_addr("MEM-SB",28'h1E0061C);
    AI_CTRL[97].set_space_addr("MEM", 28'h1E0061C);
      AI_CTRL[97].set_space("MEM");
      AI_CTRL[97].set_msg_opcode("MEM-SB");
      AI_CTRL[97].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[97].set_bar(4'h2, "MEM-SB");
      AI_CTRL[97].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[97].set_user_attribute("diag_reg", "0");
      AI_CTRL[97].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[97].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[97]:dont_test") ) AI_CTRL[97].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[97] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[97]"));
      end
   AI_CTRL[97].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[97].IMS_MASK"});
   AI_CTRL[97].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[97].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[98]";
    `endif
    AI_CTRL[98] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[98]", this);
    AI_CTRL[98].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0062C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[98].set_space_addr("MSG", 28'h1E0062C);
    AI_CTRL[98].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[98].set_space_addr("MEM-SB",28'h1E0062C);
    AI_CTRL[98].set_space_addr("MEM", 28'h1E0062C);
      AI_CTRL[98].set_space("MEM");
      AI_CTRL[98].set_msg_opcode("MEM-SB");
      AI_CTRL[98].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[98].set_bar(4'h2, "MEM-SB");
      AI_CTRL[98].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[98].set_user_attribute("diag_reg", "0");
      AI_CTRL[98].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[98].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[98]:dont_test") ) AI_CTRL[98].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[98] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[98]"));
      end
   AI_CTRL[98].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[98].IMS_MASK"});
   AI_CTRL[98].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[98].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[99]";
    `endif
    AI_CTRL[99] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[99]", this);
    AI_CTRL[99].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0063C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[99].set_space_addr("MSG", 28'h1E0063C);
    AI_CTRL[99].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[99].set_space_addr("MEM-SB",28'h1E0063C);
    AI_CTRL[99].set_space_addr("MEM", 28'h1E0063C);
      AI_CTRL[99].set_space("MEM");
      AI_CTRL[99].set_msg_opcode("MEM-SB");
      AI_CTRL[99].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[99].set_bar(4'h2, "MEM-SB");
      AI_CTRL[99].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[99].set_user_attribute("diag_reg", "0");
      AI_CTRL[99].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[99].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[99]:dont_test") ) AI_CTRL[99].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[99] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[99]"));
      end
   AI_CTRL[99].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[99].IMS_MASK"});
   AI_CTRL[99].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[99].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[100]";
    `endif
    AI_CTRL[100] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[100]", this);
    AI_CTRL[100].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0064C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[100].set_space_addr("MSG", 28'h1E0064C);
    AI_CTRL[100].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[100].set_space_addr("MEM-SB",28'h1E0064C);
    AI_CTRL[100].set_space_addr("MEM", 28'h1E0064C);
      AI_CTRL[100].set_space("MEM");
      AI_CTRL[100].set_msg_opcode("MEM-SB");
      AI_CTRL[100].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[100].set_bar(4'h2, "MEM-SB");
      AI_CTRL[100].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[100].set_user_attribute("diag_reg", "0");
      AI_CTRL[100].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[100].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[100]:dont_test") ) AI_CTRL[100].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[100] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[100]"));
      end
   AI_CTRL[100].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[100].IMS_MASK"});
   AI_CTRL[100].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[100].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[101]";
    `endif
    AI_CTRL[101] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[101]", this);
    AI_CTRL[101].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0065C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[101].set_space_addr("MSG", 28'h1E0065C);
    AI_CTRL[101].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[101].set_space_addr("MEM-SB",28'h1E0065C);
    AI_CTRL[101].set_space_addr("MEM", 28'h1E0065C);
      AI_CTRL[101].set_space("MEM");
      AI_CTRL[101].set_msg_opcode("MEM-SB");
      AI_CTRL[101].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[101].set_bar(4'h2, "MEM-SB");
      AI_CTRL[101].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[101].set_user_attribute("diag_reg", "0");
      AI_CTRL[101].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[101].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[101]:dont_test") ) AI_CTRL[101].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[101] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[101]"));
      end
   AI_CTRL[101].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[101].IMS_MASK"});
   AI_CTRL[101].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[101].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[102]";
    `endif
    AI_CTRL[102] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[102]", this);
    AI_CTRL[102].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0066C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[102].set_space_addr("MSG", 28'h1E0066C);
    AI_CTRL[102].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[102].set_space_addr("MEM-SB",28'h1E0066C);
    AI_CTRL[102].set_space_addr("MEM", 28'h1E0066C);
      AI_CTRL[102].set_space("MEM");
      AI_CTRL[102].set_msg_opcode("MEM-SB");
      AI_CTRL[102].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[102].set_bar(4'h2, "MEM-SB");
      AI_CTRL[102].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[102].set_user_attribute("diag_reg", "0");
      AI_CTRL[102].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[102].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[102]:dont_test") ) AI_CTRL[102].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[102] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[102]"));
      end
   AI_CTRL[102].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[102].IMS_MASK"});
   AI_CTRL[102].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[102].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[103]";
    `endif
    AI_CTRL[103] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[103]", this);
    AI_CTRL[103].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0067C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[103].set_space_addr("MSG", 28'h1E0067C);
    AI_CTRL[103].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[103].set_space_addr("MEM-SB",28'h1E0067C);
    AI_CTRL[103].set_space_addr("MEM", 28'h1E0067C);
      AI_CTRL[103].set_space("MEM");
      AI_CTRL[103].set_msg_opcode("MEM-SB");
      AI_CTRL[103].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[103].set_bar(4'h2, "MEM-SB");
      AI_CTRL[103].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[103].set_user_attribute("diag_reg", "0");
      AI_CTRL[103].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[103].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[103]:dont_test") ) AI_CTRL[103].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[103] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[103]"));
      end
   AI_CTRL[103].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[103].IMS_MASK"});
   AI_CTRL[103].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[103].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[104]";
    `endif
    AI_CTRL[104] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[104]", this);
    AI_CTRL[104].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0068C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[104].set_space_addr("MSG", 28'h1E0068C);
    AI_CTRL[104].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[104].set_space_addr("MEM-SB",28'h1E0068C);
    AI_CTRL[104].set_space_addr("MEM", 28'h1E0068C);
      AI_CTRL[104].set_space("MEM");
      AI_CTRL[104].set_msg_opcode("MEM-SB");
      AI_CTRL[104].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[104].set_bar(4'h2, "MEM-SB");
      AI_CTRL[104].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[104].set_user_attribute("diag_reg", "0");
      AI_CTRL[104].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[104].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[104]:dont_test") ) AI_CTRL[104].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[104] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[104]"));
      end
   AI_CTRL[104].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[104].IMS_MASK"});
   AI_CTRL[104].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[104].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[105]";
    `endif
    AI_CTRL[105] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[105]", this);
    AI_CTRL[105].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0069C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[105].set_space_addr("MSG", 28'h1E0069C);
    AI_CTRL[105].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[105].set_space_addr("MEM-SB",28'h1E0069C);
    AI_CTRL[105].set_space_addr("MEM", 28'h1E0069C);
      AI_CTRL[105].set_space("MEM");
      AI_CTRL[105].set_msg_opcode("MEM-SB");
      AI_CTRL[105].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[105].set_bar(4'h2, "MEM-SB");
      AI_CTRL[105].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[105].set_user_attribute("diag_reg", "0");
      AI_CTRL[105].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[105].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[105]:dont_test") ) AI_CTRL[105].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[105] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[105]"));
      end
   AI_CTRL[105].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[105].IMS_MASK"});
   AI_CTRL[105].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[105].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[106]";
    `endif
    AI_CTRL[106] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[106]", this);
    AI_CTRL[106].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E006AC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[106].set_space_addr("MSG", 28'h1E006AC);
    AI_CTRL[106].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[106].set_space_addr("MEM-SB",28'h1E006AC);
    AI_CTRL[106].set_space_addr("MEM", 28'h1E006AC);
      AI_CTRL[106].set_space("MEM");
      AI_CTRL[106].set_msg_opcode("MEM-SB");
      AI_CTRL[106].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[106].set_bar(4'h2, "MEM-SB");
      AI_CTRL[106].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[106].set_user_attribute("diag_reg", "0");
      AI_CTRL[106].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[106].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[106]:dont_test") ) AI_CTRL[106].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[106] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[106]"));
      end
   AI_CTRL[106].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[106].IMS_MASK"});
   AI_CTRL[106].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[106].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[107]";
    `endif
    AI_CTRL[107] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[107]", this);
    AI_CTRL[107].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E006BC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[107].set_space_addr("MSG", 28'h1E006BC);
    AI_CTRL[107].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[107].set_space_addr("MEM-SB",28'h1E006BC);
    AI_CTRL[107].set_space_addr("MEM", 28'h1E006BC);
      AI_CTRL[107].set_space("MEM");
      AI_CTRL[107].set_msg_opcode("MEM-SB");
      AI_CTRL[107].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[107].set_bar(4'h2, "MEM-SB");
      AI_CTRL[107].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[107].set_user_attribute("diag_reg", "0");
      AI_CTRL[107].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[107].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[107]:dont_test") ) AI_CTRL[107].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[107] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[107]"));
      end
   AI_CTRL[107].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[107].IMS_MASK"});
   AI_CTRL[107].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[107].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[108]";
    `endif
    AI_CTRL[108] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[108]", this);
    AI_CTRL[108].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E006CC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[108].set_space_addr("MSG", 28'h1E006CC);
    AI_CTRL[108].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[108].set_space_addr("MEM-SB",28'h1E006CC);
    AI_CTRL[108].set_space_addr("MEM", 28'h1E006CC);
      AI_CTRL[108].set_space("MEM");
      AI_CTRL[108].set_msg_opcode("MEM-SB");
      AI_CTRL[108].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[108].set_bar(4'h2, "MEM-SB");
      AI_CTRL[108].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[108].set_user_attribute("diag_reg", "0");
      AI_CTRL[108].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[108].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[108]:dont_test") ) AI_CTRL[108].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[108] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[108]"));
      end
   AI_CTRL[108].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[108].IMS_MASK"});
   AI_CTRL[108].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[108].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[109]";
    `endif
    AI_CTRL[109] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[109]", this);
    AI_CTRL[109].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E006DC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[109].set_space_addr("MSG", 28'h1E006DC);
    AI_CTRL[109].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[109].set_space_addr("MEM-SB",28'h1E006DC);
    AI_CTRL[109].set_space_addr("MEM", 28'h1E006DC);
      AI_CTRL[109].set_space("MEM");
      AI_CTRL[109].set_msg_opcode("MEM-SB");
      AI_CTRL[109].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[109].set_bar(4'h2, "MEM-SB");
      AI_CTRL[109].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[109].set_user_attribute("diag_reg", "0");
      AI_CTRL[109].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[109].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[109]:dont_test") ) AI_CTRL[109].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[109] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[109]"));
      end
   AI_CTRL[109].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[109].IMS_MASK"});
   AI_CTRL[109].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[109].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[110]";
    `endif
    AI_CTRL[110] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[110]", this);
    AI_CTRL[110].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E006EC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[110].set_space_addr("MSG", 28'h1E006EC);
    AI_CTRL[110].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[110].set_space_addr("MEM-SB",28'h1E006EC);
    AI_CTRL[110].set_space_addr("MEM", 28'h1E006EC);
      AI_CTRL[110].set_space("MEM");
      AI_CTRL[110].set_msg_opcode("MEM-SB");
      AI_CTRL[110].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[110].set_bar(4'h2, "MEM-SB");
      AI_CTRL[110].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[110].set_user_attribute("diag_reg", "0");
      AI_CTRL[110].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[110].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[110]:dont_test") ) AI_CTRL[110].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[110] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[110]"));
      end
   AI_CTRL[110].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[110].IMS_MASK"});
   AI_CTRL[110].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[110].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[111]";
    `endif
    AI_CTRL[111] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[111]", this);
    AI_CTRL[111].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E006FC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[111].set_space_addr("MSG", 28'h1E006FC);
    AI_CTRL[111].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[111].set_space_addr("MEM-SB",28'h1E006FC);
    AI_CTRL[111].set_space_addr("MEM", 28'h1E006FC);
      AI_CTRL[111].set_space("MEM");
      AI_CTRL[111].set_msg_opcode("MEM-SB");
      AI_CTRL[111].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[111].set_bar(4'h2, "MEM-SB");
      AI_CTRL[111].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[111].set_user_attribute("diag_reg", "0");
      AI_CTRL[111].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[111].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[111]:dont_test") ) AI_CTRL[111].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[111] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[111]"));
      end
   AI_CTRL[111].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[111].IMS_MASK"});
   AI_CTRL[111].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[111].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[112]";
    `endif
    AI_CTRL[112] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[112]", this);
    AI_CTRL[112].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0070C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[112].set_space_addr("MSG", 28'h1E0070C);
    AI_CTRL[112].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[112].set_space_addr("MEM-SB",28'h1E0070C);
    AI_CTRL[112].set_space_addr("MEM", 28'h1E0070C);
      AI_CTRL[112].set_space("MEM");
      AI_CTRL[112].set_msg_opcode("MEM-SB");
      AI_CTRL[112].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[112].set_bar(4'h2, "MEM-SB");
      AI_CTRL[112].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[112].set_user_attribute("diag_reg", "0");
      AI_CTRL[112].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[112].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[112]:dont_test") ) AI_CTRL[112].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[112] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[112]"));
      end
   AI_CTRL[112].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[112].IMS_MASK"});
   AI_CTRL[112].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[112].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[113]";
    `endif
    AI_CTRL[113] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[113]", this);
    AI_CTRL[113].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0071C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[113].set_space_addr("MSG", 28'h1E0071C);
    AI_CTRL[113].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[113].set_space_addr("MEM-SB",28'h1E0071C);
    AI_CTRL[113].set_space_addr("MEM", 28'h1E0071C);
      AI_CTRL[113].set_space("MEM");
      AI_CTRL[113].set_msg_opcode("MEM-SB");
      AI_CTRL[113].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[113].set_bar(4'h2, "MEM-SB");
      AI_CTRL[113].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[113].set_user_attribute("diag_reg", "0");
      AI_CTRL[113].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[113].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[113]:dont_test") ) AI_CTRL[113].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[113] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[113]"));
      end
   AI_CTRL[113].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[113].IMS_MASK"});
   AI_CTRL[113].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[113].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[114]";
    `endif
    AI_CTRL[114] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[114]", this);
    AI_CTRL[114].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0072C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[114].set_space_addr("MSG", 28'h1E0072C);
    AI_CTRL[114].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[114].set_space_addr("MEM-SB",28'h1E0072C);
    AI_CTRL[114].set_space_addr("MEM", 28'h1E0072C);
      AI_CTRL[114].set_space("MEM");
      AI_CTRL[114].set_msg_opcode("MEM-SB");
      AI_CTRL[114].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[114].set_bar(4'h2, "MEM-SB");
      AI_CTRL[114].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[114].set_user_attribute("diag_reg", "0");
      AI_CTRL[114].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[114].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[114]:dont_test") ) AI_CTRL[114].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[114] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[114]"));
      end
   AI_CTRL[114].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[114].IMS_MASK"});
   AI_CTRL[114].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[114].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[115]";
    `endif
    AI_CTRL[115] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[115]", this);
    AI_CTRL[115].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0073C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[115].set_space_addr("MSG", 28'h1E0073C);
    AI_CTRL[115].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[115].set_space_addr("MEM-SB",28'h1E0073C);
    AI_CTRL[115].set_space_addr("MEM", 28'h1E0073C);
      AI_CTRL[115].set_space("MEM");
      AI_CTRL[115].set_msg_opcode("MEM-SB");
      AI_CTRL[115].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[115].set_bar(4'h2, "MEM-SB");
      AI_CTRL[115].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[115].set_user_attribute("diag_reg", "0");
      AI_CTRL[115].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[115].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[115]:dont_test") ) AI_CTRL[115].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[115] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[115]"));
      end
   AI_CTRL[115].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[115].IMS_MASK"});
   AI_CTRL[115].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[115].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[116]";
    `endif
    AI_CTRL[116] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[116]", this);
    AI_CTRL[116].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0074C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[116].set_space_addr("MSG", 28'h1E0074C);
    AI_CTRL[116].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[116].set_space_addr("MEM-SB",28'h1E0074C);
    AI_CTRL[116].set_space_addr("MEM", 28'h1E0074C);
      AI_CTRL[116].set_space("MEM");
      AI_CTRL[116].set_msg_opcode("MEM-SB");
      AI_CTRL[116].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[116].set_bar(4'h2, "MEM-SB");
      AI_CTRL[116].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[116].set_user_attribute("diag_reg", "0");
      AI_CTRL[116].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[116].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[116]:dont_test") ) AI_CTRL[116].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[116] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[116]"));
      end
   AI_CTRL[116].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[116].IMS_MASK"});
   AI_CTRL[116].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[116].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[117]";
    `endif
    AI_CTRL[117] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[117]", this);
    AI_CTRL[117].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0075C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[117].set_space_addr("MSG", 28'h1E0075C);
    AI_CTRL[117].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[117].set_space_addr("MEM-SB",28'h1E0075C);
    AI_CTRL[117].set_space_addr("MEM", 28'h1E0075C);
      AI_CTRL[117].set_space("MEM");
      AI_CTRL[117].set_msg_opcode("MEM-SB");
      AI_CTRL[117].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[117].set_bar(4'h2, "MEM-SB");
      AI_CTRL[117].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[117].set_user_attribute("diag_reg", "0");
      AI_CTRL[117].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[117].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[117]:dont_test") ) AI_CTRL[117].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[117] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[117]"));
      end
   AI_CTRL[117].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[117].IMS_MASK"});
   AI_CTRL[117].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[117].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[118]";
    `endif
    AI_CTRL[118] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[118]", this);
    AI_CTRL[118].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0076C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[118].set_space_addr("MSG", 28'h1E0076C);
    AI_CTRL[118].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[118].set_space_addr("MEM-SB",28'h1E0076C);
    AI_CTRL[118].set_space_addr("MEM", 28'h1E0076C);
      AI_CTRL[118].set_space("MEM");
      AI_CTRL[118].set_msg_opcode("MEM-SB");
      AI_CTRL[118].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[118].set_bar(4'h2, "MEM-SB");
      AI_CTRL[118].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[118].set_user_attribute("diag_reg", "0");
      AI_CTRL[118].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[118].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[118]:dont_test") ) AI_CTRL[118].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[118] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[118]"));
      end
   AI_CTRL[118].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[118].IMS_MASK"});
   AI_CTRL[118].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[118].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[119]";
    `endif
    AI_CTRL[119] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[119]", this);
    AI_CTRL[119].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0077C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[119].set_space_addr("MSG", 28'h1E0077C);
    AI_CTRL[119].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[119].set_space_addr("MEM-SB",28'h1E0077C);
    AI_CTRL[119].set_space_addr("MEM", 28'h1E0077C);
      AI_CTRL[119].set_space("MEM");
      AI_CTRL[119].set_msg_opcode("MEM-SB");
      AI_CTRL[119].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[119].set_bar(4'h2, "MEM-SB");
      AI_CTRL[119].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[119].set_user_attribute("diag_reg", "0");
      AI_CTRL[119].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[119].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[119]:dont_test") ) AI_CTRL[119].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[119] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[119]"));
      end
   AI_CTRL[119].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[119].IMS_MASK"});
   AI_CTRL[119].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[119].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[120]";
    `endif
    AI_CTRL[120] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[120]", this);
    AI_CTRL[120].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0078C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[120].set_space_addr("MSG", 28'h1E0078C);
    AI_CTRL[120].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[120].set_space_addr("MEM-SB",28'h1E0078C);
    AI_CTRL[120].set_space_addr("MEM", 28'h1E0078C);
      AI_CTRL[120].set_space("MEM");
      AI_CTRL[120].set_msg_opcode("MEM-SB");
      AI_CTRL[120].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[120].set_bar(4'h2, "MEM-SB");
      AI_CTRL[120].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[120].set_user_attribute("diag_reg", "0");
      AI_CTRL[120].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[120].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[120]:dont_test") ) AI_CTRL[120].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[120] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[120]"));
      end
   AI_CTRL[120].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[120].IMS_MASK"});
   AI_CTRL[120].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[120].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[121]";
    `endif
    AI_CTRL[121] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[121]", this);
    AI_CTRL[121].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E0079C, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[121].set_space_addr("MSG", 28'h1E0079C);
    AI_CTRL[121].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[121].set_space_addr("MEM-SB",28'h1E0079C);
    AI_CTRL[121].set_space_addr("MEM", 28'h1E0079C);
      AI_CTRL[121].set_space("MEM");
      AI_CTRL[121].set_msg_opcode("MEM-SB");
      AI_CTRL[121].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[121].set_bar(4'h2, "MEM-SB");
      AI_CTRL[121].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[121].set_user_attribute("diag_reg", "0");
      AI_CTRL[121].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[121].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[121]:dont_test") ) AI_CTRL[121].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[121] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[121]"));
      end
   AI_CTRL[121].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[121].IMS_MASK"});
   AI_CTRL[121].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[121].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[122]";
    `endif
    AI_CTRL[122] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[122]", this);
    AI_CTRL[122].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E007AC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[122].set_space_addr("MSG", 28'h1E007AC);
    AI_CTRL[122].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[122].set_space_addr("MEM-SB",28'h1E007AC);
    AI_CTRL[122].set_space_addr("MEM", 28'h1E007AC);
      AI_CTRL[122].set_space("MEM");
      AI_CTRL[122].set_msg_opcode("MEM-SB");
      AI_CTRL[122].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[122].set_bar(4'h2, "MEM-SB");
      AI_CTRL[122].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[122].set_user_attribute("diag_reg", "0");
      AI_CTRL[122].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[122].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[122]:dont_test") ) AI_CTRL[122].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[122] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[122]"));
      end
   AI_CTRL[122].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[122].IMS_MASK"});
   AI_CTRL[122].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[122].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[123]";
    `endif
    AI_CTRL[123] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[123]", this);
    AI_CTRL[123].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E007BC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[123].set_space_addr("MSG", 28'h1E007BC);
    AI_CTRL[123].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[123].set_space_addr("MEM-SB",28'h1E007BC);
    AI_CTRL[123].set_space_addr("MEM", 28'h1E007BC);
      AI_CTRL[123].set_space("MEM");
      AI_CTRL[123].set_msg_opcode("MEM-SB");
      AI_CTRL[123].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[123].set_bar(4'h2, "MEM-SB");
      AI_CTRL[123].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[123].set_user_attribute("diag_reg", "0");
      AI_CTRL[123].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[123].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[123]:dont_test") ) AI_CTRL[123].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[123] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[123]"));
      end
   AI_CTRL[123].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[123].IMS_MASK"});
   AI_CTRL[123].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[123].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[124]";
    `endif
    AI_CTRL[124] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[124]", this);
    AI_CTRL[124].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E007CC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[124].set_space_addr("MSG", 28'h1E007CC);
    AI_CTRL[124].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[124].set_space_addr("MEM-SB",28'h1E007CC);
    AI_CTRL[124].set_space_addr("MEM", 28'h1E007CC);
      AI_CTRL[124].set_space("MEM");
      AI_CTRL[124].set_msg_opcode("MEM-SB");
      AI_CTRL[124].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[124].set_bar(4'h2, "MEM-SB");
      AI_CTRL[124].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[124].set_user_attribute("diag_reg", "0");
      AI_CTRL[124].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[124].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[124]:dont_test") ) AI_CTRL[124].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[124] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[124]"));
      end
   AI_CTRL[124].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[124].IMS_MASK"});
   AI_CTRL[124].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[124].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[125]";
    `endif
    AI_CTRL[125] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[125]", this);
    AI_CTRL[125].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E007DC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[125].set_space_addr("MSG", 28'h1E007DC);
    AI_CTRL[125].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[125].set_space_addr("MEM-SB",28'h1E007DC);
    AI_CTRL[125].set_space_addr("MEM", 28'h1E007DC);
      AI_CTRL[125].set_space("MEM");
      AI_CTRL[125].set_msg_opcode("MEM-SB");
      AI_CTRL[125].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[125].set_bar(4'h2, "MEM-SB");
      AI_CTRL[125].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[125].set_user_attribute("diag_reg", "0");
      AI_CTRL[125].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[125].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[125]:dont_test") ) AI_CTRL[125].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[125] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[125]"));
      end
   AI_CTRL[125].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[125].IMS_MASK"});
   AI_CTRL[125].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[125].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[126]";
    `endif
    AI_CTRL[126] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[126]", this);
    AI_CTRL[126].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E007EC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[126].set_space_addr("MSG", 28'h1E007EC);
    AI_CTRL[126].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[126].set_space_addr("MEM-SB",28'h1E007EC);
    AI_CTRL[126].set_space_addr("MEM", 28'h1E007EC);
      AI_CTRL[126].set_space("MEM");
      AI_CTRL[126].set_msg_opcode("MEM-SB");
      AI_CTRL[126].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[126].set_bar(4'h2, "MEM-SB");
      AI_CTRL[126].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[126].set_user_attribute("diag_reg", "0");
      AI_CTRL[126].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[126].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[126]:dont_test") ) AI_CTRL[126].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[126] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[126]"));
      end
   AI_CTRL[126].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[126].IMS_MASK"});
   AI_CTRL[126].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[126].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AI_CTRL[127]";
    `endif
    AI_CTRL[127] = hqm_system_csr_bridge_AI_CTRL_reg::type_id::create("AI_CTRL[127]", this);
    AI_CTRL[127].set_cfg(16'h0, 16'h0, 16'h0, 28'h1E007FC, 32, 32'b00000000000000000000000000000000);
    AI_CTRL[127].set_space_addr("MSG", 28'h1E007FC);
    AI_CTRL[127].set_space_addr("msg_bus_port", 'h21);
    AI_CTRL[127].set_space_addr("MEM-SB",28'h1E007FC);
    AI_CTRL[127].set_space_addr("MEM", 28'h1E007FC);
      AI_CTRL[127].set_space("MEM");
      AI_CTRL[127].set_msg_opcode("MEM-SB");
      AI_CTRL[127].set_fid(4'h0, "MEM-SB");
  	AI_CTRL[127].set_bar(4'h2, "MEM-SB");
      AI_CTRL[127].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AI_CTRL[127].set_user_attribute("diag_reg", "0");
      AI_CTRL[127].set_user_attribute("HqmIsFeatureReg", "0");
      AI_CTRL[127].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AI_CTRL[127]:dont_test") ) AI_CTRL[127].set_test_reg(1'b0);
      if (!add_reg( AI_CTRL[127] )) begin
        `sla_error(get_name(), ("Could not add register AI_CTRL[127]"));
      end
   AI_CTRL[127].IMS_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[127].IMS_MASK"});
   AI_CTRL[127].IMS_PEND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL[127].IMS_PEND"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IMS_PEND_CLEAR";
    `endif
    IMS_PEND_CLEAR = hqm_system_csr_bridge_IMS_PEND_CLEAR_reg::type_id::create("IMS_PEND_CLEAR", this);
    IMS_PEND_CLEAR.set_cfg(16'h0, 16'h0, 16'h0, 28'h1E01000, 32, 32'b00000000000000000000000000000000);
    IMS_PEND_CLEAR.set_space_addr("MSG", 28'h1E01000);
    IMS_PEND_CLEAR.set_space_addr("msg_bus_port", 'h21);
    IMS_PEND_CLEAR.set_space_addr("MEM-SB",28'h1E01000);
    IMS_PEND_CLEAR.set_space_addr("MEM", 28'h1E01000);
      IMS_PEND_CLEAR.set_space("MEM");
      IMS_PEND_CLEAR.set_msg_opcode("MEM-SB");
      IMS_PEND_CLEAR.set_fid(4'h0, "MEM-SB");
  	IMS_PEND_CLEAR.set_bar(4'h2, "MEM-SB");
      IMS_PEND_CLEAR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IMS_PEND_CLEAR.set_user_attribute("diag_reg", "0");
      IMS_PEND_CLEAR.set_user_attribute("HqmIsFeatureReg", "0");
      IMS_PEND_CLEAR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IMS_PEND_CLEAR:dont_test") ) IMS_PEND_CLEAR.set_test_reg(1'b0);
      if (!add_reg( IMS_PEND_CLEAR )) begin
        `sla_error(get_name(), ("Could not add register IMS_PEND_CLEAR"));
      end
   IMS_PEND_CLEAR.VEC.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IMS_PEND_CLEAR.VEC"});
   IMS_PEND_CLEAR.VALID.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IMS_PEND_CLEAR.VALID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "WB_SCH_OUT_AFULL_AGITATE_CONTROL";
    `endif
    WB_SCH_OUT_AFULL_AGITATE_CONTROL = hqm_system_csr_bridge_WB_SCH_OUT_AFULL_AGITATE_CONTROL_reg::type_id::create("WB_SCH_OUT_AFULL_AGITATE_CONTROL", this);
    WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8000000, 32, 32'b00000000000000000000000000000000);
    WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_space_addr("MSG", 28'h8000000);
    WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h8000000);
    WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_space_addr("MEM", 28'h8000000);
      WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_space("MEM");
      WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("WB_SCH_OUT_AFULL_AGITATE_CONTROL:dont_test") ) WB_SCH_OUT_AFULL_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( WB_SCH_OUT_AFULL_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register WB_SCH_OUT_AFULL_AGITATE_CONTROL"));
      end
   WB_SCH_OUT_AFULL_AGITATE_CONTROL.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WB_SCH_OUT_AFULL_AGITATE_CONTROL.MODE"});
   WB_SCH_OUT_AFULL_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WB_SCH_OUT_AFULL_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IG_HCW_ENQ_AFULL_AGITATE_CONTROL";
    `endif
    IG_HCW_ENQ_AFULL_AGITATE_CONTROL = hqm_system_csr_bridge_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_reg::type_id::create("IG_HCW_ENQ_AFULL_AGITATE_CONTROL", this);
    IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8000004, 32, 32'b00000000000000000000000000000000);
    IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_space_addr("MSG", 28'h8000004);
    IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h8000004);
    IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_space_addr("MEM", 28'h8000004);
      IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_space("MEM");
      IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("IG_HCW_ENQ_AFULL_AGITATE_CONTROL:dont_test") ) IG_HCW_ENQ_AFULL_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( IG_HCW_ENQ_AFULL_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register IG_HCW_ENQ_AFULL_AGITATE_CONTROL"));
      end
   IG_HCW_ENQ_AFULL_AGITATE_CONTROL.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IG_HCW_ENQ_AFULL_AGITATE_CONTROL.MODE"});
   IG_HCW_ENQ_AFULL_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IG_HCW_ENQ_AFULL_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IG_HCW_ENQ_W_DB_AGITATE_CONTROL";
    `endif
    IG_HCW_ENQ_W_DB_AGITATE_CONTROL = hqm_system_csr_bridge_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_reg::type_id::create("IG_HCW_ENQ_W_DB_AGITATE_CONTROL", this);
    IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h800000C, 32, 32'b00000000000000000000000000000000);
    IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_space_addr("MSG", 28'h800000C);
    IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h800000C);
    IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_space_addr("MEM", 28'h800000C);
      IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_space("MEM");
      IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("IG_HCW_ENQ_W_DB_AGITATE_CONTROL:dont_test") ) IG_HCW_ENQ_W_DB_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( IG_HCW_ENQ_W_DB_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register IG_HCW_ENQ_W_DB_AGITATE_CONTROL"));
      end
   IG_HCW_ENQ_W_DB_AGITATE_CONTROL.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IG_HCW_ENQ_W_DB_AGITATE_CONTROL.MODE"});
   IG_HCW_ENQ_W_DB_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IG_HCW_ENQ_W_DB_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "EG_HCW_SCHED_DB_AGITATE_CONTROL";
    `endif
    EG_HCW_SCHED_DB_AGITATE_CONTROL = hqm_system_csr_bridge_EG_HCW_SCHED_DB_AGITATE_CONTROL_reg::type_id::create("EG_HCW_SCHED_DB_AGITATE_CONTROL", this);
    EG_HCW_SCHED_DB_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8000010, 32, 32'b00000000000000000000000000000000);
    EG_HCW_SCHED_DB_AGITATE_CONTROL.set_space_addr("MSG", 28'h8000010);
    EG_HCW_SCHED_DB_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    EG_HCW_SCHED_DB_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h8000010);
    EG_HCW_SCHED_DB_AGITATE_CONTROL.set_space_addr("MEM", 28'h8000010);
      EG_HCW_SCHED_DB_AGITATE_CONTROL.set_space("MEM");
      EG_HCW_SCHED_DB_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      EG_HCW_SCHED_DB_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	EG_HCW_SCHED_DB_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      EG_HCW_SCHED_DB_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      EG_HCW_SCHED_DB_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      EG_HCW_SCHED_DB_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      EG_HCW_SCHED_DB_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      EG_HCW_SCHED_DB_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("EG_HCW_SCHED_DB_AGITATE_CONTROL:dont_test") ) EG_HCW_SCHED_DB_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( EG_HCW_SCHED_DB_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register EG_HCW_SCHED_DB_AGITATE_CONTROL"));
      end
   EG_HCW_SCHED_DB_AGITATE_CONTROL.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EG_HCW_SCHED_DB_AGITATE_CONTROL.MODE"});
   EG_HCW_SCHED_DB_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EG_HCW_SCHED_DB_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AL_IMS_MSIX_DB_AGITATE_CONTROL";
    `endif
    AL_IMS_MSIX_DB_AGITATE_CONTROL = hqm_system_csr_bridge_AL_IMS_MSIX_DB_AGITATE_CONTROL_reg::type_id::create("AL_IMS_MSIX_DB_AGITATE_CONTROL", this);
    AL_IMS_MSIX_DB_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8000014, 32, 32'b00000000000000000000000000000000);
    AL_IMS_MSIX_DB_AGITATE_CONTROL.set_space_addr("MSG", 28'h8000014);
    AL_IMS_MSIX_DB_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    AL_IMS_MSIX_DB_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h8000014);
    AL_IMS_MSIX_DB_AGITATE_CONTROL.set_space_addr("MEM", 28'h8000014);
      AL_IMS_MSIX_DB_AGITATE_CONTROL.set_space("MEM");
      AL_IMS_MSIX_DB_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      AL_IMS_MSIX_DB_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	AL_IMS_MSIX_DB_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      AL_IMS_MSIX_DB_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AL_IMS_MSIX_DB_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      AL_IMS_MSIX_DB_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      AL_IMS_MSIX_DB_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      AL_IMS_MSIX_DB_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("AL_IMS_MSIX_DB_AGITATE_CONTROL:dont_test") ) AL_IMS_MSIX_DB_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( AL_IMS_MSIX_DB_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register AL_IMS_MSIX_DB_AGITATE_CONTROL"));
      end
   AL_IMS_MSIX_DB_AGITATE_CONTROL.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_IMS_MSIX_DB_AGITATE_CONTROL.MODE"});
   AL_IMS_MSIX_DB_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_IMS_MSIX_DB_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AL_CWD_ALARM_DB_AGITATE_CONTROL";
    `endif
    AL_CWD_ALARM_DB_AGITATE_CONTROL = hqm_system_csr_bridge_AL_CWD_ALARM_DB_AGITATE_CONTROL_reg::type_id::create("AL_CWD_ALARM_DB_AGITATE_CONTROL", this);
    AL_CWD_ALARM_DB_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8000018, 32, 32'b00000000000000000000000000000000);
    AL_CWD_ALARM_DB_AGITATE_CONTROL.set_space_addr("MSG", 28'h8000018);
    AL_CWD_ALARM_DB_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    AL_CWD_ALARM_DB_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h8000018);
    AL_CWD_ALARM_DB_AGITATE_CONTROL.set_space_addr("MEM", 28'h8000018);
      AL_CWD_ALARM_DB_AGITATE_CONTROL.set_space("MEM");
      AL_CWD_ALARM_DB_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      AL_CWD_ALARM_DB_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	AL_CWD_ALARM_DB_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      AL_CWD_ALARM_DB_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AL_CWD_ALARM_DB_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      AL_CWD_ALARM_DB_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      AL_CWD_ALARM_DB_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      AL_CWD_ALARM_DB_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("AL_CWD_ALARM_DB_AGITATE_CONTROL:dont_test") ) AL_CWD_ALARM_DB_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( AL_CWD_ALARM_DB_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register AL_CWD_ALARM_DB_AGITATE_CONTROL"));
      end
   AL_CWD_ALARM_DB_AGITATE_CONTROL.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_CWD_ALARM_DB_AGITATE_CONTROL.MODE"});
   AL_CWD_ALARM_DB_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_CWD_ALARM_DB_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AL_SIF_ALARM_AFULL_AGITATE_CONTROL";
    `endif
    AL_SIF_ALARM_AFULL_AGITATE_CONTROL = hqm_system_csr_bridge_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_reg::type_id::create("AL_SIF_ALARM_AFULL_AGITATE_CONTROL", this);
    AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h800001C, 32, 32'b00000000000000000000000000000000);
    AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_space_addr("MSG", 28'h800001C);
    AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h800001C);
    AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_space_addr("MEM", 28'h800001C);
      AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_space("MEM");
      AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("AL_SIF_ALARM_AFULL_AGITATE_CONTROL:dont_test") ) AL_SIF_ALARM_AFULL_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( AL_SIF_ALARM_AFULL_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register AL_SIF_ALARM_AFULL_AGITATE_CONTROL"));
      end
   AL_SIF_ALARM_AFULL_AGITATE_CONTROL.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_SIF_ALARM_AFULL_AGITATE_CONTROL.MODE"});
   AL_SIF_ALARM_AFULL_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_SIF_ALARM_AFULL_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AL_HQM_ALARM_DB_AGITATE_CONTROL";
    `endif
    AL_HQM_ALARM_DB_AGITATE_CONTROL = hqm_system_csr_bridge_AL_HQM_ALARM_DB_AGITATE_CONTROL_reg::type_id::create("AL_HQM_ALARM_DB_AGITATE_CONTROL", this);
    AL_HQM_ALARM_DB_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8000020, 32, 32'b00000000000000000000000000000000);
    AL_HQM_ALARM_DB_AGITATE_CONTROL.set_space_addr("MSG", 28'h8000020);
    AL_HQM_ALARM_DB_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    AL_HQM_ALARM_DB_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h8000020);
    AL_HQM_ALARM_DB_AGITATE_CONTROL.set_space_addr("MEM", 28'h8000020);
      AL_HQM_ALARM_DB_AGITATE_CONTROL.set_space("MEM");
      AL_HQM_ALARM_DB_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      AL_HQM_ALARM_DB_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	AL_HQM_ALARM_DB_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      AL_HQM_ALARM_DB_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AL_HQM_ALARM_DB_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      AL_HQM_ALARM_DB_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      AL_HQM_ALARM_DB_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      AL_HQM_ALARM_DB_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("AL_HQM_ALARM_DB_AGITATE_CONTROL:dont_test") ) AL_HQM_ALARM_DB_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( AL_HQM_ALARM_DB_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register AL_HQM_ALARM_DB_AGITATE_CONTROL"));
      end
   AL_HQM_ALARM_DB_AGITATE_CONTROL.MODE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_HQM_ALARM_DB_AGITATE_CONTROL.MODE"});
   AL_HQM_ALARM_DB_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AL_HQM_ALARM_DB_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ECC_CTL";
    `endif
    ECC_CTL = hqm_system_csr_bridge_ECC_CTL_reg::type_id::create("ECC_CTL", this);
    ECC_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001030, 32, 32'b00000000000000000000000000001110);
    ECC_CTL.set_space_addr("MSG", 28'h8001030);
    ECC_CTL.set_space_addr("msg_bus_port", 'h21);
    ECC_CTL.set_space_addr("MEM-SB",28'h8001030);
    ECC_CTL.set_space_addr("MEM", 28'h8001030);
      ECC_CTL.set_space("MEM");
      ECC_CTL.set_msg_opcode("MEM-SB");
      ECC_CTL.set_fid(4'h0, "MEM-SB");
  	ECC_CTL.set_bar(4'h2, "MEM-SB");
      ECC_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ECC_CTL.set_user_attribute("diag_reg", "0");
      ECC_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      ECC_CTL.set_user_attribute("SubnetPortID", "8'h00");
      ECC_CTL.set_test_reg(0);
      if ( $test$plusargs("ECC_CTL:dont_test") ) ECC_CTL.set_test_reg(1'b0);
      if (!add_reg( ECC_CTL )) begin
        `sla_error(get_name(), ("Could not add register ECC_CTL"));
      end
   ECC_CTL.HCW_ENQ_ECC_ENABLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.HCW_ENQ_ECC_ENABLE"});
   ECC_CTL.SCH_WB_ECC_ENABLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.SCH_WB_ECC_ENABLE"});
   ECC_CTL.LUT_ECC_ENABLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.LUT_ECC_ENABLE"});
   ECC_CTL.WRITE_BAD_SB_ECC.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.WRITE_BAD_SB_ECC"});
   ECC_CTL.WRITE_BAD_MB_ECC.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.WRITE_BAD_MB_ECC"});
   ECC_CTL.INJ_MB_ECC_HCW_ENQ_LS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_HCW_ENQ_LS"});
   ECC_CTL.INJ_SB_ECC_HCW_ENQ_LS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_HCW_ENQ_LS"});
   ECC_CTL.INJ_MB_ECC_HCW_ENQ_MS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_HCW_ENQ_MS"});
   ECC_CTL.INJ_SB_ECC_HCW_ENQ_MS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_HCW_ENQ_MS"});
   ECC_CTL.INJ_MB_ECC_WBUF_W0_LS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W0_LS"});
   ECC_CTL.INJ_SB_ECC_WBUF_W0_LS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W0_LS"});
   ECC_CTL.INJ_MB_ECC_WBUF_W0_MS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W0_MS"});
   ECC_CTL.INJ_SB_ECC_WBUF_W0_MS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W0_MS"});
   ECC_CTL.INJ_MB_ECC_WBUF_W1_LS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W1_LS"});
   ECC_CTL.INJ_SB_ECC_WBUF_W1_LS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W1_LS"});
   ECC_CTL.INJ_MB_ECC_WBUF_W1_MS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W1_MS"});
   ECC_CTL.INJ_SB_ECC_WBUF_W1_MS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W1_MS"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PARITY_CTL";
    `endif
    PARITY_CTL = hqm_system_csr_bridge_PARITY_CTL_reg::type_id::create("PARITY_CTL", this);
    PARITY_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001034, 32, 32'b00000000000000000000000000000000);
    PARITY_CTL.set_space_addr("MSG", 28'h8001034);
    PARITY_CTL.set_space_addr("msg_bus_port", 'h21);
    PARITY_CTL.set_space_addr("MEM-SB",28'h8001034);
    PARITY_CTL.set_space_addr("MEM", 28'h8001034);
      PARITY_CTL.set_space("MEM");
      PARITY_CTL.set_msg_opcode("MEM-SB");
      PARITY_CTL.set_fid(4'h0, "MEM-SB");
  	PARITY_CTL.set_bar(4'h2, "MEM-SB");
      PARITY_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PARITY_CTL.set_user_attribute("diag_reg", "0");
      PARITY_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      PARITY_CTL.set_user_attribute("SubnetPortID", "8'h00");
      PARITY_CTL.set_test_reg(0);
      if ( $test$plusargs("PARITY_CTL:dont_test") ) PARITY_CTL.set_test_reg(1'b0);
      if (!add_reg( PARITY_CTL )) begin
        `sla_error(get_name(), ("Could not add register PARITY_CTL"));
      end
   PARITY_CTL.WRITE_BAD_PARITY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WRITE_BAD_PARITY"});
   PARITY_CTL.ALARM_PAR_OFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.ALARM_PAR_OFF"});
   PARITY_CTL.EGRESS_PAR_OFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_PAR_OFF"});
   PARITY_CTL.INGRESS_PAR_OFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INGRESS_PAR_OFF"});
   PARITY_CTL.WBUF_PAR_OFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WBUF_PAR_OFF"});
   PARITY_CTL.INJ_PAR_ERR_SCH_DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_DATA"});
   PARITY_CTL.INJ_PAR_ERR_SCH_REQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_REQ"});
   PARITY_CTL.INJ_PAR_ERR_HCW_PORT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_HCW_PORT"});
   PARITY_CTL.INJ_PAR_ERR_SCH_OUT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_OUT"});
   PARITY_CTL.INJ_PAR_ERR_VF_SYND.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_VF_SYND"});
   PARITY_CTL.EGRESS_RES_OFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_RES_OFF"});
   PARITY_CTL.WBUF_RES_OFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WBUF_RES_OFF"});
   PARITY_CTL.INJ_RES_ERR_SCH_REQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_SCH_REQ"});
   PARITY_CTL.INJ_PAR_ERR_SCH_PL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_PL"});
   PARITY_CTL.INJ_PAR_ERR_SCH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH"});
   PARITY_CTL.INJ_RES_ERR_SCH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_SCH"});
   PARITY_CTL.INJ_PAR_ERR_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_INT"});
   PARITY_CTL.INJ_RES_ERR_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_INT"});
   PARITY_CTL.EGRESS_INT_PAR_OFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_INT_PAR_OFF"});
   PARITY_CTL.INJ_PAR_ERR_SCH_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_INT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "WRITE_BUFFER_CTL";
    `endif
    WRITE_BUFFER_CTL = hqm_system_csr_bridge_WRITE_BUFFER_CTL_reg::type_id::create("WRITE_BUFFER_CTL", this);
    WRITE_BUFFER_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001040, 32, 32'b00000000000000000000000000000000);
    WRITE_BUFFER_CTL.set_space_addr("MSG", 28'h8001040);
    WRITE_BUFFER_CTL.set_space_addr("msg_bus_port", 'h21);
    WRITE_BUFFER_CTL.set_space_addr("MEM-SB",28'h8001040);
    WRITE_BUFFER_CTL.set_space_addr("MEM", 28'h8001040);
      WRITE_BUFFER_CTL.set_space("MEM");
      WRITE_BUFFER_CTL.set_msg_opcode("MEM-SB");
      WRITE_BUFFER_CTL.set_fid(4'h0, "MEM-SB");
  	WRITE_BUFFER_CTL.set_bar(4'h2, "MEM-SB");
      WRITE_BUFFER_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      WRITE_BUFFER_CTL.set_user_attribute("diag_reg", "0");
      WRITE_BUFFER_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      WRITE_BUFFER_CTL.set_user_attribute("SubnetPortID", "8'h00");
      WRITE_BUFFER_CTL.set_test_reg(0);
      if ( $test$plusargs("WRITE_BUFFER_CTL:dont_test") ) WRITE_BUFFER_CTL.set_test_reg(1'b0);
      if (!add_reg( WRITE_BUFFER_CTL )) begin
        `sla_error(get_name(), ("Could not add register WRITE_BUFFER_CTL"));
      end
   WRITE_BUFFER_CTL.IGNORE_DIR_WB_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.IGNORE_DIR_WB_V"});
   WRITE_BUFFER_CTL.WRITE_SINGLE_BEATS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.WRITE_SINGLE_BEATS"});
   WRITE_BUFFER_CTL.HOLD_SCH_SM.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.HOLD_SCH_SM"});
   WRITE_BUFFER_CTL.IGNORE_LDB_WB_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.IGNORE_LDB_WB_V"});
   WRITE_BUFFER_CTL.ARB_SCH_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ARB_SCH_MASK"});
   WRITE_BUFFER_CTL.ARB_MSI_MASK.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ARB_MSI_MASK"});
   WRITE_BUFFER_CTL.SINGLE_STEP_SCH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SINGLE_STEP_SCH"});
   WRITE_BUFFER_CTL.SINGLE_STEP_MSI.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SINGLE_STEP_MSI"});
   WRITE_BUFFER_CTL.ENABLE_DEBUG.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ENABLE_DEBUG"});
   WRITE_BUFFER_CTL.SCH_RATE_LIMIT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SCH_RATE_LIMIT"});
   WRITE_BUFFER_CTL.EARLY_DIR_INT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.EARLY_DIR_INT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_CTL";
    `endif
    ALARM_CTL = hqm_system_csr_bridge_ALARM_CTL_reg::type_id::create("ALARM_CTL", this);
    ALARM_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001044, 32, 32'b00000000000000000000000000000000);
    ALARM_CTL.set_space_addr("MSG", 28'h8001044);
    ALARM_CTL.set_space_addr("msg_bus_port", 'h21);
    ALARM_CTL.set_space_addr("MEM-SB",28'h8001044);
    ALARM_CTL.set_space_addr("MEM", 28'h8001044);
      ALARM_CTL.set_space("MEM");
      ALARM_CTL.set_msg_opcode("MEM-SB");
      ALARM_CTL.set_fid(4'h0, "MEM-SB");
  	ALARM_CTL.set_bar(4'h2, "MEM-SB");
      ALARM_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_CTL.set_user_attribute("diag_reg", "0");
      ALARM_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      ALARM_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_CTL:dont_test") ) ALARM_CTL.set_test_reg(1'b0);
      if (!add_reg( ALARM_CTL )) begin
        `sla_error(get_name(), ("Could not add register ALARM_CTL"));
      end
   ALARM_CTL.DISABLE_HQM_ALARMS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_HQM_ALARMS"});
   ALARM_CTL.DISABLE_SIF_ALARMS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_SIF_ALARMS"});
   ALARM_CTL.DISABLE_SYS_ALARMS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_SYS_ALARMS"});
   ALARM_CTL.DISABLE_CWD_ALARMS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_CWD_ALARMS"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PATCH_CONTROL";
    `endif
    CFG_PATCH_CONTROL = hqm_system_csr_bridge_CFG_PATCH_CONTROL_reg::type_id::create("CFG_PATCH_CONTROL", this);
    CFG_PATCH_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001048, 32, 32'b00000000000000000000011101000000);
    CFG_PATCH_CONTROL.set_space_addr("MSG", 28'h8001048);
    CFG_PATCH_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_PATCH_CONTROL.set_space_addr("MEM-SB",28'h8001048);
    CFG_PATCH_CONTROL.set_space_addr("MEM", 28'h8001048);
      CFG_PATCH_CONTROL.set_space("MEM");
      CFG_PATCH_CONTROL.set_msg_opcode("MEM-SB");
      CFG_PATCH_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_PATCH_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_PATCH_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PATCH_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_PATCH_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PATCH_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PATCH_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_PATCH_CONTROL:dont_test") ) CFG_PATCH_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_PATCH_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_PATCH_CONTROL"));
      end
   CFG_PATCH_CONTROL.DELAY_CLOCKOFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DELAY_CLOCKOFF"});
   CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS"});
   CFG_PATCH_CONTROL.RSVZ1.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.RSVZ1"});
   CFG_PATCH_CONTROL.RSVZ0.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.RSVZ0"});
   CFG_PATCH_CONTROL.DISABLE_CLOCKOFF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DISABLE_CLOCKOFF"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "INGRESS_CTL";
    `endif
    INGRESS_CTL = hqm_system_csr_bridge_INGRESS_CTL_reg::type_id::create("INGRESS_CTL", this);
    INGRESS_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001050, 32, 32'b00000000000000000000000000000000);
    INGRESS_CTL.set_space_addr("MSG", 28'h8001050);
    INGRESS_CTL.set_space_addr("msg_bus_port", 'h21);
    INGRESS_CTL.set_space_addr("MEM-SB",28'h8001050);
    INGRESS_CTL.set_space_addr("MEM", 28'h8001050);
      INGRESS_CTL.set_space("MEM");
      INGRESS_CTL.set_msg_opcode("MEM-SB");
      INGRESS_CTL.set_fid(4'h0, "MEM-SB");
  	INGRESS_CTL.set_bar(4'h2, "MEM-SB");
      INGRESS_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      INGRESS_CTL.set_user_attribute("diag_reg", "0");
      INGRESS_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      INGRESS_CTL.set_user_attribute("SubnetPortID", "8'h00");
      INGRESS_CTL.set_test_reg(0);
      if ( $test$plusargs("INGRESS_CTL:dont_test") ) INGRESS_CTL.set_test_reg(1'b0);
      if (!add_reg( INGRESS_CTL )) begin
        `sla_error(get_name(), ("Could not add register INGRESS_CTL"));
      end
   INGRESS_CTL.HOLD_HCW_ENQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.HOLD_HCW_ENQ"});
   INGRESS_CTL.HOLD_HCW_W.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.HOLD_HCW_W"});
   INGRESS_CTL.SINGLE_STEP_ENQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.SINGLE_STEP_ENQ"});
   INGRESS_CTL.SINGLE_STEP_HCW_W.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.SINGLE_STEP_HCW_W"});
   INGRESS_CTL.ENABLE_DEBUG.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.ENABLE_DEBUG"});
   INGRESS_CTL.ENQ_RATE_LIMIT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.ENQ_RATE_LIMIT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "EGRESS_CTL";
    `endif
    EGRESS_CTL = hqm_system_csr_bridge_EGRESS_CTL_reg::type_id::create("EGRESS_CTL", this);
    EGRESS_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001054, 32, 32'b00000000000000000000000000000000);
    EGRESS_CTL.set_space_addr("MSG", 28'h8001054);
    EGRESS_CTL.set_space_addr("msg_bus_port", 'h21);
    EGRESS_CTL.set_space_addr("MEM-SB",28'h8001054);
    EGRESS_CTL.set_space_addr("MEM", 28'h8001054);
      EGRESS_CTL.set_space("MEM");
      EGRESS_CTL.set_msg_opcode("MEM-SB");
      EGRESS_CTL.set_fid(4'h0, "MEM-SB");
  	EGRESS_CTL.set_bar(4'h2, "MEM-SB");
      EGRESS_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      EGRESS_CTL.set_user_attribute("diag_reg", "0");
      EGRESS_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      EGRESS_CTL.set_user_attribute("SubnetPortID", "8'h00");
      EGRESS_CTL.set_test_reg(0);
      if ( $test$plusargs("EGRESS_CTL:dont_test") ) EGRESS_CTL.set_test_reg(1'b0);
      if (!add_reg( EGRESS_CTL )) begin
        `sla_error(get_name(), ("Could not add register EGRESS_CTL"));
      end
   EGRESS_CTL.SCH_RATE_LIMIT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_CTL.SCH_RATE_LIMIT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SYS_IDLE_STATUS";
    `endif
    SYS_IDLE_STATUS = hqm_system_csr_bridge_SYS_IDLE_STATUS_reg::type_id::create("SYS_IDLE_STATUS", this);
    SYS_IDLE_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001058, 32, 32'b00000000000000000000000000111111);
    SYS_IDLE_STATUS.set_space_addr("MSG", 28'h8001058);
    SYS_IDLE_STATUS.set_space_addr("msg_bus_port", 'h21);
    SYS_IDLE_STATUS.set_space_addr("MEM-SB",28'h8001058);
    SYS_IDLE_STATUS.set_space_addr("MEM", 28'h8001058);
      SYS_IDLE_STATUS.set_space("MEM");
      SYS_IDLE_STATUS.set_msg_opcode("MEM-SB");
      SYS_IDLE_STATUS.set_fid(4'h0, "MEM-SB");
  	SYS_IDLE_STATUS.set_bar(4'h2, "MEM-SB");
      SYS_IDLE_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SYS_IDLE_STATUS.set_user_attribute("diag_reg", "0");
      SYS_IDLE_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      SYS_IDLE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      SYS_IDLE_STATUS.set_test_reg(0);
      if ( $test$plusargs("SYS_IDLE_STATUS:dont_test") ) SYS_IDLE_STATUS.set_test_reg(1'b0);
      if (!add_reg( SYS_IDLE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register SYS_IDLE_STATUS"));
      end
   SYS_IDLE_STATUS.INGRESS_IDLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.INGRESS_IDLE"});
   SYS_IDLE_STATUS.EGRESS_IDLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.EGRESS_IDLE"});
   SYS_IDLE_STATUS.WBUF_IDLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.WBUF_IDLE"});
   SYS_IDLE_STATUS.ALARM_IDLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.ALARM_IDLE"});
   SYS_IDLE_STATUS.INT_IDLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.INT_IDLE"});
   SYS_IDLE_STATUS.PBA_IDLE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.PBA_IDLE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HCW_ENQ_FIFO_CTL";
    `endif
    HCW_ENQ_FIFO_CTL = hqm_system_csr_bridge_HCW_ENQ_FIFO_CTL_reg::type_id::create("HCW_ENQ_FIFO_CTL", this);
    HCW_ENQ_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001068, 32, 32'b00000000000000000000000011111110);
    HCW_ENQ_FIFO_CTL.set_space_addr("MSG", 28'h8001068);
    HCW_ENQ_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    HCW_ENQ_FIFO_CTL.set_space_addr("MEM-SB",28'h8001068);
    HCW_ENQ_FIFO_CTL.set_space_addr("MEM", 28'h8001068);
      HCW_ENQ_FIFO_CTL.set_space("MEM");
      HCW_ENQ_FIFO_CTL.set_msg_opcode("MEM-SB");
      HCW_ENQ_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	HCW_ENQ_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      HCW_ENQ_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HCW_ENQ_FIFO_CTL.set_user_attribute("diag_reg", "0");
      HCW_ENQ_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      HCW_ENQ_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HCW_ENQ_FIFO_CTL:dont_test") ) HCW_ENQ_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( HCW_ENQ_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register HCW_ENQ_FIFO_CTL"));
      end
   HCW_ENQ_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SCH_OUT_FIFO_CTL";
    `endif
    SCH_OUT_FIFO_CTL = hqm_system_csr_bridge_SCH_OUT_FIFO_CTL_reg::type_id::create("SCH_OUT_FIFO_CTL", this);
    SCH_OUT_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h800106C, 32, 32'b00000000000000000000000001111111);
    SCH_OUT_FIFO_CTL.set_space_addr("MSG", 28'h800106C);
    SCH_OUT_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    SCH_OUT_FIFO_CTL.set_space_addr("MEM-SB",28'h800106C);
    SCH_OUT_FIFO_CTL.set_space_addr("MEM", 28'h800106C);
      SCH_OUT_FIFO_CTL.set_space("MEM");
      SCH_OUT_FIFO_CTL.set_msg_opcode("MEM-SB");
      SCH_OUT_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	SCH_OUT_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      SCH_OUT_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SCH_OUT_FIFO_CTL.set_user_attribute("diag_reg", "0");
      SCH_OUT_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      SCH_OUT_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SCH_OUT_FIFO_CTL:dont_test") ) SCH_OUT_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( SCH_OUT_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register SCH_OUT_FIFO_CTL"));
      end
   SCH_OUT_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_ALARM_FIFO_CTL";
    `endif
    SIF_ALARM_FIFO_CTL = hqm_system_csr_bridge_SIF_ALARM_FIFO_CTL_reg::type_id::create("SIF_ALARM_FIFO_CTL", this);
    SIF_ALARM_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001070, 32, 32'b00000000000000000000000000000001);
    SIF_ALARM_FIFO_CTL.set_space_addr("MSG", 28'h8001070);
    SIF_ALARM_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    SIF_ALARM_FIFO_CTL.set_space_addr("MEM-SB",28'h8001070);
    SIF_ALARM_FIFO_CTL.set_space_addr("MEM", 28'h8001070);
      SIF_ALARM_FIFO_CTL.set_space("MEM");
      SIF_ALARM_FIFO_CTL.set_msg_opcode("MEM-SB");
      SIF_ALARM_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	SIF_ALARM_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      SIF_ALARM_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_ALARM_FIFO_CTL.set_user_attribute("diag_reg", "0");
      SIF_ALARM_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      SIF_ALARM_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIF_ALARM_FIFO_CTL:dont_test") ) SIF_ALARM_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( SIF_ALARM_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register SIF_ALARM_FIFO_CTL"));
      end
   SIF_ALARM_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HCW_ENQ_FIFO_STATUS";
    `endif
    HCW_ENQ_FIFO_STATUS = hqm_system_csr_bridge_HCW_ENQ_FIFO_STATUS_reg::type_id::create("HCW_ENQ_FIFO_STATUS", this);
    HCW_ENQ_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001074, 32, 32'b00000000000000000000000000110000);
    HCW_ENQ_FIFO_STATUS.set_space_addr("MSG", 28'h8001074);
    HCW_ENQ_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    HCW_ENQ_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001074);
    HCW_ENQ_FIFO_STATUS.set_space_addr("MEM", 28'h8001074);
      HCW_ENQ_FIFO_STATUS.set_space("MEM");
      HCW_ENQ_FIFO_STATUS.set_msg_opcode("MEM-SB");
      HCW_ENQ_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	HCW_ENQ_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      HCW_ENQ_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HCW_ENQ_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      HCW_ENQ_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      HCW_ENQ_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HCW_ENQ_FIFO_STATUS:dont_test") ) HCW_ENQ_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( HCW_ENQ_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register HCW_ENQ_FIFO_STATUS"));
      end
   HCW_ENQ_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.UNDFLOW"});
   HCW_ENQ_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.OVRFLOW"});
   HCW_ENQ_FIFO_STATUS.RSVD32.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.RSVD32"});
   HCW_ENQ_FIFO_STATUS.EMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.EMPTY"});
   HCW_ENQ_FIFO_STATUS.AEMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.AEMPTY"});
   HCW_ENQ_FIFO_STATUS.AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.AFULL"});
   HCW_ENQ_FIFO_STATUS.FULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.FULL"});
   HCW_ENQ_FIFO_STATUS.DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HCW_SCH_FIFO_STATUS";
    `endif
    HCW_SCH_FIFO_STATUS = hqm_system_csr_bridge_HCW_SCH_FIFO_STATUS_reg::type_id::create("HCW_SCH_FIFO_STATUS", this);
    HCW_SCH_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001078, 32, 32'b00000000000000000000000000010000);
    HCW_SCH_FIFO_STATUS.set_space_addr("MSG", 28'h8001078);
    HCW_SCH_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    HCW_SCH_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001078);
    HCW_SCH_FIFO_STATUS.set_space_addr("MEM", 28'h8001078);
      HCW_SCH_FIFO_STATUS.set_space("MEM");
      HCW_SCH_FIFO_STATUS.set_msg_opcode("MEM-SB");
      HCW_SCH_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	HCW_SCH_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      HCW_SCH_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HCW_SCH_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      HCW_SCH_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      HCW_SCH_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HCW_SCH_FIFO_STATUS:dont_test") ) HCW_SCH_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( HCW_SCH_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register HCW_SCH_FIFO_STATUS"));
      end
   HCW_SCH_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.UNDFLOW"});
   HCW_SCH_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.OVRFLOW"});
   HCW_SCH_FIFO_STATUS.RSVD32.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.RSVD32"});
   HCW_SCH_FIFO_STATUS.EMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.EMPTY"});
   HCW_SCH_FIFO_STATUS.RSVD5.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.RSVD5"});
   HCW_SCH_FIFO_STATUS.AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.AFULL"});
   HCW_SCH_FIFO_STATUS.FULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.FULL"});
   HCW_SCH_FIFO_STATUS.DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_SCH_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SCH_OUT_FIFO_STATUS";
    `endif
    SCH_OUT_FIFO_STATUS = hqm_system_csr_bridge_SCH_OUT_FIFO_STATUS_reg::type_id::create("SCH_OUT_FIFO_STATUS", this);
    SCH_OUT_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h800107C, 32, 32'b00000000000000000000000000010000);
    SCH_OUT_FIFO_STATUS.set_space_addr("MSG", 28'h800107C);
    SCH_OUT_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    SCH_OUT_FIFO_STATUS.set_space_addr("MEM-SB",28'h800107C);
    SCH_OUT_FIFO_STATUS.set_space_addr("MEM", 28'h800107C);
      SCH_OUT_FIFO_STATUS.set_space("MEM");
      SCH_OUT_FIFO_STATUS.set_msg_opcode("MEM-SB");
      SCH_OUT_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	SCH_OUT_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      SCH_OUT_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SCH_OUT_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      SCH_OUT_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      SCH_OUT_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SCH_OUT_FIFO_STATUS:dont_test") ) SCH_OUT_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( SCH_OUT_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register SCH_OUT_FIFO_STATUS"));
      end
   SCH_OUT_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.UNDFLOW"});
   SCH_OUT_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.OVRFLOW"});
   SCH_OUT_FIFO_STATUS.RSVD32.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.RSVD32"});
   SCH_OUT_FIFO_STATUS.EMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.EMPTY"});
   SCH_OUT_FIFO_STATUS.RSVD5.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.RSVD5"});
   SCH_OUT_FIFO_STATUS.AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.AFULL"});
   SCH_OUT_FIFO_STATUS.FULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.FULL"});
   SCH_OUT_FIFO_STATUS.DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RX_FIFO_STATUS";
    `endif
    CFG_RX_FIFO_STATUS = hqm_system_csr_bridge_CFG_RX_FIFO_STATUS_reg::type_id::create("CFG_RX_FIFO_STATUS", this);
    CFG_RX_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001080, 32, 32'b00000000000000000000000000010000);
    CFG_RX_FIFO_STATUS.set_space_addr("MSG", 28'h8001080);
    CFG_RX_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_RX_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001080);
    CFG_RX_FIFO_STATUS.set_space_addr("MEM", 28'h8001080);
      CFG_RX_FIFO_STATUS.set_space("MEM");
      CFG_RX_FIFO_STATUS.set_msg_opcode("MEM-SB");
      CFG_RX_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_RX_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_RX_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RX_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      CFG_RX_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_RX_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RX_FIFO_STATUS:dont_test") ) CFG_RX_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_RX_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_RX_FIFO_STATUS"));
      end
   CFG_RX_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.UNDFLOW"});
   CFG_RX_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.OVRFLOW"});
   CFG_RX_FIFO_STATUS.RSVD32.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.RSVD32"});
   CFG_RX_FIFO_STATUS.EMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.EMPTY"});
   CFG_RX_FIFO_STATUS.RSVD5.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.RSVD5"});
   CFG_RX_FIFO_STATUS.AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.AFULL"});
   CFG_RX_FIFO_STATUS.FULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.FULL"});
   CFG_RX_FIFO_STATUS.DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_RX_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CWDI_RX_FIFO_STATUS";
    `endif
    CWDI_RX_FIFO_STATUS = hqm_system_csr_bridge_CWDI_RX_FIFO_STATUS_reg::type_id::create("CWDI_RX_FIFO_STATUS", this);
    CWDI_RX_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001084, 32, 32'b00000000000000000000000000010000);
    CWDI_RX_FIFO_STATUS.set_space_addr("MSG", 28'h8001084);
    CWDI_RX_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    CWDI_RX_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001084);
    CWDI_RX_FIFO_STATUS.set_space_addr("MEM", 28'h8001084);
      CWDI_RX_FIFO_STATUS.set_space("MEM");
      CWDI_RX_FIFO_STATUS.set_msg_opcode("MEM-SB");
      CWDI_RX_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	CWDI_RX_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      CWDI_RX_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CWDI_RX_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      CWDI_RX_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CWDI_RX_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CWDI_RX_FIFO_STATUS:dont_test") ) CWDI_RX_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( CWDI_RX_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CWDI_RX_FIFO_STATUS"));
      end
   CWDI_RX_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.UNDFLOW"});
   CWDI_RX_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.OVRFLOW"});
   CWDI_RX_FIFO_STATUS.RSVD32.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.RSVD32"});
   CWDI_RX_FIFO_STATUS.EMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.EMPTY"});
   CWDI_RX_FIFO_STATUS.RSVD5.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.RSVD5"});
   CWDI_RX_FIFO_STATUS.AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.AFULL"});
   CWDI_RX_FIFO_STATUS.FULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.FULL"});
   CWDI_RX_FIFO_STATUS.DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CWDI_RX_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_ALARM_RX_FIFO_STATUS";
    `endif
    HQM_ALARM_RX_FIFO_STATUS = hqm_system_csr_bridge_HQM_ALARM_RX_FIFO_STATUS_reg::type_id::create("HQM_ALARM_RX_FIFO_STATUS", this);
    HQM_ALARM_RX_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001088, 32, 32'b00000000000000000000000000010000);
    HQM_ALARM_RX_FIFO_STATUS.set_space_addr("MSG", 28'h8001088);
    HQM_ALARM_RX_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    HQM_ALARM_RX_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001088);
    HQM_ALARM_RX_FIFO_STATUS.set_space_addr("MEM", 28'h8001088);
      HQM_ALARM_RX_FIFO_STATUS.set_space("MEM");
      HQM_ALARM_RX_FIFO_STATUS.set_msg_opcode("MEM-SB");
      HQM_ALARM_RX_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	HQM_ALARM_RX_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      HQM_ALARM_RX_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_ALARM_RX_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      HQM_ALARM_RX_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      HQM_ALARM_RX_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_ALARM_RX_FIFO_STATUS:dont_test") ) HQM_ALARM_RX_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( HQM_ALARM_RX_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register HQM_ALARM_RX_FIFO_STATUS"));
      end
   HQM_ALARM_RX_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.UNDFLOW"});
   HQM_ALARM_RX_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.OVRFLOW"});
   HQM_ALARM_RX_FIFO_STATUS.RSVD32.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.RSVD32"});
   HQM_ALARM_RX_FIFO_STATUS.EMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.EMPTY"});
   HQM_ALARM_RX_FIFO_STATUS.RSVD5.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.RSVD5"});
   HQM_ALARM_RX_FIFO_STATUS.AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.AFULL"});
   HQM_ALARM_RX_FIFO_STATUS.FULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.FULL"});
   HQM_ALARM_RX_FIFO_STATUS.DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_ALARM_RX_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_ALARM_FIFO_STATUS";
    `endif
    SIF_ALARM_FIFO_STATUS = hqm_system_csr_bridge_SIF_ALARM_FIFO_STATUS_reg::type_id::create("SIF_ALARM_FIFO_STATUS", this);
    SIF_ALARM_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h800108C, 32, 32'b00000000000000000000000000110000);
    SIF_ALARM_FIFO_STATUS.set_space_addr("MSG", 28'h800108C);
    SIF_ALARM_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    SIF_ALARM_FIFO_STATUS.set_space_addr("MEM-SB",28'h800108C);
    SIF_ALARM_FIFO_STATUS.set_space_addr("MEM", 28'h800108C);
      SIF_ALARM_FIFO_STATUS.set_space("MEM");
      SIF_ALARM_FIFO_STATUS.set_msg_opcode("MEM-SB");
      SIF_ALARM_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	SIF_ALARM_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      SIF_ALARM_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_ALARM_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      SIF_ALARM_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      SIF_ALARM_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIF_ALARM_FIFO_STATUS:dont_test") ) SIF_ALARM_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( SIF_ALARM_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register SIF_ALARM_FIFO_STATUS"));
      end
   SIF_ALARM_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.UNDFLOW"});
   SIF_ALARM_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.OVRFLOW"});
   SIF_ALARM_FIFO_STATUS.RSVD32.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.RSVD32"});
   SIF_ALARM_FIFO_STATUS.EMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.EMPTY"});
   SIF_ALARM_FIFO_STATUS.AEMPTY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.AEMPTY"});
   SIF_ALARM_FIFO_STATUS.AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.AFULL"});
   SIF_ALARM_FIFO_STATUS.FULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.FULL"});
   SIF_ALARM_FIFO_STATUS.DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_DB_STATUS";
    `endif
    ALARM_DB_STATUS = hqm_system_csr_bridge_ALARM_DB_STATUS_reg::type_id::create("ALARM_DB_STATUS", this);
    ALARM_DB_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010A0, 32, 32'b00000000000000000000000000000000);
    ALARM_DB_STATUS.set_space_addr("MSG", 28'h80010A0);
    ALARM_DB_STATUS.set_space_addr("msg_bus_port", 'h21);
    ALARM_DB_STATUS.set_space_addr("MEM-SB",28'h80010A0);
    ALARM_DB_STATUS.set_space_addr("MEM", 28'h80010A0);
      ALARM_DB_STATUS.set_space("MEM");
      ALARM_DB_STATUS.set_msg_opcode("MEM-SB");
      ALARM_DB_STATUS.set_fid(4'h0, "MEM-SB");
  	ALARM_DB_STATUS.set_bar(4'h2, "MEM-SB");
      ALARM_DB_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_DB_STATUS.set_user_attribute("diag_reg", "0");
      ALARM_DB_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      ALARM_DB_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_DB_STATUS:dont_test") ) ALARM_DB_STATUS.set_test_reg(1'b0);
      if (!add_reg( ALARM_DB_STATUS )) begin
        `sla_error(get_name(), ("Could not add register ALARM_DB_STATUS"));
      end
   ALARM_DB_STATUS.SYS_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.SYS_DB_DEPTH"});
   ALARM_DB_STATUS.SYS_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.SYS_DB_READY"});
   ALARM_DB_STATUS.MSIX_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.MSIX_DB_DEPTH"});
   ALARM_DB_STATUS.MSIX_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.MSIX_DB_READY"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "INGRESS_DB_STATUS";
    `endif
    INGRESS_DB_STATUS = hqm_system_csr_bridge_INGRESS_DB_STATUS_reg::type_id::create("INGRESS_DB_STATUS", this);
    INGRESS_DB_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010A4, 32, 32'b00000000000000000000000000000100);
    INGRESS_DB_STATUS.set_space_addr("MSG", 28'h80010A4);
    INGRESS_DB_STATUS.set_space_addr("msg_bus_port", 'h21);
    INGRESS_DB_STATUS.set_space_addr("MEM-SB",28'h80010A4);
    INGRESS_DB_STATUS.set_space_addr("MEM", 28'h80010A4);
      INGRESS_DB_STATUS.set_space("MEM");
      INGRESS_DB_STATUS.set_msg_opcode("MEM-SB");
      INGRESS_DB_STATUS.set_fid(4'h0, "MEM-SB");
  	INGRESS_DB_STATUS.set_bar(4'h2, "MEM-SB");
      INGRESS_DB_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      INGRESS_DB_STATUS.set_user_attribute("diag_reg", "0");
      INGRESS_DB_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      INGRESS_DB_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("INGRESS_DB_STATUS:dont_test") ) INGRESS_DB_STATUS.set_test_reg(1'b0);
      if (!add_reg( INGRESS_DB_STATUS )) begin
        `sla_error(get_name(), ("Could not add register INGRESS_DB_STATUS"));
      end
   INGRESS_DB_STATUS.HCW_ENQ_W_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_W_DB_DEPTH"});
   INGRESS_DB_STATUS.HCW_ENQ_W_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_W_DB_READY"});
   INGRESS_DB_STATUS.HCW_ENQ_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_DB_DEPTH"});
   INGRESS_DB_STATUS.HCW_ENQ_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_DB_READY"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "EGRESS_DB_STATUS";
    `endif
    EGRESS_DB_STATUS = hqm_system_csr_bridge_EGRESS_DB_STATUS_reg::type_id::create("EGRESS_DB_STATUS", this);
    EGRESS_DB_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010A8, 32, 32'b00000000000001000100010001000000);
    EGRESS_DB_STATUS.set_space_addr("MSG", 28'h80010A8);
    EGRESS_DB_STATUS.set_space_addr("msg_bus_port", 'h21);
    EGRESS_DB_STATUS.set_space_addr("MEM-SB",28'h80010A8);
    EGRESS_DB_STATUS.set_space_addr("MEM", 28'h80010A8);
      EGRESS_DB_STATUS.set_space("MEM");
      EGRESS_DB_STATUS.set_msg_opcode("MEM-SB");
      EGRESS_DB_STATUS.set_fid(4'h0, "MEM-SB");
  	EGRESS_DB_STATUS.set_bar(4'h2, "MEM-SB");
      EGRESS_DB_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      EGRESS_DB_STATUS.set_user_attribute("diag_reg", "0");
      EGRESS_DB_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      EGRESS_DB_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("EGRESS_DB_STATUS:dont_test") ) EGRESS_DB_STATUS.set_test_reg(1'b0);
      if (!add_reg( EGRESS_DB_STATUS )) begin
        `sla_error(get_name(), ("Could not add register EGRESS_DB_STATUS"));
      end
   EGRESS_DB_STATUS.HCW_SCHED_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.HCW_SCHED_DB_DEPTH"});
   EGRESS_DB_STATUS.HCW_SCHED_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.HCW_SCHED_DB_READY"});
   EGRESS_DB_STATUS.CQ_OCC_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.CQ_OCC_DB_DEPTH"});
   EGRESS_DB_STATUS.CQ_OCC_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.CQ_OCC_DB_READY"});
   EGRESS_DB_STATUS.PDATA_LS_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_LS_DB_DEPTH"});
   EGRESS_DB_STATUS.PDATA_LS_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_LS_DB_READY"});
   EGRESS_DB_STATUS.PDATA_MS_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_MS_DB_DEPTH"});
   EGRESS_DB_STATUS.PDATA_MS_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_MS_DB_READY"});
   EGRESS_DB_STATUS.PHDR_DB_DEPTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PHDR_DB_DEPTH"});
   EGRESS_DB_STATUS.PHDR_DB_READY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PHDR_DB_READY"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ALARM_STATUS";
    `endif
    ALARM_STATUS = hqm_system_csr_bridge_ALARM_STATUS_reg::type_id::create("ALARM_STATUS", this);
    ALARM_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010AC, 32, 32'b00000000000000000000000000000000);
    ALARM_STATUS.set_space_addr("MSG", 28'h80010AC);
    ALARM_STATUS.set_space_addr("msg_bus_port", 'h21);
    ALARM_STATUS.set_space_addr("MEM-SB",28'h80010AC);
    ALARM_STATUS.set_space_addr("MEM", 28'h80010AC);
      ALARM_STATUS.set_space("MEM");
      ALARM_STATUS.set_msg_opcode("MEM-SB");
      ALARM_STATUS.set_fid(4'h0, "MEM-SB");
  	ALARM_STATUS.set_bar(4'h2, "MEM-SB");
      ALARM_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ALARM_STATUS.set_user_attribute("diag_reg", "0");
      ALARM_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      ALARM_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ALARM_STATUS:dont_test") ) ALARM_STATUS.set_test_reg(1'b0);
      if (!add_reg( ALARM_STATUS )) begin
        `sla_error(get_name(), ("Could not add register ALARM_STATUS"));
      end
   ALARM_STATUS.CQ_OCC_P0_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P0_V"});
   ALARM_STATUS.CQ_OCC_P1_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P1_V"});
   ALARM_STATUS.CQ_OCC_P2_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P2_V"});
   ALARM_STATUS.MSIX_P0_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P0_V"});
   ALARM_STATUS.MSIX_P1_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P1_V"});
   ALARM_STATUS.MSIX_P2_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P2_V"});
   ALARM_STATUS.IMS_P0_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P0_V"});
   ALARM_STATUS.IMS_P1_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P1_V"});
   ALARM_STATUS.IMS_P2_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P2_V"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "INGRESS_STATUS";
    `endif
    INGRESS_STATUS = hqm_system_csr_bridge_INGRESS_STATUS_reg::type_id::create("INGRESS_STATUS", this);
    INGRESS_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010B0, 32, 32'b00000000000000000000000000000000);
    INGRESS_STATUS.set_space_addr("MSG", 28'h80010B0);
    INGRESS_STATUS.set_space_addr("msg_bus_port", 'h21);
    INGRESS_STATUS.set_space_addr("MEM-SB",28'h80010B0);
    INGRESS_STATUS.set_space_addr("MEM", 28'h80010B0);
      INGRESS_STATUS.set_space("MEM");
      INGRESS_STATUS.set_msg_opcode("MEM-SB");
      INGRESS_STATUS.set_fid(4'h0, "MEM-SB");
  	INGRESS_STATUS.set_bar(4'h2, "MEM-SB");
      INGRESS_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      INGRESS_STATUS.set_user_attribute("diag_reg", "0");
      INGRESS_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      INGRESS_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("INGRESS_STATUS:dont_test") ) INGRESS_STATUS.set_test_reg(1'b0);
      if (!add_reg( INGRESS_STATUS )) begin
        `sla_error(get_name(), ("Could not add register INGRESS_STATUS"));
      end
   INGRESS_STATUS.P0_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P0_V"});
   INGRESS_STATUS.P1_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P1_V"});
   INGRESS_STATUS.P2_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P2_V"});
   INGRESS_STATUS.P3_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P3_V"});
   INGRESS_STATUS.P4_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P4_V"});
   INGRESS_STATUS.P5_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P5_V"});
   INGRESS_STATUS.P6_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P6_V"});
   INGRESS_STATUS.P7_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P7_V"});
   INGRESS_STATUS.P8_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P8_V"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "EGRESS_STATUS";
    `endif
    EGRESS_STATUS = hqm_system_csr_bridge_EGRESS_STATUS_reg::type_id::create("EGRESS_STATUS", this);
    EGRESS_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010B4, 32, 32'b00000000000000000000000000000000);
    EGRESS_STATUS.set_space_addr("MSG", 28'h80010B4);
    EGRESS_STATUS.set_space_addr("msg_bus_port", 'h21);
    EGRESS_STATUS.set_space_addr("MEM-SB",28'h80010B4);
    EGRESS_STATUS.set_space_addr("MEM", 28'h80010B4);
      EGRESS_STATUS.set_space("MEM");
      EGRESS_STATUS.set_msg_opcode("MEM-SB");
      EGRESS_STATUS.set_fid(4'h0, "MEM-SB");
  	EGRESS_STATUS.set_bar(4'h2, "MEM-SB");
      EGRESS_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      EGRESS_STATUS.set_user_attribute("diag_reg", "0");
      EGRESS_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      EGRESS_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      EGRESS_STATUS.set_test_reg(0);
      if ( $test$plusargs("EGRESS_STATUS:dont_test") ) EGRESS_STATUS.set_test_reg(1'b0);
      if (!add_reg( EGRESS_STATUS )) begin
        `sla_error(get_name(), ("Could not add register EGRESS_STATUS"));
      end
   EGRESS_STATUS.SCH_P0_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P0_V"});
   EGRESS_STATUS.SCH_P1_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P1_V"});
   EGRESS_STATUS.SCH_P2_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P2_V"});
   EGRESS_STATUS.SCH_P3_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P3_V"});
   EGRESS_STATUS.SCH_P4_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P4_V"});
   EGRESS_STATUS.SCH_P5_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P5_V"});
   EGRESS_STATUS.P5_INT_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.P5_INT_V"});
   EGRESS_STATUS.P5_HCW_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.P5_HCW_V"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "WBUF_STATUS";
    `endif
    WBUF_STATUS = hqm_system_csr_bridge_WBUF_STATUS_reg::type_id::create("WBUF_STATUS", this);
    WBUF_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010B8, 32, 32'b00000000000001000000000000000000);
    WBUF_STATUS.set_space_addr("MSG", 28'h80010B8);
    WBUF_STATUS.set_space_addr("msg_bus_port", 'h21);
    WBUF_STATUS.set_space_addr("MEM-SB",28'h80010B8);
    WBUF_STATUS.set_space_addr("MEM", 28'h80010B8);
      WBUF_STATUS.set_space("MEM");
      WBUF_STATUS.set_msg_opcode("MEM-SB");
      WBUF_STATUS.set_fid(4'h0, "MEM-SB");
  	WBUF_STATUS.set_bar(4'h2, "MEM-SB");
      WBUF_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      WBUF_STATUS.set_user_attribute("diag_reg", "0");
      WBUF_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      WBUF_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      WBUF_STATUS.set_test_reg(0);
      if ( $test$plusargs("WBUF_STATUS:dont_test") ) WBUF_STATUS.set_test_reg(1'b0);
      if (!add_reg( WBUF_STATUS )) begin
        `sla_error(get_name(), ("Could not add register WBUF_STATUS"));
      end
   WBUF_STATUS.SCH_P0_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P0_V"});
   WBUF_STATUS.SCH_P1_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P1_V"});
   WBUF_STATUS.SCH_P2_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_V"});
   WBUF_STATUS.SCH_INT_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_INT_V"});
   WBUF_STATUS.SCH_HCW_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_HCW_V"});
   WBUF_STATUS.SCH_LDB.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_LDB"});
   WBUF_STATUS.SCH_BEAT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_BEAT"});
   WBUF_STATUS.SCH_CQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_CQ"});
   WBUF_STATUS.PH_FIFO_AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.PH_FIFO_AFULL"});
   WBUF_STATUS.PD_FIFO_AFULL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.PD_FIFO_AFULL"});
   WBUF_STATUS.SCH_SM_STATE.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_SM_STATE"});
   WBUF_STATUS.SCH_P2_HDR_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_HDR_V"});
   WBUF_STATUS.SCH_P2_DATA_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_DATA_V"});
   WBUF_STATUS.SCH_P2_INT_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_INT_V"});
   WBUF_STATUS.SCH_P2_SOP.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_SOP"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "WBUF_STATUS2";
    `endif
    WBUF_STATUS2 = hqm_system_csr_bridge_WBUF_STATUS2_reg::type_id::create("WBUF_STATUS2", this);
    WBUF_STATUS2.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010BC, 32, 32'b00000000000000000000000000000000);
    WBUF_STATUS2.set_space_addr("MSG", 28'h80010BC);
    WBUF_STATUS2.set_space_addr("msg_bus_port", 'h21);
    WBUF_STATUS2.set_space_addr("MEM-SB",28'h80010BC);
    WBUF_STATUS2.set_space_addr("MEM", 28'h80010BC);
      WBUF_STATUS2.set_space("MEM");
      WBUF_STATUS2.set_msg_opcode("MEM-SB");
      WBUF_STATUS2.set_fid(4'h0, "MEM-SB");
  	WBUF_STATUS2.set_bar(4'h2, "MEM-SB");
      WBUF_STATUS2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      WBUF_STATUS2.set_user_attribute("diag_reg", "0");
      WBUF_STATUS2.set_user_attribute("HqmIsFeatureReg", "1");
      WBUF_STATUS2.set_user_attribute("SubnetPortID", "8'h00");
      WBUF_STATUS2.set_test_reg(0);
      if ( $test$plusargs("WBUF_STATUS2:dont_test") ) WBUF_STATUS2.set_test_reg(1'b0);
      if (!add_reg( WBUF_STATUS2 )) begin
        `sla_error(get_name(), ("Could not add register WBUF_STATUS2"));
      end
   WBUF_STATUS2.ARB_REQS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_REQS"});
   WBUF_STATUS2.ARB_WINNER.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_WINNER"});
   WBUF_STATUS2.ARB_HOLD.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_HOLD"});
   WBUF_STATUS2.CQ_OCC_INT_BUSY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.CQ_OCC_INT_BUSY"});
   WBUF_STATUS2.OPT_DATA_VALID.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_DATA_VALID"});
   WBUF_STATUS2.OPT_ERR.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_ERR"});
   WBUF_STATUS2.OPT_IN_PROG.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_IN_PROG"});
   WBUF_STATUS2.OPT_IN_PROG_CQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_IN_PROG_CQ"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "WBUF_DEBUG";
    `endif
    WBUF_DEBUG = hqm_system_csr_bridge_WBUF_DEBUG_reg::type_id::create("WBUF_DEBUG", this);
    WBUF_DEBUG.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010C0, 32, 32'b00000000000000000000000000000000);
    WBUF_DEBUG.set_space_addr("MSG", 28'h80010C0);
    WBUF_DEBUG.set_space_addr("msg_bus_port", 'h21);
    WBUF_DEBUG.set_space_addr("MEM-SB",28'h80010C0);
    WBUF_DEBUG.set_space_addr("MEM", 28'h80010C0);
      WBUF_DEBUG.set_space("MEM");
      WBUF_DEBUG.set_msg_opcode("MEM-SB");
      WBUF_DEBUG.set_fid(4'h0, "MEM-SB");
  	WBUF_DEBUG.set_bar(4'h2, "MEM-SB");
      WBUF_DEBUG.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      WBUF_DEBUG.set_user_attribute("diag_reg", "0");
      WBUF_DEBUG.set_user_attribute("HqmIsFeatureReg", "1");
      WBUF_DEBUG.set_user_attribute("SubnetPortID", "8'h00");
      WBUF_DEBUG.set_test_reg(0);
      if ( $test$plusargs("WBUF_DEBUG:dont_test") ) WBUF_DEBUG.set_test_reg(1'b0);
      if (!add_reg( WBUF_DEBUG )) begin
        `sla_error(get_name(), ("Could not add register WBUF_DEBUG"));
      end
   WBUF_DEBUG.ARB_WINNER_Q.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER_Q"});
   WBUF_DEBUG.ARB_HOLD_Q.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_HOLD_Q"});
   WBUF_DEBUG.ARB_WINNER.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER"});
   WBUF_DEBUG.ARB_WINNER_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER_V"});
   WBUF_DEBUG.SCH_ARB_REQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_ARB_REQ"});
   WBUF_DEBUG.MSI_MSIX_ARB_REQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.MSI_MSIX_ARB_REQ"});
   WBUF_DEBUG.PDATA_FIFO_AFULL_Q.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.PDATA_FIFO_AFULL_Q"});
   WBUF_DEBUG.PHDR_FIFO_AFULL_Q.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.PHDR_FIFO_AFULL_Q"});
   WBUF_DEBUG.CQ_OCC_INT_BUSY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.CQ_OCC_INT_BUSY"});
   WBUF_DEBUG.SCH_DATA_LAST.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_LAST"});
   WBUF_DEBUG.SCH_DATA_FIRST.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_FIRST"});
   WBUF_DEBUG.SCH_DATA_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_V"});
   WBUF_DEBUG.SCH_HDR_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_HDR_V"});
   WBUF_DEBUG.SCH_P2_HDR_Q_EOP.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_EOP"});
   WBUF_DEBUG.SCH_P2_HDR_Q_SOP.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_SOP"});
   WBUF_DEBUG.SCH_P2_HDR_Q_INT_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_INT_V"});
   WBUF_DEBUG.SCH_P2_HDR_Q_DATA_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_DATA_V"});
   WBUF_DEBUG.SCH_P2_V_Q.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_V_Q"});
   WBUF_DEBUG.SCH_P2_LOAD.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_LOAD"});
   WBUF_DEBUG.SCH_P2_HOLD.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HOLD"});
   WBUF_DEBUG.SCH_P2_HDR_Q_VF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_VF"});
   WBUF_DEBUG.SCH_P2_HDR_Q_IS_PF.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_IS_PF"});
   WBUF_DEBUG.SCH_P2_HDR_Q_LDB.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_LDB"});
   WBUF_DEBUG.SCH_P2_HDR_Q_BEATS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_BEATS"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ROB_SYNDROME";
    `endif
    ROB_SYNDROME = hqm_system_csr_bridge_ROB_SYNDROME_reg::type_id::create("ROB_SYNDROME", this);
    ROB_SYNDROME.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010C4, 32, 32'b00000000000000000000000000000000);
    ROB_SYNDROME.set_space_addr("MSG", 28'h80010C4);
    ROB_SYNDROME.set_space_addr("msg_bus_port", 'h21);
    ROB_SYNDROME.set_space_addr("MEM-SB",28'h80010C4);
    ROB_SYNDROME.set_space_addr("MEM", 28'h80010C4);
      ROB_SYNDROME.set_space("MEM");
      ROB_SYNDROME.set_msg_opcode("MEM-SB");
      ROB_SYNDROME.set_fid(4'h0, "MEM-SB");
  	ROB_SYNDROME.set_bar(4'h2, "MEM-SB");
      ROB_SYNDROME.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      ROB_SYNDROME.set_user_attribute("diag_reg", "0");
      ROB_SYNDROME.set_user_attribute("HqmIsFeatureReg", "1");
      ROB_SYNDROME.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ROB_SYNDROME:dont_test") ) ROB_SYNDROME.set_test_reg(1'b0);
      if (!add_reg( ROB_SYNDROME )) begin
        `sla_error(get_name(), ("Could not add register ROB_SYNDROME"));
      end
   ROB_SYNDROME.ROB_V_CNT.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.ROB_V_CNT"});
   ROB_SYNDROME.CL_LAST.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CL_LAST"});
   ROB_SYNDROME.CLI.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CLI"});
   ROB_SYNDROME.CL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CL"});
   ROB_SYNDROME.PP.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.PP"});
   ROB_SYNDROME.PP_IS_LDB.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.PP_IS_LDB"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PHDR_DEBUG_0";
    `endif
    PHDR_DEBUG_0 = hqm_system_csr_bridge_PHDR_DEBUG_0_reg::type_id::create("PHDR_DEBUG_0", this);
    PHDR_DEBUG_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001100, 32, 32'b00000000000000000000000000000000);
    PHDR_DEBUG_0.set_space_addr("MSG", 28'h8001100);
    PHDR_DEBUG_0.set_space_addr("msg_bus_port", 'h21);
    PHDR_DEBUG_0.set_space_addr("MEM-SB",28'h8001100);
    PHDR_DEBUG_0.set_space_addr("MEM", 28'h8001100);
      PHDR_DEBUG_0.set_space("MEM");
      PHDR_DEBUG_0.set_msg_opcode("MEM-SB");
      PHDR_DEBUG_0.set_fid(4'h0, "MEM-SB");
  	PHDR_DEBUG_0.set_bar(4'h2, "MEM-SB");
      PHDR_DEBUG_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PHDR_DEBUG_0.set_user_attribute("diag_reg", "0");
      PHDR_DEBUG_0.set_user_attribute("HqmIsFeatureReg", "1");
      PHDR_DEBUG_0.set_user_attribute("SubnetPortID", "8'h00");
      PHDR_DEBUG_0.set_test_reg(0);
      if ( $test$plusargs("PHDR_DEBUG_0:dont_test") ) PHDR_DEBUG_0.set_test_reg(1'b0);
      if (!add_reg( PHDR_DEBUG_0 )) begin
        `sla_error(get_name(), ("Could not add register PHDR_DEBUG_0"));
      end
   PHDR_DEBUG_0.TC_SEL.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_0.TC_SEL"});
   PHDR_DEBUG_0.ADDR_31_2.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_0.ADDR_31_2"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PHDR_DEBUG_1";
    `endif
    PHDR_DEBUG_1 = hqm_system_csr_bridge_PHDR_DEBUG_1_reg::type_id::create("PHDR_DEBUG_1", this);
    PHDR_DEBUG_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001104, 32, 32'b00000000000000000000000000000000);
    PHDR_DEBUG_1.set_space_addr("MSG", 28'h8001104);
    PHDR_DEBUG_1.set_space_addr("msg_bus_port", 'h21);
    PHDR_DEBUG_1.set_space_addr("MEM-SB",28'h8001104);
    PHDR_DEBUG_1.set_space_addr("MEM", 28'h8001104);
      PHDR_DEBUG_1.set_space("MEM");
      PHDR_DEBUG_1.set_msg_opcode("MEM-SB");
      PHDR_DEBUG_1.set_fid(4'h0, "MEM-SB");
  	PHDR_DEBUG_1.set_bar(4'h2, "MEM-SB");
      PHDR_DEBUG_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PHDR_DEBUG_1.set_user_attribute("diag_reg", "0");
      PHDR_DEBUG_1.set_user_attribute("HqmIsFeatureReg", "1");
      PHDR_DEBUG_1.set_user_attribute("SubnetPortID", "8'h00");
      PHDR_DEBUG_1.set_test_reg(0);
      if ( $test$plusargs("PHDR_DEBUG_1:dont_test") ) PHDR_DEBUG_1.set_test_reg(1'b0);
      if (!add_reg( PHDR_DEBUG_1 )) begin
        `sla_error(get_name(), ("Could not add register PHDR_DEBUG_1"));
      end
   PHDR_DEBUG_1.ADDR_63_32.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_1.ADDR_63_32"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PHDR_DEBUG_2";
    `endif
    PHDR_DEBUG_2 = hqm_system_csr_bridge_PHDR_DEBUG_2_reg::type_id::create("PHDR_DEBUG_2", this);
    PHDR_DEBUG_2.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001108, 32, 32'b00000000000000000000000000000000);
    PHDR_DEBUG_2.set_space_addr("MSG", 28'h8001108);
    PHDR_DEBUG_2.set_space_addr("msg_bus_port", 'h21);
    PHDR_DEBUG_2.set_space_addr("MEM-SB",28'h8001108);
    PHDR_DEBUG_2.set_space_addr("MEM", 28'h8001108);
      PHDR_DEBUG_2.set_space("MEM");
      PHDR_DEBUG_2.set_msg_opcode("MEM-SB");
      PHDR_DEBUG_2.set_fid(4'h0, "MEM-SB");
  	PHDR_DEBUG_2.set_bar(4'h2, "MEM-SB");
      PHDR_DEBUG_2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PHDR_DEBUG_2.set_user_attribute("diag_reg", "0");
      PHDR_DEBUG_2.set_user_attribute("HqmIsFeatureReg", "1");
      PHDR_DEBUG_2.set_user_attribute("SubnetPortID", "8'h00");
      PHDR_DEBUG_2.set_test_reg(0);
      if ( $test$plusargs("PHDR_DEBUG_2:dont_test") ) PHDR_DEBUG_2.set_test_reg(1'b0);
      if (!add_reg( PHDR_DEBUG_2 )) begin
        `sla_error(get_name(), ("Could not add register PHDR_DEBUG_2"));
      end
   PHDR_DEBUG_2.LENGTH.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.LENGTH"});
   PHDR_DEBUG_2.SRC.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.SRC"});
   PHDR_DEBUG_2.NUM_HCWS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.NUM_HCWS"});
   PHDR_DEBUG_2.CQ.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.CQ"});
   PHDR_DEBUG_2.LDB.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.LDB"});
   PHDR_DEBUG_2.CQ_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.CQ_V"});
   PHDR_DEBUG_2.RO.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.RO"});
   PHDR_DEBUG_2.INVALID.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.INVALID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[0]";
    `endif
    HQM_PDATA_DEBUG[0] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[0]", this);
    HQM_PDATA_DEBUG[0].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001110, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[0].set_space_addr("MSG", 28'h8001110);
    HQM_PDATA_DEBUG[0].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[0].set_space_addr("MEM-SB",28'h8001110);
    HQM_PDATA_DEBUG[0].set_space_addr("MEM", 28'h8001110);
      HQM_PDATA_DEBUG[0].set_space("MEM");
      HQM_PDATA_DEBUG[0].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[0].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[0].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[0].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[0].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[0].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[0].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[0]:dont_test") ) HQM_PDATA_DEBUG[0].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[0] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[0]"));
      end
   HQM_PDATA_DEBUG[0].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[0].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[1]";
    `endif
    HQM_PDATA_DEBUG[1] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[1]", this);
    HQM_PDATA_DEBUG[1].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001114, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[1].set_space_addr("MSG", 28'h8001114);
    HQM_PDATA_DEBUG[1].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[1].set_space_addr("MEM-SB",28'h8001114);
    HQM_PDATA_DEBUG[1].set_space_addr("MEM", 28'h8001114);
      HQM_PDATA_DEBUG[1].set_space("MEM");
      HQM_PDATA_DEBUG[1].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[1].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[1].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[1].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[1].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[1].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[1].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[1]:dont_test") ) HQM_PDATA_DEBUG[1].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[1] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[1]"));
      end
   HQM_PDATA_DEBUG[1].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[1].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[2]";
    `endif
    HQM_PDATA_DEBUG[2] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[2]", this);
    HQM_PDATA_DEBUG[2].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[2].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001118, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[2].set_space_addr("MSG", 28'h8001118);
    HQM_PDATA_DEBUG[2].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[2].set_space_addr("MEM-SB",28'h8001118);
    HQM_PDATA_DEBUG[2].set_space_addr("MEM", 28'h8001118);
      HQM_PDATA_DEBUG[2].set_space("MEM");
      HQM_PDATA_DEBUG[2].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[2].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[2].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[2].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[2].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[2].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[2].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[2]:dont_test") ) HQM_PDATA_DEBUG[2].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[2] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[2]"));
      end
   HQM_PDATA_DEBUG[2].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[2].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[3]";
    `endif
    HQM_PDATA_DEBUG[3] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[3]", this);
    HQM_PDATA_DEBUG[3].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[3].set_cfg(16'h0, 16'h0, 16'h0, 28'h800111C, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[3].set_space_addr("MSG", 28'h800111C);
    HQM_PDATA_DEBUG[3].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[3].set_space_addr("MEM-SB",28'h800111C);
    HQM_PDATA_DEBUG[3].set_space_addr("MEM", 28'h800111C);
      HQM_PDATA_DEBUG[3].set_space("MEM");
      HQM_PDATA_DEBUG[3].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[3].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[3].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[3].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[3].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[3].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[3].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[3]:dont_test") ) HQM_PDATA_DEBUG[3].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[3] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[3]"));
      end
   HQM_PDATA_DEBUG[3].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[3].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[4]";
    `endif
    HQM_PDATA_DEBUG[4] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[4]", this);
    HQM_PDATA_DEBUG[4].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[4].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001120, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[4].set_space_addr("MSG", 28'h8001120);
    HQM_PDATA_DEBUG[4].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[4].set_space_addr("MEM-SB",28'h8001120);
    HQM_PDATA_DEBUG[4].set_space_addr("MEM", 28'h8001120);
      HQM_PDATA_DEBUG[4].set_space("MEM");
      HQM_PDATA_DEBUG[4].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[4].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[4].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[4].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[4].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[4].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[4].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[4]:dont_test") ) HQM_PDATA_DEBUG[4].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[4] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[4]"));
      end
   HQM_PDATA_DEBUG[4].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[4].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[5]";
    `endif
    HQM_PDATA_DEBUG[5] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[5]", this);
    HQM_PDATA_DEBUG[5].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[5].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001124, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[5].set_space_addr("MSG", 28'h8001124);
    HQM_PDATA_DEBUG[5].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[5].set_space_addr("MEM-SB",28'h8001124);
    HQM_PDATA_DEBUG[5].set_space_addr("MEM", 28'h8001124);
      HQM_PDATA_DEBUG[5].set_space("MEM");
      HQM_PDATA_DEBUG[5].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[5].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[5].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[5].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[5].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[5].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[5].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[5]:dont_test") ) HQM_PDATA_DEBUG[5].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[5] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[5]"));
      end
   HQM_PDATA_DEBUG[5].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[5].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[6]";
    `endif
    HQM_PDATA_DEBUG[6] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[6]", this);
    HQM_PDATA_DEBUG[6].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[6].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001128, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[6].set_space_addr("MSG", 28'h8001128);
    HQM_PDATA_DEBUG[6].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[6].set_space_addr("MEM-SB",28'h8001128);
    HQM_PDATA_DEBUG[6].set_space_addr("MEM", 28'h8001128);
      HQM_PDATA_DEBUG[6].set_space("MEM");
      HQM_PDATA_DEBUG[6].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[6].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[6].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[6].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[6].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[6].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[6].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[6]:dont_test") ) HQM_PDATA_DEBUG[6].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[6] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[6]"));
      end
   HQM_PDATA_DEBUG[6].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[6].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[7]";
    `endif
    HQM_PDATA_DEBUG[7] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[7]", this);
    HQM_PDATA_DEBUG[7].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[7].set_cfg(16'h0, 16'h0, 16'h0, 28'h800112C, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[7].set_space_addr("MSG", 28'h800112C);
    HQM_PDATA_DEBUG[7].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[7].set_space_addr("MEM-SB",28'h800112C);
    HQM_PDATA_DEBUG[7].set_space_addr("MEM", 28'h800112C);
      HQM_PDATA_DEBUG[7].set_space("MEM");
      HQM_PDATA_DEBUG[7].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[7].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[7].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[7].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[7].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[7].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[7].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[7]:dont_test") ) HQM_PDATA_DEBUG[7].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[7] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[7]"));
      end
   HQM_PDATA_DEBUG[7].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[7].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[8]";
    `endif
    HQM_PDATA_DEBUG[8] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[8]", this);
    HQM_PDATA_DEBUG[8].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[8].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001130, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[8].set_space_addr("MSG", 28'h8001130);
    HQM_PDATA_DEBUG[8].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[8].set_space_addr("MEM-SB",28'h8001130);
    HQM_PDATA_DEBUG[8].set_space_addr("MEM", 28'h8001130);
      HQM_PDATA_DEBUG[8].set_space("MEM");
      HQM_PDATA_DEBUG[8].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[8].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[8].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[8].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[8].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[8].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[8].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[8]:dont_test") ) HQM_PDATA_DEBUG[8].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[8] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[8]"));
      end
   HQM_PDATA_DEBUG[8].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[8].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[9]";
    `endif
    HQM_PDATA_DEBUG[9] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[9]", this);
    HQM_PDATA_DEBUG[9].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[9].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001134, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[9].set_space_addr("MSG", 28'h8001134);
    HQM_PDATA_DEBUG[9].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[9].set_space_addr("MEM-SB",28'h8001134);
    HQM_PDATA_DEBUG[9].set_space_addr("MEM", 28'h8001134);
      HQM_PDATA_DEBUG[9].set_space("MEM");
      HQM_PDATA_DEBUG[9].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[9].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[9].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[9].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[9].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[9].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[9].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[9]:dont_test") ) HQM_PDATA_DEBUG[9].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[9] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[9]"));
      end
   HQM_PDATA_DEBUG[9].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[9].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[10]";
    `endif
    HQM_PDATA_DEBUG[10] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[10]", this);
    HQM_PDATA_DEBUG[10].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[10].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001138, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[10].set_space_addr("MSG", 28'h8001138);
    HQM_PDATA_DEBUG[10].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[10].set_space_addr("MEM-SB",28'h8001138);
    HQM_PDATA_DEBUG[10].set_space_addr("MEM", 28'h8001138);
      HQM_PDATA_DEBUG[10].set_space("MEM");
      HQM_PDATA_DEBUG[10].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[10].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[10].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[10].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[10].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[10].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[10].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[10]:dont_test") ) HQM_PDATA_DEBUG[10].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[10] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[10]"));
      end
   HQM_PDATA_DEBUG[10].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[10].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[11]";
    `endif
    HQM_PDATA_DEBUG[11] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[11]", this);
    HQM_PDATA_DEBUG[11].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[11].set_cfg(16'h0, 16'h0, 16'h0, 28'h800113C, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[11].set_space_addr("MSG", 28'h800113C);
    HQM_PDATA_DEBUG[11].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[11].set_space_addr("MEM-SB",28'h800113C);
    HQM_PDATA_DEBUG[11].set_space_addr("MEM", 28'h800113C);
      HQM_PDATA_DEBUG[11].set_space("MEM");
      HQM_PDATA_DEBUG[11].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[11].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[11].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[11].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[11].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[11].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[11].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[11]:dont_test") ) HQM_PDATA_DEBUG[11].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[11] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[11]"));
      end
   HQM_PDATA_DEBUG[11].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[11].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[12]";
    `endif
    HQM_PDATA_DEBUG[12] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[12]", this);
    HQM_PDATA_DEBUG[12].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[12].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001140, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[12].set_space_addr("MSG", 28'h8001140);
    HQM_PDATA_DEBUG[12].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[12].set_space_addr("MEM-SB",28'h8001140);
    HQM_PDATA_DEBUG[12].set_space_addr("MEM", 28'h8001140);
      HQM_PDATA_DEBUG[12].set_space("MEM");
      HQM_PDATA_DEBUG[12].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[12].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[12].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[12].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[12].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[12].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[12].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[12]:dont_test") ) HQM_PDATA_DEBUG[12].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[12] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[12]"));
      end
   HQM_PDATA_DEBUG[12].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[12].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[13]";
    `endif
    HQM_PDATA_DEBUG[13] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[13]", this);
    HQM_PDATA_DEBUG[13].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[13].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001144, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[13].set_space_addr("MSG", 28'h8001144);
    HQM_PDATA_DEBUG[13].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[13].set_space_addr("MEM-SB",28'h8001144);
    HQM_PDATA_DEBUG[13].set_space_addr("MEM", 28'h8001144);
      HQM_PDATA_DEBUG[13].set_space("MEM");
      HQM_PDATA_DEBUG[13].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[13].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[13].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[13].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[13].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[13].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[13].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[13]:dont_test") ) HQM_PDATA_DEBUG[13].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[13] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[13]"));
      end
   HQM_PDATA_DEBUG[13].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[13].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[14]";
    `endif
    HQM_PDATA_DEBUG[14] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[14]", this);
    HQM_PDATA_DEBUG[14].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[14].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001148, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[14].set_space_addr("MSG", 28'h8001148);
    HQM_PDATA_DEBUG[14].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[14].set_space_addr("MEM-SB",28'h8001148);
    HQM_PDATA_DEBUG[14].set_space_addr("MEM", 28'h8001148);
      HQM_PDATA_DEBUG[14].set_space("MEM");
      HQM_PDATA_DEBUG[14].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[14].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[14].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[14].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[14].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[14].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[14].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[14]:dont_test") ) HQM_PDATA_DEBUG[14].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[14] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[14]"));
      end
   HQM_PDATA_DEBUG[14].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[14].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PDATA_DEBUG[15]";
    `endif
    HQM_PDATA_DEBUG[15] = hqm_system_csr_bridge_HQM_PDATA_DEBUG_reg::type_id::create("HQM_PDATA_DEBUG[15]", this);
    HQM_PDATA_DEBUG[15].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_PDATA_DEBUG[15].set_cfg(16'h0, 16'h0, 16'h0, 28'h800114C, 32, 32'b00000000000000000000000000000000);
    HQM_PDATA_DEBUG[15].set_space_addr("MSG", 28'h800114C);
    HQM_PDATA_DEBUG[15].set_space_addr("msg_bus_port", 'h21);
    HQM_PDATA_DEBUG[15].set_space_addr("MEM-SB",28'h800114C);
    HQM_PDATA_DEBUG[15].set_space_addr("MEM", 28'h800114C);
      HQM_PDATA_DEBUG[15].set_space("MEM");
      HQM_PDATA_DEBUG[15].set_msg_opcode("MEM-SB");
      HQM_PDATA_DEBUG[15].set_fid(4'h0, "MEM-SB");
  	HQM_PDATA_DEBUG[15].set_bar(4'h2, "MEM-SB");
      HQM_PDATA_DEBUG[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PDATA_DEBUG[15].set_user_attribute("diag_reg", "0");
      HQM_PDATA_DEBUG[15].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PDATA_DEBUG[15].set_user_attribute("SubnetPortID", "8'h00");
      HQM_PDATA_DEBUG[15].set_test_reg(0);
      if ( $test$plusargs("HQM_PDATA_DEBUG[15]:dont_test") ) HQM_PDATA_DEBUG[15].set_test_reg(1'b0);
      if (!add_reg( HQM_PDATA_DEBUG[15] )) begin
        `sla_error(get_name(), ("Could not add register HQM_PDATA_DEBUG[15]"));
      end
   HQM_PDATA_DEBUG[15].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG[15].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HCW_REQ_DEBUG";
    `endif
    HCW_REQ_DEBUG = hqm_system_csr_bridge_HCW_REQ_DEBUG_reg::type_id::create("HCW_REQ_DEBUG", this);
    HCW_REQ_DEBUG.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001150, 32, 32'b00000000000000000000000000000000);
    HCW_REQ_DEBUG.set_space_addr("MSG", 28'h8001150);
    HCW_REQ_DEBUG.set_space_addr("msg_bus_port", 'h21);
    HCW_REQ_DEBUG.set_space_addr("MEM-SB",28'h8001150);
    HCW_REQ_DEBUG.set_space_addr("MEM", 28'h8001150);
      HCW_REQ_DEBUG.set_space("MEM");
      HCW_REQ_DEBUG.set_msg_opcode("MEM-SB");
      HCW_REQ_DEBUG.set_fid(4'h0, "MEM-SB");
  	HCW_REQ_DEBUG.set_bar(4'h2, "MEM-SB");
      HCW_REQ_DEBUG.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HCW_REQ_DEBUG.set_user_attribute("diag_reg", "0");
      HCW_REQ_DEBUG.set_user_attribute("HqmIsFeatureReg", "1");
      HCW_REQ_DEBUG.set_user_attribute("SubnetPortID", "8'h00");
      HCW_REQ_DEBUG.set_test_reg(0);
      if ( $test$plusargs("HCW_REQ_DEBUG:dont_test") ) HCW_REQ_DEBUG.set_test_reg(1'b0);
      if (!add_reg( HCW_REQ_DEBUG )) begin
        `sla_error(get_name(), ("Could not add register HCW_REQ_DEBUG"));
      end
   HCW_REQ_DEBUG.PP.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PP"});
   HCW_REQ_DEBUG.QID.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.QID"});
   HCW_REQ_DEBUG.VAS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.VAS"});
   HCW_REQ_DEBUG.PP_IS_LDB.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PP_IS_LDB"});
   HCW_REQ_DEBUG.QE_IS_LDB.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.QE_IS_LDB"});
   HCW_REQ_DEBUG.INSERT_TS.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.INSERT_TS"});
   HCW_REQ_DEBUG.AO_V.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.AO_V"});
   HCW_REQ_DEBUG.PARITY.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PARITY"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_HCW_DATA_DEBUG[0]";
    `endif
    HQM_HCW_DATA_DEBUG[0] = hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg::type_id::create("HQM_HCW_DATA_DEBUG[0]", this);
    HQM_HCW_DATA_DEBUG[0].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_HCW_DATA_DEBUG[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001160, 32, 32'b00000000000000000000000000000000);
    HQM_HCW_DATA_DEBUG[0].set_space_addr("MSG", 28'h8001160);
    HQM_HCW_DATA_DEBUG[0].set_space_addr("msg_bus_port", 'h21);
    HQM_HCW_DATA_DEBUG[0].set_space_addr("MEM-SB",28'h8001160);
    HQM_HCW_DATA_DEBUG[0].set_space_addr("MEM", 28'h8001160);
      HQM_HCW_DATA_DEBUG[0].set_space("MEM");
      HQM_HCW_DATA_DEBUG[0].set_msg_opcode("MEM-SB");
      HQM_HCW_DATA_DEBUG[0].set_fid(4'h0, "MEM-SB");
  	HQM_HCW_DATA_DEBUG[0].set_bar(4'h2, "MEM-SB");
      HQM_HCW_DATA_DEBUG[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_HCW_DATA_DEBUG[0].set_user_attribute("diag_reg", "0");
      HQM_HCW_DATA_DEBUG[0].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_HCW_DATA_DEBUG[0].set_user_attribute("SubnetPortID", "8'h00");
      HQM_HCW_DATA_DEBUG[0].set_test_reg(0);
      if ( $test$plusargs("HQM_HCW_DATA_DEBUG[0]:dont_test") ) HQM_HCW_DATA_DEBUG[0].set_test_reg(1'b0);
      if (!add_reg( HQM_HCW_DATA_DEBUG[0] )) begin
        `sla_error(get_name(), ("Could not add register HQM_HCW_DATA_DEBUG[0]"));
      end
   HQM_HCW_DATA_DEBUG[0].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_HCW_DATA_DEBUG[0].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_HCW_DATA_DEBUG[1]";
    `endif
    HQM_HCW_DATA_DEBUG[1] = hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg::type_id::create("HQM_HCW_DATA_DEBUG[1]", this);
    HQM_HCW_DATA_DEBUG[1].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_HCW_DATA_DEBUG[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001164, 32, 32'b00000000000000000000000000000000);
    HQM_HCW_DATA_DEBUG[1].set_space_addr("MSG", 28'h8001164);
    HQM_HCW_DATA_DEBUG[1].set_space_addr("msg_bus_port", 'h21);
    HQM_HCW_DATA_DEBUG[1].set_space_addr("MEM-SB",28'h8001164);
    HQM_HCW_DATA_DEBUG[1].set_space_addr("MEM", 28'h8001164);
      HQM_HCW_DATA_DEBUG[1].set_space("MEM");
      HQM_HCW_DATA_DEBUG[1].set_msg_opcode("MEM-SB");
      HQM_HCW_DATA_DEBUG[1].set_fid(4'h0, "MEM-SB");
  	HQM_HCW_DATA_DEBUG[1].set_bar(4'h2, "MEM-SB");
      HQM_HCW_DATA_DEBUG[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_HCW_DATA_DEBUG[1].set_user_attribute("diag_reg", "0");
      HQM_HCW_DATA_DEBUG[1].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_HCW_DATA_DEBUG[1].set_user_attribute("SubnetPortID", "8'h00");
      HQM_HCW_DATA_DEBUG[1].set_test_reg(0);
      if ( $test$plusargs("HQM_HCW_DATA_DEBUG[1]:dont_test") ) HQM_HCW_DATA_DEBUG[1].set_test_reg(1'b0);
      if (!add_reg( HQM_HCW_DATA_DEBUG[1] )) begin
        `sla_error(get_name(), ("Could not add register HQM_HCW_DATA_DEBUG[1]"));
      end
   HQM_HCW_DATA_DEBUG[1].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_HCW_DATA_DEBUG[1].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_HCW_DATA_DEBUG[2]";
    `endif
    HQM_HCW_DATA_DEBUG[2] = hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg::type_id::create("HQM_HCW_DATA_DEBUG[2]", this);
    HQM_HCW_DATA_DEBUG[2].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_HCW_DATA_DEBUG[2].set_cfg(16'h0, 16'h0, 16'h0, 28'h8001168, 32, 32'b00000000000000000000000000000000);
    HQM_HCW_DATA_DEBUG[2].set_space_addr("MSG", 28'h8001168);
    HQM_HCW_DATA_DEBUG[2].set_space_addr("msg_bus_port", 'h21);
    HQM_HCW_DATA_DEBUG[2].set_space_addr("MEM-SB",28'h8001168);
    HQM_HCW_DATA_DEBUG[2].set_space_addr("MEM", 28'h8001168);
      HQM_HCW_DATA_DEBUG[2].set_space("MEM");
      HQM_HCW_DATA_DEBUG[2].set_msg_opcode("MEM-SB");
      HQM_HCW_DATA_DEBUG[2].set_fid(4'h0, "MEM-SB");
  	HQM_HCW_DATA_DEBUG[2].set_bar(4'h2, "MEM-SB");
      HQM_HCW_DATA_DEBUG[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_HCW_DATA_DEBUG[2].set_user_attribute("diag_reg", "0");
      HQM_HCW_DATA_DEBUG[2].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_HCW_DATA_DEBUG[2].set_user_attribute("SubnetPortID", "8'h00");
      HQM_HCW_DATA_DEBUG[2].set_test_reg(0);
      if ( $test$plusargs("HQM_HCW_DATA_DEBUG[2]:dont_test") ) HQM_HCW_DATA_DEBUG[2].set_test_reg(1'b0);
      if (!add_reg( HQM_HCW_DATA_DEBUG[2] )) begin
        `sla_error(get_name(), ("Could not add register HQM_HCW_DATA_DEBUG[2]"));
      end
   HQM_HCW_DATA_DEBUG[2].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_HCW_DATA_DEBUG[2].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_HCW_DATA_DEBUG[3]";
    `endif
    HQM_HCW_DATA_DEBUG[3] = hqm_system_csr_bridge_HQM_HCW_DATA_DEBUG_reg::type_id::create("HQM_HCW_DATA_DEBUG[3]", this);
    HQM_HCW_DATA_DEBUG[3].set_reset_signame("hqm_inp_gated_rst_n powergood_rst_b"); 
    HQM_HCW_DATA_DEBUG[3].set_cfg(16'h0, 16'h0, 16'h0, 28'h800116C, 32, 32'b00000000000000000000000000000000);
    HQM_HCW_DATA_DEBUG[3].set_space_addr("MSG", 28'h800116C);
    HQM_HCW_DATA_DEBUG[3].set_space_addr("msg_bus_port", 'h21);
    HQM_HCW_DATA_DEBUG[3].set_space_addr("MEM-SB",28'h800116C);
    HQM_HCW_DATA_DEBUG[3].set_space_addr("MEM", 28'h800116C);
      HQM_HCW_DATA_DEBUG[3].set_space("MEM");
      HQM_HCW_DATA_DEBUG[3].set_msg_opcode("MEM-SB");
      HQM_HCW_DATA_DEBUG[3].set_fid(4'h0, "MEM-SB");
  	HQM_HCW_DATA_DEBUG[3].set_bar(4'h2, "MEM-SB");
      HQM_HCW_DATA_DEBUG[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_HCW_DATA_DEBUG[3].set_user_attribute("diag_reg", "0");
      HQM_HCW_DATA_DEBUG[3].set_user_attribute("HqmIsFeatureReg", "1");
      HQM_HCW_DATA_DEBUG[3].set_user_attribute("SubnetPortID", "8'h00");
      HQM_HCW_DATA_DEBUG[3].set_test_reg(0);
      if ( $test$plusargs("HQM_HCW_DATA_DEBUG[3]:dont_test") ) HQM_HCW_DATA_DEBUG[3].set_test_reg(1'b0);
      if (!add_reg( HQM_HCW_DATA_DEBUG[3] )) begin
        `sla_error(get_name(), ("Could not add register HQM_HCW_DATA_DEBUG[3]"));
      end
   HQM_HCW_DATA_DEBUG[3].DATA.set_paths({"i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_HCW_DATA_DEBUG[3].DATA"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_CONFIGURATION0[0]";
    `endif
    AW_SMON_CONFIGURATION0[0] = hqm_system_csr_bridge_AW_SMON_CONFIGURATION0_reg::type_id::create("AW_SMON_CONFIGURATION0[0]", this);
    AW_SMON_CONFIGURATION0[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002000, 32, 32'b01000000000000000000000000000000);
    AW_SMON_CONFIGURATION0[0].set_space_addr("MSG", 28'h8002000);
    AW_SMON_CONFIGURATION0[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_CONFIGURATION0[0].set_space_addr("MEM-SB",28'h8002000);
    AW_SMON_CONFIGURATION0[0].set_space_addr("MEM", 28'h8002000);
      AW_SMON_CONFIGURATION0[0].set_space("MEM");
      AW_SMON_CONFIGURATION0[0].set_msg_opcode("MEM-SB");
      AW_SMON_CONFIGURATION0[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_CONFIGURATION0[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_CONFIGURATION0[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_CONFIGURATION0[0].set_user_attribute("diag_reg", "0");
      AW_SMON_CONFIGURATION0[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_CONFIGURATION0[0].set_user_attribute("SubnetPortID", "8'h00");
      AW_SMON_CONFIGURATION0[0].set_test_reg(0);
      if ( $test$plusargs("AW_SMON_CONFIGURATION0[0]:dont_test") ) AW_SMON_CONFIGURATION0[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_CONFIGURATION0[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_CONFIGURATION0[0]"));
      end
   AW_SMON_CONFIGURATION0[0].SMON_ENABLE.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[0:0]"});
   AW_SMON_CONFIGURATION0[0].SMON_ENABLE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON0_FUNCTION.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[6:4]"});
   AW_SMON_CONFIGURATION0[0].SMON0_FUNCTION.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[7:7]"});
   AW_SMON_CONFIGURATION0[0].SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON1_FUNCTION.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[10:8]"});
   AW_SMON_CONFIGURATION0[0].SMON1_FUNCTION.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[11:11]"});
   AW_SMON_CONFIGURATION0[0].SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON_MODE.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[15:12]"});
   AW_SMON_CONFIGURATION0[0].SMON_MODE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STOPCOUNTEROVFL.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[16:16]"});
   AW_SMON_CONFIGURATION0[0].STOPCOUNTEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].INTCOUNTEROVFL.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[17:17]"});
   AW_SMON_CONFIGURATION0[0].INTCOUNTEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STATCOUNTER0OVFL.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[18:18]"});
   AW_SMON_CONFIGURATION0[0].STATCOUNTER0OVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STATCOUNTER1OVFL.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[19:19]"});
   AW_SMON_CONFIGURATION0[0].STATCOUNTER1OVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STOPTIMEROVFL.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[20:20]"});
   AW_SMON_CONFIGURATION0[0].STOPTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].INTTIMEROVFL.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[21:21]"});
   AW_SMON_CONFIGURATION0[0].INTTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STATTIMEROVFL.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[22:22]"});
   AW_SMON_CONFIGURATION0[0].STATTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].TIMER_PRESCALE.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg0_q[28:24]"});
   AW_SMON_CONFIGURATION0[0].TIMER_PRESCALE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_CONFIGURATION1[0]";
    `endif
    AW_SMON_CONFIGURATION1[0] = hqm_system_csr_bridge_AW_SMON_CONFIGURATION1_reg::type_id::create("AW_SMON_CONFIGURATION1[0]", this);
    AW_SMON_CONFIGURATION1[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002004, 32, 32'b00000000000000000000000000000000);
    AW_SMON_CONFIGURATION1[0].set_space_addr("MSG", 28'h8002004);
    AW_SMON_CONFIGURATION1[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_CONFIGURATION1[0].set_space_addr("MEM-SB",28'h8002004);
    AW_SMON_CONFIGURATION1[0].set_space_addr("MEM", 28'h8002004);
      AW_SMON_CONFIGURATION1[0].set_space("MEM");
      AW_SMON_CONFIGURATION1[0].set_msg_opcode("MEM-SB");
      AW_SMON_CONFIGURATION1[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_CONFIGURATION1[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_CONFIGURATION1[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_CONFIGURATION1[0].set_user_attribute("diag_reg", "0");
      AW_SMON_CONFIGURATION1[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_CONFIGURATION1[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_CONFIGURATION1[0]:dont_test") ) AW_SMON_CONFIGURATION1[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_CONFIGURATION1[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_CONFIGURATION1[0]"));
      end
   AW_SMON_CONFIGURATION1[0].MODE0.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg1_q[7:0]"});
   AW_SMON_CONFIGURATION1[0].MODE0.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION1[0].MODE1.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg1_q[15:8]"});
   AW_SMON_CONFIGURATION1[0].MODE1.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION1[0].RSVD.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cfg1_q[31:16]"});
   AW_SMON_CONFIGURATION1[0].RSVD.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMPARE0[0]";
    `endif
    AW_SMON_COMPARE0[0] = hqm_system_csr_bridge_AW_SMON_COMPARE0_reg::type_id::create("AW_SMON_COMPARE0[0]", this);
    AW_SMON_COMPARE0[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002008, 32, 32'b00000000000000000000000000000000);
    AW_SMON_COMPARE0[0].set_space_addr("MSG", 28'h8002008);
    AW_SMON_COMPARE0[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMPARE0[0].set_space_addr("MEM-SB",28'h8002008);
    AW_SMON_COMPARE0[0].set_space_addr("MEM", 28'h8002008);
      AW_SMON_COMPARE0[0].set_space("MEM");
      AW_SMON_COMPARE0[0].set_msg_opcode("MEM-SB");
      AW_SMON_COMPARE0[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMPARE0[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMPARE0[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMPARE0[0].set_user_attribute("diag_reg", "0");
      AW_SMON_COMPARE0[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMPARE0[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMPARE0[0]:dont_test") ) AW_SMON_COMPARE0[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMPARE0[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMPARE0[0]"));
      end
   AW_SMON_COMPARE0[0].COMPARE0.set_paths({"i_hqm_system_core.i_smon0.reg_smon_comp0_q[31:0]"});
   AW_SMON_COMPARE0[0].COMPARE0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMPARE1[0]";
    `endif
    AW_SMON_COMPARE1[0] = hqm_system_csr_bridge_AW_SMON_COMPARE1_reg::type_id::create("AW_SMON_COMPARE1[0]", this);
    AW_SMON_COMPARE1[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h800200C, 32, 32'b00000000000000000000000000000000);
    AW_SMON_COMPARE1[0].set_space_addr("MSG", 28'h800200C);
    AW_SMON_COMPARE1[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMPARE1[0].set_space_addr("MEM-SB",28'h800200C);
    AW_SMON_COMPARE1[0].set_space_addr("MEM", 28'h800200C);
      AW_SMON_COMPARE1[0].set_space("MEM");
      AW_SMON_COMPARE1[0].set_msg_opcode("MEM-SB");
      AW_SMON_COMPARE1[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMPARE1[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMPARE1[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMPARE1[0].set_user_attribute("diag_reg", "0");
      AW_SMON_COMPARE1[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMPARE1[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMPARE1[0]:dont_test") ) AW_SMON_COMPARE1[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMPARE1[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMPARE1[0]"));
      end
   AW_SMON_COMPARE1[0].COMPARE1.set_paths({"i_hqm_system_core.i_smon0.reg_smon_comp1_q[31:0]"});
   AW_SMON_COMPARE1[0].COMPARE1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_ACTIVITYCOUNTER0[0]";
    `endif
    AW_SMON_ACTIVITYCOUNTER0[0] = hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg::type_id::create("AW_SMON_ACTIVITYCOUNTER0[0]", this);
    AW_SMON_ACTIVITYCOUNTER0[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002010, 32, 32'b00000000000000000000000000000000);
    AW_SMON_ACTIVITYCOUNTER0[0].set_space_addr("MSG", 28'h8002010);
    AW_SMON_ACTIVITYCOUNTER0[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_ACTIVITYCOUNTER0[0].set_space_addr("MEM-SB",28'h8002010);
    AW_SMON_ACTIVITYCOUNTER0[0].set_space_addr("MEM", 28'h8002010);
      AW_SMON_ACTIVITYCOUNTER0[0].set_space("MEM");
      AW_SMON_ACTIVITYCOUNTER0[0].set_msg_opcode("MEM-SB");
      AW_SMON_ACTIVITYCOUNTER0[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_ACTIVITYCOUNTER0[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_ACTIVITYCOUNTER0[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_ACTIVITYCOUNTER0[0].set_user_attribute("diag_reg", "0");
      AW_SMON_ACTIVITYCOUNTER0[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_ACTIVITYCOUNTER0[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_ACTIVITYCOUNTER0[0]:dont_test") ) AW_SMON_ACTIVITYCOUNTER0[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_ACTIVITYCOUNTER0[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_ACTIVITYCOUNTER0[0]"));
      end
   AW_SMON_ACTIVITYCOUNTER0[0].COUNTER0.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cnt0_q[31:0]"});
   AW_SMON_ACTIVITYCOUNTER0[0].COUNTER0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_ACTIVITYCOUNTER1[0]";
    `endif
    AW_SMON_ACTIVITYCOUNTER1[0] = hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg::type_id::create("AW_SMON_ACTIVITYCOUNTER1[0]", this);
    AW_SMON_ACTIVITYCOUNTER1[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002014, 32, 32'b00000000000000000000000000000000);
    AW_SMON_ACTIVITYCOUNTER1[0].set_space_addr("MSG", 28'h8002014);
    AW_SMON_ACTIVITYCOUNTER1[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_ACTIVITYCOUNTER1[0].set_space_addr("MEM-SB",28'h8002014);
    AW_SMON_ACTIVITYCOUNTER1[0].set_space_addr("MEM", 28'h8002014);
      AW_SMON_ACTIVITYCOUNTER1[0].set_space("MEM");
      AW_SMON_ACTIVITYCOUNTER1[0].set_msg_opcode("MEM-SB");
      AW_SMON_ACTIVITYCOUNTER1[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_ACTIVITYCOUNTER1[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_ACTIVITYCOUNTER1[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_ACTIVITYCOUNTER1[0].set_user_attribute("diag_reg", "0");
      AW_SMON_ACTIVITYCOUNTER1[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_ACTIVITYCOUNTER1[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_ACTIVITYCOUNTER1[0]:dont_test") ) AW_SMON_ACTIVITYCOUNTER1[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_ACTIVITYCOUNTER1[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_ACTIVITYCOUNTER1[0]"));
      end
   AW_SMON_ACTIVITYCOUNTER1[0].COUNTER1.set_paths({"i_hqm_system_core.i_smon0.reg_smon_cnt1_q[31:0]"});
   AW_SMON_ACTIVITYCOUNTER1[0].COUNTER1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_TIMER[0]";
    `endif
    AW_SMON_TIMER[0] = hqm_system_csr_bridge_AW_SMON_TIMER_reg::type_id::create("AW_SMON_TIMER[0]", this);
    AW_SMON_TIMER[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002018, 32, 32'b00000000000000000000000000000000);
    AW_SMON_TIMER[0].set_space_addr("MSG", 28'h8002018);
    AW_SMON_TIMER[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_TIMER[0].set_space_addr("MEM-SB",28'h8002018);
    AW_SMON_TIMER[0].set_space_addr("MEM", 28'h8002018);
      AW_SMON_TIMER[0].set_space("MEM");
      AW_SMON_TIMER[0].set_msg_opcode("MEM-SB");
      AW_SMON_TIMER[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_TIMER[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_TIMER[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_TIMER[0].set_user_attribute("diag_reg", "0");
      AW_SMON_TIMER[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_TIMER[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_TIMER[0]:dont_test") ) AW_SMON_TIMER[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_TIMER[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_TIMER[0]"));
      end
   AW_SMON_TIMER[0].TIMER_VAL.set_paths({"i_hqm_system_core.i_smon0.reg_smon_timer_q[31:0]"});
   AW_SMON_TIMER[0].TIMER_VAL.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_MAXIMUM_TIMER[0]";
    `endif
    AW_SMON_MAXIMUM_TIMER[0] = hqm_system_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg::type_id::create("AW_SMON_MAXIMUM_TIMER[0]", this);
    AW_SMON_MAXIMUM_TIMER[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h800201C, 32, 32'b00000000000000000000000000000000);
    AW_SMON_MAXIMUM_TIMER[0].set_space_addr("MSG", 28'h800201C);
    AW_SMON_MAXIMUM_TIMER[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_MAXIMUM_TIMER[0].set_space_addr("MEM-SB",28'h800201C);
    AW_SMON_MAXIMUM_TIMER[0].set_space_addr("MEM", 28'h800201C);
      AW_SMON_MAXIMUM_TIMER[0].set_space("MEM");
      AW_SMON_MAXIMUM_TIMER[0].set_msg_opcode("MEM-SB");
      AW_SMON_MAXIMUM_TIMER[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_MAXIMUM_TIMER[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_MAXIMUM_TIMER[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_MAXIMUM_TIMER[0].set_user_attribute("diag_reg", "0");
      AW_SMON_MAXIMUM_TIMER[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_MAXIMUM_TIMER[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_MAXIMUM_TIMER[0]:dont_test") ) AW_SMON_MAXIMUM_TIMER[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_MAXIMUM_TIMER[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_MAXIMUM_TIMER[0]"));
      end
   AW_SMON_MAXIMUM_TIMER[0].MAXVALUE.set_paths({"i_hqm_system_core.i_smon0.reg_smon_maxval_q[31:0]"});
   AW_SMON_MAXIMUM_TIMER[0].MAXVALUE.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMP_MASK0[0]";
    `endif
    AW_SMON_COMP_MASK0[0] = hqm_system_csr_bridge_AW_SMON_COMP_MASK0_reg::type_id::create("AW_SMON_COMP_MASK0[0]", this);
    AW_SMON_COMP_MASK0[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002020, 32, 32'b11111111111111111111111111111111);
    AW_SMON_COMP_MASK0[0].set_space_addr("MSG", 28'h8002020);
    AW_SMON_COMP_MASK0[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMP_MASK0[0].set_space_addr("MEM-SB",28'h8002020);
    AW_SMON_COMP_MASK0[0].set_space_addr("MEM", 28'h8002020);
      AW_SMON_COMP_MASK0[0].set_space("MEM");
      AW_SMON_COMP_MASK0[0].set_msg_opcode("MEM-SB");
      AW_SMON_COMP_MASK0[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMP_MASK0[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMP_MASK0[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMP_MASK0[0].set_user_attribute("diag_reg", "0");
      AW_SMON_COMP_MASK0[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMP_MASK0[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMP_MASK0[0]:dont_test") ) AW_SMON_COMP_MASK0[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMP_MASK0[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMP_MASK0[0]"));
      end
   AW_SMON_COMP_MASK0[0].COMP_MASK0.set_paths({"i_hqm_system_core.i_smon0.reg_smon_mask0_q[31:0]"});
   AW_SMON_COMP_MASK0[0].COMP_MASK0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMP_MASK1[0]";
    `endif
    AW_SMON_COMP_MASK1[0] = hqm_system_csr_bridge_AW_SMON_COMP_MASK1_reg::type_id::create("AW_SMON_COMP_MASK1[0]", this);
    AW_SMON_COMP_MASK1[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002024, 32, 32'b11111111111111111111111111111111);
    AW_SMON_COMP_MASK1[0].set_space_addr("MSG", 28'h8002024);
    AW_SMON_COMP_MASK1[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMP_MASK1[0].set_space_addr("MEM-SB",28'h8002024);
    AW_SMON_COMP_MASK1[0].set_space_addr("MEM", 28'h8002024);
      AW_SMON_COMP_MASK1[0].set_space("MEM");
      AW_SMON_COMP_MASK1[0].set_msg_opcode("MEM-SB");
      AW_SMON_COMP_MASK1[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMP_MASK1[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMP_MASK1[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMP_MASK1[0].set_user_attribute("diag_reg", "0");
      AW_SMON_COMP_MASK1[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMP_MASK1[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMP_MASK1[0]:dont_test") ) AW_SMON_COMP_MASK1[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMP_MASK1[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMP_MASK1[0]"));
      end
   AW_SMON_COMP_MASK1[0].COMP_MASK1.set_paths({"i_hqm_system_core.i_smon0.reg_smon_mask1_q[31:0]"});
   AW_SMON_COMP_MASK1[0].COMP_MASK1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_CONFIGURATION0[1]";
    `endif
    AW_SMON_CONFIGURATION0[1] = hqm_system_csr_bridge_AW_SMON_CONFIGURATION0_reg::type_id::create("AW_SMON_CONFIGURATION0[1]", this);
    AW_SMON_CONFIGURATION0[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002040, 32, 32'b01000000000000000000000000000000);
    AW_SMON_CONFIGURATION0[1].set_space_addr("MSG", 28'h8002040);
    AW_SMON_CONFIGURATION0[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_CONFIGURATION0[1].set_space_addr("MEM-SB",28'h8002040);
    AW_SMON_CONFIGURATION0[1].set_space_addr("MEM", 28'h8002040);
      AW_SMON_CONFIGURATION0[1].set_space("MEM");
      AW_SMON_CONFIGURATION0[1].set_msg_opcode("MEM-SB");
      AW_SMON_CONFIGURATION0[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_CONFIGURATION0[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_CONFIGURATION0[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_CONFIGURATION0[1].set_user_attribute("diag_reg", "0");
      AW_SMON_CONFIGURATION0[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_CONFIGURATION0[1].set_user_attribute("SubnetPortID", "8'h00");
      AW_SMON_CONFIGURATION0[1].set_test_reg(0);
      if ( $test$plusargs("AW_SMON_CONFIGURATION0[1]:dont_test") ) AW_SMON_CONFIGURATION0[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_CONFIGURATION0[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_CONFIGURATION0[1]"));
      end
   AW_SMON_CONFIGURATION0[1].SMON_ENABLE.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[0:0]"});
   AW_SMON_CONFIGURATION0[1].SMON_ENABLE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON0_FUNCTION.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[6:4]"});
   AW_SMON_CONFIGURATION0[1].SMON0_FUNCTION.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[7:7]"});
   AW_SMON_CONFIGURATION0[1].SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON1_FUNCTION.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[10:8]"});
   AW_SMON_CONFIGURATION0[1].SMON1_FUNCTION.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[11:11]"});
   AW_SMON_CONFIGURATION0[1].SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON_MODE.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[15:12]"});
   AW_SMON_CONFIGURATION0[1].SMON_MODE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STOPCOUNTEROVFL.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[16:16]"});
   AW_SMON_CONFIGURATION0[1].STOPCOUNTEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].INTCOUNTEROVFL.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[17:17]"});
   AW_SMON_CONFIGURATION0[1].INTCOUNTEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STATCOUNTER0OVFL.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[18:18]"});
   AW_SMON_CONFIGURATION0[1].STATCOUNTER0OVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STATCOUNTER1OVFL.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[19:19]"});
   AW_SMON_CONFIGURATION0[1].STATCOUNTER1OVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STOPTIMEROVFL.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[20:20]"});
   AW_SMON_CONFIGURATION0[1].STOPTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].INTTIMEROVFL.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[21:21]"});
   AW_SMON_CONFIGURATION0[1].INTTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STATTIMEROVFL.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[22:22]"});
   AW_SMON_CONFIGURATION0[1].STATTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].TIMER_PRESCALE.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg0_q[28:24]"});
   AW_SMON_CONFIGURATION0[1].TIMER_PRESCALE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_CONFIGURATION1[1]";
    `endif
    AW_SMON_CONFIGURATION1[1] = hqm_system_csr_bridge_AW_SMON_CONFIGURATION1_reg::type_id::create("AW_SMON_CONFIGURATION1[1]", this);
    AW_SMON_CONFIGURATION1[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002044, 32, 32'b00000000000000000000000000000000);
    AW_SMON_CONFIGURATION1[1].set_space_addr("MSG", 28'h8002044);
    AW_SMON_CONFIGURATION1[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_CONFIGURATION1[1].set_space_addr("MEM-SB",28'h8002044);
    AW_SMON_CONFIGURATION1[1].set_space_addr("MEM", 28'h8002044);
      AW_SMON_CONFIGURATION1[1].set_space("MEM");
      AW_SMON_CONFIGURATION1[1].set_msg_opcode("MEM-SB");
      AW_SMON_CONFIGURATION1[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_CONFIGURATION1[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_CONFIGURATION1[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_CONFIGURATION1[1].set_user_attribute("diag_reg", "0");
      AW_SMON_CONFIGURATION1[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_CONFIGURATION1[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_CONFIGURATION1[1]:dont_test") ) AW_SMON_CONFIGURATION1[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_CONFIGURATION1[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_CONFIGURATION1[1]"));
      end
   AW_SMON_CONFIGURATION1[1].MODE0.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg1_q[7:0]"});
   AW_SMON_CONFIGURATION1[1].MODE0.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION1[1].MODE1.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg1_q[15:8]"});
   AW_SMON_CONFIGURATION1[1].MODE1.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION1[1].RSVD.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cfg1_q[31:16]"});
   AW_SMON_CONFIGURATION1[1].RSVD.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMPARE0[1]";
    `endif
    AW_SMON_COMPARE0[1] = hqm_system_csr_bridge_AW_SMON_COMPARE0_reg::type_id::create("AW_SMON_COMPARE0[1]", this);
    AW_SMON_COMPARE0[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002048, 32, 32'b00000000000000000000000000000000);
    AW_SMON_COMPARE0[1].set_space_addr("MSG", 28'h8002048);
    AW_SMON_COMPARE0[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMPARE0[1].set_space_addr("MEM-SB",28'h8002048);
    AW_SMON_COMPARE0[1].set_space_addr("MEM", 28'h8002048);
      AW_SMON_COMPARE0[1].set_space("MEM");
      AW_SMON_COMPARE0[1].set_msg_opcode("MEM-SB");
      AW_SMON_COMPARE0[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMPARE0[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMPARE0[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMPARE0[1].set_user_attribute("diag_reg", "0");
      AW_SMON_COMPARE0[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMPARE0[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMPARE0[1]:dont_test") ) AW_SMON_COMPARE0[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMPARE0[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMPARE0[1]"));
      end
   AW_SMON_COMPARE0[1].COMPARE0.set_paths({"i_hqm_system_core.i_smon1.reg_smon_comp0_q[31:0]"});
   AW_SMON_COMPARE0[1].COMPARE0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMPARE1[1]";
    `endif
    AW_SMON_COMPARE1[1] = hqm_system_csr_bridge_AW_SMON_COMPARE1_reg::type_id::create("AW_SMON_COMPARE1[1]", this);
    AW_SMON_COMPARE1[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h800204C, 32, 32'b00000000000000000000000000000000);
    AW_SMON_COMPARE1[1].set_space_addr("MSG", 28'h800204C);
    AW_SMON_COMPARE1[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMPARE1[1].set_space_addr("MEM-SB",28'h800204C);
    AW_SMON_COMPARE1[1].set_space_addr("MEM", 28'h800204C);
      AW_SMON_COMPARE1[1].set_space("MEM");
      AW_SMON_COMPARE1[1].set_msg_opcode("MEM-SB");
      AW_SMON_COMPARE1[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMPARE1[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMPARE1[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMPARE1[1].set_user_attribute("diag_reg", "0");
      AW_SMON_COMPARE1[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMPARE1[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMPARE1[1]:dont_test") ) AW_SMON_COMPARE1[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMPARE1[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMPARE1[1]"));
      end
   AW_SMON_COMPARE1[1].COMPARE1.set_paths({"i_hqm_system_core.i_smon1.reg_smon_comp1_q[31:0]"});
   AW_SMON_COMPARE1[1].COMPARE1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_ACTIVITYCOUNTER0[1]";
    `endif
    AW_SMON_ACTIVITYCOUNTER0[1] = hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg::type_id::create("AW_SMON_ACTIVITYCOUNTER0[1]", this);
    AW_SMON_ACTIVITYCOUNTER0[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002050, 32, 32'b00000000000000000000000000000000);
    AW_SMON_ACTIVITYCOUNTER0[1].set_space_addr("MSG", 28'h8002050);
    AW_SMON_ACTIVITYCOUNTER0[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_ACTIVITYCOUNTER0[1].set_space_addr("MEM-SB",28'h8002050);
    AW_SMON_ACTIVITYCOUNTER0[1].set_space_addr("MEM", 28'h8002050);
      AW_SMON_ACTIVITYCOUNTER0[1].set_space("MEM");
      AW_SMON_ACTIVITYCOUNTER0[1].set_msg_opcode("MEM-SB");
      AW_SMON_ACTIVITYCOUNTER0[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_ACTIVITYCOUNTER0[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_ACTIVITYCOUNTER0[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_ACTIVITYCOUNTER0[1].set_user_attribute("diag_reg", "0");
      AW_SMON_ACTIVITYCOUNTER0[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_ACTIVITYCOUNTER0[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_ACTIVITYCOUNTER0[1]:dont_test") ) AW_SMON_ACTIVITYCOUNTER0[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_ACTIVITYCOUNTER0[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_ACTIVITYCOUNTER0[1]"));
      end
   AW_SMON_ACTIVITYCOUNTER0[1].COUNTER0.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cnt0_q[31:0]"});
   AW_SMON_ACTIVITYCOUNTER0[1].COUNTER0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_ACTIVITYCOUNTER1[1]";
    `endif
    AW_SMON_ACTIVITYCOUNTER1[1] = hqm_system_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg::type_id::create("AW_SMON_ACTIVITYCOUNTER1[1]", this);
    AW_SMON_ACTIVITYCOUNTER1[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002054, 32, 32'b00000000000000000000000000000000);
    AW_SMON_ACTIVITYCOUNTER1[1].set_space_addr("MSG", 28'h8002054);
    AW_SMON_ACTIVITYCOUNTER1[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_ACTIVITYCOUNTER1[1].set_space_addr("MEM-SB",28'h8002054);
    AW_SMON_ACTIVITYCOUNTER1[1].set_space_addr("MEM", 28'h8002054);
      AW_SMON_ACTIVITYCOUNTER1[1].set_space("MEM");
      AW_SMON_ACTIVITYCOUNTER1[1].set_msg_opcode("MEM-SB");
      AW_SMON_ACTIVITYCOUNTER1[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_ACTIVITYCOUNTER1[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_ACTIVITYCOUNTER1[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_ACTIVITYCOUNTER1[1].set_user_attribute("diag_reg", "0");
      AW_SMON_ACTIVITYCOUNTER1[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_ACTIVITYCOUNTER1[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_ACTIVITYCOUNTER1[1]:dont_test") ) AW_SMON_ACTIVITYCOUNTER1[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_ACTIVITYCOUNTER1[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_ACTIVITYCOUNTER1[1]"));
      end
   AW_SMON_ACTIVITYCOUNTER1[1].COUNTER1.set_paths({"i_hqm_system_core.i_smon1.reg_smon_cnt1_q[31:0]"});
   AW_SMON_ACTIVITYCOUNTER1[1].COUNTER1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_TIMER[1]";
    `endif
    AW_SMON_TIMER[1] = hqm_system_csr_bridge_AW_SMON_TIMER_reg::type_id::create("AW_SMON_TIMER[1]", this);
    AW_SMON_TIMER[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002058, 32, 32'b00000000000000000000000000000000);
    AW_SMON_TIMER[1].set_space_addr("MSG", 28'h8002058);
    AW_SMON_TIMER[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_TIMER[1].set_space_addr("MEM-SB",28'h8002058);
    AW_SMON_TIMER[1].set_space_addr("MEM", 28'h8002058);
      AW_SMON_TIMER[1].set_space("MEM");
      AW_SMON_TIMER[1].set_msg_opcode("MEM-SB");
      AW_SMON_TIMER[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_TIMER[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_TIMER[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_TIMER[1].set_user_attribute("diag_reg", "0");
      AW_SMON_TIMER[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_TIMER[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_TIMER[1]:dont_test") ) AW_SMON_TIMER[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_TIMER[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_TIMER[1]"));
      end
   AW_SMON_TIMER[1].TIMER_VAL.set_paths({"i_hqm_system_core.i_smon1.reg_smon_timer_q[31:0]"});
   AW_SMON_TIMER[1].TIMER_VAL.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_MAXIMUM_TIMER[1]";
    `endif
    AW_SMON_MAXIMUM_TIMER[1] = hqm_system_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg::type_id::create("AW_SMON_MAXIMUM_TIMER[1]", this);
    AW_SMON_MAXIMUM_TIMER[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h800205C, 32, 32'b00000000000000000000000000000000);
    AW_SMON_MAXIMUM_TIMER[1].set_space_addr("MSG", 28'h800205C);
    AW_SMON_MAXIMUM_TIMER[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_MAXIMUM_TIMER[1].set_space_addr("MEM-SB",28'h800205C);
    AW_SMON_MAXIMUM_TIMER[1].set_space_addr("MEM", 28'h800205C);
      AW_SMON_MAXIMUM_TIMER[1].set_space("MEM");
      AW_SMON_MAXIMUM_TIMER[1].set_msg_opcode("MEM-SB");
      AW_SMON_MAXIMUM_TIMER[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_MAXIMUM_TIMER[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_MAXIMUM_TIMER[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_MAXIMUM_TIMER[1].set_user_attribute("diag_reg", "0");
      AW_SMON_MAXIMUM_TIMER[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_MAXIMUM_TIMER[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_MAXIMUM_TIMER[1]:dont_test") ) AW_SMON_MAXIMUM_TIMER[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_MAXIMUM_TIMER[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_MAXIMUM_TIMER[1]"));
      end
   AW_SMON_MAXIMUM_TIMER[1].MAXVALUE.set_paths({"i_hqm_system_core.i_smon1.reg_smon_maxval_q[31:0]"});
   AW_SMON_MAXIMUM_TIMER[1].MAXVALUE.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMP_MASK0[1]";
    `endif
    AW_SMON_COMP_MASK0[1] = hqm_system_csr_bridge_AW_SMON_COMP_MASK0_reg::type_id::create("AW_SMON_COMP_MASK0[1]", this);
    AW_SMON_COMP_MASK0[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002060, 32, 32'b11111111111111111111111111111111);
    AW_SMON_COMP_MASK0[1].set_space_addr("MSG", 28'h8002060);
    AW_SMON_COMP_MASK0[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMP_MASK0[1].set_space_addr("MEM-SB",28'h8002060);
    AW_SMON_COMP_MASK0[1].set_space_addr("MEM", 28'h8002060);
      AW_SMON_COMP_MASK0[1].set_space("MEM");
      AW_SMON_COMP_MASK0[1].set_msg_opcode("MEM-SB");
      AW_SMON_COMP_MASK0[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMP_MASK0[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMP_MASK0[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMP_MASK0[1].set_user_attribute("diag_reg", "0");
      AW_SMON_COMP_MASK0[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMP_MASK0[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMP_MASK0[1]:dont_test") ) AW_SMON_COMP_MASK0[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMP_MASK0[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMP_MASK0[1]"));
      end
   AW_SMON_COMP_MASK0[1].COMP_MASK0.set_paths({"i_hqm_system_core.i_smon1.reg_smon_mask0_q[31:0]"});
   AW_SMON_COMP_MASK0[1].COMP_MASK0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMP_MASK1[1]";
    `endif
    AW_SMON_COMP_MASK1[1] = hqm_system_csr_bridge_AW_SMON_COMP_MASK1_reg::type_id::create("AW_SMON_COMP_MASK1[1]", this);
    AW_SMON_COMP_MASK1[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002064, 32, 32'b11111111111111111111111111111111);
    AW_SMON_COMP_MASK1[1].set_space_addr("MSG", 28'h8002064);
    AW_SMON_COMP_MASK1[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMP_MASK1[1].set_space_addr("MEM-SB",28'h8002064);
    AW_SMON_COMP_MASK1[1].set_space_addr("MEM", 28'h8002064);
      AW_SMON_COMP_MASK1[1].set_space("MEM");
      AW_SMON_COMP_MASK1[1].set_msg_opcode("MEM-SB");
      AW_SMON_COMP_MASK1[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMP_MASK1[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMP_MASK1[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMP_MASK1[1].set_user_attribute("diag_reg", "0");
      AW_SMON_COMP_MASK1[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMP_MASK1[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMP_MASK1[1]:dont_test") ) AW_SMON_COMP_MASK1[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMP_MASK1[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMP_MASK1[1]"));
      end
   AW_SMON_COMP_MASK1[1].COMP_MASK1.set_paths({"i_hqm_system_core.i_smon1.reg_smon_mask1_q[31:0]"});
   AW_SMON_COMP_MASK1[1].COMP_MASK1.set_logical_path("HQMID");

  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_system_csr_bridge_file

// ================================================


`endif
