///
///  INTEL CONFIDENTIAL
///
///  Copyright 2022 Intel Corporation All Rights Reserved.
///
///  The source code contained or described herein and all documents related
///  to the source code ("Material") are owned by Intel Corporation or its
///  suppliers or licensors. Title to the Material remains with Intel
///  Corporation or its suppliers and licensors. The Material contains trade
///  secrets and proprietary and confidential information of Intel or its
///  suppliers and licensors. The Material is protected by worldwide copyright
///  and trade secret laws and treaty provisions. No part of the Material may
///  be used, copied, reproduced, modified, published, uploaded, posted,
///  transmitted, distributed, or disclosed in any way without Intel's prior
///  express written permission.
///
///  No license under any patent, copyright, trade secret or other intellectual
///  property right is granted to or conferred upon you by disclosure or
///  delivery of the Materials, either expressly, by implication, inducement,
///  estoppel or otherwise. Any license under such intellectual property rights
///  must be express and approved by Intel in writing.
///

//                                                                             
// File:            hqm_sif_csr_pkg.vh                                         
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


// The NEBULON_RTLGEN_TEMPLATE env was: /p/hdk/rtl/proj_tools/nebulon_data/shdk74/20.35.01_gen3/generators/rtltemplates:/p/hdk/rtl/cad/x86-64_linux26/dt/nebulon/d20ww52.1/generators/rtltemplates:/p/hdk/rtl/cad/x86-64_linux26/dt/nebulon/d20ww52.1/generators/overhead_templates::/nfs/site/disks/crt_tools_007/dt/nebulon/d22ww21.1/generators/rtlgen_include_template:/nfs/site/disks/crt_tools_007/dt/nebulon/d22ww21.1/generators/rtlgen_pkg_template

`ifndef HQM_SIF_CSR_PKG_VH
`define HQM_SIF_CSR_PKG_VH

`include "rtlgen_include_hqm_sif_csr_map.vh"
`include "rtlgen_pkg_hqm_sif_csr_map.vh"

package hqm_sif_csr_pkg;

import rtlgen_pkg_hqm_sif_csr_map::*;

typedef cfg_req_32bit_t hqm_sif_csr_cr_req_t;
typedef cfg_ack_32bit_t hqm_sif_csr_cr_ack_t;
typedef struct packed {
   logic treg_trdy; 
   logic treg_cerr;   
   logic [31:0] treg_rdata;
} hqm_sif_csr_sb_ack_t;

// Comments were moved out of macro, due to collage failure
// treg_data 
//    Assumption1: (treg_trdy == 0 | treg_cerr == 0) => treg_rdata   
//    Assumption2: non relevant fields & reserved are also set to 0  
// treg_trdy
//    Regular case: All banks should return same treg_trdy value.    
//    Special case: Multi cycle read/write from handcoded memory.    
//               One bank hold ack until result is ready          
//    For this case all acks are AND                               
// treg_cerr
//    Assumption: treg_trdy=0 => treg_cerr=0                         
//    Regular case: return error when all banks return error         
//    Spacial case: when bank with multi cycle request, hold the     
//                request, its ack treg_trdy=0 && treg_cerr=0     
//               when bank with multi cycle ready, all banks      
//            return ack, since the request is hold for all banks 

`ifndef RTLGEN_MERGE_SB_ACK_LIST
`define RTLGEN_MERGE_SB_ACK_LIST(sb_ack_list,merged_sb_ack)         \
  always_comb begin                                                 \
     merged_sb_ack.treg_rdata = '0;                                 \
     for (int i=0; i<$size(sb_ack_list); i++) begin                 \
        merged_sb_ack.treg_rdata |= sb_ack_list[i].treg_rdata;      \
     end                                                            \
  end                                                               \
                                                                    \
  always_comb begin                                                 \
     merged_sb_ack.treg_trdy = '1;                                  \
     for (int i=0; i<$size(sb_ack_list); i = i + 1) begin           \
        merged_sb_ack.treg_trdy &= sb_ack_list[i].treg_trdy;        \
     end                                                            \
  end                                                               \
                                                                    \
  always_comb begin                                                 \
     merged_sb_ack.treg_cerr = '0;                                  \
     for (int i=0; i<$size(sb_ack_list); i = i + 1) begin           \
        merged_sb_ack.treg_cerr |= sb_ack_list[i].treg_cerr;        \
     end                                                            \
  end                                                               
`endif // RTLGEN_MERGE_SB_ACK_LIST                                  

// sai_successfull - acknowledge with zero value must have valid=1 and miss=0
// read/write valid - all acknowledges should have the same valid
// read/write miss - return miss when all banks return miss
`ifndef RTLGEN_MERGE_CR_ACK_LIST
`define RTLGEN_MERGE_CR_ACK_LIST(cr_ack_list,merged_cr_ack)       \
   always_comb begin                                              \
      merged_cr_ack.data = '0;                                    \
      for (int i=0; i<$size(cr_ack_list); i++) begin              \
         merged_cr_ack.data |= cr_ack_list[i].data;               \
      end                                                         \
   end                                                            \
   always_comb begin                                              \
      merged_cr_ack.read_valid = '1;                              \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin        \
         merged_cr_ack.read_valid &= cr_ack_list[i].read_valid;   \
      end                                                         \
   end                                                            \
   always_comb begin                                              \
      merged_cr_ack.write_valid = '1;                             \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin        \
         merged_cr_ack.write_valid &= cr_ack_list[i].write_valid; \
      end                                                         \
   end                                                            \
   always_comb begin                                                      \
      merged_cr_ack.sai_successfull = '1;                                 \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin                \
         merged_cr_ack.sai_successfull &= cr_ack_list[i].sai_successfull; \
      end                                                                 \
   end                                                                    \
   always_comb begin                                            \
      merged_cr_ack.read_miss = '1;                             \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin      \
         merged_cr_ack.read_miss &= cr_ack_list[i].read_miss;   \
      end                                                       \
   end                                                          \
   always_comb begin                                            \
      merged_cr_ack.write_miss = '1;                            \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin      \
         merged_cr_ack.write_miss &= cr_ack_list[i].write_miss; \
      end                                                       \
   end                                                          
`endif // RTLGEN_MERGE_CR_ACK_LIST                         

// ===================================================
// register structs

typedef struct packed {
    logic [31:0] SAI_MASK;  // RW
} HQM_CSR_CP_LO_t;

localparam HQM_CSR_CP_LO_REG_STRIDE = 48'h4;
localparam HQM_CSR_CP_LO_REG_ENTRIES = 1;
localparam [47:0] HQM_CSR_CP_LO_CR_ADDR = 48'h0;
localparam HQM_CSR_CP_LO_SIZE = 32;
localparam HQM_CSR_CP_LO_SAI_MASK_LO = 0;
localparam HQM_CSR_CP_LO_SAI_MASK_HI = 31;
localparam HQM_CSR_CP_LO_SAI_MASK_RESET = 32'h1000218;
localparam HQM_CSR_CP_LO_USEMASK = 32'hFFFFFFFF;
localparam HQM_CSR_CP_LO_RO_MASK = 32'h0;
localparam HQM_CSR_CP_LO_WO_MASK = 32'h0;
localparam HQM_CSR_CP_LO_RESET = 32'h1000218;

typedef struct packed {
    logic [31:0] SAI_MASK;  // RW
} HQM_CSR_CP_HI_t;

localparam HQM_CSR_CP_HI_REG_STRIDE = 48'h4;
localparam HQM_CSR_CP_HI_REG_ENTRIES = 1;
localparam [47:0] HQM_CSR_CP_HI_CR_ADDR = 48'h4;
localparam HQM_CSR_CP_HI_SIZE = 32;
localparam HQM_CSR_CP_HI_SAI_MASK_LO = 0;
localparam HQM_CSR_CP_HI_SAI_MASK_HI = 31;
localparam HQM_CSR_CP_HI_SAI_MASK_RESET = 32'h400;
localparam HQM_CSR_CP_HI_USEMASK = 32'hFFFFFFFF;
localparam HQM_CSR_CP_HI_RO_MASK = 32'h0;
localparam HQM_CSR_CP_HI_WO_MASK = 32'h0;
localparam HQM_CSR_CP_HI_RESET = 32'h400;

typedef struct packed {
    logic [31:0] SAI_MASK;  // RW
} HQM_CSR_RAC_LO_t;

localparam HQM_CSR_RAC_LO_REG_STRIDE = 48'h4;
localparam HQM_CSR_RAC_LO_REG_ENTRIES = 1;
localparam [47:0] HQM_CSR_RAC_LO_CR_ADDR = 48'h8;
localparam HQM_CSR_RAC_LO_SIZE = 32;
localparam HQM_CSR_RAC_LO_SAI_MASK_LO = 0;
localparam HQM_CSR_RAC_LO_SAI_MASK_HI = 31;
localparam HQM_CSR_RAC_LO_SAI_MASK_RESET = 32'hffffffff;
localparam HQM_CSR_RAC_LO_USEMASK = 32'hFFFFFFFF;
localparam HQM_CSR_RAC_LO_RO_MASK = 32'h0;
localparam HQM_CSR_RAC_LO_WO_MASK = 32'h0;
localparam HQM_CSR_RAC_LO_RESET = 32'hFFFFFFFF;

typedef struct packed {
    logic [31:0] SAI_MASK;  // RW
} HQM_CSR_RAC_HI_t;

localparam HQM_CSR_RAC_HI_REG_STRIDE = 48'h4;
localparam HQM_CSR_RAC_HI_REG_ENTRIES = 1;
localparam [47:0] HQM_CSR_RAC_HI_CR_ADDR = 48'hC;
localparam HQM_CSR_RAC_HI_SIZE = 32;
localparam HQM_CSR_RAC_HI_SAI_MASK_LO = 0;
localparam HQM_CSR_RAC_HI_SAI_MASK_HI = 31;
localparam HQM_CSR_RAC_HI_SAI_MASK_RESET = 32'hffffffff;
localparam HQM_CSR_RAC_HI_USEMASK = 32'hFFFFFFFF;
localparam HQM_CSR_RAC_HI_RO_MASK = 32'h0;
localparam HQM_CSR_RAC_HI_WO_MASK = 32'h0;
localparam HQM_CSR_RAC_HI_RESET = 32'hFFFFFFFF;

typedef struct packed {
    logic [31:0] SAI_MASK;  // RW
} HQM_CSR_WAC_LO_t;

localparam HQM_CSR_WAC_LO_REG_STRIDE = 48'h4;
localparam HQM_CSR_WAC_LO_REG_ENTRIES = 1;
localparam [47:0] HQM_CSR_WAC_LO_CR_ADDR = 48'h10;
localparam HQM_CSR_WAC_LO_SIZE = 32;
localparam HQM_CSR_WAC_LO_SAI_MASK_LO = 0;
localparam HQM_CSR_WAC_LO_SAI_MASK_HI = 31;
localparam HQM_CSR_WAC_LO_SAI_MASK_RESET = 32'h300021f;
localparam HQM_CSR_WAC_LO_USEMASK = 32'hFFFFFFFF;
localparam HQM_CSR_WAC_LO_RO_MASK = 32'h0;
localparam HQM_CSR_WAC_LO_WO_MASK = 32'h0;
localparam HQM_CSR_WAC_LO_RESET = 32'h300021F;

typedef struct packed {
    logic [31:0] SAI_MASK;  // RW
} HQM_CSR_WAC_HI_t;

localparam HQM_CSR_WAC_HI_REG_STRIDE = 48'h4;
localparam HQM_CSR_WAC_HI_REG_ENTRIES = 1;
localparam [47:0] HQM_CSR_WAC_HI_CR_ADDR = 48'h14;
localparam HQM_CSR_WAC_HI_SIZE = 32;
localparam HQM_CSR_WAC_HI_SAI_MASK_LO = 0;
localparam HQM_CSR_WAC_HI_SAI_MASK_HI = 31;
localparam HQM_CSR_WAC_HI_SAI_MASK_RESET = 32'h20000c00;
localparam HQM_CSR_WAC_HI_USEMASK = 32'hFFFFFFFF;
localparam HQM_CSR_WAC_HI_RO_MASK = 32'h0;
localparam HQM_CSR_WAC_HI_WO_MASK = 32'h0;
localparam HQM_CSR_WAC_HI_RESET = 32'h20000C00;

typedef struct packed {
    logic [24:0] reserved0;  // RSVD
    logic  [2:0] IDLE_DLY;  // RW
    logic  [3:0] SIF_CON_DLY;  // RW
} SIF_CTL_t;

localparam SIF_CTL_REG_STRIDE = 48'h4;
localparam SIF_CTL_REG_ENTRIES = 1;
localparam [47:0] SIF_CTL_CR_ADDR = 48'hD0;
localparam SIF_CTL_SIZE = 32;
localparam SIF_CTL_IDLE_DLY_LO = 4;
localparam SIF_CTL_IDLE_DLY_HI = 6;
localparam SIF_CTL_IDLE_DLY_RESET = 3'h0;
localparam SIF_CTL_SIF_CON_DLY_LO = 0;
localparam SIF_CTL_SIF_CON_DLY_HI = 3;
localparam SIF_CTL_SIF_CON_DLY_RESET = 4'h0;
localparam SIF_CTL_USEMASK = 32'h7F;
localparam SIF_CTL_RO_MASK = 32'h0;
localparam SIF_CTL_WO_MASK = 32'h0;
localparam SIF_CTL_RESET = 32'h0;

typedef struct packed {
    logic  [0:0] reserved0;  // RSVD
    logic  [2:0] VC7_MAP;  // RW
    logic  [0:0] reserved1;  // RSVD
    logic  [2:0] VC6_MAP;  // RW
    logic  [0:0] reserved2;  // RSVD
    logic  [2:0] VC5_MAP;  // RW
    logic  [0:0] reserved3;  // RSVD
    logic  [2:0] VC4_MAP;  // RW
    logic  [0:0] reserved4;  // RSVD
    logic  [2:0] VC3_MAP;  // RW
    logic  [0:0] reserved5;  // RSVD
    logic  [2:0] VC2_MAP;  // RW
    logic  [0:0] reserved6;  // RSVD
    logic  [2:0] VC1_MAP;  // RW
    logic  [0:0] reserved7;  // RSVD
    logic  [2:0] VC0_MAP;  // RW
} SIF_VC_RXMAP_t;

localparam SIF_VC_RXMAP_REG_STRIDE = 48'h4;
localparam SIF_VC_RXMAP_REG_ENTRIES = 1;
localparam [47:0] SIF_VC_RXMAP_CR_ADDR = 48'hD4;
localparam SIF_VC_RXMAP_SIZE = 32;
localparam SIF_VC_RXMAP_VC7_MAP_LO = 28;
localparam SIF_VC_RXMAP_VC7_MAP_HI = 30;
localparam SIF_VC_RXMAP_VC7_MAP_RESET = 3'h0;
localparam SIF_VC_RXMAP_VC6_MAP_LO = 24;
localparam SIF_VC_RXMAP_VC6_MAP_HI = 26;
localparam SIF_VC_RXMAP_VC6_MAP_RESET = 3'h0;
localparam SIF_VC_RXMAP_VC5_MAP_LO = 20;
localparam SIF_VC_RXMAP_VC5_MAP_HI = 22;
localparam SIF_VC_RXMAP_VC5_MAP_RESET = 3'h0;
localparam SIF_VC_RXMAP_VC4_MAP_LO = 16;
localparam SIF_VC_RXMAP_VC4_MAP_HI = 18;
localparam SIF_VC_RXMAP_VC4_MAP_RESET = 3'h0;
localparam SIF_VC_RXMAP_VC3_MAP_LO = 12;
localparam SIF_VC_RXMAP_VC3_MAP_HI = 14;
localparam SIF_VC_RXMAP_VC3_MAP_RESET = 3'h1;
localparam SIF_VC_RXMAP_VC2_MAP_LO = 8;
localparam SIF_VC_RXMAP_VC2_MAP_HI = 10;
localparam SIF_VC_RXMAP_VC2_MAP_RESET = 3'h2;
localparam SIF_VC_RXMAP_VC1_MAP_LO = 4;
localparam SIF_VC_RXMAP_VC1_MAP_HI = 6;
localparam SIF_VC_RXMAP_VC1_MAP_RESET = 3'h0;
localparam SIF_VC_RXMAP_VC0_MAP_LO = 0;
localparam SIF_VC_RXMAP_VC0_MAP_HI = 2;
localparam SIF_VC_RXMAP_VC0_MAP_RESET = 3'h0;
localparam SIF_VC_RXMAP_USEMASK = 32'h77777777;
localparam SIF_VC_RXMAP_RO_MASK = 32'h0;
localparam SIF_VC_RXMAP_WO_MASK = 32'h0;
localparam SIF_VC_RXMAP_RESET = 32'h1200;

typedef struct packed {
    logic  [0:0] reserved0;  // RSVD
    logic  [2:0] VC7_MAP;  // RW
    logic  [0:0] reserved1;  // RSVD
    logic  [2:0] VC6_MAP;  // RW
    logic  [0:0] reserved2;  // RSVD
    logic  [2:0] VC5_MAP;  // RW
    logic  [0:0] reserved3;  // RSVD
    logic  [2:0] VC4_MAP;  // RW
    logic  [0:0] reserved4;  // RSVD
    logic  [2:0] VC3_MAP;  // RW
    logic  [0:0] reserved5;  // RSVD
    logic  [2:0] VC2_MAP;  // RW
    logic  [0:0] reserved6;  // RSVD
    logic  [2:0] VC1_MAP;  // RW
    logic  [0:0] reserved7;  // RSVD
    logic  [2:0] VC0_MAP;  // RW
} SIF_VC_TXMAP_t;

localparam SIF_VC_TXMAP_REG_STRIDE = 48'h4;
localparam SIF_VC_TXMAP_REG_ENTRIES = 1;
localparam [47:0] SIF_VC_TXMAP_CR_ADDR = 48'hD8;
localparam SIF_VC_TXMAP_SIZE = 32;
localparam SIF_VC_TXMAP_VC7_MAP_LO = 28;
localparam SIF_VC_TXMAP_VC7_MAP_HI = 30;
localparam SIF_VC_TXMAP_VC7_MAP_RESET = 3'h0;
localparam SIF_VC_TXMAP_VC6_MAP_LO = 24;
localparam SIF_VC_TXMAP_VC6_MAP_HI = 26;
localparam SIF_VC_TXMAP_VC6_MAP_RESET = 3'h0;
localparam SIF_VC_TXMAP_VC5_MAP_LO = 20;
localparam SIF_VC_TXMAP_VC5_MAP_HI = 22;
localparam SIF_VC_TXMAP_VC5_MAP_RESET = 3'h0;
localparam SIF_VC_TXMAP_VC4_MAP_LO = 16;
localparam SIF_VC_TXMAP_VC4_MAP_HI = 18;
localparam SIF_VC_TXMAP_VC4_MAP_RESET = 3'h0;
localparam SIF_VC_TXMAP_VC3_MAP_LO = 12;
localparam SIF_VC_TXMAP_VC3_MAP_HI = 14;
localparam SIF_VC_TXMAP_VC3_MAP_RESET = 3'h0;
localparam SIF_VC_TXMAP_VC2_MAP_LO = 8;
localparam SIF_VC_TXMAP_VC2_MAP_HI = 10;
localparam SIF_VC_TXMAP_VC2_MAP_RESET = 3'h2;
localparam SIF_VC_TXMAP_VC1_MAP_LO = 4;
localparam SIF_VC_TXMAP_VC1_MAP_HI = 6;
localparam SIF_VC_TXMAP_VC1_MAP_RESET = 3'h3;
localparam SIF_VC_TXMAP_VC0_MAP_LO = 0;
localparam SIF_VC_TXMAP_VC0_MAP_HI = 2;
localparam SIF_VC_TXMAP_VC0_MAP_RESET = 3'h0;
localparam SIF_VC_TXMAP_USEMASK = 32'h77777777;
localparam SIF_VC_TXMAP_RO_MASK = 32'h0;
localparam SIF_VC_TXMAP_WO_MASK = 32'h0;
localparam SIF_VC_TXMAP_RESET = 32'h230;

typedef struct packed {
    logic [28:0] reserved0;  // RSVD
    logic  [0:0] DPERROR;  // RW/1C/V
    logic  [0:0] HDRERROR;  // RW/1C/V
    logic  [0:0] BAD_RESULT;  // RW/1C/V
} DEVTLB_ATS_ERR_t;

localparam DEVTLB_ATS_ERR_REG_STRIDE = 48'h4;
localparam DEVTLB_ATS_ERR_REG_ENTRIES = 1;
localparam [47:0] DEVTLB_ATS_ERR_CR_ADDR = 48'hE0;
localparam DEVTLB_ATS_ERR_SIZE = 32;
localparam DEVTLB_ATS_ERR_DPERROR_LO = 2;
localparam DEVTLB_ATS_ERR_DPERROR_HI = 2;
localparam DEVTLB_ATS_ERR_DPERROR_RESET = 1'b0;
localparam DEVTLB_ATS_ERR_HDRERROR_LO = 1;
localparam DEVTLB_ATS_ERR_HDRERROR_HI = 1;
localparam DEVTLB_ATS_ERR_HDRERROR_RESET = 1'b0;
localparam DEVTLB_ATS_ERR_BAD_RESULT_LO = 0;
localparam DEVTLB_ATS_ERR_BAD_RESULT_HI = 0;
localparam DEVTLB_ATS_ERR_BAD_RESULT_RESET = 1'b0;
localparam DEVTLB_ATS_ERR_USEMASK = 32'h7;
localparam DEVTLB_ATS_ERR_RO_MASK = 32'h0;
localparam DEVTLB_ATS_ERR_WO_MASK = 32'h0;
localparam DEVTLB_ATS_ERR_RESET = 32'h0;

typedef struct packed {
    logic [21:0] reserved0;  // RSVD
    logic  [0:0] DEVTLB_ATS_ERROR;  // RW/1C/V
    logic  [0:0] CPL_ERROR;  // RW/1C/V
    logic  [0:0] RF_IPAR_ERROR;  // RW/1C/V
    logic  [0:0] CFGM_TARGET_ERR;  // RW/1C/V
    logic  [0:0] SIF_PARITY_ERR;  // RW/1C/V
    logic  [0:0] RI_PARITY_ERR;  // RW/1C/V
    logic  [0:0] FIFO_OVERFLOW;  // RW/1C/V
    logic  [0:0] FIFO_UNDERFLOW;  // RW/1C/V
    logic  [0:0] SB_EP_PARITY_ERR;  // RW/1C/V
    logic  [0:0] TIMEOUT;  // RW/1C/V
} SIF_ALARM_ERR_t;

localparam SIF_ALARM_ERR_REG_STRIDE = 48'h4;
localparam SIF_ALARM_ERR_REG_ENTRIES = 1;
localparam [47:0] SIF_ALARM_ERR_CR_ADDR = 48'hE4;
localparam SIF_ALARM_ERR_SIZE = 32;
localparam SIF_ALARM_ERR_DEVTLB_ATS_ERROR_LO = 9;
localparam SIF_ALARM_ERR_DEVTLB_ATS_ERROR_HI = 9;
localparam SIF_ALARM_ERR_DEVTLB_ATS_ERROR_RESET = 1'b0;
localparam SIF_ALARM_ERR_CPL_ERROR_LO = 8;
localparam SIF_ALARM_ERR_CPL_ERROR_HI = 8;
localparam SIF_ALARM_ERR_CPL_ERROR_RESET = 1'b0;
localparam SIF_ALARM_ERR_RF_IPAR_ERROR_LO = 7;
localparam SIF_ALARM_ERR_RF_IPAR_ERROR_HI = 7;
localparam SIF_ALARM_ERR_RF_IPAR_ERROR_RESET = 1'b0;
localparam SIF_ALARM_ERR_CFGM_TARGET_ERR_LO = 6;
localparam SIF_ALARM_ERR_CFGM_TARGET_ERR_HI = 6;
localparam SIF_ALARM_ERR_CFGM_TARGET_ERR_RESET = 1'b0;
localparam SIF_ALARM_ERR_SIF_PARITY_ERR_LO = 5;
localparam SIF_ALARM_ERR_SIF_PARITY_ERR_HI = 5;
localparam SIF_ALARM_ERR_SIF_PARITY_ERR_RESET = 1'b0;
localparam SIF_ALARM_ERR_RI_PARITY_ERR_LO = 4;
localparam SIF_ALARM_ERR_RI_PARITY_ERR_HI = 4;
localparam SIF_ALARM_ERR_RI_PARITY_ERR_RESET = 1'b0;
localparam SIF_ALARM_ERR_FIFO_OVERFLOW_LO = 3;
localparam SIF_ALARM_ERR_FIFO_OVERFLOW_HI = 3;
localparam SIF_ALARM_ERR_FIFO_OVERFLOW_RESET = 1'b0;
localparam SIF_ALARM_ERR_FIFO_UNDERFLOW_LO = 2;
localparam SIF_ALARM_ERR_FIFO_UNDERFLOW_HI = 2;
localparam SIF_ALARM_ERR_FIFO_UNDERFLOW_RESET = 1'b0;
localparam SIF_ALARM_ERR_SB_EP_PARITY_ERR_LO = 1;
localparam SIF_ALARM_ERR_SB_EP_PARITY_ERR_HI = 1;
localparam SIF_ALARM_ERR_SB_EP_PARITY_ERR_RESET = 1'b0;
localparam SIF_ALARM_ERR_TIMEOUT_LO = 0;
localparam SIF_ALARM_ERR_TIMEOUT_HI = 0;
localparam SIF_ALARM_ERR_TIMEOUT_RESET = 1'b0;
localparam SIF_ALARM_ERR_USEMASK = 32'h3FF;
localparam SIF_ALARM_ERR_RO_MASK = 32'h0;
localparam SIF_ALARM_ERR_WO_MASK = 32'h0;
localparam SIF_ALARM_ERR_RESET = 32'h0;

typedef struct packed {
    logic [22:0] reserved0;  // RSVD
    logic  [0:0] CBD_HDR_PERR;  // RW/1C/V
    logic  [0:0] CBD_DATA_PERR;  // RW/1C/V
    logic  [0:0] HCW_DATA_PERR;  // RW/1C/V
    logic  [0:0] PH_FIFO_SCREAM;  // RW/1C/V
    logic  [0:0] PH_FIFO_PERR;  // RW/1C/V
    logic  [0:0] PD_FIFO_PERR;  // RW/1C/V
    logic  [0:0] NPH_FIFO_SCREAM;  // RW/1C/V
    logic  [0:0] NPH_FIFO_PERR;  // RW/1C/V
    logic  [0:0] NPD_FIFO_PERR;  // RW/1C/V
} RI_PARITY_ERR_t;

localparam RI_PARITY_ERR_REG_STRIDE = 48'h4;
localparam RI_PARITY_ERR_REG_ENTRIES = 1;
localparam [47:0] RI_PARITY_ERR_CR_ADDR = 48'hE8;
localparam RI_PARITY_ERR_SIZE = 32;
localparam RI_PARITY_ERR_CBD_HDR_PERR_LO = 8;
localparam RI_PARITY_ERR_CBD_HDR_PERR_HI = 8;
localparam RI_PARITY_ERR_CBD_HDR_PERR_RESET = 1'b0;
localparam RI_PARITY_ERR_CBD_DATA_PERR_LO = 7;
localparam RI_PARITY_ERR_CBD_DATA_PERR_HI = 7;
localparam RI_PARITY_ERR_CBD_DATA_PERR_RESET = 1'b0;
localparam RI_PARITY_ERR_HCW_DATA_PERR_LO = 6;
localparam RI_PARITY_ERR_HCW_DATA_PERR_HI = 6;
localparam RI_PARITY_ERR_HCW_DATA_PERR_RESET = 1'b0;
localparam RI_PARITY_ERR_PH_FIFO_SCREAM_LO = 5;
localparam RI_PARITY_ERR_PH_FIFO_SCREAM_HI = 5;
localparam RI_PARITY_ERR_PH_FIFO_SCREAM_RESET = 1'b0;
localparam RI_PARITY_ERR_PH_FIFO_PERR_LO = 4;
localparam RI_PARITY_ERR_PH_FIFO_PERR_HI = 4;
localparam RI_PARITY_ERR_PH_FIFO_PERR_RESET = 1'b0;
localparam RI_PARITY_ERR_PD_FIFO_PERR_LO = 3;
localparam RI_PARITY_ERR_PD_FIFO_PERR_HI = 3;
localparam RI_PARITY_ERR_PD_FIFO_PERR_RESET = 1'b0;
localparam RI_PARITY_ERR_NPH_FIFO_SCREAM_LO = 2;
localparam RI_PARITY_ERR_NPH_FIFO_SCREAM_HI = 2;
localparam RI_PARITY_ERR_NPH_FIFO_SCREAM_RESET = 1'b0;
localparam RI_PARITY_ERR_NPH_FIFO_PERR_LO = 1;
localparam RI_PARITY_ERR_NPH_FIFO_PERR_HI = 1;
localparam RI_PARITY_ERR_NPH_FIFO_PERR_RESET = 1'b0;
localparam RI_PARITY_ERR_NPD_FIFO_PERR_LO = 0;
localparam RI_PARITY_ERR_NPD_FIFO_PERR_HI = 0;
localparam RI_PARITY_ERR_NPD_FIFO_PERR_RESET = 1'b0;
localparam RI_PARITY_ERR_USEMASK = 32'h1FF;
localparam RI_PARITY_ERR_RO_MASK = 32'h0;
localparam RI_PARITY_ERR_WO_MASK = 32'h0;
localparam RI_PARITY_ERR_RESET = 32'h0;

typedef struct packed {
    logic [21:0] reserved0;  // RSVD
    logic  [0:0] GPSB_PERR;  // RW/1C/V/P
    logic  [0:0] SCRBD_PERR;  // RW/1C/V
    logic  [0:0] IBCPL_DATA_FIFO_PERR;  // RW/1C/V
    logic  [0:0] IBCPL_HDR_FIFO_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_1G_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_2M_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_4K_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_1G_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_2M_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_4K_PERR;  // RW/1C/V
} SIF_PARITY_ERR_t;

localparam SIF_PARITY_ERR_REG_STRIDE = 48'h4;
localparam SIF_PARITY_ERR_REG_ENTRIES = 1;
localparam [47:0] SIF_PARITY_ERR_CR_ADDR = 48'hEC;
localparam SIF_PARITY_ERR_SIZE = 32;
localparam SIF_PARITY_ERR_GPSB_PERR_LO = 9;
localparam SIF_PARITY_ERR_GPSB_PERR_HI = 9;
localparam SIF_PARITY_ERR_GPSB_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_SCRBD_PERR_LO = 8;
localparam SIF_PARITY_ERR_SCRBD_PERR_HI = 8;
localparam SIF_PARITY_ERR_SCRBD_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR_LO = 7;
localparam SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR_HI = 7;
localparam SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR_LO = 6;
localparam SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR_HI = 6;
localparam SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_TLB_DATA_1G_PERR_LO = 5;
localparam SIF_PARITY_ERR_TLB_DATA_1G_PERR_HI = 5;
localparam SIF_PARITY_ERR_TLB_DATA_1G_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_TLB_DATA_2M_PERR_LO = 4;
localparam SIF_PARITY_ERR_TLB_DATA_2M_PERR_HI = 4;
localparam SIF_PARITY_ERR_TLB_DATA_2M_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_TLB_DATA_4K_PERR_LO = 3;
localparam SIF_PARITY_ERR_TLB_DATA_4K_PERR_HI = 3;
localparam SIF_PARITY_ERR_TLB_DATA_4K_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_TLB_TAG_1G_PERR_LO = 2;
localparam SIF_PARITY_ERR_TLB_TAG_1G_PERR_HI = 2;
localparam SIF_PARITY_ERR_TLB_TAG_1G_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_TLB_TAG_2M_PERR_LO = 1;
localparam SIF_PARITY_ERR_TLB_TAG_2M_PERR_HI = 1;
localparam SIF_PARITY_ERR_TLB_TAG_2M_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_TLB_TAG_4K_PERR_LO = 0;
localparam SIF_PARITY_ERR_TLB_TAG_4K_PERR_HI = 0;
localparam SIF_PARITY_ERR_TLB_TAG_4K_PERR_RESET = 1'b0;
localparam SIF_PARITY_ERR_USEMASK = 32'h3FF;
localparam SIF_PARITY_ERR_RO_MASK = 32'h0;
localparam SIF_PARITY_ERR_WO_MASK = 32'h0;
localparam SIF_PARITY_ERR_RESET = 32'h0;

typedef struct packed {
    logic [29:0] reserved0;  // RSVD
    logic  [0:0] CNT_CLRV;  // RW
    logic  [0:0] CNT_CLR;  // RW
} HQM_SIF_CNT_CTL_t;

localparam HQM_SIF_CNT_CTL_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_CTL_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_CTL_CR_ADDR = 48'hF0;
localparam HQM_SIF_CNT_CTL_SIZE = 32;
localparam HQM_SIF_CNT_CTL_CNT_CLRV_LO = 1;
localparam HQM_SIF_CNT_CTL_CNT_CLRV_HI = 1;
localparam HQM_SIF_CNT_CTL_CNT_CLRV_RESET = 1'b0;
localparam HQM_SIF_CNT_CTL_CNT_CLR_LO = 0;
localparam HQM_SIF_CNT_CTL_CNT_CLR_HI = 0;
localparam HQM_SIF_CNT_CTL_CNT_CLR_RESET = 1'b0;
localparam HQM_SIF_CNT_CTL_USEMASK = 32'h3;
localparam HQM_SIF_CNT_CTL_RO_MASK = 32'h0;
localparam HQM_SIF_CNT_CTL_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_CTL_RESET = 32'h0;

typedef struct packed {
    logic [15:0] reserved0;  // RSVD
    logic  [3:0] DIR3_TC;  // RW
    logic  [3:0] DIR2_TC;  // RW
    logic  [3:0] DIR1_TC;  // RW
    logic  [3:0] DIR0_TC;  // RW
} DIR_CQ2TC_MAP_t;

localparam DIR_CQ2TC_MAP_REG_STRIDE = 48'h4;
localparam DIR_CQ2TC_MAP_REG_ENTRIES = 1;
localparam [47:0] DIR_CQ2TC_MAP_CR_ADDR = 48'hF4;
localparam DIR_CQ2TC_MAP_SIZE = 32;
localparam DIR_CQ2TC_MAP_DIR3_TC_LO = 12;
localparam DIR_CQ2TC_MAP_DIR3_TC_HI = 15;
localparam DIR_CQ2TC_MAP_DIR3_TC_RESET = 4'h0;
localparam DIR_CQ2TC_MAP_DIR2_TC_LO = 8;
localparam DIR_CQ2TC_MAP_DIR2_TC_HI = 11;
localparam DIR_CQ2TC_MAP_DIR2_TC_RESET = 4'h0;
localparam DIR_CQ2TC_MAP_DIR1_TC_LO = 4;
localparam DIR_CQ2TC_MAP_DIR1_TC_HI = 7;
localparam DIR_CQ2TC_MAP_DIR1_TC_RESET = 4'h0;
localparam DIR_CQ2TC_MAP_DIR0_TC_LO = 0;
localparam DIR_CQ2TC_MAP_DIR0_TC_HI = 3;
localparam DIR_CQ2TC_MAP_DIR0_TC_RESET = 4'h0;
localparam DIR_CQ2TC_MAP_USEMASK = 32'hFFFF;
localparam DIR_CQ2TC_MAP_RO_MASK = 32'h0;
localparam DIR_CQ2TC_MAP_WO_MASK = 32'h0;
localparam DIR_CQ2TC_MAP_RESET = 32'h0;

typedef struct packed {
    logic [15:0] reserved0;  // RSVD
    logic  [3:0] LDB3_TC;  // RW
    logic  [3:0] LDB2_TC;  // RW
    logic  [3:0] LDB1_TC;  // RW
    logic  [3:0] LDB0_TC;  // RW
} LDB_CQ2TC_MAP_t;

localparam LDB_CQ2TC_MAP_REG_STRIDE = 48'h4;
localparam LDB_CQ2TC_MAP_REG_ENTRIES = 1;
localparam [47:0] LDB_CQ2TC_MAP_CR_ADDR = 48'hF8;
localparam LDB_CQ2TC_MAP_SIZE = 32;
localparam LDB_CQ2TC_MAP_LDB3_TC_LO = 12;
localparam LDB_CQ2TC_MAP_LDB3_TC_HI = 15;
localparam LDB_CQ2TC_MAP_LDB3_TC_RESET = 4'h0;
localparam LDB_CQ2TC_MAP_LDB2_TC_LO = 8;
localparam LDB_CQ2TC_MAP_LDB2_TC_HI = 11;
localparam LDB_CQ2TC_MAP_LDB2_TC_RESET = 4'h0;
localparam LDB_CQ2TC_MAP_LDB1_TC_LO = 4;
localparam LDB_CQ2TC_MAP_LDB1_TC_HI = 7;
localparam LDB_CQ2TC_MAP_LDB1_TC_RESET = 4'h0;
localparam LDB_CQ2TC_MAP_LDB0_TC_LO = 0;
localparam LDB_CQ2TC_MAP_LDB0_TC_HI = 3;
localparam LDB_CQ2TC_MAP_LDB0_TC_RESET = 4'h0;
localparam LDB_CQ2TC_MAP_USEMASK = 32'hFFFF;
localparam LDB_CQ2TC_MAP_RO_MASK = 32'h0;
localparam LDB_CQ2TC_MAP_WO_MASK = 32'h0;
localparam LDB_CQ2TC_MAP_RESET = 32'h0;

typedef struct packed {
    logic [27:0] reserved0;  // RSVD
    logic  [3:0] INT_TC;  // RW
} INT2TC_MAP_t;

localparam INT2TC_MAP_REG_STRIDE = 48'h4;
localparam INT2TC_MAP_REG_ENTRIES = 1;
localparam [47:0] INT2TC_MAP_CR_ADDR = 48'hFC;
localparam INT2TC_MAP_SIZE = 32;
localparam INT2TC_MAP_INT_TC_LO = 0;
localparam INT2TC_MAP_INT_TC_HI = 3;
localparam INT2TC_MAP_INT_TC_RESET = 4'h0;
localparam INT2TC_MAP_USEMASK = 32'hF;
localparam INT2TC_MAP_RO_MASK = 32'h0;
localparam INT2TC_MAP_WO_MASK = 32'h0;
localparam INT2TC_MAP_RESET = 32'h0;

typedef struct packed {
    logic  [7:0] UNIT_VERSION;  // RO
    logic [23:0] reserved0;  // RSVD
} CFG_UNIT_VERSION_t;

localparam CFG_UNIT_VERSION_REG_STRIDE = 48'h4;
localparam CFG_UNIT_VERSION_REG_ENTRIES = 1;
localparam [47:0] CFG_UNIT_VERSION_CR_ADDR = 48'h200;
localparam CFG_UNIT_VERSION_SIZE = 32;
localparam CFG_UNIT_VERSION_UNIT_VERSION_LO = 24;
localparam CFG_UNIT_VERSION_UNIT_VERSION_HI = 31;
localparam CFG_UNIT_VERSION_UNIT_VERSION_RESET = 8'h3;
localparam CFG_UNIT_VERSION_USEMASK = 32'hFF000000;
localparam CFG_UNIT_VERSION_RO_MASK = 32'hFF000000;
localparam CFG_UNIT_VERSION_WO_MASK = 32'h0;
localparam CFG_UNIT_VERSION_RESET = 32'h3000000;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_0_t;

localparam HQM_SIF_CNT_0_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_0_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_0_CR_ADDR = 48'h1000;
localparam HQM_SIF_CNT_0_SIZE = 32;
localparam HQM_SIF_CNT_0_CNT_LO = 0;
localparam HQM_SIF_CNT_0_CNT_HI = 31;
localparam HQM_SIF_CNT_0_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_0_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_0_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_0_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_0_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_1_t;

localparam HQM_SIF_CNT_1_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_1_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_1_CR_ADDR = 48'h1004;
localparam HQM_SIF_CNT_1_SIZE = 32;
localparam HQM_SIF_CNT_1_CNT_LO = 0;
localparam HQM_SIF_CNT_1_CNT_HI = 31;
localparam HQM_SIF_CNT_1_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_1_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_1_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_1_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_1_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_2_t;

localparam HQM_SIF_CNT_2_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_2_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_2_CR_ADDR = 48'h1008;
localparam HQM_SIF_CNT_2_SIZE = 32;
localparam HQM_SIF_CNT_2_CNT_LO = 0;
localparam HQM_SIF_CNT_2_CNT_HI = 31;
localparam HQM_SIF_CNT_2_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_2_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_2_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_2_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_2_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_3_t;

localparam HQM_SIF_CNT_3_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_3_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_3_CR_ADDR = 48'h100C;
localparam HQM_SIF_CNT_3_SIZE = 32;
localparam HQM_SIF_CNT_3_CNT_LO = 0;
localparam HQM_SIF_CNT_3_CNT_HI = 31;
localparam HQM_SIF_CNT_3_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_3_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_3_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_3_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_3_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_4_t;

localparam HQM_SIF_CNT_4_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_4_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_4_CR_ADDR = 48'h1010;
localparam HQM_SIF_CNT_4_SIZE = 32;
localparam HQM_SIF_CNT_4_CNT_LO = 0;
localparam HQM_SIF_CNT_4_CNT_HI = 31;
localparam HQM_SIF_CNT_4_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_4_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_4_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_4_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_4_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_5_t;

localparam HQM_SIF_CNT_5_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_5_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_5_CR_ADDR = 48'h1014;
localparam HQM_SIF_CNT_5_SIZE = 32;
localparam HQM_SIF_CNT_5_CNT_LO = 0;
localparam HQM_SIF_CNT_5_CNT_HI = 31;
localparam HQM_SIF_CNT_5_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_5_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_5_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_5_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_5_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_6_t;

localparam HQM_SIF_CNT_6_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_6_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_6_CR_ADDR = 48'h1018;
localparam HQM_SIF_CNT_6_SIZE = 32;
localparam HQM_SIF_CNT_6_CNT_LO = 0;
localparam HQM_SIF_CNT_6_CNT_HI = 31;
localparam HQM_SIF_CNT_6_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_6_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_6_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_6_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_6_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_7_t;

localparam HQM_SIF_CNT_7_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_7_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_7_CR_ADDR = 48'h101C;
localparam HQM_SIF_CNT_7_SIZE = 32;
localparam HQM_SIF_CNT_7_CNT_LO = 0;
localparam HQM_SIF_CNT_7_CNT_HI = 31;
localparam HQM_SIF_CNT_7_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_7_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_7_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_7_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_7_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_8_t;

localparam HQM_SIF_CNT_8_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_8_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_8_CR_ADDR = 48'h1020;
localparam HQM_SIF_CNT_8_SIZE = 32;
localparam HQM_SIF_CNT_8_CNT_LO = 0;
localparam HQM_SIF_CNT_8_CNT_HI = 31;
localparam HQM_SIF_CNT_8_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_8_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_8_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_8_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_8_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_9_t;

localparam HQM_SIF_CNT_9_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_9_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_9_CR_ADDR = 48'h1024;
localparam HQM_SIF_CNT_9_SIZE = 32;
localparam HQM_SIF_CNT_9_CNT_LO = 0;
localparam HQM_SIF_CNT_9_CNT_HI = 31;
localparam HQM_SIF_CNT_9_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_9_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_9_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_9_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_9_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_10_t;

localparam HQM_SIF_CNT_10_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_10_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_10_CR_ADDR = 48'h1028;
localparam HQM_SIF_CNT_10_SIZE = 32;
localparam HQM_SIF_CNT_10_CNT_LO = 0;
localparam HQM_SIF_CNT_10_CNT_HI = 31;
localparam HQM_SIF_CNT_10_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_10_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_10_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_10_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_10_RESET = 32'h0;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} HQM_SIF_CNT_11_t;

localparam HQM_SIF_CNT_11_REG_STRIDE = 48'h4;
localparam HQM_SIF_CNT_11_REG_ENTRIES = 1;
localparam [47:0] HQM_SIF_CNT_11_CR_ADDR = 48'h102C;
localparam HQM_SIF_CNT_11_SIZE = 32;
localparam HQM_SIF_CNT_11_CNT_LO = 0;
localparam HQM_SIF_CNT_11_CNT_HI = 31;
localparam HQM_SIF_CNT_11_CNT_RESET = 32'h0;
localparam HQM_SIF_CNT_11_USEMASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_11_RO_MASK = 32'hFFFFFFFF;
localparam HQM_SIF_CNT_11_WO_MASK = 32'h0;
localparam HQM_SIF_CNT_11_RESET = 32'h0;

typedef struct packed {
    logic [29:0] CTRL;  // RW
    logic  [1:0] MODE;  // RW
} OBCPL_AFULL_AGITATE_CONTROL_t;

localparam OBCPL_AFULL_AGITATE_CONTROL_REG_STRIDE = 48'h4;
localparam OBCPL_AFULL_AGITATE_CONTROL_REG_ENTRIES = 1;
localparam [47:0] OBCPL_AFULL_AGITATE_CONTROL_CR_ADDR = 48'h8000014;
localparam OBCPL_AFULL_AGITATE_CONTROL_SIZE = 32;
localparam OBCPL_AFULL_AGITATE_CONTROL_CTRL_LO = 2;
localparam OBCPL_AFULL_AGITATE_CONTROL_CTRL_HI = 31;
localparam OBCPL_AFULL_AGITATE_CONTROL_CTRL_RESET = 30'h0;
localparam OBCPL_AFULL_AGITATE_CONTROL_MODE_LO = 0;
localparam OBCPL_AFULL_AGITATE_CONTROL_MODE_HI = 1;
localparam OBCPL_AFULL_AGITATE_CONTROL_MODE_RESET = 2'b0;
localparam OBCPL_AFULL_AGITATE_CONTROL_USEMASK = 32'hFFFFFFFF;
localparam OBCPL_AFULL_AGITATE_CONTROL_RO_MASK = 32'h0;
localparam OBCPL_AFULL_AGITATE_CONTROL_WO_MASK = 32'h0;
localparam OBCPL_AFULL_AGITATE_CONTROL_RESET = 32'h0;

typedef struct packed {
    logic [13:0] reserved0;  // RSVD
    logic  [0:0] CLKGATE_DISABLED;  // RW
    logic  [0:0] CLKREQ_CTL_DISABLED;  // RW
    logic  [3:0] CLKGATE_HOLDOFF;  // RW
    logic  [3:0] PWRGATE_HOLDOFF;  // RW
    logic  [3:0] CLKREQ_OFF_HOLDOFF;  // RW
    logic  [3:0] CLKREQ_SYNCOFF_HOLDOFF;  // RW
} PRIM_CDC_CTL_t;

localparam PRIM_CDC_CTL_REG_STRIDE = 48'h4;
localparam PRIM_CDC_CTL_REG_ENTRIES = 1;
localparam [47:0] PRIM_CDC_CTL_CR_ADDR = 48'h8001000;
localparam PRIM_CDC_CTL_SIZE = 32;
localparam PRIM_CDC_CTL_CLKGATE_DISABLED_LO = 17;
localparam PRIM_CDC_CTL_CLKGATE_DISABLED_HI = 17;
localparam PRIM_CDC_CTL_CLKGATE_DISABLED_RESET = 1'h0;
localparam PRIM_CDC_CTL_CLKREQ_CTL_DISABLED_LO = 16;
localparam PRIM_CDC_CTL_CLKREQ_CTL_DISABLED_HI = 16;
localparam PRIM_CDC_CTL_CLKREQ_CTL_DISABLED_RESET = 1'h0;
localparam PRIM_CDC_CTL_CLKGATE_HOLDOFF_LO = 12;
localparam PRIM_CDC_CTL_CLKGATE_HOLDOFF_HI = 15;
localparam PRIM_CDC_CTL_CLKGATE_HOLDOFF_RESET = 4'h4;
localparam PRIM_CDC_CTL_PWRGATE_HOLDOFF_LO = 8;
localparam PRIM_CDC_CTL_PWRGATE_HOLDOFF_HI = 11;
localparam PRIM_CDC_CTL_PWRGATE_HOLDOFF_RESET = 4'h4;
localparam PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF_LO = 4;
localparam PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF_HI = 7;
localparam PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF_RESET = 4'h4;
localparam PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF_LO = 0;
localparam PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF_HI = 3;
localparam PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF_RESET = 4'h4;
localparam PRIM_CDC_CTL_USEMASK = 32'h3FFFF;
localparam PRIM_CDC_CTL_RO_MASK = 32'h0;
localparam PRIM_CDC_CTL_WO_MASK = 32'h0;
localparam PRIM_CDC_CTL_RESET = 32'h4444;

typedef struct packed {
    logic [13:0] reserved0;  // RSVD
    logic  [0:0] CLKGATE_DISABLED;  // RW
    logic  [0:0] CLKREQ_CTL_DISABLED;  // RW
    logic  [3:0] CLKGATE_HOLDOFF;  // RW
    logic  [3:0] PWRGATE_HOLDOFF;  // RW
    logic  [3:0] CLKREQ_OFF_HOLDOFF;  // RW
    logic  [3:0] CLKREQ_SYNCOFF_HOLDOFF;  // RW
} SIDE_CDC_CTL_t;

localparam SIDE_CDC_CTL_REG_STRIDE = 48'h4;
localparam SIDE_CDC_CTL_REG_ENTRIES = 1;
localparam [47:0] SIDE_CDC_CTL_CR_ADDR = 48'h8001004;
localparam SIDE_CDC_CTL_SIZE = 32;
localparam SIDE_CDC_CTL_CLKGATE_DISABLED_LO = 17;
localparam SIDE_CDC_CTL_CLKGATE_DISABLED_HI = 17;
localparam SIDE_CDC_CTL_CLKGATE_DISABLED_RESET = 1'h0;
localparam SIDE_CDC_CTL_CLKREQ_CTL_DISABLED_LO = 16;
localparam SIDE_CDC_CTL_CLKREQ_CTL_DISABLED_HI = 16;
localparam SIDE_CDC_CTL_CLKREQ_CTL_DISABLED_RESET = 1'h0;
localparam SIDE_CDC_CTL_CLKGATE_HOLDOFF_LO = 12;
localparam SIDE_CDC_CTL_CLKGATE_HOLDOFF_HI = 15;
localparam SIDE_CDC_CTL_CLKGATE_HOLDOFF_RESET = 4'h4;
localparam SIDE_CDC_CTL_PWRGATE_HOLDOFF_LO = 8;
localparam SIDE_CDC_CTL_PWRGATE_HOLDOFF_HI = 11;
localparam SIDE_CDC_CTL_PWRGATE_HOLDOFF_RESET = 4'h4;
localparam SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF_LO = 4;
localparam SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF_HI = 7;
localparam SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF_RESET = 4'h4;
localparam SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF_LO = 0;
localparam SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF_HI = 3;
localparam SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF_RESET = 4'h4;
localparam SIDE_CDC_CTL_USEMASK = 32'h3FFFF;
localparam SIDE_CDC_CTL_RO_MASK = 32'h0;
localparam SIDE_CDC_CTL_WO_MASK = 32'h0;
localparam SIDE_CDC_CTL_RESET = 32'h4444;

typedef struct packed {
    logic [22:0] reserved0;  // RSVD
    logic  [0:0] CLKGATE_ENABLE;  // RW
    logic  [7:0] IDLE_COUNT;  // RW
} IOSFP_CGCTL_t;

localparam IOSFP_CGCTL_REG_STRIDE = 48'h4;
localparam IOSFP_CGCTL_REG_ENTRIES = 1;
localparam [47:0] IOSFP_CGCTL_CR_ADDR = 48'h8001008;
localparam IOSFP_CGCTL_SIZE = 32;
localparam IOSFP_CGCTL_CLKGATE_ENABLE_LO = 8;
localparam IOSFP_CGCTL_CLKGATE_ENABLE_HI = 8;
localparam IOSFP_CGCTL_CLKGATE_ENABLE_RESET = 1'h1;
localparam IOSFP_CGCTL_IDLE_COUNT_LO = 0;
localparam IOSFP_CGCTL_IDLE_COUNT_HI = 7;
localparam IOSFP_CGCTL_IDLE_COUNT_RESET = 8'h10;
localparam IOSFP_CGCTL_USEMASK = 32'h1FF;
localparam IOSFP_CGCTL_RO_MASK = 32'h0;
localparam IOSFP_CGCTL_WO_MASK = 32'h0;
localparam IOSFP_CGCTL_RESET = 32'h110;

typedef struct packed {
    logic [22:0] reserved0;  // RSVD
    logic  [0:0] CLKGATE_ENABLE;  // RW
    logic  [7:0] IDLE_COUNT;  // RW
} IOSFS_CGCTL_t;

localparam IOSFS_CGCTL_REG_STRIDE = 48'h4;
localparam IOSFS_CGCTL_REG_ENTRIES = 1;
localparam [47:0] IOSFS_CGCTL_CR_ADDR = 48'h800100C;
localparam IOSFS_CGCTL_SIZE = 32;
localparam IOSFS_CGCTL_CLKGATE_ENABLE_LO = 8;
localparam IOSFS_CGCTL_CLKGATE_ENABLE_HI = 8;
localparam IOSFS_CGCTL_CLKGATE_ENABLE_RESET = 1'h1;
localparam IOSFS_CGCTL_IDLE_COUNT_LO = 0;
localparam IOSFS_CGCTL_IDLE_COUNT_HI = 7;
localparam IOSFS_CGCTL_IDLE_COUNT_RESET = 8'h10;
localparam IOSFS_CGCTL_USEMASK = 32'h1FF;
localparam IOSFS_CGCTL_RO_MASK = 32'h0;
localparam IOSFS_CGCTL_WO_MASK = 32'h0;
localparam IOSFS_CGCTL_RESET = 32'h110;

typedef struct packed {
    logic [26:0] reserved0;  // RSVD
    logic  [0:0] INJ_SIF_MDPERR;  // RW
    logic  [0:0] INJ_SIF_MCPERR;  // RW
    logic  [0:0] RI_PAR_OFF;  // RW
    logic  [0:0] MSTR_PAR_OFF;  // RW
    logic  [0:0] SIFP_PAR_OFF;  // RW
} PARITY_CTL_t;

localparam PARITY_CTL_REG_STRIDE = 48'h4;
localparam PARITY_CTL_REG_ENTRIES = 1;
localparam [47:0] PARITY_CTL_CR_ADDR = 48'h8001010;
localparam PARITY_CTL_SIZE = 32;
localparam PARITY_CTL_INJ_SIF_MDPERR_LO = 4;
localparam PARITY_CTL_INJ_SIF_MDPERR_HI = 4;
localparam PARITY_CTL_INJ_SIF_MDPERR_RESET = 1'h0;
localparam PARITY_CTL_INJ_SIF_MCPERR_LO = 3;
localparam PARITY_CTL_INJ_SIF_MCPERR_HI = 3;
localparam PARITY_CTL_INJ_SIF_MCPERR_RESET = 1'h0;
localparam PARITY_CTL_RI_PAR_OFF_LO = 2;
localparam PARITY_CTL_RI_PAR_OFF_HI = 2;
localparam PARITY_CTL_RI_PAR_OFF_RESET = 1'h0;
localparam PARITY_CTL_MSTR_PAR_OFF_LO = 1;
localparam PARITY_CTL_MSTR_PAR_OFF_HI = 1;
localparam PARITY_CTL_MSTR_PAR_OFF_RESET = 1'h0;
localparam PARITY_CTL_SIFP_PAR_OFF_LO = 0;
localparam PARITY_CTL_SIFP_PAR_OFF_HI = 0;
localparam PARITY_CTL_SIFP_PAR_OFF_RESET = 1'h0;
localparam PARITY_CTL_USEMASK = 32'h1F;
localparam PARITY_CTL_RO_MASK = 32'h0;
localparam PARITY_CTL_WO_MASK = 32'h0;
localparam PARITY_CTL_RESET = 32'h0;

typedef struct packed {
    logic  [0:0] TIMEOUT_ENABLE;  // RW
    logic [25:0] reserved0;  // RSVD
    logic  [4:0] TIMEOUT_PWR2;  // RW
} CFG_MASTER_TIMEOUT_t;

localparam CFG_MASTER_TIMEOUT_REG_STRIDE = 48'h4;
localparam CFG_MASTER_TIMEOUT_REG_ENTRIES = 1;
localparam [47:0] CFG_MASTER_TIMEOUT_CR_ADDR = 48'h8001020;
localparam CFG_MASTER_TIMEOUT_SIZE = 32;
localparam CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE_LO = 31;
localparam CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE_HI = 31;
localparam CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE_RESET = 1'h1;
localparam CFG_MASTER_TIMEOUT_TIMEOUT_PWR2_LO = 0;
localparam CFG_MASTER_TIMEOUT_TIMEOUT_PWR2_HI = 4;
localparam CFG_MASTER_TIMEOUT_TIMEOUT_PWR2_RESET = 5'h15;
localparam CFG_MASTER_TIMEOUT_USEMASK = 32'h8000001F;
localparam CFG_MASTER_TIMEOUT_RO_MASK = 32'h0;
localparam CFG_MASTER_TIMEOUT_WO_MASK = 32'h0;
localparam CFG_MASTER_TIMEOUT_RESET = 32'h80000015;

typedef struct packed {
    logic  [0:0] TIMEOUT_ENABLE;  // RW
    logic [25:0] reserved0;  // RSVD
    logic  [4:0] TIMEOUT_PWR2;  // RW
} MMIO_TIMEOUT_t;

localparam MMIO_TIMEOUT_REG_STRIDE = 48'h4;
localparam MMIO_TIMEOUT_REG_ENTRIES = 1;
localparam [47:0] MMIO_TIMEOUT_CR_ADDR = 48'h8001024;
localparam MMIO_TIMEOUT_SIZE = 32;
localparam MMIO_TIMEOUT_TIMEOUT_ENABLE_LO = 31;
localparam MMIO_TIMEOUT_TIMEOUT_ENABLE_HI = 31;
localparam MMIO_TIMEOUT_TIMEOUT_ENABLE_RESET = 1'h1;
localparam MMIO_TIMEOUT_TIMEOUT_PWR2_LO = 0;
localparam MMIO_TIMEOUT_TIMEOUT_PWR2_HI = 4;
localparam MMIO_TIMEOUT_TIMEOUT_PWR2_RESET = 5'h15;
localparam MMIO_TIMEOUT_USEMASK = 32'h8000001F;
localparam MMIO_TIMEOUT_RO_MASK = 32'h0;
localparam MMIO_TIMEOUT_WO_MASK = 32'h0;
localparam MMIO_TIMEOUT_RESET = 32'h80000015;

typedef struct packed {
    logic  [0:0] TIMEOUT_ENABLE;  // RW
    logic [25:0] reserved0;  // RSVD
    logic  [4:0] TIMEOUT_PWR2;  // RW
} HCW_TIMEOUT_t;

localparam HCW_TIMEOUT_REG_STRIDE = 48'h4;
localparam HCW_TIMEOUT_REG_ENTRIES = 1;
localparam [47:0] HCW_TIMEOUT_CR_ADDR = 48'h8001028;
localparam HCW_TIMEOUT_SIZE = 32;
localparam HCW_TIMEOUT_TIMEOUT_ENABLE_LO = 31;
localparam HCW_TIMEOUT_TIMEOUT_ENABLE_HI = 31;
localparam HCW_TIMEOUT_TIMEOUT_ENABLE_RESET = 1'h1;
localparam HCW_TIMEOUT_TIMEOUT_PWR2_LO = 0;
localparam HCW_TIMEOUT_TIMEOUT_PWR2_HI = 4;
localparam HCW_TIMEOUT_TIMEOUT_PWR2_RESET = 5'h15;
localparam HCW_TIMEOUT_USEMASK = 32'h8000001F;
localparam HCW_TIMEOUT_RO_MASK = 32'h0;
localparam HCW_TIMEOUT_WO_MASK = 32'h0;
localparam HCW_TIMEOUT_RESET = 32'h80000015;

typedef struct packed {
    logic [28:0] SW_SPARE;  // RW
    logic  [0:0] PH_TRIGGER_ENABLE;  // RW
    logic  [0:0] SW_TRIGGER;  // RW
    logic  [0:0] TRIGGER_MASK;  // RW
} VISA_SW_CONTROL_t;

localparam VISA_SW_CONTROL_REG_STRIDE = 48'h4;
localparam VISA_SW_CONTROL_REG_ENTRIES = 1;
localparam VISA_SW_CONTROL_CR_ADDR = 48'h8001030;
localparam VISA_SW_CONTROL_SIZE = 32;
localparam VISA_SW_CONTROL_SW_SPARE_LO = 3;
localparam VISA_SW_CONTROL_SW_SPARE_HI = 31;
localparam VISA_SW_CONTROL_SW_SPARE_RESET = 29'h0;
localparam VISA_SW_CONTROL_PH_TRIGGER_ENABLE_LO = 2;
localparam VISA_SW_CONTROL_PH_TRIGGER_ENABLE_HI = 2;
localparam VISA_SW_CONTROL_PH_TRIGGER_ENABLE_RESET = 1'b0;
localparam VISA_SW_CONTROL_SW_TRIGGER_LO = 1;
localparam VISA_SW_CONTROL_SW_TRIGGER_HI = 1;
localparam VISA_SW_CONTROL_SW_TRIGGER_RESET = 1'b0;
localparam VISA_SW_CONTROL_TRIGGER_MASK_LO = 0;
localparam VISA_SW_CONTROL_TRIGGER_MASK_HI = 0;
localparam VISA_SW_CONTROL_TRIGGER_MASK_RESET = 1'b0;
localparam VISA_SW_CONTROL_USEMASK = 32'hFFFFFFFF;
localparam VISA_SW_CONTROL_RO_MASK = 32'h0;
localparam VISA_SW_CONTROL_WO_MASK = 32'h0;
localparam VISA_SW_CONTROL_RESET = 32'h0;

typedef struct packed {
    logic [31:0] ADDR_L;  // RW
} CFG_PH_TRIGGER_ADDR_L_t;

localparam CFG_PH_TRIGGER_ADDR_L_REG_STRIDE = 48'h4;
localparam CFG_PH_TRIGGER_ADDR_L_REG_ENTRIES = 1;
localparam [47:0] CFG_PH_TRIGGER_ADDR_L_CR_ADDR = 48'h8001040;
localparam CFG_PH_TRIGGER_ADDR_L_SIZE = 32;
localparam CFG_PH_TRIGGER_ADDR_L_ADDR_L_LO = 0;
localparam CFG_PH_TRIGGER_ADDR_L_ADDR_L_HI = 31;
localparam CFG_PH_TRIGGER_ADDR_L_ADDR_L_RESET = 32'h0;
localparam CFG_PH_TRIGGER_ADDR_L_USEMASK = 32'hFFFFFFFF;
localparam CFG_PH_TRIGGER_ADDR_L_RO_MASK = 32'h0;
localparam CFG_PH_TRIGGER_ADDR_L_WO_MASK = 32'h0;
localparam CFG_PH_TRIGGER_ADDR_L_RESET = 32'h0;

typedef struct packed {
    logic [31:0] ADDR_U;  // RW
} CFG_PH_TRIGGER_ADDR_U_t;

localparam CFG_PH_TRIGGER_ADDR_U_REG_STRIDE = 48'h4;
localparam CFG_PH_TRIGGER_ADDR_U_REG_ENTRIES = 1;
localparam [47:0] CFG_PH_TRIGGER_ADDR_U_CR_ADDR = 48'h8001044;
localparam CFG_PH_TRIGGER_ADDR_U_SIZE = 32;
localparam CFG_PH_TRIGGER_ADDR_U_ADDR_U_LO = 0;
localparam CFG_PH_TRIGGER_ADDR_U_ADDR_U_HI = 31;
localparam CFG_PH_TRIGGER_ADDR_U_ADDR_U_RESET = 32'h0;
localparam CFG_PH_TRIGGER_ADDR_U_USEMASK = 32'hFFFFFFFF;
localparam CFG_PH_TRIGGER_ADDR_U_RO_MASK = 32'h0;
localparam CFG_PH_TRIGGER_ADDR_U_WO_MASK = 32'h0;
localparam CFG_PH_TRIGGER_ADDR_U_RESET = 32'h0;

typedef struct packed {
    logic [31:0] MASK_L;  // RW
} CFG_PH_TRIGGER_MASK_L_t;

localparam CFG_PH_TRIGGER_MASK_L_REG_STRIDE = 48'h4;
localparam CFG_PH_TRIGGER_MASK_L_REG_ENTRIES = 1;
localparam [47:0] CFG_PH_TRIGGER_MASK_L_CR_ADDR = 48'h8001048;
localparam CFG_PH_TRIGGER_MASK_L_SIZE = 32;
localparam CFG_PH_TRIGGER_MASK_L_MASK_L_LO = 0;
localparam CFG_PH_TRIGGER_MASK_L_MASK_L_HI = 31;
localparam CFG_PH_TRIGGER_MASK_L_MASK_L_RESET = 32'h0;
localparam CFG_PH_TRIGGER_MASK_L_USEMASK = 32'hFFFFFFFF;
localparam CFG_PH_TRIGGER_MASK_L_RO_MASK = 32'h0;
localparam CFG_PH_TRIGGER_MASK_L_WO_MASK = 32'h0;
localparam CFG_PH_TRIGGER_MASK_L_RESET = 32'h0;

typedef struct packed {
    logic [31:0] MASK_U;  // RW
} CFG_PH_TRIGGER_MASK_U_t;

localparam CFG_PH_TRIGGER_MASK_U_REG_STRIDE = 48'h4;
localparam CFG_PH_TRIGGER_MASK_U_REG_ENTRIES = 1;
localparam [47:0] CFG_PH_TRIGGER_MASK_U_CR_ADDR = 48'h800104C;
localparam CFG_PH_TRIGGER_MASK_U_SIZE = 32;
localparam CFG_PH_TRIGGER_MASK_U_MASK_U_LO = 0;
localparam CFG_PH_TRIGGER_MASK_U_MASK_U_HI = 31;
localparam CFG_PH_TRIGGER_MASK_U_MASK_U_RESET = 32'h0;
localparam CFG_PH_TRIGGER_MASK_U_USEMASK = 32'hFFFFFFFF;
localparam CFG_PH_TRIGGER_MASK_U_RO_MASK = 32'h0;
localparam CFG_PH_TRIGGER_MASK_U_WO_MASK = 32'h0;
localparam CFG_PH_TRIGGER_MASK_U_RESET = 32'h0;

typedef struct packed {
    logic [24:0] reserved0;  // RSVD
    logic  [0:0] PROC_IDLE;  // RO/V
    logic  [0:0] INT_IDLE;  // RO/V
    logic  [0:0] MSTR_IDLE;  // RO/V
    logic  [0:0] MSTR_INTF_IDLE;  // RO/V
    logic  [0:0] TGT_IDLE;  // RO/V
    logic  [0:0] RI_IDLE;  // RO/V
    logic  [0:0] CFGM_IDLE;  // RO/V
} SIF_IDLE_STATUS_t;

localparam SIF_IDLE_STATUS_REG_STRIDE = 48'h4;
localparam SIF_IDLE_STATUS_REG_ENTRIES = 1;
localparam [47:0] SIF_IDLE_STATUS_CR_ADDR = 48'h8001050;
localparam SIF_IDLE_STATUS_SIZE = 32;
localparam SIF_IDLE_STATUS_PROC_IDLE_LO = 6;
localparam SIF_IDLE_STATUS_PROC_IDLE_HI = 6;
localparam SIF_IDLE_STATUS_PROC_IDLE_RESET = 1'b1;
localparam SIF_IDLE_STATUS_INT_IDLE_LO = 5;
localparam SIF_IDLE_STATUS_INT_IDLE_HI = 5;
localparam SIF_IDLE_STATUS_INT_IDLE_RESET = 1'b1;
localparam SIF_IDLE_STATUS_MSTR_IDLE_LO = 4;
localparam SIF_IDLE_STATUS_MSTR_IDLE_HI = 4;
localparam SIF_IDLE_STATUS_MSTR_IDLE_RESET = 1'b1;
localparam SIF_IDLE_STATUS_MSTR_INTF_IDLE_LO = 3;
localparam SIF_IDLE_STATUS_MSTR_INTF_IDLE_HI = 3;
localparam SIF_IDLE_STATUS_MSTR_INTF_IDLE_RESET = 1'b1;
localparam SIF_IDLE_STATUS_TGT_IDLE_LO = 2;
localparam SIF_IDLE_STATUS_TGT_IDLE_HI = 2;
localparam SIF_IDLE_STATUS_TGT_IDLE_RESET = 1'b1;
localparam SIF_IDLE_STATUS_RI_IDLE_LO = 1;
localparam SIF_IDLE_STATUS_RI_IDLE_HI = 1;
localparam SIF_IDLE_STATUS_RI_IDLE_RESET = 1'b1;
localparam SIF_IDLE_STATUS_CFGM_IDLE_LO = 0;
localparam SIF_IDLE_STATUS_CFGM_IDLE_HI = 0;
localparam SIF_IDLE_STATUS_CFGM_IDLE_RESET = 1'b1;
localparam SIF_IDLE_STATUS_USEMASK = 32'h7F;
localparam SIF_IDLE_STATUS_RO_MASK = 32'h7F;
localparam SIF_IDLE_STATUS_WO_MASK = 32'h0;
localparam SIF_IDLE_STATUS_RESET = 32'h7F;

typedef struct packed {
    logic [16:0] reserved0;  // RSVD
    logic  [0:0] CPL_REQ_DB_READY;  // RO/V
    logic  [1:0] CPL_REQ_DB_DEPTH;  // RO/V
    logic  [0:0] reserved1;  // RSVD
    logic  [0:0] NP_REQ_DB_READY;  // RO/V
    logic  [1:0] NP_REQ_DB_DEPTH;  // RO/V
    logic  [0:0] reserved2;  // RSVD
    logic  [0:0] P_REQ_DB_READY;  // RO/V
    logic  [1:0] P_REQ_DB_DEPTH;  // RO/V
    logic  [0:0] reserved3;  // RSVD
    logic  [0:0] ALARM_DB_READY;  // RO/V
    logic  [1:0] ALARM_DB_DEPTH;  // RO/V
} SIF_DB_STATUS_t;

localparam SIF_DB_STATUS_REG_STRIDE = 48'h4;
localparam SIF_DB_STATUS_REG_ENTRIES = 1;
localparam [47:0] SIF_DB_STATUS_CR_ADDR = 48'h8001054;
localparam SIF_DB_STATUS_SIZE = 32;
localparam SIF_DB_STATUS_CPL_REQ_DB_READY_LO = 14;
localparam SIF_DB_STATUS_CPL_REQ_DB_READY_HI = 14;
localparam SIF_DB_STATUS_CPL_REQ_DB_READY_RESET = 1'h0;
localparam SIF_DB_STATUS_CPL_REQ_DB_DEPTH_LO = 12;
localparam SIF_DB_STATUS_CPL_REQ_DB_DEPTH_HI = 13;
localparam SIF_DB_STATUS_CPL_REQ_DB_DEPTH_RESET = 2'h0;
localparam SIF_DB_STATUS_NP_REQ_DB_READY_LO = 10;
localparam SIF_DB_STATUS_NP_REQ_DB_READY_HI = 10;
localparam SIF_DB_STATUS_NP_REQ_DB_READY_RESET = 1'h0;
localparam SIF_DB_STATUS_NP_REQ_DB_DEPTH_LO = 8;
localparam SIF_DB_STATUS_NP_REQ_DB_DEPTH_HI = 9;
localparam SIF_DB_STATUS_NP_REQ_DB_DEPTH_RESET = 2'h0;
localparam SIF_DB_STATUS_P_REQ_DB_READY_LO = 6;
localparam SIF_DB_STATUS_P_REQ_DB_READY_HI = 6;
localparam SIF_DB_STATUS_P_REQ_DB_READY_RESET = 1'h0;
localparam SIF_DB_STATUS_P_REQ_DB_DEPTH_LO = 4;
localparam SIF_DB_STATUS_P_REQ_DB_DEPTH_HI = 5;
localparam SIF_DB_STATUS_P_REQ_DB_DEPTH_RESET = 2'h0;
localparam SIF_DB_STATUS_ALARM_DB_READY_LO = 2;
localparam SIF_DB_STATUS_ALARM_DB_READY_HI = 2;
localparam SIF_DB_STATUS_ALARM_DB_READY_RESET = 1'h1;
localparam SIF_DB_STATUS_ALARM_DB_DEPTH_LO = 0;
localparam SIF_DB_STATUS_ALARM_DB_DEPTH_HI = 1;
localparam SIF_DB_STATUS_ALARM_DB_DEPTH_RESET = 2'h0;
localparam SIF_DB_STATUS_USEMASK = 32'h7777;
localparam SIF_DB_STATUS_RO_MASK = 32'h7777;
localparam SIF_DB_STATUS_WO_MASK = 32'h0;
localparam SIF_DB_STATUS_RESET = 32'h4;

typedef struct packed {
    logic  [8:0] reserved0;  // RSVD
    logic  [0:0] HCW_DB_READY;  // RO/V
    logic  [1:0] HCW_DB_DEPTH;  // RO/V
    logic  [0:0] reserved1;  // RSVD
    logic  [0:0] IOQ_DB_READY;  // RO/V
    logic  [1:0] IOQ_DB_DEPTH;  // RO/V
    logic  [0:0] reserved2;  // RSVD
    logic  [0:0] NPD_DB_READY;  // RO/V
    logic  [1:0] NPD_DB_DEPTH;  // RO/V
    logic  [0:0] reserved3;  // RSVD
    logic  [0:0] NPH_DB_READY;  // RO/V
    logic  [1:0] NPH_DB_DEPTH;  // RO/V
    logic  [0:0] reserved4;  // RSVD
    logic  [0:0] PD_DB_READY;  // RO/V
    logic  [1:0] PD_DB_DEPTH;  // RO/V
    logic  [0:0] reserved5;  // RSVD
    logic  [0:0] PH_DB_READY;  // RO/V
    logic  [1:0] PH_DB_DEPTH;  // RO/V
} RI_DB_STATUS_t;

localparam RI_DB_STATUS_REG_STRIDE = 48'h4;
localparam RI_DB_STATUS_REG_ENTRIES = 1;
localparam [47:0] RI_DB_STATUS_CR_ADDR = 48'h8001058;
localparam RI_DB_STATUS_SIZE = 32;
localparam RI_DB_STATUS_HCW_DB_READY_LO = 22;
localparam RI_DB_STATUS_HCW_DB_READY_HI = 22;
localparam RI_DB_STATUS_HCW_DB_READY_RESET = 1'h0;
localparam RI_DB_STATUS_HCW_DB_DEPTH_LO = 20;
localparam RI_DB_STATUS_HCW_DB_DEPTH_HI = 21;
localparam RI_DB_STATUS_HCW_DB_DEPTH_RESET = 2'h0;
localparam RI_DB_STATUS_IOQ_DB_READY_LO = 18;
localparam RI_DB_STATUS_IOQ_DB_READY_HI = 18;
localparam RI_DB_STATUS_IOQ_DB_READY_RESET = 1'h0;
localparam RI_DB_STATUS_IOQ_DB_DEPTH_LO = 16;
localparam RI_DB_STATUS_IOQ_DB_DEPTH_HI = 17;
localparam RI_DB_STATUS_IOQ_DB_DEPTH_RESET = 2'h0;
localparam RI_DB_STATUS_NPD_DB_READY_LO = 14;
localparam RI_DB_STATUS_NPD_DB_READY_HI = 14;
localparam RI_DB_STATUS_NPD_DB_READY_RESET = 1'h0;
localparam RI_DB_STATUS_NPD_DB_DEPTH_LO = 12;
localparam RI_DB_STATUS_NPD_DB_DEPTH_HI = 13;
localparam RI_DB_STATUS_NPD_DB_DEPTH_RESET = 2'h0;
localparam RI_DB_STATUS_NPH_DB_READY_LO = 10;
localparam RI_DB_STATUS_NPH_DB_READY_HI = 10;
localparam RI_DB_STATUS_NPH_DB_READY_RESET = 1'h0;
localparam RI_DB_STATUS_NPH_DB_DEPTH_LO = 8;
localparam RI_DB_STATUS_NPH_DB_DEPTH_HI = 9;
localparam RI_DB_STATUS_NPH_DB_DEPTH_RESET = 2'h0;
localparam RI_DB_STATUS_PD_DB_READY_LO = 6;
localparam RI_DB_STATUS_PD_DB_READY_HI = 6;
localparam RI_DB_STATUS_PD_DB_READY_RESET = 1'h0;
localparam RI_DB_STATUS_PD_DB_DEPTH_LO = 4;
localparam RI_DB_STATUS_PD_DB_DEPTH_HI = 5;
localparam RI_DB_STATUS_PD_DB_DEPTH_RESET = 2'h0;
localparam RI_DB_STATUS_PH_DB_READY_LO = 2;
localparam RI_DB_STATUS_PH_DB_READY_HI = 2;
localparam RI_DB_STATUS_PH_DB_READY_RESET = 1'h0;
localparam RI_DB_STATUS_PH_DB_DEPTH_LO = 0;
localparam RI_DB_STATUS_PH_DB_DEPTH_HI = 1;
localparam RI_DB_STATUS_PH_DB_DEPTH_RESET = 2'h0;
localparam RI_DB_STATUS_USEMASK = 32'h777777;
localparam RI_DB_STATUS_RO_MASK = 32'h777777;
localparam RI_DB_STATUS_WO_MASK = 32'h0;
localparam RI_DB_STATUS_RESET = 32'h0;

typedef struct packed {
    logic [26:0] reserved0;  // RSVD
    logic  [4:0] HIGH_WM;  // RW
} RI_PHDR_FIFO_CTL_t;

localparam RI_PHDR_FIFO_CTL_REG_STRIDE = 48'h4;
localparam RI_PHDR_FIFO_CTL_REG_ENTRIES = 1;
localparam [47:0] RI_PHDR_FIFO_CTL_CR_ADDR = 48'h8001070;
localparam RI_PHDR_FIFO_CTL_SIZE = 32;
localparam RI_PHDR_FIFO_CTL_HIGH_WM_LO = 0;
localparam RI_PHDR_FIFO_CTL_HIGH_WM_HI = 4;
localparam RI_PHDR_FIFO_CTL_HIGH_WM_RESET = 'hF;
localparam RI_PHDR_FIFO_CTL_USEMASK = 32'h1F;
localparam RI_PHDR_FIFO_CTL_RO_MASK = 32'h0;
localparam RI_PHDR_FIFO_CTL_WO_MASK = 32'h0;
localparam RI_PHDR_FIFO_CTL_RESET = 32'hF;

typedef struct packed {
    logic [25:0] reserved0;  // RSVD
    logic  [5:0] HIGH_WM;  // RW
} RI_PDATA_FIFO_CTL_t;

localparam RI_PDATA_FIFO_CTL_REG_STRIDE = 48'h4;
localparam RI_PDATA_FIFO_CTL_REG_ENTRIES = 1;
localparam [47:0] RI_PDATA_FIFO_CTL_CR_ADDR = 48'h8001074;
localparam RI_PDATA_FIFO_CTL_SIZE = 32;
localparam RI_PDATA_FIFO_CTL_HIGH_WM_LO = 0;
localparam RI_PDATA_FIFO_CTL_HIGH_WM_HI = 5;
localparam RI_PDATA_FIFO_CTL_HIGH_WM_RESET = 'h1F;
localparam RI_PDATA_FIFO_CTL_USEMASK = 32'h3F;
localparam RI_PDATA_FIFO_CTL_RO_MASK = 32'h0;
localparam RI_PDATA_FIFO_CTL_WO_MASK = 32'h0;
localparam RI_PDATA_FIFO_CTL_RESET = 32'h1F;

typedef struct packed {
    logic [27:0] reserved0;  // RSVD
    logic  [3:0] HIGH_WM;  // RW
} RI_NPHDR_FIFO_CTL_t;

localparam RI_NPHDR_FIFO_CTL_REG_STRIDE = 48'h4;
localparam RI_NPHDR_FIFO_CTL_REG_ENTRIES = 1;
localparam [47:0] RI_NPHDR_FIFO_CTL_CR_ADDR = 48'h8001078;
localparam RI_NPHDR_FIFO_CTL_SIZE = 32;
localparam RI_NPHDR_FIFO_CTL_HIGH_WM_LO = 0;
localparam RI_NPHDR_FIFO_CTL_HIGH_WM_HI = 3;
localparam RI_NPHDR_FIFO_CTL_HIGH_WM_RESET = 'h7;
localparam RI_NPHDR_FIFO_CTL_USEMASK = 32'hF;
localparam RI_NPHDR_FIFO_CTL_RO_MASK = 32'h0;
localparam RI_NPHDR_FIFO_CTL_WO_MASK = 32'h0;
localparam RI_NPHDR_FIFO_CTL_RESET = 32'h7;

typedef struct packed {
    logic [27:0] reserved0;  // RSVD
    logic  [3:0] HIGH_WM;  // RW
} RI_NPDATA_FIFO_CTL_t;

localparam RI_NPDATA_FIFO_CTL_REG_STRIDE = 48'h4;
localparam RI_NPDATA_FIFO_CTL_REG_ENTRIES = 1;
localparam [47:0] RI_NPDATA_FIFO_CTL_CR_ADDR = 48'h800107C;
localparam RI_NPDATA_FIFO_CTL_SIZE = 32;
localparam RI_NPDATA_FIFO_CTL_HIGH_WM_LO = 0;
localparam RI_NPDATA_FIFO_CTL_HIGH_WM_HI = 3;
localparam RI_NPDATA_FIFO_CTL_HIGH_WM_RESET = 'h7;
localparam RI_NPDATA_FIFO_CTL_USEMASK = 32'hF;
localparam RI_NPDATA_FIFO_CTL_RO_MASK = 32'h0;
localparam RI_NPDATA_FIFO_CTL_WO_MASK = 32'h0;
localparam RI_NPDATA_FIFO_CTL_RESET = 32'h7;

typedef struct packed {
    logic [25:0] reserved0;  // RSVD
    logic  [5:0] HIGH_WM;  // RW
} RI_IOQ_FIFO_CTL_t;

localparam RI_IOQ_FIFO_CTL_REG_STRIDE = 48'h4;
localparam RI_IOQ_FIFO_CTL_REG_ENTRIES = 1;
localparam [47:0] RI_IOQ_FIFO_CTL_CR_ADDR = 48'h8001080;
localparam RI_IOQ_FIFO_CTL_SIZE = 32;
localparam RI_IOQ_FIFO_CTL_HIGH_WM_LO = 0;
localparam RI_IOQ_FIFO_CTL_HIGH_WM_HI = 5;
localparam RI_IOQ_FIFO_CTL_HIGH_WM_RESET = 'h1F;
localparam RI_IOQ_FIFO_CTL_USEMASK = 32'h3F;
localparam RI_IOQ_FIFO_CTL_RO_MASK = 32'h0;
localparam RI_IOQ_FIFO_CTL_WO_MASK = 32'h0;
localparam RI_IOQ_FIFO_CTL_RESET = 32'h1F;

typedef struct packed {
    logic [22:0] reserved0;  // RSVD
    logic  [8:0] HIGH_WM;  // RW
} IBCPL_HDR_FIFO_CTL_t;

localparam IBCPL_HDR_FIFO_CTL_REG_STRIDE = 48'h4;
localparam IBCPL_HDR_FIFO_CTL_REG_ENTRIES = 1;
localparam [47:0] IBCPL_HDR_FIFO_CTL_CR_ADDR = 48'h8001084;
localparam IBCPL_HDR_FIFO_CTL_SIZE = 32;
localparam IBCPL_HDR_FIFO_CTL_HIGH_WM_LO = 0;
localparam IBCPL_HDR_FIFO_CTL_HIGH_WM_HI = 8;
localparam IBCPL_HDR_FIFO_CTL_HIGH_WM_RESET = 'h100;
localparam IBCPL_HDR_FIFO_CTL_USEMASK = 32'h1FF;
localparam IBCPL_HDR_FIFO_CTL_RO_MASK = 32'h0;
localparam IBCPL_HDR_FIFO_CTL_WO_MASK = 32'h0;
localparam IBCPL_HDR_FIFO_CTL_RESET = 32'h100;

typedef struct packed {
    logic [22:0] reserved0;  // RSVD
    logic  [8:0] HIGH_WM;  // RW
} IBCPL_DATA_FIFO_CTL_t;

localparam IBCPL_DATA_FIFO_CTL_REG_STRIDE = 48'h4;
localparam IBCPL_DATA_FIFO_CTL_REG_ENTRIES = 1;
localparam [47:0] IBCPL_DATA_FIFO_CTL_CR_ADDR = 48'h8001088;
localparam IBCPL_DATA_FIFO_CTL_SIZE = 32;
localparam IBCPL_DATA_FIFO_CTL_HIGH_WM_LO = 0;
localparam IBCPL_DATA_FIFO_CTL_HIGH_WM_HI = 8;
localparam IBCPL_DATA_FIFO_CTL_HIGH_WM_RESET = 'h100;
localparam IBCPL_DATA_FIFO_CTL_USEMASK = 32'h1FF;
localparam IBCPL_DATA_FIFO_CTL_RO_MASK = 32'h0;
localparam IBCPL_DATA_FIFO_CTL_WO_MASK = 32'h0;
localparam IBCPL_DATA_FIFO_CTL_RESET = 32'h100;

typedef struct packed {
    logic  [8:0] reserved0;  // RSVD
    logic  [6:0] XREQ_LIMIT;  // RW
    logic  [0:0] TIMEOUT8;  // RW
    logic  [5:0] ATS_LIMIT;  // RW
    logic  [8:0] SCRBD_LIMIT;  // RW
} SCRBD_CTL_t;

localparam SCRBD_CTL_REG_STRIDE = 48'h4;
localparam SCRBD_CTL_REG_ENTRIES = 1;
localparam [47:0] SCRBD_CTL_CR_ADDR = 48'h8001090;
localparam SCRBD_CTL_SIZE = 32;
localparam SCRBD_CTL_XREQ_LIMIT_LO = 16;
localparam SCRBD_CTL_XREQ_LIMIT_HI = 22;
localparam SCRBD_CTL_XREQ_LIMIT_RESET = 7'h40;
localparam SCRBD_CTL_TIMEOUT8_LO = 15;
localparam SCRBD_CTL_TIMEOUT8_HI = 15;
localparam SCRBD_CTL_TIMEOUT8_RESET = 1'h0;
localparam SCRBD_CTL_ATS_LIMIT_LO = 9;
localparam SCRBD_CTL_ATS_LIMIT_HI = 14;
localparam SCRBD_CTL_ATS_LIMIT_RESET = 6'h20;
localparam SCRBD_CTL_SCRBD_LIMIT_LO = 0;
localparam SCRBD_CTL_SCRBD_LIMIT_HI = 8;
localparam SCRBD_CTL_SCRBD_LIMIT_RESET = 9'h100;
localparam SCRBD_CTL_USEMASK = 32'h7FFFFF;
localparam SCRBD_CTL_RO_MASK = 32'h0;
localparam SCRBD_CTL_WO_MASK = 32'h0;
localparam SCRBD_CTL_RESET = 32'h404100;

typedef struct packed {
    logic [19:0] reserved0;  // RSVD
    logic  [0:0] STOPNSCREAM;  // RO/V
    logic  [0:0] TIM_INUSE;  // RO/V
    logic  [0:0] TO_PEND;  // RO/V
    logic  [8:0] SCRBD_CNT;  // RO/V
} SCRBD_STATUS_t;

localparam SCRBD_STATUS_REG_STRIDE = 48'h4;
localparam SCRBD_STATUS_REG_ENTRIES = 1;
localparam [47:0] SCRBD_STATUS_CR_ADDR = 48'h8001094;
localparam SCRBD_STATUS_SIZE = 32;
localparam SCRBD_STATUS_STOPNSCREAM_LO = 11;
localparam SCRBD_STATUS_STOPNSCREAM_HI = 11;
localparam SCRBD_STATUS_STOPNSCREAM_RESET = 1'h0;
localparam SCRBD_STATUS_TIM_INUSE_LO = 10;
localparam SCRBD_STATUS_TIM_INUSE_HI = 10;
localparam SCRBD_STATUS_TIM_INUSE_RESET = 1'h0;
localparam SCRBD_STATUS_TO_PEND_LO = 9;
localparam SCRBD_STATUS_TO_PEND_HI = 9;
localparam SCRBD_STATUS_TO_PEND_RESET = 1'h0;
localparam SCRBD_STATUS_SCRBD_CNT_LO = 0;
localparam SCRBD_STATUS_SCRBD_CNT_HI = 8;
localparam SCRBD_STATUS_SCRBD_CNT_RESET = 9'h0;
localparam SCRBD_STATUS_USEMASK = 32'hFFF;
localparam SCRBD_STATUS_RO_MASK = 32'hFFF;
localparam SCRBD_STATUS_WO_MASK = 32'h0;
localparam SCRBD_STATUS_RESET = 32'h0;

typedef struct packed {
    logic [15:0] reserved0;  // RSVD
    logic  [2:0] LOXREQ_GCNT;  // RW
    logic  [2:0] HIXREQ_GCNT;  // RW
    logic  [2:0] PENDQ_GCNT;  // RW
    logic  [2:0] FILL_GCNT;  // RW
    logic  [0:0] PRS_CRETRY;  // RW
    logic  [0:0] DISABLE_PRS;  // RW
    logic  [0:0] DISABLE_2M;  // RW
    logic  [0:0] DISABLE_1G;  // RW
} DEVTLB_CTL_t;

localparam DEVTLB_CTL_REG_STRIDE = 48'h4;
localparam DEVTLB_CTL_REG_ENTRIES = 1;
localparam [47:0] DEVTLB_CTL_CR_ADDR = 48'h8001098;
localparam DEVTLB_CTL_SIZE = 32;
localparam DEVTLB_CTL_LOXREQ_GCNT_LO = 13;
localparam DEVTLB_CTL_LOXREQ_GCNT_HI = 15;
localparam DEVTLB_CTL_LOXREQ_GCNT_RESET = 3'h4;
localparam DEVTLB_CTL_HIXREQ_GCNT_LO = 10;
localparam DEVTLB_CTL_HIXREQ_GCNT_HI = 12;
localparam DEVTLB_CTL_HIXREQ_GCNT_RESET = 3'h4;
localparam DEVTLB_CTL_PENDQ_GCNT_LO = 7;
localparam DEVTLB_CTL_PENDQ_GCNT_HI = 9;
localparam DEVTLB_CTL_PENDQ_GCNT_RESET = 3'h4;
localparam DEVTLB_CTL_FILL_GCNT_LO = 4;
localparam DEVTLB_CTL_FILL_GCNT_HI = 6;
localparam DEVTLB_CTL_FILL_GCNT_RESET = 3'h4;
localparam DEVTLB_CTL_PRS_CRETRY_LO = 3;
localparam DEVTLB_CTL_PRS_CRETRY_HI = 3;
localparam DEVTLB_CTL_PRS_CRETRY_RESET = 1'h0;
localparam DEVTLB_CTL_DISABLE_PRS_LO = 2;
localparam DEVTLB_CTL_DISABLE_PRS_HI = 2;
localparam DEVTLB_CTL_DISABLE_PRS_RESET = 1'h0;
localparam DEVTLB_CTL_DISABLE_2M_LO = 1;
localparam DEVTLB_CTL_DISABLE_2M_HI = 1;
localparam DEVTLB_CTL_DISABLE_2M_RESET = 1'h0;
localparam DEVTLB_CTL_DISABLE_1G_LO = 0;
localparam DEVTLB_CTL_DISABLE_1G_HI = 0;
localparam DEVTLB_CTL_DISABLE_1G_RESET = 1'h0;
localparam DEVTLB_CTL_USEMASK = 32'hFFFF;
localparam DEVTLB_CTL_RO_MASK = 32'h0;
localparam DEVTLB_CTL_WO_MASK = 32'h0;
localparam DEVTLB_CTL_RESET = 32'h9240;

typedef struct packed {
    logic [31:0] SPARE;  // RW
} DEVTLB_SPARE_t;

localparam DEVTLB_SPARE_REG_STRIDE = 48'h4;
localparam DEVTLB_SPARE_REG_ENTRIES = 1;
localparam [47:0] DEVTLB_SPARE_CR_ADDR = 48'h800109C;
localparam DEVTLB_SPARE_SIZE = 32;
localparam DEVTLB_SPARE_SPARE_LO = 0;
localparam DEVTLB_SPARE_SPARE_HI = 31;
localparam DEVTLB_SPARE_SPARE_RESET = 32'h0;
localparam DEVTLB_SPARE_USEMASK = 32'hFFFFFFFF;
localparam DEVTLB_SPARE_RO_MASK = 32'h0;
localparam DEVTLB_SPARE_WO_MASK = 32'h0;
localparam DEVTLB_SPARE_RESET = 32'h0;

typedef struct packed {
    logic [31:0] DEFEATURE;  // RW
} DEVTLB_DEFEATURE0_t;

localparam DEVTLB_DEFEATURE0_REG_STRIDE = 48'h4;
localparam DEVTLB_DEFEATURE0_REG_ENTRIES = 1;
localparam [47:0] DEVTLB_DEFEATURE0_CR_ADDR = 48'h80010A0;
localparam DEVTLB_DEFEATURE0_SIZE = 32;
localparam DEVTLB_DEFEATURE0_DEFEATURE_LO = 0;
localparam DEVTLB_DEFEATURE0_DEFEATURE_HI = 31;
localparam DEVTLB_DEFEATURE0_DEFEATURE_RESET = 32'h0;
localparam DEVTLB_DEFEATURE0_USEMASK = 32'hFFFFFFFF;
localparam DEVTLB_DEFEATURE0_RO_MASK = 32'h0;
localparam DEVTLB_DEFEATURE0_WO_MASK = 32'h0;
localparam DEVTLB_DEFEATURE0_RESET = 32'h0;

typedef struct packed {
    logic [31:0] DEFEATURE;  // RW
} DEVTLB_DEFEATURE1_t;

localparam DEVTLB_DEFEATURE1_REG_STRIDE = 48'h4;
localparam DEVTLB_DEFEATURE1_REG_ENTRIES = 1;
localparam [47:0] DEVTLB_DEFEATURE1_CR_ADDR = 48'h80010A4;
localparam DEVTLB_DEFEATURE1_SIZE = 32;
localparam DEVTLB_DEFEATURE1_DEFEATURE_LO = 0;
localparam DEVTLB_DEFEATURE1_DEFEATURE_HI = 31;
localparam DEVTLB_DEFEATURE1_DEFEATURE_RESET = 32'h0;
localparam DEVTLB_DEFEATURE1_USEMASK = 32'hFFFFFFFF;
localparam DEVTLB_DEFEATURE1_RO_MASK = 32'h0;
localparam DEVTLB_DEFEATURE1_WO_MASK = 32'h0;
localparam DEVTLB_DEFEATURE1_RESET = 32'h0;

typedef struct packed {
    logic [31:0] DEFEATURE;  // RW
} DEVTLB_DEFEATURE2_t;

localparam DEVTLB_DEFEATURE2_REG_STRIDE = 48'h4;
localparam DEVTLB_DEFEATURE2_REG_ENTRIES = 1;
localparam [47:0] DEVTLB_DEFEATURE2_CR_ADDR = 48'h80010A8;
localparam DEVTLB_DEFEATURE2_SIZE = 32;
localparam DEVTLB_DEFEATURE2_DEFEATURE_LO = 0;
localparam DEVTLB_DEFEATURE2_DEFEATURE_HI = 31;
localparam DEVTLB_DEFEATURE2_DEFEATURE_RESET = 32'h0;
localparam DEVTLB_DEFEATURE2_USEMASK = 32'hFFFFFFFF;
localparam DEVTLB_DEFEATURE2_RO_MASK = 32'h0;
localparam DEVTLB_DEFEATURE2_WO_MASK = 32'h0;
localparam DEVTLB_DEFEATURE2_RESET = 32'h0;

typedef struct packed {
    logic  [2:0] reserved0;  // RSVD
    logic  [6:0] XREQ_CNT;  // RO/V
    logic  [5:0] ATS_REQ_CNT;  // RO/V
    logic  [0:0] DRAIN_REQ_V;  // RO/V
    logic  [0:0] TX_MSG_V;  // RO/V
    logic  [0:0] ATS_HREQ_V;  // RO/V
    logic  [0:0] ATS_LREQ_V;  // RO/V
    logic  [0:0] reserved1;  // RSVD
    logic  [2:0] HCRD_CNT;  // RO/V
    logic  [0:0] reserved2;  // RSVD
    logic  [2:0] LCRD_CNT;  // RO/V
    logic  [0:0] ATS_ENABLED;  // RO/V
    logic  [0:0] RESET_ACTIVE;  // RO/V
    logic  [0:0] INVREQS_ACTIVE;  // RO/V
    logic  [0:0] XREQS_ACTIVE;  // RO/V
} DEVTLB_STATUS_t;

localparam DEVTLB_STATUS_REG_STRIDE = 48'h4;
localparam DEVTLB_STATUS_REG_ENTRIES = 1;
localparam [47:0] DEVTLB_STATUS_CR_ADDR = 48'h80010AC;
localparam DEVTLB_STATUS_SIZE = 32;
localparam DEVTLB_STATUS_XREQ_CNT_LO = 22;
localparam DEVTLB_STATUS_XREQ_CNT_HI = 28;
localparam DEVTLB_STATUS_XREQ_CNT_RESET = 7'h0;
localparam DEVTLB_STATUS_ATS_REQ_CNT_LO = 16;
localparam DEVTLB_STATUS_ATS_REQ_CNT_HI = 21;
localparam DEVTLB_STATUS_ATS_REQ_CNT_RESET = 6'h0;
localparam DEVTLB_STATUS_DRAIN_REQ_V_LO = 15;
localparam DEVTLB_STATUS_DRAIN_REQ_V_HI = 15;
localparam DEVTLB_STATUS_DRAIN_REQ_V_RESET = 1'h0;
localparam DEVTLB_STATUS_TX_MSG_V_LO = 14;
localparam DEVTLB_STATUS_TX_MSG_V_HI = 14;
localparam DEVTLB_STATUS_TX_MSG_V_RESET = 1'h0;
localparam DEVTLB_STATUS_ATS_HREQ_V_LO = 13;
localparam DEVTLB_STATUS_ATS_HREQ_V_HI = 13;
localparam DEVTLB_STATUS_ATS_HREQ_V_RESET = 1'h0;
localparam DEVTLB_STATUS_ATS_LREQ_V_LO = 12;
localparam DEVTLB_STATUS_ATS_LREQ_V_HI = 12;
localparam DEVTLB_STATUS_ATS_LREQ_V_RESET = 1'h0;
localparam DEVTLB_STATUS_HCRD_CNT_LO = 8;
localparam DEVTLB_STATUS_HCRD_CNT_HI = 10;
localparam DEVTLB_STATUS_HCRD_CNT_RESET = 3'h4;
localparam DEVTLB_STATUS_LCRD_CNT_LO = 4;
localparam DEVTLB_STATUS_LCRD_CNT_HI = 6;
localparam DEVTLB_STATUS_LCRD_CNT_RESET = 3'h4;
localparam DEVTLB_STATUS_ATS_ENABLED_LO = 3;
localparam DEVTLB_STATUS_ATS_ENABLED_HI = 3;
localparam DEVTLB_STATUS_ATS_ENABLED_RESET = 1'h0;
localparam DEVTLB_STATUS_RESET_ACTIVE_LO = 2;
localparam DEVTLB_STATUS_RESET_ACTIVE_HI = 2;
localparam DEVTLB_STATUS_RESET_ACTIVE_RESET = 1'h0;
localparam DEVTLB_STATUS_INVREQS_ACTIVE_LO = 1;
localparam DEVTLB_STATUS_INVREQS_ACTIVE_HI = 1;
localparam DEVTLB_STATUS_INVREQS_ACTIVE_RESET = 1'h0;
localparam DEVTLB_STATUS_XREQS_ACTIVE_LO = 0;
localparam DEVTLB_STATUS_XREQS_ACTIVE_HI = 0;
localparam DEVTLB_STATUS_XREQS_ACTIVE_RESET = 1'h0;
localparam DEVTLB_STATUS_USEMASK = 32'h1FFFF77F;
localparam DEVTLB_STATUS_RO_MASK = 32'h1FFFF77F;
localparam DEVTLB_STATUS_WO_MASK = 32'h0;
localparam DEVTLB_STATUS_RESET = 32'h440;

typedef struct packed {
    logic [31:0] PADDR;  // RO/V
} CFGM_STATUS_t;

localparam CFGM_STATUS_REG_STRIDE = 48'h4;
localparam CFGM_STATUS_REG_ENTRIES = 1;
localparam [47:0] CFGM_STATUS_CR_ADDR = 48'h80010B0;
localparam CFGM_STATUS_SIZE = 32;
localparam CFGM_STATUS_PADDR_LO = 0;
localparam CFGM_STATUS_PADDR_HI = 31;
localparam CFGM_STATUS_PADDR_RESET = 32'h0;
localparam CFGM_STATUS_USEMASK = 32'hFFFFFFFF;
localparam CFGM_STATUS_RO_MASK = 32'hFFFFFFFF;
localparam CFGM_STATUS_WO_MASK = 32'h0;
localparam CFGM_STATUS_RESET = 32'h0;

typedef struct packed {
    logic  [0:0] PSEL;  // RO/V
    logic  [0:0] PSLVERR;  // RO/V
    logic  [0:0] PWRITE;  // RO/V
    logic [28:0] PWDATA;  // RO/V
} CFGM_STATUS2_t;

localparam CFGM_STATUS2_REG_STRIDE = 48'h4;
localparam CFGM_STATUS2_REG_ENTRIES = 1;
localparam [47:0] CFGM_STATUS2_CR_ADDR = 48'h80010B4;
localparam CFGM_STATUS2_SIZE = 32;
localparam CFGM_STATUS2_PSEL_LO = 31;
localparam CFGM_STATUS2_PSEL_HI = 31;
localparam CFGM_STATUS2_PSEL_RESET = 1'b0;
localparam CFGM_STATUS2_PSLVERR_LO = 30;
localparam CFGM_STATUS2_PSLVERR_HI = 30;
localparam CFGM_STATUS2_PSLVERR_RESET = 1'b0;
localparam CFGM_STATUS2_PWRITE_LO = 29;
localparam CFGM_STATUS2_PWRITE_HI = 29;
localparam CFGM_STATUS2_PWRITE_RESET = 1'b0;
localparam CFGM_STATUS2_PWDATA_LO = 0;
localparam CFGM_STATUS2_PWDATA_HI = 28;
localparam CFGM_STATUS2_PWDATA_RESET = 29'h0;
localparam CFGM_STATUS2_USEMASK = 32'hFFFFFFFF;
localparam CFGM_STATUS2_RO_MASK = 32'hFFFFFFFF;
localparam CFGM_STATUS2_WO_MASK = 32'h0;
localparam CFGM_STATUS2_RESET = 32'h0;

typedef struct packed {
    logic [30:0] reserved0;  // RSVD
    logic  [0:0] BME_PF;  // RO/V
} LOCAL_BME_STATUS_t;

localparam LOCAL_BME_STATUS_REG_STRIDE = 48'h4;
localparam LOCAL_BME_STATUS_REG_ENTRIES = 1;
localparam [47:0] LOCAL_BME_STATUS_CR_ADDR = 48'h80010B8;
localparam LOCAL_BME_STATUS_SIZE = 32;
localparam LOCAL_BME_STATUS_BME_PF_LO = 0;
localparam LOCAL_BME_STATUS_BME_PF_HI = 0;
localparam LOCAL_BME_STATUS_BME_PF_RESET = 1'b0;
localparam LOCAL_BME_STATUS_USEMASK = 32'h1;
localparam LOCAL_BME_STATUS_RO_MASK = 32'h1;
localparam LOCAL_BME_STATUS_WO_MASK = 32'h0;
localparam LOCAL_BME_STATUS_RESET = 32'h0;

typedef struct packed {
    logic [30:0] reserved0;  // RSVD
    logic  [0:0] MSIXE_PF;  // RO/V
} LOCAL_MSIXE_STATUS_t;

localparam LOCAL_MSIXE_STATUS_REG_STRIDE = 48'h4;
localparam LOCAL_MSIXE_STATUS_REG_ENTRIES = 1;
localparam [47:0] LOCAL_MSIXE_STATUS_CR_ADDR = 48'h80010BC;
localparam LOCAL_MSIXE_STATUS_SIZE = 32;
localparam LOCAL_MSIXE_STATUS_MSIXE_PF_LO = 0;
localparam LOCAL_MSIXE_STATUS_MSIXE_PF_HI = 0;
localparam LOCAL_MSIXE_STATUS_MSIXE_PF_RESET = 1'b0;
localparam LOCAL_MSIXE_STATUS_USEMASK = 32'h1;
localparam LOCAL_MSIXE_STATUS_RO_MASK = 32'h1;
localparam LOCAL_MSIXE_STATUS_WO_MASK = 32'h0;
localparam LOCAL_MSIXE_STATUS_RESET = 32'h0;

typedef struct packed {
    logic [16:0] reserved0;  // RSVD
    logic  [4:0] CPL_REQ_PUT_CNT;  // RO/V
    logic  [4:0] NP_REQ_PUT_CNT;  // RO/V
    logic  [4:0] P_REQ_PUT_CNT;  // RO/V
} MSTR_CRD_STATUS_t;

localparam MSTR_CRD_STATUS_REG_STRIDE = 48'h4;
localparam MSTR_CRD_STATUS_REG_ENTRIES = 1;
localparam [47:0] MSTR_CRD_STATUS_CR_ADDR = 48'h80010C0;
localparam MSTR_CRD_STATUS_SIZE = 32;
localparam MSTR_CRD_STATUS_CPL_REQ_PUT_CNT_LO = 10;
localparam MSTR_CRD_STATUS_CPL_REQ_PUT_CNT_HI = 14;
localparam MSTR_CRD_STATUS_CPL_REQ_PUT_CNT_RESET = 5'h0;
localparam MSTR_CRD_STATUS_NP_REQ_PUT_CNT_LO = 5;
localparam MSTR_CRD_STATUS_NP_REQ_PUT_CNT_HI = 9;
localparam MSTR_CRD_STATUS_NP_REQ_PUT_CNT_RESET = 5'h0;
localparam MSTR_CRD_STATUS_P_REQ_PUT_CNT_LO = 0;
localparam MSTR_CRD_STATUS_P_REQ_PUT_CNT_HI = 4;
localparam MSTR_CRD_STATUS_P_REQ_PUT_CNT_RESET = 5'h0;
localparam MSTR_CRD_STATUS_USEMASK = 32'h7FFF;
localparam MSTR_CRD_STATUS_RO_MASK = 32'h7FFF;
localparam MSTR_CRD_STATUS_WO_MASK = 32'h0;
localparam MSTR_CRD_STATUS_RESET = 32'h0;

typedef struct packed {
    logic [11:0] reserved0;  // RSVD
    logic  [0:0] FL_FULL;  // RO/V
    logic  [0:0] FL_AEMPTY;  // RO/V
    logic  [0:0] FL_EMPTY;  // RO/V
    logic  [8:0] FL_CNT;  // RO/V
    logic  [7:0] FL_HPTR;  // RO/V
} MSTR_FL_STATUS_t;

localparam MSTR_FL_STATUS_REG_STRIDE = 48'h4;
localparam MSTR_FL_STATUS_REG_ENTRIES = 1;
localparam [47:0] MSTR_FL_STATUS_CR_ADDR = 48'h80010C4;
localparam MSTR_FL_STATUS_SIZE = 32;
localparam MSTR_FL_STATUS_FL_FULL_LO = 19;
localparam MSTR_FL_STATUS_FL_FULL_HI = 19;
localparam MSTR_FL_STATUS_FL_FULL_RESET = 1'h1;
localparam MSTR_FL_STATUS_FL_AEMPTY_LO = 18;
localparam MSTR_FL_STATUS_FL_AEMPTY_HI = 18;
localparam MSTR_FL_STATUS_FL_AEMPTY_RESET = 1'h0;
localparam MSTR_FL_STATUS_FL_EMPTY_LO = 17;
localparam MSTR_FL_STATUS_FL_EMPTY_HI = 17;
localparam MSTR_FL_STATUS_FL_EMPTY_RESET = 1'h0;
localparam MSTR_FL_STATUS_FL_CNT_LO = 8;
localparam MSTR_FL_STATUS_FL_CNT_HI = 16;
localparam MSTR_FL_STATUS_FL_CNT_RESET = 9'h100;
localparam MSTR_FL_STATUS_FL_HPTR_LO = 0;
localparam MSTR_FL_STATUS_FL_HPTR_HI = 7;
localparam MSTR_FL_STATUS_FL_HPTR_RESET = 8'h0;
localparam MSTR_FL_STATUS_USEMASK = 32'hFFFFF;
localparam MSTR_FL_STATUS_RO_MASK = 32'hFFFFF;
localparam MSTR_FL_STATUS_WO_MASK = 32'h0;
localparam MSTR_FL_STATUS_RESET = 32'h90000;

typedef struct packed {
    logic [11:0] reserved0;  // RSVD
    logic  [0:0] HPA_V;  // RO/V
    logic  [0:0] HPA_ERR;  // RO/V
    logic  [0:0] HPA_PND;  // RO/V
    logic  [0:0] VALID;  // RO/V
    logic  [7:0] HPTR;  // RO/V
    logic  [7:0] TPTR;  // RO/V
} MSTR_LL_STATUS_t;

localparam MSTR_LL_STATUS_REG_STRIDE = 48'h4;
localparam MSTR_LL_STATUS_REG_ENTRIES = 1;
localparam [47:0] MSTR_LL_STATUS_CR_ADDR = 48'h80010C8;
localparam MSTR_LL_STATUS_SIZE = 32;
localparam MSTR_LL_STATUS_HPA_V_LO = 19;
localparam MSTR_LL_STATUS_HPA_V_HI = 19;
localparam MSTR_LL_STATUS_HPA_V_RESET = 1'h0;
localparam MSTR_LL_STATUS_HPA_ERR_LO = 18;
localparam MSTR_LL_STATUS_HPA_ERR_HI = 18;
localparam MSTR_LL_STATUS_HPA_ERR_RESET = 1'h0;
localparam MSTR_LL_STATUS_HPA_PND_LO = 17;
localparam MSTR_LL_STATUS_HPA_PND_HI = 17;
localparam MSTR_LL_STATUS_HPA_PND_RESET = 1'h0;
localparam MSTR_LL_STATUS_VALID_LO = 16;
localparam MSTR_LL_STATUS_VALID_HI = 16;
localparam MSTR_LL_STATUS_VALID_RESET = 1'h0;
localparam MSTR_LL_STATUS_HPTR_LO = 8;
localparam MSTR_LL_STATUS_HPTR_HI = 15;
localparam MSTR_LL_STATUS_HPTR_RESET = 8'h0;
localparam MSTR_LL_STATUS_TPTR_LO = 0;
localparam MSTR_LL_STATUS_TPTR_HI = 7;
localparam MSTR_LL_STATUS_TPTR_RESET = 8'h0;
localparam MSTR_LL_STATUS_USEMASK = 32'hFFFFF;
localparam MSTR_LL_STATUS_RO_MASK = 32'hFFFFF;
localparam MSTR_LL_STATUS_WO_MASK = 32'h0;
localparam MSTR_LL_STATUS_RESET = 32'h0;

typedef struct packed {
    logic [11:0] reserved0;  // RSVD
    logic  [7:0] CQ_LL_LIMIT;  // RW
    logic  [0:0] CLR_HPA_ERR;  // RW
    logic  [0:0] RD_BLK;  // RW
    logic  [0:0] RD_RL;  // RW
    logic  [0:0] RD_LL;  // RW
    logic  [7:0] PTR;  // RW
} MSTR_LL_CTL_t;

localparam MSTR_LL_CTL_REG_STRIDE = 48'h4;
localparam MSTR_LL_CTL_REG_ENTRIES = 1;
localparam [47:0] MSTR_LL_CTL_CR_ADDR = 48'h80010CC;
localparam MSTR_LL_CTL_SIZE = 32;
localparam MSTR_LL_CTL_CQ_LL_LIMIT_LO = 12;
localparam MSTR_LL_CTL_CQ_LL_LIMIT_HI = 19;
localparam MSTR_LL_CTL_CQ_LL_LIMIT_RESET = 8'h10;
localparam MSTR_LL_CTL_CLR_HPA_ERR_LO = 11;
localparam MSTR_LL_CTL_CLR_HPA_ERR_HI = 11;
localparam MSTR_LL_CTL_CLR_HPA_ERR_RESET = 1'h0;
localparam MSTR_LL_CTL_RD_BLK_LO = 10;
localparam MSTR_LL_CTL_RD_BLK_HI = 10;
localparam MSTR_LL_CTL_RD_BLK_RESET = 1'h0;
localparam MSTR_LL_CTL_RD_RL_LO = 9;
localparam MSTR_LL_CTL_RD_RL_HI = 9;
localparam MSTR_LL_CTL_RD_RL_RESET = 1'h0;
localparam MSTR_LL_CTL_RD_LL_LO = 8;
localparam MSTR_LL_CTL_RD_LL_HI = 8;
localparam MSTR_LL_CTL_RD_LL_RESET = 1'h0;
localparam MSTR_LL_CTL_PTR_LO = 0;
localparam MSTR_LL_CTL_PTR_HI = 7;
localparam MSTR_LL_CTL_PTR_RESET = 8'h0;
localparam MSTR_LL_CTL_USEMASK = 32'hFFFFF;
localparam MSTR_LL_CTL_RO_MASK = 32'h0;
localparam MSTR_LL_CTL_WO_MASK = 32'h0;
localparam MSTR_LL_CTL_RESET = 32'h10000;

typedef struct packed {
    logic [16:0] reserved0;  // RSVD
    logic  [4:0] FABRIC_CPL_CREDITS;  // RO/V
    logic  [4:0] FABRIC_NP_CREDITS;  // RO/V
    logic  [4:0] FABRIC_P_CREDITS;  // RO/V
} SIF_MSTR_DEBUG_t;

localparam SIF_MSTR_DEBUG_REG_STRIDE = 48'h4;
localparam SIF_MSTR_DEBUG_REG_ENTRIES = 1;
localparam [47:0] SIF_MSTR_DEBUG_CR_ADDR = 48'h80010D0;
localparam SIF_MSTR_DEBUG_SIZE = 32;
localparam SIF_MSTR_DEBUG_FABRIC_CPL_CREDITS_LO = 10;
localparam SIF_MSTR_DEBUG_FABRIC_CPL_CREDITS_HI = 14;
localparam SIF_MSTR_DEBUG_FABRIC_CPL_CREDITS_RESET = 5'h0;
localparam SIF_MSTR_DEBUG_FABRIC_NP_CREDITS_LO = 5;
localparam SIF_MSTR_DEBUG_FABRIC_NP_CREDITS_HI = 9;
localparam SIF_MSTR_DEBUG_FABRIC_NP_CREDITS_RESET = 5'h0;
localparam SIF_MSTR_DEBUG_FABRIC_P_CREDITS_LO = 0;
localparam SIF_MSTR_DEBUG_FABRIC_P_CREDITS_HI = 4;
localparam SIF_MSTR_DEBUG_FABRIC_P_CREDITS_RESET = 5'h0;
localparam SIF_MSTR_DEBUG_USEMASK = 32'h7FFF;
localparam SIF_MSTR_DEBUG_RO_MASK = 32'h7FFF;
localparam SIF_MSTR_DEBUG_WO_MASK = 32'h0;
localparam SIF_MSTR_DEBUG_RESET = 32'h0;

typedef struct packed {
    logic [29:0] reserved0;  // RSVD
    logic  [0:0] IBCPL_UR;  // RW/1C/V
    logic  [0:0] IBCPL_ABORT;  // RW/1C/V
} IBCPL_ERR_t;

localparam IBCPL_ERR_REG_STRIDE = 48'h4;
localparam IBCPL_ERR_REG_ENTRIES = 1;
localparam [47:0] IBCPL_ERR_CR_ADDR = 48'h80010F0;
localparam IBCPL_ERR_SIZE = 32;
localparam IBCPL_ERR_IBCPL_UR_LO = 1;
localparam IBCPL_ERR_IBCPL_UR_HI = 1;
localparam IBCPL_ERR_IBCPL_UR_RESET = 1'b0;
localparam IBCPL_ERR_IBCPL_ABORT_LO = 0;
localparam IBCPL_ERR_IBCPL_ABORT_HI = 0;
localparam IBCPL_ERR_IBCPL_ABORT_RESET = 1'b0;
localparam IBCPL_ERR_USEMASK = 32'h3;
localparam IBCPL_ERR_RO_MASK = 32'h0;
localparam IBCPL_ERR_WO_MASK = 32'h0;
localparam IBCPL_ERR_RESET = 32'h0;

typedef struct packed {
    logic [31:0] HDR;  // RW/1C/V
} IBCPL_ERR_HDR_0_t;

localparam IBCPL_ERR_HDR_0_REG_STRIDE = 48'h4;
localparam IBCPL_ERR_HDR_0_REG_ENTRIES = 1;
localparam [47:0] IBCPL_ERR_HDR_0_CR_ADDR = 48'h80010F4;
localparam IBCPL_ERR_HDR_0_SIZE = 32;
localparam IBCPL_ERR_HDR_0_HDR_LO = 0;
localparam IBCPL_ERR_HDR_0_HDR_HI = 31;
localparam IBCPL_ERR_HDR_0_HDR_RESET = 32'h0;
localparam IBCPL_ERR_HDR_0_USEMASK = 32'hFFFFFFFF;
localparam IBCPL_ERR_HDR_0_RO_MASK = 32'h0;
localparam IBCPL_ERR_HDR_0_WO_MASK = 32'h0;
localparam IBCPL_ERR_HDR_0_RESET = 32'h0;

typedef struct packed {
    logic [31:0] HDR;  // RW/1C/V
} IBCPL_ERR_HDR_1_t;

localparam IBCPL_ERR_HDR_1_REG_STRIDE = 48'h4;
localparam IBCPL_ERR_HDR_1_REG_ENTRIES = 1;
localparam [47:0] IBCPL_ERR_HDR_1_CR_ADDR = 48'h80010F8;
localparam IBCPL_ERR_HDR_1_SIZE = 32;
localparam IBCPL_ERR_HDR_1_HDR_LO = 0;
localparam IBCPL_ERR_HDR_1_HDR_HI = 31;
localparam IBCPL_ERR_HDR_1_HDR_RESET = 32'h0;
localparam IBCPL_ERR_HDR_1_USEMASK = 32'hFFFFFFFF;
localparam IBCPL_ERR_HDR_1_RO_MASK = 32'h0;
localparam IBCPL_ERR_HDR_1_WO_MASK = 32'h0;
localparam IBCPL_ERR_HDR_1_RESET = 32'h0;

typedef struct packed {
    logic [31:0] HDR;  // RW/1C/V
} IBCPL_ERR_HDR_2_t;

localparam IBCPL_ERR_HDR_2_REG_STRIDE = 48'h4;
localparam IBCPL_ERR_HDR_2_REG_ENTRIES = 1;
localparam [47:0] IBCPL_ERR_HDR_2_CR_ADDR = 48'h80010FC;
localparam IBCPL_ERR_HDR_2_SIZE = 32;
localparam IBCPL_ERR_HDR_2_HDR_LO = 0;
localparam IBCPL_ERR_HDR_2_HDR_HI = 31;
localparam IBCPL_ERR_HDR_2_HDR_RESET = 32'h0;
localparam IBCPL_ERR_HDR_2_USEMASK = 32'hFFFFFFFF;
localparam IBCPL_ERR_HDR_2_RO_MASK = 32'h0;
localparam IBCPL_ERR_HDR_2_WO_MASK = 32'h0;
localparam IBCPL_ERR_HDR_2_RESET = 32'h0;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} RI_PHDR_FIFO_STATUS_t;

localparam RI_PHDR_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam RI_PHDR_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] RI_PHDR_FIFO_STATUS_CR_ADDR = 48'h8001214;
localparam RI_PHDR_FIFO_STATUS_SIZE = 32;
localparam RI_PHDR_FIFO_STATUS_DEPTH_LO = 8;
localparam RI_PHDR_FIFO_STATUS_DEPTH_HI = 31;
localparam RI_PHDR_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam RI_PHDR_FIFO_STATUS_FULL_LO = 7;
localparam RI_PHDR_FIFO_STATUS_FULL_HI = 7;
localparam RI_PHDR_FIFO_STATUS_FULL_RESET = 1'b0;
localparam RI_PHDR_FIFO_STATUS_AFULL_LO = 6;
localparam RI_PHDR_FIFO_STATUS_AFULL_HI = 6;
localparam RI_PHDR_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam RI_PHDR_FIFO_STATUS_RSVD5_LO = 5;
localparam RI_PHDR_FIFO_STATUS_RSVD5_HI = 5;
localparam RI_PHDR_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam RI_PHDR_FIFO_STATUS_EMPTY_LO = 4;
localparam RI_PHDR_FIFO_STATUS_EMPTY_HI = 4;
localparam RI_PHDR_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam RI_PHDR_FIFO_STATUS_RSVD32_LO = 2;
localparam RI_PHDR_FIFO_STATUS_RSVD32_HI = 3;
localparam RI_PHDR_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam RI_PHDR_FIFO_STATUS_OVRFLOW_LO = 1;
localparam RI_PHDR_FIFO_STATUS_OVRFLOW_HI = 1;
localparam RI_PHDR_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam RI_PHDR_FIFO_STATUS_UNDFLOW_LO = 0;
localparam RI_PHDR_FIFO_STATUS_UNDFLOW_HI = 0;
localparam RI_PHDR_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam RI_PHDR_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam RI_PHDR_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam RI_PHDR_FIFO_STATUS_WO_MASK = 32'h0;
localparam RI_PHDR_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} RI_PDATA_FIFO_STATUS_t;

localparam RI_PDATA_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam RI_PDATA_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] RI_PDATA_FIFO_STATUS_CR_ADDR = 48'h8001218;
localparam RI_PDATA_FIFO_STATUS_SIZE = 32;
localparam RI_PDATA_FIFO_STATUS_DEPTH_LO = 8;
localparam RI_PDATA_FIFO_STATUS_DEPTH_HI = 31;
localparam RI_PDATA_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam RI_PDATA_FIFO_STATUS_FULL_LO = 7;
localparam RI_PDATA_FIFO_STATUS_FULL_HI = 7;
localparam RI_PDATA_FIFO_STATUS_FULL_RESET = 1'b0;
localparam RI_PDATA_FIFO_STATUS_AFULL_LO = 6;
localparam RI_PDATA_FIFO_STATUS_AFULL_HI = 6;
localparam RI_PDATA_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam RI_PDATA_FIFO_STATUS_RSVD5_LO = 5;
localparam RI_PDATA_FIFO_STATUS_RSVD5_HI = 5;
localparam RI_PDATA_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam RI_PDATA_FIFO_STATUS_EMPTY_LO = 4;
localparam RI_PDATA_FIFO_STATUS_EMPTY_HI = 4;
localparam RI_PDATA_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam RI_PDATA_FIFO_STATUS_RSVD32_LO = 2;
localparam RI_PDATA_FIFO_STATUS_RSVD32_HI = 3;
localparam RI_PDATA_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam RI_PDATA_FIFO_STATUS_OVRFLOW_LO = 1;
localparam RI_PDATA_FIFO_STATUS_OVRFLOW_HI = 1;
localparam RI_PDATA_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam RI_PDATA_FIFO_STATUS_UNDFLOW_LO = 0;
localparam RI_PDATA_FIFO_STATUS_UNDFLOW_HI = 0;
localparam RI_PDATA_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam RI_PDATA_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam RI_PDATA_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam RI_PDATA_FIFO_STATUS_WO_MASK = 32'h0;
localparam RI_PDATA_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} RI_NPHDR_FIFO_STATUS_t;

localparam RI_NPHDR_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam RI_NPHDR_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] RI_NPHDR_FIFO_STATUS_CR_ADDR = 48'h800121C;
localparam RI_NPHDR_FIFO_STATUS_SIZE = 32;
localparam RI_NPHDR_FIFO_STATUS_DEPTH_LO = 8;
localparam RI_NPHDR_FIFO_STATUS_DEPTH_HI = 31;
localparam RI_NPHDR_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam RI_NPHDR_FIFO_STATUS_FULL_LO = 7;
localparam RI_NPHDR_FIFO_STATUS_FULL_HI = 7;
localparam RI_NPHDR_FIFO_STATUS_FULL_RESET = 1'b0;
localparam RI_NPHDR_FIFO_STATUS_AFULL_LO = 6;
localparam RI_NPHDR_FIFO_STATUS_AFULL_HI = 6;
localparam RI_NPHDR_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam RI_NPHDR_FIFO_STATUS_RSVD5_LO = 5;
localparam RI_NPHDR_FIFO_STATUS_RSVD5_HI = 5;
localparam RI_NPHDR_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam RI_NPHDR_FIFO_STATUS_EMPTY_LO = 4;
localparam RI_NPHDR_FIFO_STATUS_EMPTY_HI = 4;
localparam RI_NPHDR_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam RI_NPHDR_FIFO_STATUS_RSVD32_LO = 2;
localparam RI_NPHDR_FIFO_STATUS_RSVD32_HI = 3;
localparam RI_NPHDR_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam RI_NPHDR_FIFO_STATUS_OVRFLOW_LO = 1;
localparam RI_NPHDR_FIFO_STATUS_OVRFLOW_HI = 1;
localparam RI_NPHDR_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam RI_NPHDR_FIFO_STATUS_UNDFLOW_LO = 0;
localparam RI_NPHDR_FIFO_STATUS_UNDFLOW_HI = 0;
localparam RI_NPHDR_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam RI_NPHDR_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam RI_NPHDR_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam RI_NPHDR_FIFO_STATUS_WO_MASK = 32'h0;
localparam RI_NPHDR_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} RI_NPDATA_FIFO_STATUS_t;

localparam RI_NPDATA_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam RI_NPDATA_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] RI_NPDATA_FIFO_STATUS_CR_ADDR = 48'h8001220;
localparam RI_NPDATA_FIFO_STATUS_SIZE = 32;
localparam RI_NPDATA_FIFO_STATUS_DEPTH_LO = 8;
localparam RI_NPDATA_FIFO_STATUS_DEPTH_HI = 31;
localparam RI_NPDATA_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam RI_NPDATA_FIFO_STATUS_FULL_LO = 7;
localparam RI_NPDATA_FIFO_STATUS_FULL_HI = 7;
localparam RI_NPDATA_FIFO_STATUS_FULL_RESET = 1'b0;
localparam RI_NPDATA_FIFO_STATUS_AFULL_LO = 6;
localparam RI_NPDATA_FIFO_STATUS_AFULL_HI = 6;
localparam RI_NPDATA_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam RI_NPDATA_FIFO_STATUS_RSVD5_LO = 5;
localparam RI_NPDATA_FIFO_STATUS_RSVD5_HI = 5;
localparam RI_NPDATA_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam RI_NPDATA_FIFO_STATUS_EMPTY_LO = 4;
localparam RI_NPDATA_FIFO_STATUS_EMPTY_HI = 4;
localparam RI_NPDATA_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam RI_NPDATA_FIFO_STATUS_RSVD32_LO = 2;
localparam RI_NPDATA_FIFO_STATUS_RSVD32_HI = 3;
localparam RI_NPDATA_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam RI_NPDATA_FIFO_STATUS_OVRFLOW_LO = 1;
localparam RI_NPDATA_FIFO_STATUS_OVRFLOW_HI = 1;
localparam RI_NPDATA_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam RI_NPDATA_FIFO_STATUS_UNDFLOW_LO = 0;
localparam RI_NPDATA_FIFO_STATUS_UNDFLOW_HI = 0;
localparam RI_NPDATA_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam RI_NPDATA_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam RI_NPDATA_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam RI_NPDATA_FIFO_STATUS_WO_MASK = 32'h0;
localparam RI_NPDATA_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} RI_IOQ_FIFO_STATUS_t;

localparam RI_IOQ_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam RI_IOQ_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] RI_IOQ_FIFO_STATUS_CR_ADDR = 48'h8001224;
localparam RI_IOQ_FIFO_STATUS_SIZE = 32;
localparam RI_IOQ_FIFO_STATUS_DEPTH_LO = 8;
localparam RI_IOQ_FIFO_STATUS_DEPTH_HI = 31;
localparam RI_IOQ_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam RI_IOQ_FIFO_STATUS_FULL_LO = 7;
localparam RI_IOQ_FIFO_STATUS_FULL_HI = 7;
localparam RI_IOQ_FIFO_STATUS_FULL_RESET = 1'b0;
localparam RI_IOQ_FIFO_STATUS_AFULL_LO = 6;
localparam RI_IOQ_FIFO_STATUS_AFULL_HI = 6;
localparam RI_IOQ_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam RI_IOQ_FIFO_STATUS_RSVD5_LO = 5;
localparam RI_IOQ_FIFO_STATUS_RSVD5_HI = 5;
localparam RI_IOQ_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam RI_IOQ_FIFO_STATUS_EMPTY_LO = 4;
localparam RI_IOQ_FIFO_STATUS_EMPTY_HI = 4;
localparam RI_IOQ_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam RI_IOQ_FIFO_STATUS_RSVD32_LO = 2;
localparam RI_IOQ_FIFO_STATUS_RSVD32_HI = 3;
localparam RI_IOQ_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam RI_IOQ_FIFO_STATUS_OVRFLOW_LO = 1;
localparam RI_IOQ_FIFO_STATUS_OVRFLOW_HI = 1;
localparam RI_IOQ_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam RI_IOQ_FIFO_STATUS_UNDFLOW_LO = 0;
localparam RI_IOQ_FIFO_STATUS_UNDFLOW_HI = 0;
localparam RI_IOQ_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam RI_IOQ_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam RI_IOQ_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam RI_IOQ_FIFO_STATUS_WO_MASK = 32'h0;
localparam RI_IOQ_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} IBCPL_DATA_FIFO_STATUS_t;

localparam IBCPL_DATA_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam IBCPL_DATA_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] IBCPL_DATA_FIFO_STATUS_CR_ADDR = 48'h800122C;
localparam IBCPL_DATA_FIFO_STATUS_SIZE = 32;
localparam IBCPL_DATA_FIFO_STATUS_DEPTH_LO = 8;
localparam IBCPL_DATA_FIFO_STATUS_DEPTH_HI = 31;
localparam IBCPL_DATA_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam IBCPL_DATA_FIFO_STATUS_FULL_LO = 7;
localparam IBCPL_DATA_FIFO_STATUS_FULL_HI = 7;
localparam IBCPL_DATA_FIFO_STATUS_FULL_RESET = 1'b0;
localparam IBCPL_DATA_FIFO_STATUS_AFULL_LO = 6;
localparam IBCPL_DATA_FIFO_STATUS_AFULL_HI = 6;
localparam IBCPL_DATA_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam IBCPL_DATA_FIFO_STATUS_RSVD5_LO = 5;
localparam IBCPL_DATA_FIFO_STATUS_RSVD5_HI = 5;
localparam IBCPL_DATA_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam IBCPL_DATA_FIFO_STATUS_EMPTY_LO = 4;
localparam IBCPL_DATA_FIFO_STATUS_EMPTY_HI = 4;
localparam IBCPL_DATA_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam IBCPL_DATA_FIFO_STATUS_RSVD32_LO = 2;
localparam IBCPL_DATA_FIFO_STATUS_RSVD32_HI = 3;
localparam IBCPL_DATA_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam IBCPL_DATA_FIFO_STATUS_OVRFLOW_LO = 1;
localparam IBCPL_DATA_FIFO_STATUS_OVRFLOW_HI = 1;
localparam IBCPL_DATA_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam IBCPL_DATA_FIFO_STATUS_UNDFLOW_LO = 0;
localparam IBCPL_DATA_FIFO_STATUS_UNDFLOW_HI = 0;
localparam IBCPL_DATA_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam IBCPL_DATA_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam IBCPL_DATA_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam IBCPL_DATA_FIFO_STATUS_WO_MASK = 32'h0;
localparam IBCPL_DATA_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} OBCPL_FIFO_STATUS_t;

localparam OBCPL_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam OBCPL_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] OBCPL_FIFO_STATUS_CR_ADDR = 48'h800123C;
localparam OBCPL_FIFO_STATUS_SIZE = 32;
localparam OBCPL_FIFO_STATUS_DEPTH_LO = 8;
localparam OBCPL_FIFO_STATUS_DEPTH_HI = 31;
localparam OBCPL_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam OBCPL_FIFO_STATUS_FULL_LO = 7;
localparam OBCPL_FIFO_STATUS_FULL_HI = 7;
localparam OBCPL_FIFO_STATUS_FULL_RESET = 1'b0;
localparam OBCPL_FIFO_STATUS_AFULL_LO = 6;
localparam OBCPL_FIFO_STATUS_AFULL_HI = 6;
localparam OBCPL_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam OBCPL_FIFO_STATUS_RSVD5_LO = 5;
localparam OBCPL_FIFO_STATUS_RSVD5_HI = 5;
localparam OBCPL_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam OBCPL_FIFO_STATUS_EMPTY_LO = 4;
localparam OBCPL_FIFO_STATUS_EMPTY_HI = 4;
localparam OBCPL_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam OBCPL_FIFO_STATUS_RSVD32_LO = 2;
localparam OBCPL_FIFO_STATUS_RSVD32_HI = 3;
localparam OBCPL_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam OBCPL_FIFO_STATUS_OVRFLOW_LO = 1;
localparam OBCPL_FIFO_STATUS_OVRFLOW_HI = 1;
localparam OBCPL_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam OBCPL_FIFO_STATUS_UNDFLOW_LO = 0;
localparam OBCPL_FIFO_STATUS_UNDFLOW_HI = 0;
localparam OBCPL_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam OBCPL_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam OBCPL_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam OBCPL_FIFO_STATUS_WO_MASK = 32'h0;
localparam OBCPL_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} IBCPL_HDR_FIFO_STATUS_t;

localparam IBCPL_HDR_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam IBCPL_HDR_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] IBCPL_HDR_FIFO_STATUS_CR_ADDR = 48'h8001240;
localparam IBCPL_HDR_FIFO_STATUS_SIZE = 32;
localparam IBCPL_HDR_FIFO_STATUS_DEPTH_LO = 8;
localparam IBCPL_HDR_FIFO_STATUS_DEPTH_HI = 31;
localparam IBCPL_HDR_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam IBCPL_HDR_FIFO_STATUS_FULL_LO = 7;
localparam IBCPL_HDR_FIFO_STATUS_FULL_HI = 7;
localparam IBCPL_HDR_FIFO_STATUS_FULL_RESET = 1'b0;
localparam IBCPL_HDR_FIFO_STATUS_AFULL_LO = 6;
localparam IBCPL_HDR_FIFO_STATUS_AFULL_HI = 6;
localparam IBCPL_HDR_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam IBCPL_HDR_FIFO_STATUS_RSVD5_LO = 5;
localparam IBCPL_HDR_FIFO_STATUS_RSVD5_HI = 5;
localparam IBCPL_HDR_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam IBCPL_HDR_FIFO_STATUS_EMPTY_LO = 4;
localparam IBCPL_HDR_FIFO_STATUS_EMPTY_HI = 4;
localparam IBCPL_HDR_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam IBCPL_HDR_FIFO_STATUS_RSVD32_LO = 2;
localparam IBCPL_HDR_FIFO_STATUS_RSVD32_HI = 3;
localparam IBCPL_HDR_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam IBCPL_HDR_FIFO_STATUS_OVRFLOW_LO = 1;
localparam IBCPL_HDR_FIFO_STATUS_OVRFLOW_HI = 1;
localparam IBCPL_HDR_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam IBCPL_HDR_FIFO_STATUS_UNDFLOW_LO = 0;
localparam IBCPL_HDR_FIFO_STATUS_UNDFLOW_HI = 0;
localparam IBCPL_HDR_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam IBCPL_HDR_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam IBCPL_HDR_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam IBCPL_HDR_FIFO_STATUS_WO_MASK = 32'h0;
localparam IBCPL_HDR_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} P_RL_CQ_FIFO_STATUS_t;

localparam P_RL_CQ_FIFO_STATUS_REG_STRIDE = 48'h4;
localparam P_RL_CQ_FIFO_STATUS_REG_ENTRIES = 1;
localparam [47:0] P_RL_CQ_FIFO_STATUS_CR_ADDR = 48'h8001244;
localparam P_RL_CQ_FIFO_STATUS_SIZE = 32;
localparam P_RL_CQ_FIFO_STATUS_DEPTH_LO = 8;
localparam P_RL_CQ_FIFO_STATUS_DEPTH_HI = 31;
localparam P_RL_CQ_FIFO_STATUS_DEPTH_RESET = 24'h0;
localparam P_RL_CQ_FIFO_STATUS_FULL_LO = 7;
localparam P_RL_CQ_FIFO_STATUS_FULL_HI = 7;
localparam P_RL_CQ_FIFO_STATUS_FULL_RESET = 1'b0;
localparam P_RL_CQ_FIFO_STATUS_AFULL_LO = 6;
localparam P_RL_CQ_FIFO_STATUS_AFULL_HI = 6;
localparam P_RL_CQ_FIFO_STATUS_AFULL_RESET = 1'b0;
localparam P_RL_CQ_FIFO_STATUS_RSVD5_LO = 5;
localparam P_RL_CQ_FIFO_STATUS_RSVD5_HI = 5;
localparam P_RL_CQ_FIFO_STATUS_RSVD5_RESET = 1'b0;
localparam P_RL_CQ_FIFO_STATUS_EMPTY_LO = 4;
localparam P_RL_CQ_FIFO_STATUS_EMPTY_HI = 4;
localparam P_RL_CQ_FIFO_STATUS_EMPTY_RESET = 1'b1;
localparam P_RL_CQ_FIFO_STATUS_RSVD32_LO = 2;
localparam P_RL_CQ_FIFO_STATUS_RSVD32_HI = 3;
localparam P_RL_CQ_FIFO_STATUS_RSVD32_RESET = 2'h0;
localparam P_RL_CQ_FIFO_STATUS_OVRFLOW_LO = 1;
localparam P_RL_CQ_FIFO_STATUS_OVRFLOW_HI = 1;
localparam P_RL_CQ_FIFO_STATUS_OVRFLOW_RESET = 1'b0;
localparam P_RL_CQ_FIFO_STATUS_UNDFLOW_LO = 0;
localparam P_RL_CQ_FIFO_STATUS_UNDFLOW_HI = 0;
localparam P_RL_CQ_FIFO_STATUS_UNDFLOW_RESET = 1'b0;
localparam P_RL_CQ_FIFO_STATUS_USEMASK = 32'hFFFFFFFF;
localparam P_RL_CQ_FIFO_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam P_RL_CQ_FIFO_STATUS_WO_MASK = 32'h0;
localparam P_RL_CQ_FIFO_STATUS_RESET = 32'h10;

typedef struct packed {
    logic  [7:0] reserved0;  // RSVD
    logic  [7:0] INIT_HCREDITS_CPL;  // RO/V
    logic  [7:0] INIT_HCREDITS_NP;  // RO/V
    logic  [7:0] INIT_HCREDITS_P;  // RO/V
} TGT_INIT_HCREDITS_t;

localparam TGT_INIT_HCREDITS_REG_STRIDE = 48'h4;
localparam TGT_INIT_HCREDITS_REG_ENTRIES = 1;
localparam [47:0] TGT_INIT_HCREDITS_CR_ADDR = 48'h8001280;
localparam TGT_INIT_HCREDITS_SIZE = 32;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_CPL_LO = 16;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_CPL_HI = 23;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_CPL_RESET = 8'h0;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_NP_LO = 8;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_NP_HI = 15;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_NP_RESET = 8'h8;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_P_LO = 0;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_P_HI = 7;
localparam TGT_INIT_HCREDITS_INIT_HCREDITS_P_RESET = 8'h10;
localparam TGT_INIT_HCREDITS_USEMASK = 32'hFFFFFF;
localparam TGT_INIT_HCREDITS_RO_MASK = 32'hFFFFFF;
localparam TGT_INIT_HCREDITS_WO_MASK = 32'h0;
localparam TGT_INIT_HCREDITS_RESET = 32'h810;

typedef struct packed {
    logic  [7:0] reserved0;  // RSVD
    logic  [7:0] INIT_DCREDITS_CPL;  // RO/V
    logic  [7:0] INIT_DCREDITS_NP;  // RO/V
    logic  [7:0] INIT_DCREDITS_P;  // RO/V
} TGT_INIT_DCREDITS_t;

localparam TGT_INIT_DCREDITS_REG_STRIDE = 48'h4;
localparam TGT_INIT_DCREDITS_REG_ENTRIES = 1;
localparam [47:0] TGT_INIT_DCREDITS_CR_ADDR = 48'h8001284;
localparam TGT_INIT_DCREDITS_SIZE = 32;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_CPL_LO = 16;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_CPL_HI = 23;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_CPL_RESET = 8'h0;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_NP_LO = 8;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_NP_HI = 15;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_NP_RESET = 8'h8;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_P_LO = 0;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_P_HI = 7;
localparam TGT_INIT_DCREDITS_INIT_DCREDITS_P_RESET = 8'h30;
localparam TGT_INIT_DCREDITS_USEMASK = 32'hFFFFFF;
localparam TGT_INIT_DCREDITS_RO_MASK = 32'hFFFFFF;
localparam TGT_INIT_DCREDITS_WO_MASK = 32'h0;
localparam TGT_INIT_DCREDITS_RESET = 32'h830;

typedef struct packed {
    logic  [7:0] reserved0;  // RSVD
    logic  [7:0] REM_HCREDITS_CPL;  // RO/V
    logic  [7:0] REM_HCREDITS_NP;  // RO/V
    logic  [7:0] REM_HCREDITS_P;  // RO/V
} TGT_REM_HCREDITS_t;

localparam TGT_REM_HCREDITS_REG_STRIDE = 48'h4;
localparam TGT_REM_HCREDITS_REG_ENTRIES = 1;
localparam [47:0] TGT_REM_HCREDITS_CR_ADDR = 48'h8001288;
localparam TGT_REM_HCREDITS_SIZE = 32;
localparam TGT_REM_HCREDITS_REM_HCREDITS_CPL_LO = 16;
localparam TGT_REM_HCREDITS_REM_HCREDITS_CPL_HI = 23;
localparam TGT_REM_HCREDITS_REM_HCREDITS_CPL_RESET = 8'h0;
localparam TGT_REM_HCREDITS_REM_HCREDITS_NP_LO = 8;
localparam TGT_REM_HCREDITS_REM_HCREDITS_NP_HI = 15;
localparam TGT_REM_HCREDITS_REM_HCREDITS_NP_RESET = 8'h8;
localparam TGT_REM_HCREDITS_REM_HCREDITS_P_LO = 0;
localparam TGT_REM_HCREDITS_REM_HCREDITS_P_HI = 7;
localparam TGT_REM_HCREDITS_REM_HCREDITS_P_RESET = 8'h10;
localparam TGT_REM_HCREDITS_USEMASK = 32'hFFFFFF;
localparam TGT_REM_HCREDITS_RO_MASK = 32'hFFFFFF;
localparam TGT_REM_HCREDITS_WO_MASK = 32'h0;
localparam TGT_REM_HCREDITS_RESET = 32'h810;

typedef struct packed {
    logic  [7:0] reserved0;  // RSVD
    logic  [7:0] REM_DCREDITS_CPL;  // RO/V
    logic  [7:0] REM_DCREDITS_NP;  // RO/V
    logic  [7:0] REM_DCREDITS_P;  // RO/V
} TGT_REM_DCREDITS_t;

localparam TGT_REM_DCREDITS_REG_STRIDE = 48'h4;
localparam TGT_REM_DCREDITS_REG_ENTRIES = 1;
localparam [47:0] TGT_REM_DCREDITS_CR_ADDR = 48'h800128C;
localparam TGT_REM_DCREDITS_SIZE = 32;
localparam TGT_REM_DCREDITS_REM_DCREDITS_CPL_LO = 16;
localparam TGT_REM_DCREDITS_REM_DCREDITS_CPL_HI = 23;
localparam TGT_REM_DCREDITS_REM_DCREDITS_CPL_RESET = 8'h0;
localparam TGT_REM_DCREDITS_REM_DCREDITS_NP_LO = 8;
localparam TGT_REM_DCREDITS_REM_DCREDITS_NP_HI = 15;
localparam TGT_REM_DCREDITS_REM_DCREDITS_NP_RESET = 8'h8;
localparam TGT_REM_DCREDITS_REM_DCREDITS_P_LO = 0;
localparam TGT_REM_DCREDITS_REM_DCREDITS_P_HI = 7;
localparam TGT_REM_DCREDITS_REM_DCREDITS_P_RESET = 8'h30;
localparam TGT_REM_DCREDITS_USEMASK = 32'hFFFFFF;
localparam TGT_REM_DCREDITS_RO_MASK = 32'hFFFFFF;
localparam TGT_REM_DCREDITS_WO_MASK = 32'h0;
localparam TGT_REM_DCREDITS_RESET = 32'h830;

typedef struct packed {
    logic  [7:0] reserved0;  // RSVD
    logic  [7:0] RET_HCREDITS_CPL;  // RO/V
    logic  [7:0] RET_HCREDITS_NP;  // RO/V
    logic  [7:0] RET_HCREDITS_P;  // RO/V
} TGT_RET_HCREDITS_t;

localparam TGT_RET_HCREDITS_REG_STRIDE = 48'h4;
localparam TGT_RET_HCREDITS_REG_ENTRIES = 1;
localparam [47:0] TGT_RET_HCREDITS_CR_ADDR = 48'h8001290;
localparam TGT_RET_HCREDITS_SIZE = 32;
localparam TGT_RET_HCREDITS_RET_HCREDITS_CPL_LO = 16;
localparam TGT_RET_HCREDITS_RET_HCREDITS_CPL_HI = 23;
localparam TGT_RET_HCREDITS_RET_HCREDITS_CPL_RESET = 8'h0;
localparam TGT_RET_HCREDITS_RET_HCREDITS_NP_LO = 8;
localparam TGT_RET_HCREDITS_RET_HCREDITS_NP_HI = 15;
localparam TGT_RET_HCREDITS_RET_HCREDITS_NP_RESET = 8'h0;
localparam TGT_RET_HCREDITS_RET_HCREDITS_P_LO = 0;
localparam TGT_RET_HCREDITS_RET_HCREDITS_P_HI = 7;
localparam TGT_RET_HCREDITS_RET_HCREDITS_P_RESET = 8'h0;
localparam TGT_RET_HCREDITS_USEMASK = 32'hFFFFFF;
localparam TGT_RET_HCREDITS_RO_MASK = 32'hFFFFFF;
localparam TGT_RET_HCREDITS_WO_MASK = 32'h0;
localparam TGT_RET_HCREDITS_RESET = 32'h0;

typedef struct packed {
    logic  [7:0] reserved0;  // RSVD
    logic  [7:0] RET_DCREDITS_CPL;  // RO/V
    logic  [7:0] RET_DCREDITS_NP;  // RO/V
    logic  [7:0] RET_DCREDITS_P;  // RO/V
} TGT_RET_DCREDITS_t;

localparam TGT_RET_DCREDITS_REG_STRIDE = 48'h4;
localparam TGT_RET_DCREDITS_REG_ENTRIES = 1;
localparam [47:0] TGT_RET_DCREDITS_CR_ADDR = 48'h8001294;
localparam TGT_RET_DCREDITS_SIZE = 32;
localparam TGT_RET_DCREDITS_RET_DCREDITS_CPL_LO = 16;
localparam TGT_RET_DCREDITS_RET_DCREDITS_CPL_HI = 23;
localparam TGT_RET_DCREDITS_RET_DCREDITS_CPL_RESET = 8'h0;
localparam TGT_RET_DCREDITS_RET_DCREDITS_NP_LO = 8;
localparam TGT_RET_DCREDITS_RET_DCREDITS_NP_HI = 15;
localparam TGT_RET_DCREDITS_RET_DCREDITS_NP_RESET = 8'h0;
localparam TGT_RET_DCREDITS_RET_DCREDITS_P_LO = 0;
localparam TGT_RET_DCREDITS_RET_DCREDITS_P_HI = 7;
localparam TGT_RET_DCREDITS_RET_DCREDITS_P_RESET = 8'h0;
localparam TGT_RET_DCREDITS_USEMASK = 32'hFFFFFF;
localparam TGT_RET_DCREDITS_RO_MASK = 32'hFFFFFF;
localparam TGT_RET_DCREDITS_WO_MASK = 32'h0;
localparam TGT_RET_DCREDITS_RESET = 32'h0;

typedef struct packed {
    logic  [1:0] VERSION;  // RO
    logic  [0:0] reserved0;  // RSVD
    logic  [4:0] TIMER_PRESCALE;  // RW
    logic  [0:0] reserved1;  // RSVD
    logic  [0:0] STATTIMEROVFL;  // RW
    logic  [0:0] INTTIMEROVFL;  // RW
    logic  [0:0] STOPTIMEROVFL;  // RW
    logic  [0:0] STATCOUNTER1OVFL;  // RW
    logic  [0:0] STATCOUNTER0OVFL;  // RW
    logic  [0:0] INTCOUNTEROVFL;  // RW
    logic  [0:0] STOPCOUNTEROVFL;  // RW
    logic  [3:0] SMON_MODE;  // RW
    logic  [0:0] SMON1_FUNCTION_COMPARE;  // RW
    logic  [2:0] SMON1_FUNCTION;  // RW
    logic  [0:0] SMON0_FUNCTION_COMPARE;  // RW
    logic  [2:0] SMON0_FUNCTION;  // RW
    logic  [2:0] reserved2;  // RSVD
    logic  [0:0] SMON_ENABLE;  // RW
} AW_SMON_CONFIGURATION0_t;

localparam AW_SMON_CONFIGURATION0_REG_STRIDE = 48'h4;
localparam AW_SMON_CONFIGURATION0_REG_ENTRIES = 1;
localparam SMON_REGFILE_STRIDE = 48'h40;
localparam SMON_REGFILE_ENTRIES = 2;
localparam AW_SMON_CONFIGURATION0_CR_ADDR = 48'h8002000;
localparam AW_SMON_CONFIGURATION0_SIZE = 32;
localparam AW_SMON_CONFIGURATION0_VERSION_LO = 30;
localparam AW_SMON_CONFIGURATION0_VERSION_HI = 31;
localparam AW_SMON_CONFIGURATION0_VERSION_RESET = 2'h1;
localparam AW_SMON_CONFIGURATION0_TIMER_PRESCALE_LO = 24;
localparam AW_SMON_CONFIGURATION0_TIMER_PRESCALE_HI = 28;
localparam AW_SMON_CONFIGURATION0_TIMER_PRESCALE_RESET = 5'h0;
localparam AW_SMON_CONFIGURATION0_STATTIMEROVFL_LO = 22;
localparam AW_SMON_CONFIGURATION0_STATTIMEROVFL_HI = 22;
localparam AW_SMON_CONFIGURATION0_STATTIMEROVFL_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_INTTIMEROVFL_LO = 21;
localparam AW_SMON_CONFIGURATION0_INTTIMEROVFL_HI = 21;
localparam AW_SMON_CONFIGURATION0_INTTIMEROVFL_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_STOPTIMEROVFL_LO = 20;
localparam AW_SMON_CONFIGURATION0_STOPTIMEROVFL_HI = 20;
localparam AW_SMON_CONFIGURATION0_STOPTIMEROVFL_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_STATCOUNTER1OVFL_LO = 19;
localparam AW_SMON_CONFIGURATION0_STATCOUNTER1OVFL_HI = 19;
localparam AW_SMON_CONFIGURATION0_STATCOUNTER1OVFL_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_STATCOUNTER0OVFL_LO = 18;
localparam AW_SMON_CONFIGURATION0_STATCOUNTER0OVFL_HI = 18;
localparam AW_SMON_CONFIGURATION0_STATCOUNTER0OVFL_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_INTCOUNTEROVFL_LO = 17;
localparam AW_SMON_CONFIGURATION0_INTCOUNTEROVFL_HI = 17;
localparam AW_SMON_CONFIGURATION0_INTCOUNTEROVFL_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_STOPCOUNTEROVFL_LO = 16;
localparam AW_SMON_CONFIGURATION0_STOPCOUNTEROVFL_HI = 16;
localparam AW_SMON_CONFIGURATION0_STOPCOUNTEROVFL_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_SMON_MODE_LO = 12;
localparam AW_SMON_CONFIGURATION0_SMON_MODE_HI = 15;
localparam AW_SMON_CONFIGURATION0_SMON_MODE_RESET = 4'h0;
localparam AW_SMON_CONFIGURATION0_SMON1_FUNCTION_COMPARE_LO = 11;
localparam AW_SMON_CONFIGURATION0_SMON1_FUNCTION_COMPARE_HI = 11;
localparam AW_SMON_CONFIGURATION0_SMON1_FUNCTION_COMPARE_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_SMON1_FUNCTION_LO = 8;
localparam AW_SMON_CONFIGURATION0_SMON1_FUNCTION_HI = 10;
localparam AW_SMON_CONFIGURATION0_SMON1_FUNCTION_RESET = 3'h0;
localparam AW_SMON_CONFIGURATION0_SMON0_FUNCTION_COMPARE_LO = 7;
localparam AW_SMON_CONFIGURATION0_SMON0_FUNCTION_COMPARE_HI = 7;
localparam AW_SMON_CONFIGURATION0_SMON0_FUNCTION_COMPARE_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_SMON0_FUNCTION_LO = 4;
localparam AW_SMON_CONFIGURATION0_SMON0_FUNCTION_HI = 6;
localparam AW_SMON_CONFIGURATION0_SMON0_FUNCTION_RESET = 3'h0;
localparam AW_SMON_CONFIGURATION0_SMON_ENABLE_LO = 0;
localparam AW_SMON_CONFIGURATION0_SMON_ENABLE_HI = 0;
localparam AW_SMON_CONFIGURATION0_SMON_ENABLE_RESET = 1'h0;
localparam AW_SMON_CONFIGURATION0_USEMASK = 32'hDF7FFFF1;
localparam AW_SMON_CONFIGURATION0_RO_MASK = 32'hC0000000;
localparam AW_SMON_CONFIGURATION0_WO_MASK = 32'h0;
localparam AW_SMON_CONFIGURATION0_RESET = 32'h40000000;

typedef struct packed {
    logic [15:0] RSVD;  // RW
    logic  [7:0] MODE1;  // RW
    logic  [7:0] MODE0;  // RW
} AW_SMON_CONFIGURATION1_t;

localparam AW_SMON_CONFIGURATION1_REG_STRIDE = 48'h4;
localparam AW_SMON_CONFIGURATION1_REG_ENTRIES = 1;
localparam AW_SMON_CONFIGURATION1_CR_ADDR = 48'h8002004;
localparam AW_SMON_CONFIGURATION1_SIZE = 32;
localparam AW_SMON_CONFIGURATION1_RSVD_LO = 16;
localparam AW_SMON_CONFIGURATION1_RSVD_HI = 31;
localparam AW_SMON_CONFIGURATION1_RSVD_RESET = 16'h0;
localparam AW_SMON_CONFIGURATION1_MODE1_LO = 8;
localparam AW_SMON_CONFIGURATION1_MODE1_HI = 15;
localparam AW_SMON_CONFIGURATION1_MODE1_RESET = 8'h0;
localparam AW_SMON_CONFIGURATION1_MODE0_LO = 0;
localparam AW_SMON_CONFIGURATION1_MODE0_HI = 7;
localparam AW_SMON_CONFIGURATION1_MODE0_RESET = 8'h0;
localparam AW_SMON_CONFIGURATION1_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_CONFIGURATION1_RO_MASK = 32'h0;
localparam AW_SMON_CONFIGURATION1_WO_MASK = 32'h0;
localparam AW_SMON_CONFIGURATION1_RESET = 32'h0;

typedef struct packed {
    logic [31:0] COMPARE0;  // RW
} AW_SMON_COMPARE0_t;

localparam AW_SMON_COMPARE0_REG_STRIDE = 48'h4;
localparam AW_SMON_COMPARE0_REG_ENTRIES = 1;
localparam AW_SMON_COMPARE0_CR_ADDR = 48'h8002008;
localparam AW_SMON_COMPARE0_SIZE = 32;
localparam AW_SMON_COMPARE0_COMPARE0_LO = 0;
localparam AW_SMON_COMPARE0_COMPARE0_HI = 31;
localparam AW_SMON_COMPARE0_COMPARE0_RESET = 32'h0;
localparam AW_SMON_COMPARE0_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_COMPARE0_RO_MASK = 32'h0;
localparam AW_SMON_COMPARE0_WO_MASK = 32'h0;
localparam AW_SMON_COMPARE0_RESET = 32'h0;

typedef struct packed {
    logic [31:0] COMPARE1;  // RW
} AW_SMON_COMPARE1_t;

localparam AW_SMON_COMPARE1_REG_STRIDE = 48'h4;
localparam AW_SMON_COMPARE1_REG_ENTRIES = 1;
localparam AW_SMON_COMPARE1_CR_ADDR = 48'h800200C;
localparam AW_SMON_COMPARE1_SIZE = 32;
localparam AW_SMON_COMPARE1_COMPARE1_LO = 0;
localparam AW_SMON_COMPARE1_COMPARE1_HI = 31;
localparam AW_SMON_COMPARE1_COMPARE1_RESET = 32'h0;
localparam AW_SMON_COMPARE1_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_COMPARE1_RO_MASK = 32'h0;
localparam AW_SMON_COMPARE1_WO_MASK = 32'h0;
localparam AW_SMON_COMPARE1_RESET = 32'h0;

typedef struct packed {
    logic [31:0] COUNTER0;  // RW
} AW_SMON_ACTIVITYCOUNTER0_t;

localparam AW_SMON_ACTIVITYCOUNTER0_REG_STRIDE = 48'h4;
localparam AW_SMON_ACTIVITYCOUNTER0_REG_ENTRIES = 1;
localparam AW_SMON_ACTIVITYCOUNTER0_CR_ADDR = 48'h8002010;
localparam AW_SMON_ACTIVITYCOUNTER0_SIZE = 32;
localparam AW_SMON_ACTIVITYCOUNTER0_COUNTER0_LO = 0;
localparam AW_SMON_ACTIVITYCOUNTER0_COUNTER0_HI = 31;
localparam AW_SMON_ACTIVITYCOUNTER0_COUNTER0_RESET = 32'h0;
localparam AW_SMON_ACTIVITYCOUNTER0_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_ACTIVITYCOUNTER0_RO_MASK = 32'h0;
localparam AW_SMON_ACTIVITYCOUNTER0_WO_MASK = 32'h0;
localparam AW_SMON_ACTIVITYCOUNTER0_RESET = 32'h0;

typedef struct packed {
    logic [31:0] COUNTER1;  // RW
} AW_SMON_ACTIVITYCOUNTER1_t;

localparam AW_SMON_ACTIVITYCOUNTER1_REG_STRIDE = 48'h4;
localparam AW_SMON_ACTIVITYCOUNTER1_REG_ENTRIES = 1;
localparam AW_SMON_ACTIVITYCOUNTER1_CR_ADDR = 48'h8002014;
localparam AW_SMON_ACTIVITYCOUNTER1_SIZE = 32;
localparam AW_SMON_ACTIVITYCOUNTER1_COUNTER1_LO = 0;
localparam AW_SMON_ACTIVITYCOUNTER1_COUNTER1_HI = 31;
localparam AW_SMON_ACTIVITYCOUNTER1_COUNTER1_RESET = 32'h0;
localparam AW_SMON_ACTIVITYCOUNTER1_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_ACTIVITYCOUNTER1_RO_MASK = 32'h0;
localparam AW_SMON_ACTIVITYCOUNTER1_WO_MASK = 32'h0;
localparam AW_SMON_ACTIVITYCOUNTER1_RESET = 32'h0;

typedef struct packed {
    logic [31:0] TIMER_VAL;  // RW
} AW_SMON_TIMER_t;

localparam AW_SMON_TIMER_REG_STRIDE = 48'h4;
localparam AW_SMON_TIMER_REG_ENTRIES = 1;
localparam AW_SMON_TIMER_CR_ADDR = 48'h8002018;
localparam AW_SMON_TIMER_SIZE = 32;
localparam AW_SMON_TIMER_TIMER_VAL_LO = 0;
localparam AW_SMON_TIMER_TIMER_VAL_HI = 31;
localparam AW_SMON_TIMER_TIMER_VAL_RESET = 32'h0;
localparam AW_SMON_TIMER_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_TIMER_RO_MASK = 32'h0;
localparam AW_SMON_TIMER_WO_MASK = 32'h0;
localparam AW_SMON_TIMER_RESET = 32'h0;

typedef struct packed {
    logic [31:0] MAXVALUE;  // RW
} AW_SMON_MAXIMUM_TIMER_t;

localparam AW_SMON_MAXIMUM_TIMER_REG_STRIDE = 48'h4;
localparam AW_SMON_MAXIMUM_TIMER_REG_ENTRIES = 1;
localparam AW_SMON_MAXIMUM_TIMER_CR_ADDR = 48'h800201C;
localparam AW_SMON_MAXIMUM_TIMER_SIZE = 32;
localparam AW_SMON_MAXIMUM_TIMER_MAXVALUE_LO = 0;
localparam AW_SMON_MAXIMUM_TIMER_MAXVALUE_HI = 31;
localparam AW_SMON_MAXIMUM_TIMER_MAXVALUE_RESET = 32'h0;
localparam AW_SMON_MAXIMUM_TIMER_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_MAXIMUM_TIMER_RO_MASK = 32'h0;
localparam AW_SMON_MAXIMUM_TIMER_WO_MASK = 32'h0;
localparam AW_SMON_MAXIMUM_TIMER_RESET = 32'h0;

typedef struct packed {
    logic [31:0] COMP_MASK0;  // RW
} AW_SMON_COMP_MASK0_t;

localparam AW_SMON_COMP_MASK0_REG_STRIDE = 48'h4;
localparam AW_SMON_COMP_MASK0_REG_ENTRIES = 1;
localparam AW_SMON_COMP_MASK0_CR_ADDR = 48'h8002020;
localparam AW_SMON_COMP_MASK0_SIZE = 32;
localparam AW_SMON_COMP_MASK0_COMP_MASK0_LO = 0;
localparam AW_SMON_COMP_MASK0_COMP_MASK0_HI = 31;
localparam AW_SMON_COMP_MASK0_COMP_MASK0_RESET = 32'hffffffff;
localparam AW_SMON_COMP_MASK0_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_COMP_MASK0_RO_MASK = 32'h0;
localparam AW_SMON_COMP_MASK0_WO_MASK = 32'h0;
localparam AW_SMON_COMP_MASK0_RESET = 32'hFFFFFFFF;

typedef struct packed {
    logic [31:0] COMP_MASK1;  // RW
} AW_SMON_COMP_MASK1_t;

localparam AW_SMON_COMP_MASK1_REG_STRIDE = 48'h4;
localparam AW_SMON_COMP_MASK1_REG_ENTRIES = 1;
localparam AW_SMON_COMP_MASK1_CR_ADDR = 48'h8002024;
localparam AW_SMON_COMP_MASK1_SIZE = 32;
localparam AW_SMON_COMP_MASK1_COMP_MASK1_LO = 0;
localparam AW_SMON_COMP_MASK1_COMP_MASK1_HI = 31;
localparam AW_SMON_COMP_MASK1_COMP_MASK1_RESET = 32'hffffffff;
localparam AW_SMON_COMP_MASK1_USEMASK = 32'hFFFFFFFF;
localparam AW_SMON_COMP_MASK1_RO_MASK = 32'h0;
localparam AW_SMON_COMP_MASK1_WO_MASK = 32'h0;
localparam AW_SMON_COMP_MASK1_RESET = 32'hFFFFFFFF;

typedef struct packed {
    logic [31:0] FUSES;  // RO/V
} HQM_PULLED_FUSES_0_t;

localparam HQM_PULLED_FUSES_0_REG_STRIDE = 48'h4;
localparam HQM_PULLED_FUSES_0_REG_ENTRIES = 1;
localparam [47:0] HQM_PULLED_FUSES_0_CR_ADDR = 48'h8003000;
localparam HQM_PULLED_FUSES_0_SIZE = 32;
localparam HQM_PULLED_FUSES_0_FUSES_LO = 0;
localparam HQM_PULLED_FUSES_0_FUSES_HI = 31;
localparam HQM_PULLED_FUSES_0_FUSES_RESET = 32'h0;
localparam HQM_PULLED_FUSES_0_USEMASK = 32'hFFFFFFFF;
localparam HQM_PULLED_FUSES_0_RO_MASK = 32'hFFFFFFFF;
localparam HQM_PULLED_FUSES_0_WO_MASK = 32'h0;
localparam HQM_PULLED_FUSES_0_RESET = 32'h0;

typedef struct packed {
    HQM_CSR_CP_LO_t  HQM_CSR_CP_LO;
    HQM_CSR_CP_HI_t  HQM_CSR_CP_HI;
    HQM_CSR_RAC_LO_t  HQM_CSR_RAC_LO;
    HQM_CSR_RAC_HI_t  HQM_CSR_RAC_HI;
    HQM_CSR_WAC_LO_t  HQM_CSR_WAC_LO;
    HQM_CSR_WAC_HI_t  HQM_CSR_WAC_HI;
    SIF_CTL_t  SIF_CTL;
    SIF_VC_RXMAP_t  SIF_VC_RXMAP;
    SIF_VC_TXMAP_t  SIF_VC_TXMAP;
    DEVTLB_ATS_ERR_t  DEVTLB_ATS_ERR;
    SIF_ALARM_ERR_t  SIF_ALARM_ERR;
    RI_PARITY_ERR_t  RI_PARITY_ERR;
    SIF_PARITY_ERR_t  SIF_PARITY_ERR;
    HQM_SIF_CNT_CTL_t  HQM_SIF_CNT_CTL;
    DIR_CQ2TC_MAP_t  DIR_CQ2TC_MAP;
    LDB_CQ2TC_MAP_t  LDB_CQ2TC_MAP;
    INT2TC_MAP_t  INT2TC_MAP;
    CFG_UNIT_VERSION_t  CFG_UNIT_VERSION;
    HQM_SIF_CNT_0_t  HQM_SIF_CNT_0;
    HQM_SIF_CNT_1_t  HQM_SIF_CNT_1;
    HQM_SIF_CNT_2_t  HQM_SIF_CNT_2;
    HQM_SIF_CNT_3_t  HQM_SIF_CNT_3;
    HQM_SIF_CNT_4_t  HQM_SIF_CNT_4;
    HQM_SIF_CNT_5_t  HQM_SIF_CNT_5;
    HQM_SIF_CNT_6_t  HQM_SIF_CNT_6;
    HQM_SIF_CNT_7_t  HQM_SIF_CNT_7;
    HQM_SIF_CNT_8_t  HQM_SIF_CNT_8;
    HQM_SIF_CNT_9_t  HQM_SIF_CNT_9;
    HQM_SIF_CNT_10_t  HQM_SIF_CNT_10;
    HQM_SIF_CNT_11_t  HQM_SIF_CNT_11;
    OBCPL_AFULL_AGITATE_CONTROL_t  OBCPL_AFULL_AGITATE_CONTROL;
    PRIM_CDC_CTL_t  PRIM_CDC_CTL;
    SIDE_CDC_CTL_t  SIDE_CDC_CTL;
    IOSFP_CGCTL_t  IOSFP_CGCTL;
    IOSFS_CGCTL_t  IOSFS_CGCTL;
    PARITY_CTL_t  PARITY_CTL;
    CFG_MASTER_TIMEOUT_t  CFG_MASTER_TIMEOUT;
    MMIO_TIMEOUT_t  MMIO_TIMEOUT;
    HCW_TIMEOUT_t  HCW_TIMEOUT;
    CFG_PH_TRIGGER_ADDR_L_t  CFG_PH_TRIGGER_ADDR_L;
    CFG_PH_TRIGGER_ADDR_U_t  CFG_PH_TRIGGER_ADDR_U;
    CFG_PH_TRIGGER_MASK_L_t  CFG_PH_TRIGGER_MASK_L;
    CFG_PH_TRIGGER_MASK_U_t  CFG_PH_TRIGGER_MASK_U;
    SIF_IDLE_STATUS_t  SIF_IDLE_STATUS;
    SIF_DB_STATUS_t  SIF_DB_STATUS;
    RI_DB_STATUS_t  RI_DB_STATUS;
    RI_PHDR_FIFO_CTL_t  RI_PHDR_FIFO_CTL;
    RI_PDATA_FIFO_CTL_t  RI_PDATA_FIFO_CTL;
    RI_NPHDR_FIFO_CTL_t  RI_NPHDR_FIFO_CTL;
    RI_NPDATA_FIFO_CTL_t  RI_NPDATA_FIFO_CTL;
    RI_IOQ_FIFO_CTL_t  RI_IOQ_FIFO_CTL;
    IBCPL_HDR_FIFO_CTL_t  IBCPL_HDR_FIFO_CTL;
    IBCPL_DATA_FIFO_CTL_t  IBCPL_DATA_FIFO_CTL;
    SCRBD_CTL_t  SCRBD_CTL;
    SCRBD_STATUS_t  SCRBD_STATUS;
    DEVTLB_CTL_t  DEVTLB_CTL;
    DEVTLB_SPARE_t  DEVTLB_SPARE;
    DEVTLB_DEFEATURE0_t  DEVTLB_DEFEATURE0;
    DEVTLB_DEFEATURE1_t  DEVTLB_DEFEATURE1;
    DEVTLB_DEFEATURE2_t  DEVTLB_DEFEATURE2;
    DEVTLB_STATUS_t  DEVTLB_STATUS;
    CFGM_STATUS_t  CFGM_STATUS;
    CFGM_STATUS2_t  CFGM_STATUS2;
    LOCAL_BME_STATUS_t  LOCAL_BME_STATUS;
    LOCAL_MSIXE_STATUS_t  LOCAL_MSIXE_STATUS;
    MSTR_CRD_STATUS_t  MSTR_CRD_STATUS;
    MSTR_FL_STATUS_t  MSTR_FL_STATUS;
    MSTR_LL_STATUS_t  MSTR_LL_STATUS;
    MSTR_LL_CTL_t  MSTR_LL_CTL;
    SIF_MSTR_DEBUG_t  SIF_MSTR_DEBUG;
    IBCPL_ERR_t  IBCPL_ERR;
    IBCPL_ERR_HDR_0_t  IBCPL_ERR_HDR_0;
    IBCPL_ERR_HDR_1_t  IBCPL_ERR_HDR_1;
    IBCPL_ERR_HDR_2_t  IBCPL_ERR_HDR_2;
    RI_PHDR_FIFO_STATUS_t  RI_PHDR_FIFO_STATUS;
    RI_PDATA_FIFO_STATUS_t  RI_PDATA_FIFO_STATUS;
    RI_NPHDR_FIFO_STATUS_t  RI_NPHDR_FIFO_STATUS;
    RI_NPDATA_FIFO_STATUS_t  RI_NPDATA_FIFO_STATUS;
    RI_IOQ_FIFO_STATUS_t  RI_IOQ_FIFO_STATUS;
    IBCPL_DATA_FIFO_STATUS_t  IBCPL_DATA_FIFO_STATUS;
    OBCPL_FIFO_STATUS_t  OBCPL_FIFO_STATUS;
    IBCPL_HDR_FIFO_STATUS_t  IBCPL_HDR_FIFO_STATUS;
    P_RL_CQ_FIFO_STATUS_t  P_RL_CQ_FIFO_STATUS;
    TGT_INIT_HCREDITS_t  TGT_INIT_HCREDITS;
    TGT_INIT_DCREDITS_t  TGT_INIT_DCREDITS;
    TGT_REM_HCREDITS_t  TGT_REM_HCREDITS;
    TGT_REM_DCREDITS_t  TGT_REM_DCREDITS;
    TGT_RET_HCREDITS_t  TGT_RET_HCREDITS;
    TGT_RET_DCREDITS_t  TGT_RET_DCREDITS;
    HQM_PULLED_FUSES_0_t  HQM_PULLED_FUSES_0;
} hqm_sif_csr_registers_t;

// ===================================================
// load

typedef struct packed {
    logic  [0:0] DPERROR;  // RW/1C/V
    logic  [0:0] HDRERROR;  // RW/1C/V
    logic  [0:0] BAD_RESULT;  // RW/1C/V
} load_DEVTLB_ATS_ERR_t;

typedef struct packed {
    logic  [0:0] DEVTLB_ATS_ERROR;  // RW/1C/V
    logic  [0:0] CPL_ERROR;  // RW/1C/V
    logic  [0:0] RF_IPAR_ERROR;  // RW/1C/V
    logic  [0:0] CFGM_TARGET_ERR;  // RW/1C/V
    logic  [0:0] SIF_PARITY_ERR;  // RW/1C/V
    logic  [0:0] RI_PARITY_ERR;  // RW/1C/V
    logic  [0:0] FIFO_OVERFLOW;  // RW/1C/V
    logic  [0:0] FIFO_UNDERFLOW;  // RW/1C/V
    logic  [0:0] SB_EP_PARITY_ERR;  // RW/1C/V
    logic  [0:0] TIMEOUT;  // RW/1C/V
} load_SIF_ALARM_ERR_t;

typedef struct packed {
    logic  [0:0] CBD_HDR_PERR;  // RW/1C/V
    logic  [0:0] CBD_DATA_PERR;  // RW/1C/V
    logic  [0:0] HCW_DATA_PERR;  // RW/1C/V
    logic  [0:0] PH_FIFO_SCREAM;  // RW/1C/V
    logic  [0:0] PH_FIFO_PERR;  // RW/1C/V
    logic  [0:0] PD_FIFO_PERR;  // RW/1C/V
    logic  [0:0] NPH_FIFO_SCREAM;  // RW/1C/V
    logic  [0:0] NPH_FIFO_PERR;  // RW/1C/V
    logic  [0:0] NPD_FIFO_PERR;  // RW/1C/V
} load_RI_PARITY_ERR_t;

typedef struct packed {
    logic  [0:0] GPSB_PERR;  // RW/1C/V/P
    logic  [0:0] SCRBD_PERR;  // RW/1C/V
    logic  [0:0] IBCPL_DATA_FIFO_PERR;  // RW/1C/V
    logic  [0:0] IBCPL_HDR_FIFO_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_1G_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_2M_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_4K_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_1G_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_2M_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_4K_PERR;  // RW/1C/V
} load_SIF_PARITY_ERR_t;

typedef struct packed {
    logic  [0:0] IBCPL_UR;  // RW/1C/V
    logic  [0:0] IBCPL_ABORT;  // RW/1C/V
} load_IBCPL_ERR_t;

typedef struct packed {
    logic  [0:0] HDR;  // RW/1C/V
} load_IBCPL_ERR_HDR_0_t;

typedef struct packed {
    logic  [0:0] HDR;  // RW/1C/V
} load_IBCPL_ERR_HDR_1_t;

typedef struct packed {
    logic  [0:0] HDR;  // RW/1C/V
} load_IBCPL_ERR_HDR_2_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_RI_PHDR_FIFO_STATUS_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_RI_PDATA_FIFO_STATUS_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_RI_NPHDR_FIFO_STATUS_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_RI_NPDATA_FIFO_STATUS_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_RI_IOQ_FIFO_STATUS_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_IBCPL_DATA_FIFO_STATUS_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_OBCPL_FIFO_STATUS_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_IBCPL_HDR_FIFO_STATUS_t;

typedef struct packed {
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} load_P_RL_CQ_FIFO_STATUS_t;

typedef struct packed {
    load_DEVTLB_ATS_ERR_t  DEVTLB_ATS_ERR;
    load_SIF_ALARM_ERR_t  SIF_ALARM_ERR;
    load_RI_PARITY_ERR_t  RI_PARITY_ERR;
    load_SIF_PARITY_ERR_t  SIF_PARITY_ERR;
    load_IBCPL_ERR_t  IBCPL_ERR;
    load_IBCPL_ERR_HDR_0_t  IBCPL_ERR_HDR_0;
    load_IBCPL_ERR_HDR_1_t  IBCPL_ERR_HDR_1;
    load_IBCPL_ERR_HDR_2_t  IBCPL_ERR_HDR_2;
    load_RI_PHDR_FIFO_STATUS_t  RI_PHDR_FIFO_STATUS;
    load_RI_PDATA_FIFO_STATUS_t  RI_PDATA_FIFO_STATUS;
    load_RI_NPHDR_FIFO_STATUS_t  RI_NPHDR_FIFO_STATUS;
    load_RI_NPDATA_FIFO_STATUS_t  RI_NPDATA_FIFO_STATUS;
    load_RI_IOQ_FIFO_STATUS_t  RI_IOQ_FIFO_STATUS;
    load_IBCPL_DATA_FIFO_STATUS_t  IBCPL_DATA_FIFO_STATUS;
    load_OBCPL_FIFO_STATUS_t  OBCPL_FIFO_STATUS;
    load_IBCPL_HDR_FIFO_STATUS_t  IBCPL_HDR_FIFO_STATUS;
    load_P_RL_CQ_FIFO_STATUS_t  P_RL_CQ_FIFO_STATUS;
} hqm_sif_csr_load_t;

// ===================================================
// lock

typedef struct packed {
   logic HQM_OS_W_control_en;
   logic HQM_OS_W_read_en;
   logic HQM_OS_W_write_en;
} hqm_sif_csr_sai_export_t;

// ===================================================
// valid (so far used by WO registers)

// ===================================================
// new

typedef struct packed {
    logic  [0:0] DPERROR;  // RW/1C/V
    logic  [0:0] HDRERROR;  // RW/1C/V
    logic  [0:0] BAD_RESULT;  // RW/1C/V
} new_DEVTLB_ATS_ERR_t;

typedef struct packed {
    logic  [0:0] DEVTLB_ATS_ERROR;  // RW/1C/V
    logic  [0:0] CPL_ERROR;  // RW/1C/V
    logic  [0:0] RF_IPAR_ERROR;  // RW/1C/V
    logic  [0:0] CFGM_TARGET_ERR;  // RW/1C/V
    logic  [0:0] SIF_PARITY_ERR;  // RW/1C/V
    logic  [0:0] RI_PARITY_ERR;  // RW/1C/V
    logic  [0:0] FIFO_OVERFLOW;  // RW/1C/V
    logic  [0:0] FIFO_UNDERFLOW;  // RW/1C/V
    logic  [0:0] SB_EP_PARITY_ERR;  // RW/1C/V
    logic  [0:0] TIMEOUT;  // RW/1C/V
} new_SIF_ALARM_ERR_t;

typedef struct packed {
    logic  [0:0] CBD_HDR_PERR;  // RW/1C/V
    logic  [0:0] CBD_DATA_PERR;  // RW/1C/V
    logic  [0:0] HCW_DATA_PERR;  // RW/1C/V
    logic  [0:0] PH_FIFO_SCREAM;  // RW/1C/V
    logic  [0:0] PH_FIFO_PERR;  // RW/1C/V
    logic  [0:0] PD_FIFO_PERR;  // RW/1C/V
    logic  [0:0] NPH_FIFO_SCREAM;  // RW/1C/V
    logic  [0:0] NPH_FIFO_PERR;  // RW/1C/V
    logic  [0:0] NPD_FIFO_PERR;  // RW/1C/V
} new_RI_PARITY_ERR_t;

typedef struct packed {
    logic  [0:0] GPSB_PERR;  // RW/1C/V/P
    logic  [0:0] SCRBD_PERR;  // RW/1C/V
    logic  [0:0] IBCPL_DATA_FIFO_PERR;  // RW/1C/V
    logic  [0:0] IBCPL_HDR_FIFO_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_1G_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_2M_PERR;  // RW/1C/V
    logic  [0:0] TLB_DATA_4K_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_1G_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_2M_PERR;  // RW/1C/V
    logic  [0:0] TLB_TAG_4K_PERR;  // RW/1C/V
} new_SIF_PARITY_ERR_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_0_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_1_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_2_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_3_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_4_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_5_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_6_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_7_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_8_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_9_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_10_t;

typedef struct packed {
    logic [31:0] CNT;  // RO/V
} new_HQM_SIF_CNT_11_t;

typedef struct packed {
    logic  [0:0] PROC_IDLE;  // RO/V
    logic  [0:0] INT_IDLE;  // RO/V
    logic  [0:0] MSTR_IDLE;  // RO/V
    logic  [0:0] MSTR_INTF_IDLE;  // RO/V
    logic  [0:0] TGT_IDLE;  // RO/V
    logic  [0:0] RI_IDLE;  // RO/V
    logic  [0:0] CFGM_IDLE;  // RO/V
} new_SIF_IDLE_STATUS_t;

typedef struct packed {
    logic  [0:0] CPL_REQ_DB_READY;  // RO/V
    logic  [1:0] CPL_REQ_DB_DEPTH;  // RO/V
    logic  [0:0] NP_REQ_DB_READY;  // RO/V
    logic  [1:0] NP_REQ_DB_DEPTH;  // RO/V
    logic  [0:0] P_REQ_DB_READY;  // RO/V
    logic  [1:0] P_REQ_DB_DEPTH;  // RO/V
    logic  [0:0] ALARM_DB_READY;  // RO/V
    logic  [1:0] ALARM_DB_DEPTH;  // RO/V
} new_SIF_DB_STATUS_t;

typedef struct packed {
    logic  [0:0] HCW_DB_READY;  // RO/V
    logic  [1:0] HCW_DB_DEPTH;  // RO/V
    logic  [0:0] IOQ_DB_READY;  // RO/V
    logic  [1:0] IOQ_DB_DEPTH;  // RO/V
    logic  [0:0] NPD_DB_READY;  // RO/V
    logic  [1:0] NPD_DB_DEPTH;  // RO/V
    logic  [0:0] NPH_DB_READY;  // RO/V
    logic  [1:0] NPH_DB_DEPTH;  // RO/V
    logic  [0:0] PD_DB_READY;  // RO/V
    logic  [1:0] PD_DB_DEPTH;  // RO/V
    logic  [0:0] PH_DB_READY;  // RO/V
    logic  [1:0] PH_DB_DEPTH;  // RO/V
} new_RI_DB_STATUS_t;

typedef struct packed {
    logic  [0:0] STOPNSCREAM;  // RO/V
    logic  [0:0] TIM_INUSE;  // RO/V
    logic  [0:0] TO_PEND;  // RO/V
    logic  [8:0] SCRBD_CNT;  // RO/V
} new_SCRBD_STATUS_t;

typedef struct packed {
    logic  [6:0] XREQ_CNT;  // RO/V
    logic  [5:0] ATS_REQ_CNT;  // RO/V
    logic  [0:0] DRAIN_REQ_V;  // RO/V
    logic  [0:0] TX_MSG_V;  // RO/V
    logic  [0:0] ATS_HREQ_V;  // RO/V
    logic  [0:0] ATS_LREQ_V;  // RO/V
    logic  [2:0] HCRD_CNT;  // RO/V
    logic  [2:0] LCRD_CNT;  // RO/V
    logic  [0:0] ATS_ENABLED;  // RO/V
    logic  [0:0] RESET_ACTIVE;  // RO/V
    logic  [0:0] INVREQS_ACTIVE;  // RO/V
    logic  [0:0] XREQS_ACTIVE;  // RO/V
} new_DEVTLB_STATUS_t;

typedef struct packed {
    logic [31:0] PADDR;  // RO/V
} new_CFGM_STATUS_t;

typedef struct packed {
    logic  [0:0] PSEL;  // RO/V
    logic  [0:0] PSLVERR;  // RO/V
    logic  [0:0] PWRITE;  // RO/V
    logic [28:0] PWDATA;  // RO/V
} new_CFGM_STATUS2_t;

typedef struct packed {
    logic  [0:0] BME_PF;  // RO/V
} new_LOCAL_BME_STATUS_t;

typedef struct packed {
    logic  [0:0] MSIXE_PF;  // RO/V
} new_LOCAL_MSIXE_STATUS_t;

typedef struct packed {
    logic  [4:0] CPL_REQ_PUT_CNT;  // RO/V
    logic  [4:0] NP_REQ_PUT_CNT;  // RO/V
    logic  [4:0] P_REQ_PUT_CNT;  // RO/V
} new_MSTR_CRD_STATUS_t;

typedef struct packed {
    logic  [0:0] FL_FULL;  // RO/V
    logic  [0:0] FL_AEMPTY;  // RO/V
    logic  [0:0] FL_EMPTY;  // RO/V
    logic  [8:0] FL_CNT;  // RO/V
    logic  [7:0] FL_HPTR;  // RO/V
} new_MSTR_FL_STATUS_t;

typedef struct packed {
    logic  [0:0] HPA_V;  // RO/V
    logic  [0:0] HPA_ERR;  // RO/V
    logic  [0:0] HPA_PND;  // RO/V
    logic  [0:0] VALID;  // RO/V
    logic  [7:0] HPTR;  // RO/V
    logic  [7:0] TPTR;  // RO/V
} new_MSTR_LL_STATUS_t;

typedef struct packed {
    logic  [4:0] FABRIC_CPL_CREDITS;  // RO/V
    logic  [4:0] FABRIC_NP_CREDITS;  // RO/V
    logic  [4:0] FABRIC_P_CREDITS;  // RO/V
} new_SIF_MSTR_DEBUG_t;

typedef struct packed {
    logic  [0:0] IBCPL_UR;  // RW/1C/V
    logic  [0:0] IBCPL_ABORT;  // RW/1C/V
} new_IBCPL_ERR_t;

typedef struct packed {
    logic [31:0] HDR;  // RW/1C/V
} new_IBCPL_ERR_HDR_0_t;

typedef struct packed {
    logic [31:0] HDR;  // RW/1C/V
} new_IBCPL_ERR_HDR_1_t;

typedef struct packed {
    logic [31:0] HDR;  // RW/1C/V
} new_IBCPL_ERR_HDR_2_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_RI_PHDR_FIFO_STATUS_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_RI_PDATA_FIFO_STATUS_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_RI_NPHDR_FIFO_STATUS_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_RI_NPDATA_FIFO_STATUS_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_RI_IOQ_FIFO_STATUS_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_IBCPL_DATA_FIFO_STATUS_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_OBCPL_FIFO_STATUS_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_IBCPL_HDR_FIFO_STATUS_t;

typedef struct packed {
    logic [23:0] DEPTH;  // RO/V
    logic  [0:0] FULL;  // RO/V
    logic  [0:0] AFULL;  // RO/V
    logic  [0:0] RSVD5;  // RO/V
    logic  [0:0] EMPTY;  // RO/V
    logic  [1:0] RSVD32;  // RO/V
    logic  [0:0] OVRFLOW;  // RW/1C/V
    logic  [0:0] UNDFLOW;  // RW/1C/V
} new_P_RL_CQ_FIFO_STATUS_t;

typedef struct packed {
    logic  [7:0] INIT_HCREDITS_CPL;  // RO/V
    logic  [7:0] INIT_HCREDITS_NP;  // RO/V
    logic  [7:0] INIT_HCREDITS_P;  // RO/V
} new_TGT_INIT_HCREDITS_t;

typedef struct packed {
    logic  [7:0] INIT_DCREDITS_CPL;  // RO/V
    logic  [7:0] INIT_DCREDITS_NP;  // RO/V
    logic  [7:0] INIT_DCREDITS_P;  // RO/V
} new_TGT_INIT_DCREDITS_t;

typedef struct packed {
    logic  [7:0] REM_HCREDITS_CPL;  // RO/V
    logic  [7:0] REM_HCREDITS_NP;  // RO/V
    logic  [7:0] REM_HCREDITS_P;  // RO/V
} new_TGT_REM_HCREDITS_t;

typedef struct packed {
    logic  [7:0] REM_DCREDITS_CPL;  // RO/V
    logic  [7:0] REM_DCREDITS_NP;  // RO/V
    logic  [7:0] REM_DCREDITS_P;  // RO/V
} new_TGT_REM_DCREDITS_t;

typedef struct packed {
    logic  [7:0] RET_HCREDITS_CPL;  // RO/V
    logic  [7:0] RET_HCREDITS_NP;  // RO/V
    logic  [7:0] RET_HCREDITS_P;  // RO/V
} new_TGT_RET_HCREDITS_t;

typedef struct packed {
    logic  [7:0] RET_DCREDITS_CPL;  // RO/V
    logic  [7:0] RET_DCREDITS_NP;  // RO/V
    logic  [7:0] RET_DCREDITS_P;  // RO/V
} new_TGT_RET_DCREDITS_t;

typedef struct packed {
    logic [31:0] FUSES;  // RO/V
} new_HQM_PULLED_FUSES_0_t;

typedef struct packed {
    new_DEVTLB_ATS_ERR_t  DEVTLB_ATS_ERR;
    new_SIF_ALARM_ERR_t  SIF_ALARM_ERR;
    new_RI_PARITY_ERR_t  RI_PARITY_ERR;
    new_SIF_PARITY_ERR_t  SIF_PARITY_ERR;
    new_HQM_SIF_CNT_0_t  HQM_SIF_CNT_0;
    new_HQM_SIF_CNT_1_t  HQM_SIF_CNT_1;
    new_HQM_SIF_CNT_2_t  HQM_SIF_CNT_2;
    new_HQM_SIF_CNT_3_t  HQM_SIF_CNT_3;
    new_HQM_SIF_CNT_4_t  HQM_SIF_CNT_4;
    new_HQM_SIF_CNT_5_t  HQM_SIF_CNT_5;
    new_HQM_SIF_CNT_6_t  HQM_SIF_CNT_6;
    new_HQM_SIF_CNT_7_t  HQM_SIF_CNT_7;
    new_HQM_SIF_CNT_8_t  HQM_SIF_CNT_8;
    new_HQM_SIF_CNT_9_t  HQM_SIF_CNT_9;
    new_HQM_SIF_CNT_10_t  HQM_SIF_CNT_10;
    new_HQM_SIF_CNT_11_t  HQM_SIF_CNT_11;
    new_SIF_IDLE_STATUS_t  SIF_IDLE_STATUS;
    new_SIF_DB_STATUS_t  SIF_DB_STATUS;
    new_RI_DB_STATUS_t  RI_DB_STATUS;
    new_SCRBD_STATUS_t  SCRBD_STATUS;
    new_DEVTLB_STATUS_t  DEVTLB_STATUS;
    new_CFGM_STATUS_t  CFGM_STATUS;
    new_CFGM_STATUS2_t  CFGM_STATUS2;
    new_LOCAL_BME_STATUS_t  LOCAL_BME_STATUS;
    new_LOCAL_MSIXE_STATUS_t  LOCAL_MSIXE_STATUS;
    new_MSTR_CRD_STATUS_t  MSTR_CRD_STATUS;
    new_MSTR_FL_STATUS_t  MSTR_FL_STATUS;
    new_MSTR_LL_STATUS_t  MSTR_LL_STATUS;
    new_SIF_MSTR_DEBUG_t  SIF_MSTR_DEBUG;
    new_IBCPL_ERR_t  IBCPL_ERR;
    new_IBCPL_ERR_HDR_0_t  IBCPL_ERR_HDR_0;
    new_IBCPL_ERR_HDR_1_t  IBCPL_ERR_HDR_1;
    new_IBCPL_ERR_HDR_2_t  IBCPL_ERR_HDR_2;
    new_RI_PHDR_FIFO_STATUS_t  RI_PHDR_FIFO_STATUS;
    new_RI_PDATA_FIFO_STATUS_t  RI_PDATA_FIFO_STATUS;
    new_RI_NPHDR_FIFO_STATUS_t  RI_NPHDR_FIFO_STATUS;
    new_RI_NPDATA_FIFO_STATUS_t  RI_NPDATA_FIFO_STATUS;
    new_RI_IOQ_FIFO_STATUS_t  RI_IOQ_FIFO_STATUS;
    new_IBCPL_DATA_FIFO_STATUS_t  IBCPL_DATA_FIFO_STATUS;
    new_OBCPL_FIFO_STATUS_t  OBCPL_FIFO_STATUS;
    new_IBCPL_HDR_FIFO_STATUS_t  IBCPL_HDR_FIFO_STATUS;
    new_P_RL_CQ_FIFO_STATUS_t  P_RL_CQ_FIFO_STATUS;
    new_TGT_INIT_HCREDITS_t  TGT_INIT_HCREDITS;
    new_TGT_INIT_DCREDITS_t  TGT_INIT_DCREDITS;
    new_TGT_REM_HCREDITS_t  TGT_REM_HCREDITS;
    new_TGT_REM_DCREDITS_t  TGT_REM_DCREDITS;
    new_TGT_RET_HCREDITS_t  TGT_RET_HCREDITS;
    new_TGT_RET_DCREDITS_t  TGT_RET_DCREDITS;
    new_HQM_PULLED_FUSES_0_t  HQM_PULLED_FUSES_0;
} hqm_sif_csr_new_t;

// ===================================================
// HandCoded Control structure
//   (used by project HandCoded specified registers)

typedef logic [3:0] we_VISA_SW_CONTROL_t;

typedef logic [3:0] we_AW_SMON_CONFIGURATION0_t;

typedef logic [3:0] we_AW_SMON_CONFIGURATION1_t;

typedef logic [3:0] we_AW_SMON_COMPARE0_t;

typedef logic [3:0] we_AW_SMON_COMPARE1_t;

typedef logic [3:0] we_AW_SMON_ACTIVITYCOUNTER0_t;

typedef logic [3:0] we_AW_SMON_ACTIVITYCOUNTER1_t;

typedef logic [3:0] we_AW_SMON_TIMER_t;

typedef logic [3:0] we_AW_SMON_MAXIMUM_TIMER_t;

typedef logic [3:0] we_AW_SMON_COMP_MASK0_t;

typedef logic [3:0] we_AW_SMON_COMP_MASK1_t;

typedef struct packed {
    we_VISA_SW_CONTROL_t VISA_SW_CONTROL;
    we_AW_SMON_CONFIGURATION0_t AW_SMON_CONFIGURATION0;
    we_AW_SMON_CONFIGURATION1_t AW_SMON_CONFIGURATION1;
    we_AW_SMON_COMPARE0_t AW_SMON_COMPARE0;
    we_AW_SMON_COMPARE1_t AW_SMON_COMPARE1;
    we_AW_SMON_ACTIVITYCOUNTER0_t AW_SMON_ACTIVITYCOUNTER0;
    we_AW_SMON_ACTIVITYCOUNTER1_t AW_SMON_ACTIVITYCOUNTER1;
    we_AW_SMON_TIMER_t AW_SMON_TIMER;
    we_AW_SMON_MAXIMUM_TIMER_t AW_SMON_MAXIMUM_TIMER;
    we_AW_SMON_COMP_MASK0_t AW_SMON_COMP_MASK0;
    we_AW_SMON_COMP_MASK1_t AW_SMON_COMP_MASK1;
} hqm_sif_csr_handcoded_t;

typedef logic [3:0] re_VISA_SW_CONTROL_t;

typedef logic [3:0] re_AW_SMON_CONFIGURATION0_t;

typedef logic [3:0] re_AW_SMON_CONFIGURATION1_t;

typedef logic [3:0] re_AW_SMON_COMPARE0_t;

typedef logic [3:0] re_AW_SMON_COMPARE1_t;

typedef logic [3:0] re_AW_SMON_ACTIVITYCOUNTER0_t;

typedef logic [3:0] re_AW_SMON_ACTIVITYCOUNTER1_t;

typedef logic [3:0] re_AW_SMON_TIMER_t;

typedef logic [3:0] re_AW_SMON_MAXIMUM_TIMER_t;

typedef logic [3:0] re_AW_SMON_COMP_MASK0_t;

typedef logic [3:0] re_AW_SMON_COMP_MASK1_t;

typedef struct packed {
    re_VISA_SW_CONTROL_t VISA_SW_CONTROL;
    re_AW_SMON_CONFIGURATION0_t AW_SMON_CONFIGURATION0;
    re_AW_SMON_CONFIGURATION1_t AW_SMON_CONFIGURATION1;
    re_AW_SMON_COMPARE0_t AW_SMON_COMPARE0;
    re_AW_SMON_COMPARE1_t AW_SMON_COMPARE1;
    re_AW_SMON_ACTIVITYCOUNTER0_t AW_SMON_ACTIVITYCOUNTER0;
    re_AW_SMON_ACTIVITYCOUNTER1_t AW_SMON_ACTIVITYCOUNTER1;
    re_AW_SMON_TIMER_t AW_SMON_TIMER;
    re_AW_SMON_MAXIMUM_TIMER_t AW_SMON_MAXIMUM_TIMER;
    re_AW_SMON_COMP_MASK0_t AW_SMON_COMP_MASK0;
    re_AW_SMON_COMP_MASK1_t AW_SMON_COMP_MASK1;
} hqm_sif_csr_hc_re_t;

typedef logic handcode_rvalid_VISA_SW_CONTROL_t;

typedef logic handcode_rvalid_AW_SMON_CONFIGURATION0_t;

typedef logic handcode_rvalid_AW_SMON_CONFIGURATION1_t;

typedef logic handcode_rvalid_AW_SMON_COMPARE0_t;

typedef logic handcode_rvalid_AW_SMON_COMPARE1_t;

typedef logic handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0_t;

typedef logic handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1_t;

typedef logic handcode_rvalid_AW_SMON_TIMER_t;

typedef logic handcode_rvalid_AW_SMON_MAXIMUM_TIMER_t;

typedef logic handcode_rvalid_AW_SMON_COMP_MASK0_t;

typedef logic handcode_rvalid_AW_SMON_COMP_MASK1_t;

typedef struct packed {
    handcode_rvalid_VISA_SW_CONTROL_t VISA_SW_CONTROL;
    handcode_rvalid_AW_SMON_CONFIGURATION0_t AW_SMON_CONFIGURATION0;
    handcode_rvalid_AW_SMON_CONFIGURATION1_t AW_SMON_CONFIGURATION1;
    handcode_rvalid_AW_SMON_COMPARE0_t AW_SMON_COMPARE0;
    handcode_rvalid_AW_SMON_COMPARE1_t AW_SMON_COMPARE1;
    handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0_t AW_SMON_ACTIVITYCOUNTER0;
    handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1_t AW_SMON_ACTIVITYCOUNTER1;
    handcode_rvalid_AW_SMON_TIMER_t AW_SMON_TIMER;
    handcode_rvalid_AW_SMON_MAXIMUM_TIMER_t AW_SMON_MAXIMUM_TIMER;
    handcode_rvalid_AW_SMON_COMP_MASK0_t AW_SMON_COMP_MASK0;
    handcode_rvalid_AW_SMON_COMP_MASK1_t AW_SMON_COMP_MASK1;
} hqm_sif_csr_hc_rvalid_t;

typedef logic handcode_wvalid_VISA_SW_CONTROL_t;

typedef logic handcode_wvalid_AW_SMON_CONFIGURATION0_t;

typedef logic handcode_wvalid_AW_SMON_CONFIGURATION1_t;

typedef logic handcode_wvalid_AW_SMON_COMPARE0_t;

typedef logic handcode_wvalid_AW_SMON_COMPARE1_t;

typedef logic handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0_t;

typedef logic handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1_t;

typedef logic handcode_wvalid_AW_SMON_TIMER_t;

typedef logic handcode_wvalid_AW_SMON_MAXIMUM_TIMER_t;

typedef logic handcode_wvalid_AW_SMON_COMP_MASK0_t;

typedef logic handcode_wvalid_AW_SMON_COMP_MASK1_t;

typedef struct packed {
    handcode_wvalid_VISA_SW_CONTROL_t VISA_SW_CONTROL;
    handcode_wvalid_AW_SMON_CONFIGURATION0_t AW_SMON_CONFIGURATION0;
    handcode_wvalid_AW_SMON_CONFIGURATION1_t AW_SMON_CONFIGURATION1;
    handcode_wvalid_AW_SMON_COMPARE0_t AW_SMON_COMPARE0;
    handcode_wvalid_AW_SMON_COMPARE1_t AW_SMON_COMPARE1;
    handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0_t AW_SMON_ACTIVITYCOUNTER0;
    handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1_t AW_SMON_ACTIVITYCOUNTER1;
    handcode_wvalid_AW_SMON_TIMER_t AW_SMON_TIMER;
    handcode_wvalid_AW_SMON_MAXIMUM_TIMER_t AW_SMON_MAXIMUM_TIMER;
    handcode_wvalid_AW_SMON_COMP_MASK0_t AW_SMON_COMP_MASK0;
    handcode_wvalid_AW_SMON_COMP_MASK1_t AW_SMON_COMP_MASK1;
} hqm_sif_csr_hc_wvalid_t;

typedef logic handcode_error_VISA_SW_CONTROL_t;

typedef logic handcode_error_AW_SMON_CONFIGURATION0_t;

typedef logic handcode_error_AW_SMON_CONFIGURATION1_t;

typedef logic handcode_error_AW_SMON_COMPARE0_t;

typedef logic handcode_error_AW_SMON_COMPARE1_t;

typedef logic handcode_error_AW_SMON_ACTIVITYCOUNTER0_t;

typedef logic handcode_error_AW_SMON_ACTIVITYCOUNTER1_t;

typedef logic handcode_error_AW_SMON_TIMER_t;

typedef logic handcode_error_AW_SMON_MAXIMUM_TIMER_t;

typedef logic handcode_error_AW_SMON_COMP_MASK0_t;

typedef logic handcode_error_AW_SMON_COMP_MASK1_t;

typedef struct packed {
    handcode_error_VISA_SW_CONTROL_t VISA_SW_CONTROL;
    handcode_error_AW_SMON_CONFIGURATION0_t AW_SMON_CONFIGURATION0;
    handcode_error_AW_SMON_CONFIGURATION1_t AW_SMON_CONFIGURATION1;
    handcode_error_AW_SMON_COMPARE0_t AW_SMON_COMPARE0;
    handcode_error_AW_SMON_COMPARE1_t AW_SMON_COMPARE1;
    handcode_error_AW_SMON_ACTIVITYCOUNTER0_t AW_SMON_ACTIVITYCOUNTER0;
    handcode_error_AW_SMON_ACTIVITYCOUNTER1_t AW_SMON_ACTIVITYCOUNTER1;
    handcode_error_AW_SMON_TIMER_t AW_SMON_TIMER;
    handcode_error_AW_SMON_MAXIMUM_TIMER_t AW_SMON_MAXIMUM_TIMER;
    handcode_error_AW_SMON_COMP_MASK0_t AW_SMON_COMP_MASK0;
    handcode_error_AW_SMON_COMP_MASK1_t AW_SMON_COMP_MASK1;
} hqm_sif_csr_hc_error_t;

// ===================================================
// HandCoded Read/Write Structure
//    (used by project HandCoded specified registers)

// ===================================================
// HandCoded Read/Write Structure
//    (used by project HandCoded specified registers)

typedef struct packed {
    VISA_SW_CONTROL_t VISA_SW_CONTROL;
    AW_SMON_CONFIGURATION0_t AW_SMON_CONFIGURATION0;
    AW_SMON_CONFIGURATION1_t AW_SMON_CONFIGURATION1;
    AW_SMON_COMPARE0_t AW_SMON_COMPARE0;
    AW_SMON_COMPARE1_t AW_SMON_COMPARE1;
    AW_SMON_ACTIVITYCOUNTER0_t AW_SMON_ACTIVITYCOUNTER0;
    AW_SMON_ACTIVITYCOUNTER1_t AW_SMON_ACTIVITYCOUNTER1;
    AW_SMON_TIMER_t AW_SMON_TIMER;
    AW_SMON_MAXIMUM_TIMER_t AW_SMON_MAXIMUM_TIMER;
    AW_SMON_COMP_MASK0_t AW_SMON_COMP_MASK0;
    AW_SMON_COMP_MASK1_t AW_SMON_COMP_MASK1;
} hqm_sif_csr_hc_reg_read_t;

typedef struct packed {
    VISA_SW_CONTROL_t VISA_SW_CONTROL;
    AW_SMON_CONFIGURATION0_t AW_SMON_CONFIGURATION0;
    AW_SMON_CONFIGURATION1_t AW_SMON_CONFIGURATION1;
    AW_SMON_COMPARE0_t AW_SMON_COMPARE0;
    AW_SMON_COMPARE1_t AW_SMON_COMPARE1;
    AW_SMON_ACTIVITYCOUNTER0_t AW_SMON_ACTIVITYCOUNTER0;
    AW_SMON_ACTIVITYCOUNTER1_t AW_SMON_ACTIVITYCOUNTER1;
    AW_SMON_TIMER_t AW_SMON_TIMER;
    AW_SMON_MAXIMUM_TIMER_t AW_SMON_MAXIMUM_TIMER;
    AW_SMON_COMP_MASK0_t AW_SMON_COMP_MASK0;
    AW_SMON_COMP_MASK1_t AW_SMON_COMP_MASK1;
} hqm_sif_csr_hc_reg_write_t;

// ===================================================
// RW/V2 Structure

// ===================================================
// Parity Bit Structure

// ===================================================
// Watch Signals Structure


endpackage: hqm_sif_csr_pkg

`endif // HQM_SIF_CSR_PKG_VH
