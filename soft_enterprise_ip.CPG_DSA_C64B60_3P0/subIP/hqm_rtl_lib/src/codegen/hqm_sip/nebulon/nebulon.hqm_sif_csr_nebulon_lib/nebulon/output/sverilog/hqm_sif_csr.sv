///
///  INTEL CONFIDENTIAL
///
///  Copyright 2022 Intel Corporation All Rights Reserved.
///
///  The source code contained or described herein and all documents related
///  to the source code ("Material") are owned by Intel Corporation or its
///  suppliers or licensors. Title to the Material remains with Intel
///  Corporation or its suppliers and licensors. The Material contains trade
///  secrets and proprietary and confidential information of Intel or its
///  suppliers and licensors. The Material is protected by worldwide copyright
///  and trade secret laws and treaty provisions. No part of the Material may
///  be used, copied, reproduced, modified, published, uploaded, posted,
///  transmitted, distributed, or disclosed in any way without Intel's prior
///  express written permission.
///
///  No license under any patent, copyright, trade secret or other intellectual
///  property right is granted to or conferred upon you by disclosure or
///  delivery of the Materials, either expressly, by implication, inducement,
///  estoppel or otherwise. Any license under such intellectual property rights
///  must be express and approved by Intel in writing.
///

//                                                                             
// File:            hqm_sif_csr.sv                                             
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             



// The NEBULON_RTLGEN_TEMPLATE env was: /p/hdk/rtl/proj_tools/nebulon_data/shdk74/20.35.01_gen3/generators/rtltemplates:/p/hdk/rtl/cad/x86-64_linux26/dt/nebulon/d20ww52.1/generators/rtltemplates:/p/hdk/rtl/cad/x86-64_linux26/dt/nebulon/d20ww52.1/generators/overhead_templates::/nfs/site/disks/crt_tools_007/dt/nebulon/d22ww21.1/generators/rtlgen_include_template:/nfs/site/disks/crt_tools_007/dt/nebulon/d22ww21.1/generators/rtlgen_pkg_template
//lintra push -60039
//lintra push -68099
// This include is still needed for RTLGEN_LCB
`include "rtlgen_include_hqm_sif_csr_map.vh"
`include "rtlgen_pkg_hqm_sif_csr_map.vh"
`include "hqm_sif_csr_pkg.vh"

//lintra push -68094
//lintra push -60115

// ===================================================================
// Flops macros 
// ===================================================================

`ifndef RTLGEN_HQM_SIF_CSR_FF
`define RTLGEN_HQM_SIF_CSR_FF(rtl_clk, rst_n, rst_val, d, q) \
    always_ff @(posedge rtl_clk, negedge rst_n) \
        if (!rst_n) q <= rst_val; \
        else        q <= d;
`endif // RTLGEN_HQM_SIF_CSR_FF

`ifndef RTLGEN_HQM_SIF_CSR_EN_FF
`define RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, rst_n, rst_val, en, d, q) \
    always_ff @(posedge rtl_clk, negedge rst_n) \
        if (!rst_n) q <= rst_val; \
        else \
            if (en) q <= d;
`endif // RTLGEN_HQM_SIF_CSR_EN_FF

`ifndef RTLGEN_HQM_SIF_CSR_FF_NEGEDGE
`define RTLGEN_HQM_SIF_CSR_FF_NEGEDGE(rtl_clk, rst_n, rst_val, d, q) \
    always_ff @(negedge rtl_clk, negedge rst_n) \
        if (!rst_n) q <= rst_val; \
        else        q <= d;
`endif // RTLGEN_HQM_SIF_CSR_FF_NEGEDGE

`ifndef RTLGEN_HQM_SIF_CSR_EN_FF_NEGEDGE
`define RTLGEN_HQM_SIF_CSR_EN_FF_NEGEDGE(rtl_clk, rst_n, rst_val, en, d, q) \
    always_ff @(negedge rtl_clk, negedge rst_n) \
        if (!rst_n) q <= rst_val; \
        else \
            if (en) q <= d;
`endif // RTLGEN_HQM_SIF_CSR_EN_FF_NEGEDGE

`ifndef RTLGEN_HQM_SIF_CSR_FF_RSTD
`define RTLGEN_HQM_SIF_CSR_FF_RSTD(rtl_clk, rst_n, rst_val, d, q) \
   genvar \gen_``d`` ; \
   generate \
      if (1) begin : \ff_rstd_``d`` \
         logic [$bits(q)-1:0] rst_vec, set_vec, d_vec, q_vec; \
         assign rst_vec = !rst_n ? ~rst_val : '0; \
         assign set_vec = !rst_n ? rst_val : '0; \
         assign d_vec = d; \
         assign q = q_vec; \
         for ( \gen_``d`` = 0 ; \gen_``d`` < $bits(q) ; \gen_``d`` = \gen_``d`` + 1)  \
            always_ff @(posedge rtl_clk, posedge rst_vec[ \gen_``d`` ], posedge set_vec[ \gen_``d`` ]) \
               if (rst_vec[ \gen_``d`` ]) \
                  q_vec[ \gen_``d`` ] <= '0; \
               else if (set_vec[ \gen_``d`` ]) \
                  q_vec[ \gen_``d`` ] <= '1; \
               else   \
                  q_vec[ \gen_``d`` ] <= d_vec[ \gen_``d`` ]; \
      end \
   endgenerate       
`endif // RTLGEN_HQM_SIF_CSR_FF_RSTD


module rtlgen_hqm_sif_csr_en_ff_rstd(rtl_clk_var, rst_n_var, rst_val_var, en_var, d_var, q_var);
parameter DATA_WIDTH=1;
input logic rtl_clk_var, rst_n_var, en_var;
input logic [DATA_WIDTH-1:0] rst_val_var, d_var;
output logic [DATA_WIDTH-1:0] q_var;

   genvar gen_var ; 
   generate 
      if (1) begin : rtlgen_en_ff_rstd
         logic [DATA_WIDTH-1:0] rst_vec, set_vec, d_vec, q_vec; 
         assign rst_vec = !rst_n_var ? ~rst_val_var : '0; 
         assign set_vec = !rst_n_var ? rst_val_var : '0; 
         assign d_vec = d_var; 
         assign q_var = q_vec; 
         for ( gen_var = 0 ; gen_var < DATA_WIDTH; gen_var = gen_var + 1)  
            always_ff @(posedge rtl_clk_var, posedge rst_vec[ gen_var ], posedge set_vec[ gen_var ]) 
               if (rst_vec[ gen_var ]) 
                  q_vec[ gen_var ] <= '0; 
               else if (set_vec[ gen_var ]) 
                  q_vec[ gen_var ] <= '1; 
               else if (en_var)  
                  q_vec[ gen_var ] <= d_vec[ gen_var ]; 
      end 
   endgenerate       

endmodule 

`ifndef RTLGEN_HQM_SIF_CSR_EN_FF_RSTD
`define RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(rtl_clk, rst_n, rst_val, en, d, q) \
rtlgen_hqm_sif_csr_en_ff_rstd #(.DATA_WIDTH($bits(q))) \``d``_en_ff_rstd (.rtl_clk_var(rtl_clk), .rst_n_var(rst_n), .rst_val_var(rst_val), .en_var(en), .d_var(d), .q_var(q));
`endif // RTLGEN_HQM_SIF_CSR_EN_FF_RSTD



`ifndef RTLGEN_HQM_SIF_CSR_FF_SYNCRST
`define RTLGEN_HQM_SIF_CSR_FF_SYNCRST(rtl_clk, syncrst_n, rst_val, d, q) \
    always_ff @(posedge rtl_clk) \
        if (!syncrst_n) q <= rst_val; \
        else        q <= d;
`endif // RTLGEN_HQM_SIF_CSR_FF_SYNCRST

`ifndef RTLGEN_HQM_SIF_CSR_EN_FF_SYNCRST
`define RTLGEN_HQM_SIF_CSR_EN_FF_SYNCRST(rtl_clk, syncrst_n, rst_val, en, d, q) \
    always_ff @(posedge rtl_clk) \
        if (!syncrst_n) q <= rst_val; \
        else \
            if (en) q <= d;
`endif // RTLGEN_HQM_SIF_CSR_EN_FF_SYNCRST

`ifndef RTLGEN_HQM_SIF_CSR_FF_NEGEDGE_SYNCRST
`define RTLGEN_HQM_SIF_CSR_FF_NEGEDGE_SYNCRST(rtl_clk, syncrst_n, rst_val, d, q) \
    always_ff @(negedge rtl_clk) \
        if (!syncrst_n) q <= rst_val; \
        else        q <= d;
`endif // RTLGEN_HQM_SIF_CSR_FF_NEGEDGE_SYNCRST

`ifndef RTLGEN_HQM_SIF_CSR_EN_FF_NEGEDGE_SYNCRST
`define RTLGEN_HQM_SIF_CSR_EN_FF_NEGEDGE_SYNCRST(rtl_clk, syncrst_n, rst_val, en, d, q) \
    always_ff @(negedge rtl_clk) \
        if (!syncrst_n) q <= rst_val; \
        else \
            if (en) q <= d;
`endif // RTLGEN_HQM_SIF_CSR_EN_FF_NEGEDGE_SYNCRST

// BOTHRST is cancelled. Should not be used. 
//
// `ifndef RTLGEN_HQM_SIF_CSR_FF_BOTHRST
// `define RTLGEN_HQM_SIF_CSR_FF_BOTHRST(rtl_clk, rst_n, syncrst_n, rst_val, d, q) \
//     always_ff @(posedge rtl_clk, negedge rst_n) \
//         if (!rst_n) q <= rst_val; \
//         else if (!syncrst_n) q <= rst_val; \
//         else        q <= d;
// `endif // RTLGEN_HQM_SIF_CSR_FF_BOTHRST
// 
// `ifndef RTLGEN_HQM_SIF_CSR_EN_FF_BOTHRST
// `define RTLGEN_HQM_SIF_CSR_EN_FF_BOTHRST(rtl_clk, rst_n, syncrst_n, rst_val, en, d, q) \
//     always_ff @(posedge rtl_clk, negedge rst_n) \
//         if (!rst_n) q <= rst_val; \
//         else if (!syncrst_n) q <= rst_val; \
//         else if (en) q <= d;
// 
// `endif // RTLGEN_HQM_SIF_CSR_EN_FF_BOTHRST


// ===================================================================
// Latch macros -- compatible with nhm_macros RST_LATCH & EN_RST_LATCH
// ===================================================================

`ifndef RTLGEN_HQM_SIF_CSR_LATCH_LOW
`define RTLGEN_HQM_SIF_CSR_LATCH_LOW(rtl_clk, d, q) \
   always_latch if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk))) q <= d;   
`endif // RTLGEN_HQM_SIF_CSR_LATCH_LOW

`ifndef RTLGEN_HQM_SIF_CSR_PH2_FF
`define RTLGEN_HQM_SIF_CSR_PH2_FF(rtl_clk, d, q) \
    always_ff @(posedge rtl_clk) \
     q <= d;
`endif // RTLGEN_HQM_SIF_CSR_PH2_FF

// Can't be override
`ifndef RTLGEN_HQM_SIF_CSR_LATCH_LOW_ASSIGN
`define RTLGEN_HQM_SIF_CSR_LATCH_LOW_ASSIGN(n) \
   `RTLGEN_HQM_SIF_CSR_LATCH_LOW(gated_clk,``n``,``n``_low)
`endif // RTLGEN_HQM_SIF_CSR_LATCH_LOW_ASSIGN

// Can't be override
`ifndef RTLGEN_HQM_SIF_CSR_PH2_FF_ASSIGN
`define RTLGEN_HQM_SIF_CSR_PH2_FF_ASSIGN(n) \
   `RTLGEN_HQM_SIF_CSR_PH2_FF(gated_clk,``n``,``n``_low)
`endif // RTLGEN_HQM_SIF_CSR_PH2_FF_ASSIGN

`ifndef RTLGEN_HQM_SIF_CSR_LATCH
`define RTLGEN_HQM_SIF_CSR_LATCH(rtl_clk, rst_n, rst_val, d, q) \
   always_latch                                     \
      begin                                         \
         if (!rst_n) q <= rst_val;                  \
         else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk))) q <= d; \
      end                                           
`endif // RTLGEN_HQM_SIF_CSR_LATCH

// In order not to touch regular LATCH_LOW (without reset) for backward compatible, 
//  an additional LATCH_LOW macro was added for reset with suffix _ASYNCRST 
`ifndef RTLGEN_HQM_SIF_CSR_LATCH_LOW_ASYNCRST
`define RTLGEN_HQM_SIF_CSR_LATCH_LOW_ASYNCRST(rtl_clk, rst_n, rst_val, d, q) \
   always_latch                                     \
      begin                                         \
         if (!rst_n) q <= rst_val;                  \
         else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk))) q <= d; \
      end                                           
`endif // RTLGEN_HQM_SIF_CSR_LATCH_LOW_ASYNCRST

`ifndef RTLGEN_HQM_SIF_CSR_EN_LATCH
`define RTLGEN_HQM_SIF_CSR_EN_LATCH(rtl_clk, rst_n, rst_val, en, d, q) \
   always_latch                                            \
      begin                                                \
         if (!rst_n) q <= rst_val;                         \
         else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk))) begin \
              if (en) q <= d;                              \
         end                                               \
      end                                                  
`endif // RTLGEN_HQM_SIF_CSR_EN_LATCH

`ifndef RTLGEN_HQM_SIF_CSR_EN_LATCH_LOW
`define RTLGEN_HQM_SIF_CSR_EN_LATCH_LOW(rtl_clk, rst_n, rst_val, en, d, q) \
   always_latch                                            \
      begin                                                \
         if (!rst_n) q <= rst_val;                         \
         else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk))) begin \
              if (en) q <= d;                              \
         end                                               \
      end                                                  
`endif // RTLGEN_HQM_SIF_CSR_EN_LATCH_LOW

`ifndef RTLGEN_HQM_SIF_CSR_LATCH_SYNCRST
`define RTLGEN_HQM_SIF_CSR_LATCH_SYNCRST(rtl_clk, syncrst_n, rst_val, d, q) \
   always_latch                                     \
      begin                                         \
         if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk))) \
            if (!syncrst_n) q <= rst_val;           \
            else            q <=  d;                \
      end                                           
`endif // RTLGEN_HQM_SIF_CSR_LATCH_SYNCRST

`ifndef RTLGEN_HQM_SIF_CSR_LATCH_LOW_SYNCRST
`define RTLGEN_HQM_SIF_CSR_LATCH_LOW_SYNCRST(rtl_clk, syncrst_n, rst_val, d, q) \
   always_latch                                     \
      begin                                         \
         if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk))) \
            if (!syncrst_n) q <= rst_val;           \
            else            q <=  d;                \
      end                                           
`endif // RTLGEN_HQM_SIF_CSR_LATCH_LOW_SYNCRST

`ifndef RTLGEN_HQM_SIF_CSR_EN_LATCH_SYNCRST
`define RTLGEN_HQM_SIF_CSR_EN_LATCH_SYNCRST(rtl_clk, syncrst_n, rst_val, en, d, q) \
   always_latch                                            \
      begin                                                \
         if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk)))  \
            if (!syncrst_n) q <= rst_val;                  \
            else if (en)    q <=  d;                       \
      end                                                  
`endif // RTLGEN_HQM_SIF_CSR_EN_LATCH_SYNCRST

`ifndef RTLGEN_HQM_SIF_CSR_EN_LATCH_LOW_SYNCRST
`define RTLGEN_HQM_SIF_CSR_EN_LATCH_LOW_SYNCRST(rtl_clk, syncrst_n, rst_val, en, d, q) \
   always_latch                                            \
      begin                                                \
         if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk)))  \
            if (!syncrst_n) q <= rst_val;                  \
            else if (en)    q <=  d;                       \
      end                                                  
`endif // RTLGEN_HQM_SIF_CSR_EN_LATCH_LOW_SYNCRST

// BOTHRST is cancelled. Should not be used. 
// 
// `ifndef RTLGEN_HQM_SIF_CSR_LATCH_BOTHRST
// `define RTLGEN_HQM_SIF_CSR_LATCH_BOTHRST(rtl_clk, rst_n, syncrst_n, rst_val, d, q) \
//    always_latch                                     \
//       begin                                         \
//          if (!rst_n) q <= rst_val;                  \
//          else if (`ifdef LINTRA _OL(* ol_clock *) `endif (rtl_clk)) \
//             if (!syncrst_n) q <= rst_val;           \
//             else            q <=  d;                \
//       end                                           
// `endif // RTLGEN_HQM_SIF_CSR_LATCH_BOTHRST
// 
// `ifndef RTLGEN_HQM_SIF_CSR_EN_LATCH_BOTHRST
// `define RTLGEN_HQM_SIF_CSR_EN_LATCH_BOTHRST(rtl_clk, rst_n, syncrst_n, rst_val, en, d, q) \
//    always_latch                                     \
//       begin                                         \
//          if (!rst_n) q <= rst_val;                  \
//          else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk))) \
//             if (!syncrst_n) q <= rst_val;           \
//             else if (en)    q <=  d;                \
//       end                                           
// `endif // RTLGEN_HQM_SIF_CSR_EN_LATCH_BOTHRST


// ===================================================================
// LCB macros 
// ===================================================================

`ifndef RTLGEN_HQM_SIF_CSR_LCB_HOLD_REQ_2CYCLES
`define RTLGEN_HQM_SIF_CSR_LCB_HOLD_REQ_2CYCLES(clock, enable, lcb_clk) \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & enable;
`endif // RTLGEN_HQM_SIF_CSR_LCB_HOLD_REQ_2CYCLES

`ifndef RTLGEN_HQM_SIF_CSR_LCB_HOLD_REQ_2CYCLES_SYNCRST
`define RTLGEN_HQM_SIF_CSR_LCB_HOLD_REQ_2CYCLES_SYNCRST(clock, enable, lcb_clk, sync_rst) \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & (enable | {$bits(lcb_clk){!sync_rst}});
`endif // RTLGEN_HQM_SIF_CSR_LCB_HOLD_REQ_2CYCLES_SYNCRST


`ifndef RTLGEN_HQM_SIF_CSR_LCB_DELAY_FFEN
`define RTLGEN_HQM_SIF_CSR_LCB_DELAY_FFEN(clock, delay_rst_n, enable, lcb_clk, dly_seq_type, close_ff_type, nxt_expr) \
   logic [$bits(lcb_clk)-1:0] ``enable``_dly_up;  \
   logic [$bits(lcb_clk)-1:0] ``enable``_close_up;  \
   logic [$bits(lcb_clk)-1:0] ``enable``_nxt; \
   logic [$bits(lcb_clk)-1:0] ``enable``_dly; \
   logic [$bits(lcb_clk)-1:0] ``enable``_close; \
   always_comb ``enable``_nxt = ``nxt_expr``; \
   always_comb ``enable``_dly_up = ``enable``_nxt | ``enable``_close; \
   always_comb ``enable``_close_up = ``enable``_dly | ``enable``_close; \
   genvar ``enable``_gen_var ; \
   generate \
      if (1) begin : rtlgen_lcb_``enable``_dly \
         for ( ``enable``_gen_var = 0 ; ``enable``_gen_var < $bits(lcb_clk); ``enable``_gen_var = ``enable``_gen_var + 1) begin \
  `RTLGEN_HQM_SIF_CSR_``close_ff_type``(clock,delay_rst_n,1'b0,``enable``_close_up[ ``enable``_gen_var ],``enable``_dly[ ``enable``_gen_var ],``enable``_close[ ``enable``_gen_var ]) \
  `RTLGEN_HQM_SIF_CSR_``dly_seq_type``(clock,delay_rst_n,1'b0,``enable``_dly_up[ ``enable``_gen_var ],``enable``_nxt[ ``enable``_gen_var ],``enable``_dly[ ``enable``_gen_var ]) \
         end      \
      end      \
   endgenerate \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & ``enable``_dly;
`endif // RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN


`ifndef RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN
`define RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN(clock, delay_rst_n, enable, lcb_clk, seq_type, nxt_expr) \
   logic [$bits(lcb_clk)-1:0] ``enable``_up;  \
   logic [$bits(lcb_clk)-1:0] ``enable``_nxt; \
   logic [$bits(lcb_clk)-1:0] ``enable``_dly; \
   always_comb ``enable``_nxt = ``nxt_expr``; \
   always_comb ``enable``_up = ``enable``_nxt | ``enable``_dly; \
   genvar ``enable``_gen_var ; \
   generate \
      if (1) begin : rtlgen_lcb_``enable``_dly \
         for ( ``enable``_gen_var = 0 ; ``enable``_gen_var < $bits(lcb_clk); ``enable``_gen_var = ``enable``_gen_var + 1) \
  `RTLGEN_HQM_SIF_CSR_``seq_type``(clock,delay_rst_n,1'b0,``enable``_up[ ``enable``_gen_var ],``enable``_nxt[ ``enable``_gen_var ],``enable``_dly[ ``enable``_gen_var ]) \
      end      \
   endgenerate \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & ``enable``_dly;
`endif // RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN

`ifndef RTLGEN_HQM_SIF_CSR_LCB_DELAY
`define RTLGEN_HQM_SIF_CSR_LCB_DELAY(clock, delay_rst_n, enable, lcb_clk, seq_type, nxt_expr) \
   logic [$bits(lcb_clk)-1:0] ``enable``_nxt; \
   logic [$bits(lcb_clk)-1:0] ``enable``_dly; \
   always_comb ``enable``_nxt = ``nxt_expr``; \
   genvar ``enable``_gen_var ; \
   generate \
      if (1) begin : rtlgen_lcb_``enable``_dly \
         for ( ``enable``_gen_var = 0 ; ``enable``_gen_var < $bits(lcb_clk); ``enable``_gen_var = ``enable``_gen_var + 1) \
  `RTLGEN_HQM_SIF_CSR_``seq_type``(clock,delay_rst_n,1'b0,``enable``_nxt[ ``enable``_gen_var ],``enable``_dly[ ``enable``_gen_var ]) \
      end      \
   endgenerate \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & ``enable``_dly;
`endif // RTLGEN_HQM_SIF_CSR_LCB_DELAY

// LCB MODE: LATCH_FFEN_LOW
`ifndef RTLGEN_HQM_SIF_CSR_LCB_LATCH_FFEN_LOW
`define RTLGEN_HQM_SIF_CSR_LCB_LATCH_FFEN_LOW(clock, delay_rst_n, enable, lcb_clk) \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY_FFEN(clock,delay_rst_n,enable,lcb_clk,EN_LATCH_LOW,EN_FF_NEGEDGE,enable) 
`endif // RTLGEN_HQM_SIF_CSR_LCB_LATCH_FFEN_LOW

`ifndef RTLGEN_HQM_SIF_CSR_LCB_LATCH_FFEN_LOW_SYNCRST
`define RTLGEN_HQM_SIF_CSR_LCB_LATCH_FFEN_LOW_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY_FFEN(clock,1'b1,enable,lcb_clk,EN_LATCH_LOW_SYNCRST,EN_FF_NEGEDGE_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}}) 
`endif // RTLGEN_HQM_SIF_CSR_LCB_LATCH_FFEN_LOW_SYNCRST

// LCB MODE: LATCH_EN_LOW
`ifndef RTLGEN_HQM_SIF_CSR_LCB_LATCH_EN_LOW
`define RTLGEN_HQM_SIF_CSR_LCB_LATCH_EN_LOW(clock, delay_rst_n, enable, lcb_clk) \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN(clock,delay_rst_n,enable,lcb_clk,EN_LATCH_LOW,enable)
`endif // RTLGEN_HQM_SIF_CSR_LCB_LATCH_EN_LOW

`ifndef RTLGEN_HQM_SIF_CSR_LCB_LATCH_EN_LOW_SYNCRST
`define RTLGEN_HQM_SIF_CSR_LCB_LATCH_EN_LOW_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN(clock,1'b1,enable,lcb_clk,EN_LATCH_LOW_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}})
`endif // RTLGEN_HQM_SIF_CSR_LCB_LATCH_EN_LOW_SYNCRST

// LCB MODE: LATCH_LOW
`ifndef RTLGEN_HQM_SIF_CSR_LCB_LATCH_LOW
`define RTLGEN_HQM_SIF_CSR_LCB_LATCH_LOW(clock, delay_rst_n, enable, lcb_clk) \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY(clock,delay_rst_n,enable,lcb_clk,LATCH_LOW_ASYNCRST,enable)
`endif // RTLGEN_HQM_SIF_CSR_LCB_LATCH_LOW

`ifndef RTLGEN_HQM_SIF_CSR_LCB_LATCH_LOW_SYNCRST
`define RTLGEN_HQM_SIF_CSR_LCB_LATCH_LOW_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY(clock,1'b1,enable,lcb_clk,LATCH_LOW_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}})
`endif // RTLGEN_HQM_SIF_CSR_LCB_LATCH_LOW_SYNCRST

// LCB MODE: FF_NEGEDGE
`ifndef RTLGEN_HQM_SIF_CSR_LCB_FF_NEGEDGE
`define RTLGEN_HQM_SIF_CSR_LCB_FF_NEGEDGE(clock, delay_rst_n, enable, lcb_clk)  \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN(clock,delay_rst_n,enable,lcb_clk,EN_FF_NEGEDGE,enable)
`endif // RTLGEN_HQM_SIF_CSR_LCB_FF_NEGEDGE

`ifndef RTLGEN_HQM_SIF_CSR_LCB_FF_NEGEDGE_SYNCRST
`define RTLGEN_HQM_SIF_CSR_LCB_FF_NEGEDGE_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN(clock,1'b1,enable,lcb_clk,EN_FF_NEGEDGE_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}})
`endif // RTLGEN_HQM_SIF_CSR_LCB_FF_NEGEDGE_SYNCRST

// LCB MODE: FF_POSEDGE
`ifndef RTLGEN_HQM_SIF_CSR_LCB_FF_POSEDGE
`define RTLGEN_HQM_SIF_CSR_LCB_FF_POSEDGE(clock, delay_rst_n, enable, lcb_clk)  \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN(clock,delay_rst_n,enable,lcb_clk,EN_FF,enable)
`endif // RTLGEN_HQM_SIF_CSR_LCB_FF_POSEDGE

`ifndef RTLGEN_HQM_SIF_CSR_LCB_FF_POSEDGE_SYNCRST
`define RTLGEN_HQM_SIF_CSR_LCB_FF_POSEDGE_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SIF_CSR_LCB_DELAY_EN(clock,1'b1,enable,lcb_clk,EN_FF_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}})
`endif // RTLGEN_HQM_SIF_CSR_LCB_FF_POSEDGE_SYNCRST



//lintra pop

module hqm_sif_csr ( //lintra s-2096
    // Clocks
    gated_clk,
    rtl_clk,

    // Resets
    hqm_csr_mmio_rst_n,
    powergood_rst_b,
    prim_gated_rst_b,
    side_gated_rst_prim_b,


    // Register Inputs
    load_DEVTLB_ATS_ERR,
    load_IBCPL_DATA_FIFO_STATUS,
    load_IBCPL_ERR,
    load_IBCPL_ERR_HDR_0,
    load_IBCPL_ERR_HDR_1,
    load_IBCPL_ERR_HDR_2,
    load_IBCPL_HDR_FIFO_STATUS,
    load_OBCPL_FIFO_STATUS,
    load_P_RL_CQ_FIFO_STATUS,
    load_RI_IOQ_FIFO_STATUS,
    load_RI_NPDATA_FIFO_STATUS,
    load_RI_NPHDR_FIFO_STATUS,
    load_RI_PARITY_ERR,
    load_RI_PDATA_FIFO_STATUS,
    load_RI_PHDR_FIFO_STATUS,
    load_SIF_ALARM_ERR,
    load_SIF_PARITY_ERR,

    new_CFGM_STATUS,
    new_CFGM_STATUS2,
    new_DEVTLB_ATS_ERR,
    new_DEVTLB_STATUS,
    new_HQM_PULLED_FUSES_0,
    new_HQM_SIF_CNT_0,
    new_HQM_SIF_CNT_1,
    new_HQM_SIF_CNT_10,
    new_HQM_SIF_CNT_11,
    new_HQM_SIF_CNT_2,
    new_HQM_SIF_CNT_3,
    new_HQM_SIF_CNT_4,
    new_HQM_SIF_CNT_5,
    new_HQM_SIF_CNT_6,
    new_HQM_SIF_CNT_7,
    new_HQM_SIF_CNT_8,
    new_HQM_SIF_CNT_9,
    new_IBCPL_DATA_FIFO_STATUS,
    new_IBCPL_ERR,
    new_IBCPL_ERR_HDR_0,
    new_IBCPL_ERR_HDR_1,
    new_IBCPL_ERR_HDR_2,
    new_IBCPL_HDR_FIFO_STATUS,
    new_LOCAL_BME_STATUS,
    new_LOCAL_MSIXE_STATUS,
    new_MSTR_CRD_STATUS,
    new_MSTR_FL_STATUS,
    new_MSTR_LL_STATUS,
    new_OBCPL_FIFO_STATUS,
    new_P_RL_CQ_FIFO_STATUS,
    new_RI_DB_STATUS,
    new_RI_IOQ_FIFO_STATUS,
    new_RI_NPDATA_FIFO_STATUS,
    new_RI_NPHDR_FIFO_STATUS,
    new_RI_PARITY_ERR,
    new_RI_PDATA_FIFO_STATUS,
    new_RI_PHDR_FIFO_STATUS,
    new_SCRBD_STATUS,
    new_SIF_ALARM_ERR,
    new_SIF_DB_STATUS,
    new_SIF_IDLE_STATUS,
    new_SIF_MSTR_DEBUG,
    new_SIF_PARITY_ERR,
    new_TGT_INIT_DCREDITS,
    new_TGT_INIT_HCREDITS,
    new_TGT_REM_DCREDITS,
    new_TGT_REM_HCREDITS,
    new_TGT_RET_DCREDITS,
    new_TGT_RET_HCREDITS,

    handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER0,
    handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER1,
    handcode_reg_rdata_AW_SMON_COMPARE0,
    handcode_reg_rdata_AW_SMON_COMPARE1,
    handcode_reg_rdata_AW_SMON_COMP_MASK0,
    handcode_reg_rdata_AW_SMON_COMP_MASK1,
    handcode_reg_rdata_AW_SMON_CONFIGURATION0,
    handcode_reg_rdata_AW_SMON_CONFIGURATION1,
    handcode_reg_rdata_AW_SMON_MAXIMUM_TIMER,
    handcode_reg_rdata_AW_SMON_TIMER,
    handcode_reg_rdata_VISA_SW_CONTROL,

    handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0,
    handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1,
    handcode_rvalid_AW_SMON_COMPARE0,
    handcode_rvalid_AW_SMON_COMPARE1,
    handcode_rvalid_AW_SMON_COMP_MASK0,
    handcode_rvalid_AW_SMON_COMP_MASK1,
    handcode_rvalid_AW_SMON_CONFIGURATION0,
    handcode_rvalid_AW_SMON_CONFIGURATION1,
    handcode_rvalid_AW_SMON_MAXIMUM_TIMER,
    handcode_rvalid_AW_SMON_TIMER,
    handcode_rvalid_VISA_SW_CONTROL,

    handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0,
    handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1,
    handcode_wvalid_AW_SMON_COMPARE0,
    handcode_wvalid_AW_SMON_COMPARE1,
    handcode_wvalid_AW_SMON_COMP_MASK0,
    handcode_wvalid_AW_SMON_COMP_MASK1,
    handcode_wvalid_AW_SMON_CONFIGURATION0,
    handcode_wvalid_AW_SMON_CONFIGURATION1,
    handcode_wvalid_AW_SMON_MAXIMUM_TIMER,
    handcode_wvalid_AW_SMON_TIMER,
    handcode_wvalid_VISA_SW_CONTROL,

    handcode_error_AW_SMON_ACTIVITYCOUNTER0,
    handcode_error_AW_SMON_ACTIVITYCOUNTER1,
    handcode_error_AW_SMON_COMPARE0,
    handcode_error_AW_SMON_COMPARE1,
    handcode_error_AW_SMON_COMP_MASK0,
    handcode_error_AW_SMON_COMP_MASK1,
    handcode_error_AW_SMON_CONFIGURATION0,
    handcode_error_AW_SMON_CONFIGURATION1,
    handcode_error_AW_SMON_MAXIMUM_TIMER,
    handcode_error_AW_SMON_TIMER,
    handcode_error_VISA_SW_CONTROL,


    // Misc Inputs
    HQM_CSR_CP_HI_sai_rst_strap,
    HQM_CSR_CP_LO_sai_rst_strap,
    HQM_CSR_RAC_HI_sai_rst_strap,
    HQM_CSR_RAC_LO_sai_rst_strap,
    HQM_CSR_WAC_HI_sai_rst_strap,
    HQM_CSR_WAC_LO_sai_rst_strap,

    // Register Outputs
    CFGM_STATUS,
    CFGM_STATUS2,
    CFG_MASTER_TIMEOUT,
    CFG_PH_TRIGGER_ADDR_L,
    CFG_PH_TRIGGER_ADDR_U,
    CFG_PH_TRIGGER_MASK_L,
    CFG_PH_TRIGGER_MASK_U,
    CFG_UNIT_VERSION,
    DEVTLB_ATS_ERR,
    DEVTLB_CTL,
    DEVTLB_DEFEATURE0,
    DEVTLB_DEFEATURE1,
    DEVTLB_DEFEATURE2,
    DEVTLB_SPARE,
    DEVTLB_STATUS,
    DIR_CQ2TC_MAP,
    HCW_TIMEOUT,
    HQM_CSR_CP_HI,
    HQM_CSR_CP_LO,
    HQM_CSR_RAC_HI,
    HQM_CSR_RAC_LO,
    HQM_CSR_WAC_HI,
    HQM_CSR_WAC_LO,
    HQM_PULLED_FUSES_0,
    HQM_SIF_CNT_0,
    HQM_SIF_CNT_1,
    HQM_SIF_CNT_10,
    HQM_SIF_CNT_11,
    HQM_SIF_CNT_2,
    HQM_SIF_CNT_3,
    HQM_SIF_CNT_4,
    HQM_SIF_CNT_5,
    HQM_SIF_CNT_6,
    HQM_SIF_CNT_7,
    HQM_SIF_CNT_8,
    HQM_SIF_CNT_9,
    HQM_SIF_CNT_CTL,
    IBCPL_DATA_FIFO_CTL,
    IBCPL_DATA_FIFO_STATUS,
    IBCPL_ERR,
    IBCPL_ERR_HDR_0,
    IBCPL_ERR_HDR_1,
    IBCPL_ERR_HDR_2,
    IBCPL_HDR_FIFO_CTL,
    IBCPL_HDR_FIFO_STATUS,
    INT2TC_MAP,
    IOSFP_CGCTL,
    IOSFS_CGCTL,
    LDB_CQ2TC_MAP,
    LOCAL_BME_STATUS,
    LOCAL_MSIXE_STATUS,
    MMIO_TIMEOUT,
    MSTR_CRD_STATUS,
    MSTR_FL_STATUS,
    MSTR_LL_CTL,
    MSTR_LL_STATUS,
    OBCPL_AFULL_AGITATE_CONTROL,
    OBCPL_FIFO_STATUS,
    PARITY_CTL,
    PRIM_CDC_CTL,
    P_RL_CQ_FIFO_STATUS,
    RI_DB_STATUS,
    RI_IOQ_FIFO_CTL,
    RI_IOQ_FIFO_STATUS,
    RI_NPDATA_FIFO_CTL,
    RI_NPDATA_FIFO_STATUS,
    RI_NPHDR_FIFO_CTL,
    RI_NPHDR_FIFO_STATUS,
    RI_PARITY_ERR,
    RI_PDATA_FIFO_CTL,
    RI_PDATA_FIFO_STATUS,
    RI_PHDR_FIFO_CTL,
    RI_PHDR_FIFO_STATUS,
    SCRBD_CTL,
    SCRBD_STATUS,
    SIDE_CDC_CTL,
    SIF_ALARM_ERR,
    SIF_CTL,
    SIF_DB_STATUS,
    SIF_IDLE_STATUS,
    SIF_MSTR_DEBUG,
    SIF_PARITY_ERR,
    SIF_VC_RXMAP,
    SIF_VC_TXMAP,
    TGT_INIT_DCREDITS,
    TGT_INIT_HCREDITS,
    TGT_REM_DCREDITS,
    TGT_REM_HCREDITS,
    TGT_RET_DCREDITS,
    TGT_RET_HCREDITS,


    // Register signals for HandCoded registers
    handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER0,
    handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER1,
    handcode_reg_wdata_AW_SMON_COMPARE0,
    handcode_reg_wdata_AW_SMON_COMPARE1,
    handcode_reg_wdata_AW_SMON_COMP_MASK0,
    handcode_reg_wdata_AW_SMON_COMP_MASK1,
    handcode_reg_wdata_AW_SMON_CONFIGURATION0,
    handcode_reg_wdata_AW_SMON_CONFIGURATION1,
    handcode_reg_wdata_AW_SMON_MAXIMUM_TIMER,
    handcode_reg_wdata_AW_SMON_TIMER,
    handcode_reg_wdata_VISA_SW_CONTROL,

    we_AW_SMON_ACTIVITYCOUNTER0,
    we_AW_SMON_ACTIVITYCOUNTER1,
    we_AW_SMON_COMPARE0,
    we_AW_SMON_COMPARE1,
    we_AW_SMON_COMP_MASK0,
    we_AW_SMON_COMP_MASK1,
    we_AW_SMON_CONFIGURATION0,
    we_AW_SMON_CONFIGURATION1,
    we_AW_SMON_MAXIMUM_TIMER,
    we_AW_SMON_TIMER,
    we_VISA_SW_CONTROL,

    re_AW_SMON_ACTIVITYCOUNTER0,
    re_AW_SMON_ACTIVITYCOUNTER1,
    re_AW_SMON_COMPARE0,
    re_AW_SMON_COMPARE1,
    re_AW_SMON_COMP_MASK0,
    re_AW_SMON_COMP_MASK1,
    re_AW_SMON_CONFIGURATION0,
    re_AW_SMON_CONFIGURATION1,
    re_AW_SMON_MAXIMUM_TIMER,
    re_AW_SMON_TIMER,
    re_VISA_SW_CONTROL,




    sai_export,

    // Config Access
    req,
    ack
    

);

import hqm_sif_csr_pkg::*;
import rtlgen_pkg_hqm_sif_csr_map::*;

parameter  HQM_SIF_CSR_MEM_ADDR_MSB = 47;
parameter [HQM_SIF_CSR_MEM_ADDR_MSB:0] HQM_SIF_CSR_MAP_OFFSET = {HQM_SIF_CSR_MEM_ADDR_MSB+1{1'b0}};
localparam  ADDR_LSB_BUS_ALIGN = 2;
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_CSR_CP_LO_DECODE_ADDR = HQM_CSR_CP_LO_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_CSR_CP_HI_DECODE_ADDR = HQM_CSR_CP_HI_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_CSR_RAC_LO_DECODE_ADDR = HQM_CSR_RAC_LO_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_CSR_RAC_HI_DECODE_ADDR = HQM_CSR_RAC_HI_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_CSR_WAC_LO_DECODE_ADDR = HQM_CSR_WAC_LO_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_CSR_WAC_HI_DECODE_ADDR = HQM_CSR_WAC_HI_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_CTL_DECODE_ADDR = SIF_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_VC_RXMAP_DECODE_ADDR = SIF_VC_RXMAP_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_VC_TXMAP_DECODE_ADDR = SIF_VC_TXMAP_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DEVTLB_ATS_ERR_DECODE_ADDR = DEVTLB_ATS_ERR_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_ALARM_ERR_DECODE_ADDR = SIF_ALARM_ERR_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_PARITY_ERR_DECODE_ADDR = RI_PARITY_ERR_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_PARITY_ERR_DECODE_ADDR = SIF_PARITY_ERR_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_CTL_DECODE_ADDR = HQM_SIF_CNT_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DIR_CQ2TC_MAP_DECODE_ADDR = DIR_CQ2TC_MAP_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] LDB_CQ2TC_MAP_DECODE_ADDR = LDB_CQ2TC_MAP_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] INT2TC_MAP_DECODE_ADDR = INT2TC_MAP_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_UNIT_VERSION_DECODE_ADDR = CFG_UNIT_VERSION_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_0_DECODE_ADDR = HQM_SIF_CNT_0_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_1_DECODE_ADDR = HQM_SIF_CNT_1_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_2_DECODE_ADDR = HQM_SIF_CNT_2_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_3_DECODE_ADDR = HQM_SIF_CNT_3_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_4_DECODE_ADDR = HQM_SIF_CNT_4_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_5_DECODE_ADDR = HQM_SIF_CNT_5_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_6_DECODE_ADDR = HQM_SIF_CNT_6_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_7_DECODE_ADDR = HQM_SIF_CNT_7_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_8_DECODE_ADDR = HQM_SIF_CNT_8_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_9_DECODE_ADDR = HQM_SIF_CNT_9_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_10_DECODE_ADDR = HQM_SIF_CNT_10_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SIF_CNT_11_DECODE_ADDR = HQM_SIF_CNT_11_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] OBCPL_AFULL_AGITATE_CONTROL_DECODE_ADDR = OBCPL_AFULL_AGITATE_CONTROL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] PRIM_CDC_CTL_DECODE_ADDR = PRIM_CDC_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIDE_CDC_CTL_DECODE_ADDR = SIDE_CDC_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IOSFP_CGCTL_DECODE_ADDR = IOSFP_CGCTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IOSFS_CGCTL_DECODE_ADDR = IOSFS_CGCTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] PARITY_CTL_DECODE_ADDR = PARITY_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_MASTER_TIMEOUT_DECODE_ADDR = CFG_MASTER_TIMEOUT_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MMIO_TIMEOUT_DECODE_ADDR = MMIO_TIMEOUT_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HCW_TIMEOUT_DECODE_ADDR = HCW_TIMEOUT_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_PH_TRIGGER_ADDR_L_DECODE_ADDR = CFG_PH_TRIGGER_ADDR_L_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_PH_TRIGGER_ADDR_U_DECODE_ADDR = CFG_PH_TRIGGER_ADDR_U_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_PH_TRIGGER_MASK_L_DECODE_ADDR = CFG_PH_TRIGGER_MASK_L_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_PH_TRIGGER_MASK_U_DECODE_ADDR = CFG_PH_TRIGGER_MASK_U_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_IDLE_STATUS_DECODE_ADDR = SIF_IDLE_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_DB_STATUS_DECODE_ADDR = SIF_DB_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_DB_STATUS_DECODE_ADDR = RI_DB_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_PHDR_FIFO_CTL_DECODE_ADDR = RI_PHDR_FIFO_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_PDATA_FIFO_CTL_DECODE_ADDR = RI_PDATA_FIFO_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_NPHDR_FIFO_CTL_DECODE_ADDR = RI_NPHDR_FIFO_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_NPDATA_FIFO_CTL_DECODE_ADDR = RI_NPDATA_FIFO_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_IOQ_FIFO_CTL_DECODE_ADDR = RI_IOQ_FIFO_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IBCPL_HDR_FIFO_CTL_DECODE_ADDR = IBCPL_HDR_FIFO_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IBCPL_DATA_FIFO_CTL_DECODE_ADDR = IBCPL_DATA_FIFO_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SCRBD_CTL_DECODE_ADDR = SCRBD_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SCRBD_STATUS_DECODE_ADDR = SCRBD_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DEVTLB_CTL_DECODE_ADDR = DEVTLB_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DEVTLB_SPARE_DECODE_ADDR = DEVTLB_SPARE_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DEVTLB_DEFEATURE0_DECODE_ADDR = DEVTLB_DEFEATURE0_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DEVTLB_DEFEATURE1_DECODE_ADDR = DEVTLB_DEFEATURE1_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DEVTLB_DEFEATURE2_DECODE_ADDR = DEVTLB_DEFEATURE2_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DEVTLB_STATUS_DECODE_ADDR = DEVTLB_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFGM_STATUS_DECODE_ADDR = CFGM_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFGM_STATUS2_DECODE_ADDR = CFGM_STATUS2_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] LOCAL_BME_STATUS_DECODE_ADDR = LOCAL_BME_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] LOCAL_MSIXE_STATUS_DECODE_ADDR = LOCAL_MSIXE_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSTR_CRD_STATUS_DECODE_ADDR = MSTR_CRD_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSTR_FL_STATUS_DECODE_ADDR = MSTR_FL_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSTR_LL_STATUS_DECODE_ADDR = MSTR_LL_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSTR_LL_CTL_DECODE_ADDR = MSTR_LL_CTL_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_MSTR_DEBUG_DECODE_ADDR = SIF_MSTR_DEBUG_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IBCPL_ERR_DECODE_ADDR = IBCPL_ERR_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IBCPL_ERR_HDR_0_DECODE_ADDR = IBCPL_ERR_HDR_0_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IBCPL_ERR_HDR_1_DECODE_ADDR = IBCPL_ERR_HDR_1_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IBCPL_ERR_HDR_2_DECODE_ADDR = IBCPL_ERR_HDR_2_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_PHDR_FIFO_STATUS_DECODE_ADDR = RI_PHDR_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_PDATA_FIFO_STATUS_DECODE_ADDR = RI_PDATA_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_NPHDR_FIFO_STATUS_DECODE_ADDR = RI_NPHDR_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_NPDATA_FIFO_STATUS_DECODE_ADDR = RI_NPDATA_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] RI_IOQ_FIFO_STATUS_DECODE_ADDR = RI_IOQ_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IBCPL_DATA_FIFO_STATUS_DECODE_ADDR = IBCPL_DATA_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] OBCPL_FIFO_STATUS_DECODE_ADDR = OBCPL_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IBCPL_HDR_FIFO_STATUS_DECODE_ADDR = IBCPL_HDR_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] P_RL_CQ_FIFO_STATUS_DECODE_ADDR = P_RL_CQ_FIFO_STATUS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TGT_INIT_HCREDITS_DECODE_ADDR = TGT_INIT_HCREDITS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TGT_INIT_DCREDITS_DECODE_ADDR = TGT_INIT_DCREDITS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TGT_REM_HCREDITS_DECODE_ADDR = TGT_REM_HCREDITS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TGT_REM_DCREDITS_DECODE_ADDR = TGT_REM_DCREDITS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TGT_RET_HCREDITS_DECODE_ADDR = TGT_RET_HCREDITS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TGT_RET_DCREDITS_DECODE_ADDR = TGT_RET_DCREDITS_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_PULLED_FUSES_0_DECODE_ADDR = HQM_PULLED_FUSES_0_CR_ADDR[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SIF_CSR_MAP_OFFSET[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];

    // Clocks
input logic  gated_clk;
input logic  rtl_clk;

    // Resets
input logic  hqm_csr_mmio_rst_n;
input logic  powergood_rst_b;
input logic  prim_gated_rst_b;
input logic  side_gated_rst_prim_b;


    // Register Inputs
input load_DEVTLB_ATS_ERR_t  load_DEVTLB_ATS_ERR;
input load_IBCPL_DATA_FIFO_STATUS_t  load_IBCPL_DATA_FIFO_STATUS;
input load_IBCPL_ERR_t  load_IBCPL_ERR;
input load_IBCPL_ERR_HDR_0_t  load_IBCPL_ERR_HDR_0;
input load_IBCPL_ERR_HDR_1_t  load_IBCPL_ERR_HDR_1;
input load_IBCPL_ERR_HDR_2_t  load_IBCPL_ERR_HDR_2;
input load_IBCPL_HDR_FIFO_STATUS_t  load_IBCPL_HDR_FIFO_STATUS;
input load_OBCPL_FIFO_STATUS_t  load_OBCPL_FIFO_STATUS;
input load_P_RL_CQ_FIFO_STATUS_t  load_P_RL_CQ_FIFO_STATUS;
input load_RI_IOQ_FIFO_STATUS_t  load_RI_IOQ_FIFO_STATUS;
input load_RI_NPDATA_FIFO_STATUS_t  load_RI_NPDATA_FIFO_STATUS;
input load_RI_NPHDR_FIFO_STATUS_t  load_RI_NPHDR_FIFO_STATUS;
input load_RI_PARITY_ERR_t  load_RI_PARITY_ERR;
input load_RI_PDATA_FIFO_STATUS_t  load_RI_PDATA_FIFO_STATUS;
input load_RI_PHDR_FIFO_STATUS_t  load_RI_PHDR_FIFO_STATUS;
input load_SIF_ALARM_ERR_t  load_SIF_ALARM_ERR;
input load_SIF_PARITY_ERR_t  load_SIF_PARITY_ERR;

input new_CFGM_STATUS_t  new_CFGM_STATUS;
input new_CFGM_STATUS2_t  new_CFGM_STATUS2;
input new_DEVTLB_ATS_ERR_t  new_DEVTLB_ATS_ERR;
input new_DEVTLB_STATUS_t  new_DEVTLB_STATUS;
input new_HQM_PULLED_FUSES_0_t  new_HQM_PULLED_FUSES_0;
input new_HQM_SIF_CNT_0_t  new_HQM_SIF_CNT_0;
input new_HQM_SIF_CNT_1_t  new_HQM_SIF_CNT_1;
input new_HQM_SIF_CNT_10_t  new_HQM_SIF_CNT_10;
input new_HQM_SIF_CNT_11_t  new_HQM_SIF_CNT_11;
input new_HQM_SIF_CNT_2_t  new_HQM_SIF_CNT_2;
input new_HQM_SIF_CNT_3_t  new_HQM_SIF_CNT_3;
input new_HQM_SIF_CNT_4_t  new_HQM_SIF_CNT_4;
input new_HQM_SIF_CNT_5_t  new_HQM_SIF_CNT_5;
input new_HQM_SIF_CNT_6_t  new_HQM_SIF_CNT_6;
input new_HQM_SIF_CNT_7_t  new_HQM_SIF_CNT_7;
input new_HQM_SIF_CNT_8_t  new_HQM_SIF_CNT_8;
input new_HQM_SIF_CNT_9_t  new_HQM_SIF_CNT_9;
input new_IBCPL_DATA_FIFO_STATUS_t  new_IBCPL_DATA_FIFO_STATUS;
input new_IBCPL_ERR_t  new_IBCPL_ERR;
input new_IBCPL_ERR_HDR_0_t  new_IBCPL_ERR_HDR_0;
input new_IBCPL_ERR_HDR_1_t  new_IBCPL_ERR_HDR_1;
input new_IBCPL_ERR_HDR_2_t  new_IBCPL_ERR_HDR_2;
input new_IBCPL_HDR_FIFO_STATUS_t  new_IBCPL_HDR_FIFO_STATUS;
input new_LOCAL_BME_STATUS_t  new_LOCAL_BME_STATUS;
input new_LOCAL_MSIXE_STATUS_t  new_LOCAL_MSIXE_STATUS;
input new_MSTR_CRD_STATUS_t  new_MSTR_CRD_STATUS;
input new_MSTR_FL_STATUS_t  new_MSTR_FL_STATUS;
input new_MSTR_LL_STATUS_t  new_MSTR_LL_STATUS;
input new_OBCPL_FIFO_STATUS_t  new_OBCPL_FIFO_STATUS;
input new_P_RL_CQ_FIFO_STATUS_t  new_P_RL_CQ_FIFO_STATUS;
input new_RI_DB_STATUS_t  new_RI_DB_STATUS;
input new_RI_IOQ_FIFO_STATUS_t  new_RI_IOQ_FIFO_STATUS;
input new_RI_NPDATA_FIFO_STATUS_t  new_RI_NPDATA_FIFO_STATUS;
input new_RI_NPHDR_FIFO_STATUS_t  new_RI_NPHDR_FIFO_STATUS;
input new_RI_PARITY_ERR_t  new_RI_PARITY_ERR;
input new_RI_PDATA_FIFO_STATUS_t  new_RI_PDATA_FIFO_STATUS;
input new_RI_PHDR_FIFO_STATUS_t  new_RI_PHDR_FIFO_STATUS;
input new_SCRBD_STATUS_t  new_SCRBD_STATUS;
input new_SIF_ALARM_ERR_t  new_SIF_ALARM_ERR;
input new_SIF_DB_STATUS_t  new_SIF_DB_STATUS;
input new_SIF_IDLE_STATUS_t  new_SIF_IDLE_STATUS;
input new_SIF_MSTR_DEBUG_t  new_SIF_MSTR_DEBUG;
input new_SIF_PARITY_ERR_t  new_SIF_PARITY_ERR;
input new_TGT_INIT_DCREDITS_t  new_TGT_INIT_DCREDITS;
input new_TGT_INIT_HCREDITS_t  new_TGT_INIT_HCREDITS;
input new_TGT_REM_DCREDITS_t  new_TGT_REM_DCREDITS;
input new_TGT_REM_HCREDITS_t  new_TGT_REM_HCREDITS;
input new_TGT_RET_DCREDITS_t  new_TGT_RET_DCREDITS;
input new_TGT_RET_HCREDITS_t  new_TGT_RET_HCREDITS;

input AW_SMON_ACTIVITYCOUNTER0_t  handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER0;
input AW_SMON_ACTIVITYCOUNTER1_t  handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER1;
input AW_SMON_COMPARE0_t  handcode_reg_rdata_AW_SMON_COMPARE0;
input AW_SMON_COMPARE1_t  handcode_reg_rdata_AW_SMON_COMPARE1;
input AW_SMON_COMP_MASK0_t  handcode_reg_rdata_AW_SMON_COMP_MASK0;
input AW_SMON_COMP_MASK1_t  handcode_reg_rdata_AW_SMON_COMP_MASK1;
input AW_SMON_CONFIGURATION0_t  handcode_reg_rdata_AW_SMON_CONFIGURATION0;
input AW_SMON_CONFIGURATION1_t  handcode_reg_rdata_AW_SMON_CONFIGURATION1;
input AW_SMON_MAXIMUM_TIMER_t  handcode_reg_rdata_AW_SMON_MAXIMUM_TIMER;
input AW_SMON_TIMER_t  handcode_reg_rdata_AW_SMON_TIMER;
input VISA_SW_CONTROL_t  handcode_reg_rdata_VISA_SW_CONTROL;

input handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0_t  handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0;
input handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1_t  handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1;
input handcode_rvalid_AW_SMON_COMPARE0_t  handcode_rvalid_AW_SMON_COMPARE0;
input handcode_rvalid_AW_SMON_COMPARE1_t  handcode_rvalid_AW_SMON_COMPARE1;
input handcode_rvalid_AW_SMON_COMP_MASK0_t  handcode_rvalid_AW_SMON_COMP_MASK0;
input handcode_rvalid_AW_SMON_COMP_MASK1_t  handcode_rvalid_AW_SMON_COMP_MASK1;
input handcode_rvalid_AW_SMON_CONFIGURATION0_t  handcode_rvalid_AW_SMON_CONFIGURATION0;
input handcode_rvalid_AW_SMON_CONFIGURATION1_t  handcode_rvalid_AW_SMON_CONFIGURATION1;
input handcode_rvalid_AW_SMON_MAXIMUM_TIMER_t  handcode_rvalid_AW_SMON_MAXIMUM_TIMER;
input handcode_rvalid_AW_SMON_TIMER_t  handcode_rvalid_AW_SMON_TIMER;
input handcode_rvalid_VISA_SW_CONTROL_t  handcode_rvalid_VISA_SW_CONTROL;

input handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0_t  handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0;
input handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1_t  handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1;
input handcode_wvalid_AW_SMON_COMPARE0_t  handcode_wvalid_AW_SMON_COMPARE0;
input handcode_wvalid_AW_SMON_COMPARE1_t  handcode_wvalid_AW_SMON_COMPARE1;
input handcode_wvalid_AW_SMON_COMP_MASK0_t  handcode_wvalid_AW_SMON_COMP_MASK0;
input handcode_wvalid_AW_SMON_COMP_MASK1_t  handcode_wvalid_AW_SMON_COMP_MASK1;
input handcode_wvalid_AW_SMON_CONFIGURATION0_t  handcode_wvalid_AW_SMON_CONFIGURATION0;
input handcode_wvalid_AW_SMON_CONFIGURATION1_t  handcode_wvalid_AW_SMON_CONFIGURATION1;
input handcode_wvalid_AW_SMON_MAXIMUM_TIMER_t  handcode_wvalid_AW_SMON_MAXIMUM_TIMER;
input handcode_wvalid_AW_SMON_TIMER_t  handcode_wvalid_AW_SMON_TIMER;
input handcode_wvalid_VISA_SW_CONTROL_t  handcode_wvalid_VISA_SW_CONTROL;

input handcode_error_AW_SMON_ACTIVITYCOUNTER0_t  handcode_error_AW_SMON_ACTIVITYCOUNTER0;
input handcode_error_AW_SMON_ACTIVITYCOUNTER1_t  handcode_error_AW_SMON_ACTIVITYCOUNTER1;
input handcode_error_AW_SMON_COMPARE0_t  handcode_error_AW_SMON_COMPARE0;
input handcode_error_AW_SMON_COMPARE1_t  handcode_error_AW_SMON_COMPARE1;
input handcode_error_AW_SMON_COMP_MASK0_t  handcode_error_AW_SMON_COMP_MASK0;
input handcode_error_AW_SMON_COMP_MASK1_t  handcode_error_AW_SMON_COMP_MASK1;
input handcode_error_AW_SMON_CONFIGURATION0_t  handcode_error_AW_SMON_CONFIGURATION0;
input handcode_error_AW_SMON_CONFIGURATION1_t  handcode_error_AW_SMON_CONFIGURATION1;
input handcode_error_AW_SMON_MAXIMUM_TIMER_t  handcode_error_AW_SMON_MAXIMUM_TIMER;
input handcode_error_AW_SMON_TIMER_t  handcode_error_AW_SMON_TIMER;
input handcode_error_VISA_SW_CONTROL_t  handcode_error_VISA_SW_CONTROL;


    // Misc Inputs
input logic [31:0] HQM_CSR_CP_HI_sai_rst_strap;
input logic [31:0] HQM_CSR_CP_LO_sai_rst_strap;
input logic [31:0] HQM_CSR_RAC_HI_sai_rst_strap;
input logic [31:0] HQM_CSR_RAC_LO_sai_rst_strap;
input logic [31:0] HQM_CSR_WAC_HI_sai_rst_strap;
input logic [31:0] HQM_CSR_WAC_LO_sai_rst_strap;

    // Register Outputs
output CFGM_STATUS_t  CFGM_STATUS;
output CFGM_STATUS2_t  CFGM_STATUS2;
output CFG_MASTER_TIMEOUT_t  CFG_MASTER_TIMEOUT;
output CFG_PH_TRIGGER_ADDR_L_t  CFG_PH_TRIGGER_ADDR_L;
output CFG_PH_TRIGGER_ADDR_U_t  CFG_PH_TRIGGER_ADDR_U;
output CFG_PH_TRIGGER_MASK_L_t  CFG_PH_TRIGGER_MASK_L;
output CFG_PH_TRIGGER_MASK_U_t  CFG_PH_TRIGGER_MASK_U;
output CFG_UNIT_VERSION_t  CFG_UNIT_VERSION;
output DEVTLB_ATS_ERR_t  DEVTLB_ATS_ERR;
output DEVTLB_CTL_t  DEVTLB_CTL;
output DEVTLB_DEFEATURE0_t  DEVTLB_DEFEATURE0;
output DEVTLB_DEFEATURE1_t  DEVTLB_DEFEATURE1;
output DEVTLB_DEFEATURE2_t  DEVTLB_DEFEATURE2;
output DEVTLB_SPARE_t  DEVTLB_SPARE;
output DEVTLB_STATUS_t  DEVTLB_STATUS;
output DIR_CQ2TC_MAP_t  DIR_CQ2TC_MAP;
output HCW_TIMEOUT_t  HCW_TIMEOUT;
output HQM_CSR_CP_HI_t  HQM_CSR_CP_HI;
output HQM_CSR_CP_LO_t  HQM_CSR_CP_LO;
output HQM_CSR_RAC_HI_t  HQM_CSR_RAC_HI;
output HQM_CSR_RAC_LO_t  HQM_CSR_RAC_LO;
output HQM_CSR_WAC_HI_t  HQM_CSR_WAC_HI;
output HQM_CSR_WAC_LO_t  HQM_CSR_WAC_LO;
output HQM_PULLED_FUSES_0_t  HQM_PULLED_FUSES_0;
output HQM_SIF_CNT_0_t  HQM_SIF_CNT_0;
output HQM_SIF_CNT_1_t  HQM_SIF_CNT_1;
output HQM_SIF_CNT_10_t  HQM_SIF_CNT_10;
output HQM_SIF_CNT_11_t  HQM_SIF_CNT_11;
output HQM_SIF_CNT_2_t  HQM_SIF_CNT_2;
output HQM_SIF_CNT_3_t  HQM_SIF_CNT_3;
output HQM_SIF_CNT_4_t  HQM_SIF_CNT_4;
output HQM_SIF_CNT_5_t  HQM_SIF_CNT_5;
output HQM_SIF_CNT_6_t  HQM_SIF_CNT_6;
output HQM_SIF_CNT_7_t  HQM_SIF_CNT_7;
output HQM_SIF_CNT_8_t  HQM_SIF_CNT_8;
output HQM_SIF_CNT_9_t  HQM_SIF_CNT_9;
output HQM_SIF_CNT_CTL_t  HQM_SIF_CNT_CTL;
output IBCPL_DATA_FIFO_CTL_t  IBCPL_DATA_FIFO_CTL;
output IBCPL_DATA_FIFO_STATUS_t  IBCPL_DATA_FIFO_STATUS;
output IBCPL_ERR_t  IBCPL_ERR;
output IBCPL_ERR_HDR_0_t  IBCPL_ERR_HDR_0;
output IBCPL_ERR_HDR_1_t  IBCPL_ERR_HDR_1;
output IBCPL_ERR_HDR_2_t  IBCPL_ERR_HDR_2;
output IBCPL_HDR_FIFO_CTL_t  IBCPL_HDR_FIFO_CTL;
output IBCPL_HDR_FIFO_STATUS_t  IBCPL_HDR_FIFO_STATUS;
output INT2TC_MAP_t  INT2TC_MAP;
output IOSFP_CGCTL_t  IOSFP_CGCTL;
output IOSFS_CGCTL_t  IOSFS_CGCTL;
output LDB_CQ2TC_MAP_t  LDB_CQ2TC_MAP;
output LOCAL_BME_STATUS_t  LOCAL_BME_STATUS;
output LOCAL_MSIXE_STATUS_t  LOCAL_MSIXE_STATUS;
output MMIO_TIMEOUT_t  MMIO_TIMEOUT;
output MSTR_CRD_STATUS_t  MSTR_CRD_STATUS;
output MSTR_FL_STATUS_t  MSTR_FL_STATUS;
output MSTR_LL_CTL_t  MSTR_LL_CTL;
output MSTR_LL_STATUS_t  MSTR_LL_STATUS;
output OBCPL_AFULL_AGITATE_CONTROL_t  OBCPL_AFULL_AGITATE_CONTROL;
output OBCPL_FIFO_STATUS_t  OBCPL_FIFO_STATUS;
output PARITY_CTL_t  PARITY_CTL;
output PRIM_CDC_CTL_t  PRIM_CDC_CTL;
output P_RL_CQ_FIFO_STATUS_t  P_RL_CQ_FIFO_STATUS;
output RI_DB_STATUS_t  RI_DB_STATUS;
output RI_IOQ_FIFO_CTL_t  RI_IOQ_FIFO_CTL;
output RI_IOQ_FIFO_STATUS_t  RI_IOQ_FIFO_STATUS;
output RI_NPDATA_FIFO_CTL_t  RI_NPDATA_FIFO_CTL;
output RI_NPDATA_FIFO_STATUS_t  RI_NPDATA_FIFO_STATUS;
output RI_NPHDR_FIFO_CTL_t  RI_NPHDR_FIFO_CTL;
output RI_NPHDR_FIFO_STATUS_t  RI_NPHDR_FIFO_STATUS;
output RI_PARITY_ERR_t  RI_PARITY_ERR;
output RI_PDATA_FIFO_CTL_t  RI_PDATA_FIFO_CTL;
output RI_PDATA_FIFO_STATUS_t  RI_PDATA_FIFO_STATUS;
output RI_PHDR_FIFO_CTL_t  RI_PHDR_FIFO_CTL;
output RI_PHDR_FIFO_STATUS_t  RI_PHDR_FIFO_STATUS;
output SCRBD_CTL_t  SCRBD_CTL;
output SCRBD_STATUS_t  SCRBD_STATUS;
output SIDE_CDC_CTL_t  SIDE_CDC_CTL;
output SIF_ALARM_ERR_t  SIF_ALARM_ERR;
output SIF_CTL_t  SIF_CTL;
output SIF_DB_STATUS_t  SIF_DB_STATUS;
output SIF_IDLE_STATUS_t  SIF_IDLE_STATUS;
output SIF_MSTR_DEBUG_t  SIF_MSTR_DEBUG;
output SIF_PARITY_ERR_t  SIF_PARITY_ERR;
output SIF_VC_RXMAP_t  SIF_VC_RXMAP;
output SIF_VC_TXMAP_t  SIF_VC_TXMAP;
output TGT_INIT_DCREDITS_t  TGT_INIT_DCREDITS;
output TGT_INIT_HCREDITS_t  TGT_INIT_HCREDITS;
output TGT_REM_DCREDITS_t  TGT_REM_DCREDITS;
output TGT_REM_HCREDITS_t  TGT_REM_HCREDITS;
output TGT_RET_DCREDITS_t  TGT_RET_DCREDITS;
output TGT_RET_HCREDITS_t  TGT_RET_HCREDITS;


    // Register signals for HandCoded registers
output AW_SMON_ACTIVITYCOUNTER0_t  handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER0;
output AW_SMON_ACTIVITYCOUNTER1_t  handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER1;
output AW_SMON_COMPARE0_t  handcode_reg_wdata_AW_SMON_COMPARE0;
output AW_SMON_COMPARE1_t  handcode_reg_wdata_AW_SMON_COMPARE1;
output AW_SMON_COMP_MASK0_t  handcode_reg_wdata_AW_SMON_COMP_MASK0;
output AW_SMON_COMP_MASK1_t  handcode_reg_wdata_AW_SMON_COMP_MASK1;
output AW_SMON_CONFIGURATION0_t  handcode_reg_wdata_AW_SMON_CONFIGURATION0;
output AW_SMON_CONFIGURATION1_t  handcode_reg_wdata_AW_SMON_CONFIGURATION1;
output AW_SMON_MAXIMUM_TIMER_t  handcode_reg_wdata_AW_SMON_MAXIMUM_TIMER;
output AW_SMON_TIMER_t  handcode_reg_wdata_AW_SMON_TIMER;
output VISA_SW_CONTROL_t  handcode_reg_wdata_VISA_SW_CONTROL;

output we_AW_SMON_ACTIVITYCOUNTER0_t  we_AW_SMON_ACTIVITYCOUNTER0;
output we_AW_SMON_ACTIVITYCOUNTER1_t  we_AW_SMON_ACTIVITYCOUNTER1;
output we_AW_SMON_COMPARE0_t  we_AW_SMON_COMPARE0;
output we_AW_SMON_COMPARE1_t  we_AW_SMON_COMPARE1;
output we_AW_SMON_COMP_MASK0_t  we_AW_SMON_COMP_MASK0;
output we_AW_SMON_COMP_MASK1_t  we_AW_SMON_COMP_MASK1;
output we_AW_SMON_CONFIGURATION0_t  we_AW_SMON_CONFIGURATION0;
output we_AW_SMON_CONFIGURATION1_t  we_AW_SMON_CONFIGURATION1;
output we_AW_SMON_MAXIMUM_TIMER_t  we_AW_SMON_MAXIMUM_TIMER;
output we_AW_SMON_TIMER_t  we_AW_SMON_TIMER;
output we_VISA_SW_CONTROL_t  we_VISA_SW_CONTROL;

output re_AW_SMON_ACTIVITYCOUNTER0_t  re_AW_SMON_ACTIVITYCOUNTER0;
output re_AW_SMON_ACTIVITYCOUNTER1_t  re_AW_SMON_ACTIVITYCOUNTER1;
output re_AW_SMON_COMPARE0_t  re_AW_SMON_COMPARE0;
output re_AW_SMON_COMPARE1_t  re_AW_SMON_COMPARE1;
output re_AW_SMON_COMP_MASK0_t  re_AW_SMON_COMP_MASK0;
output re_AW_SMON_COMP_MASK1_t  re_AW_SMON_COMP_MASK1;
output re_AW_SMON_CONFIGURATION0_t  re_AW_SMON_CONFIGURATION0;
output re_AW_SMON_CONFIGURATION1_t  re_AW_SMON_CONFIGURATION1;
output re_AW_SMON_MAXIMUM_TIMER_t  re_AW_SMON_MAXIMUM_TIMER;
output re_AW_SMON_TIMER_t  re_AW_SMON_TIMER;
output re_VISA_SW_CONTROL_t  re_VISA_SW_CONTROL;




output hqm_sif_csr_sai_export_t  sai_export;

    // Config Access
input hqm_sif_csr_cr_req_t  req;
output hqm_sif_csr_cr_ack_t  ack;
    

// ======================================================================
// begin decode and addr logic section {


function automatic logic f_IsMEMRd (
    input logic [3:0] req_opcode
);
    f_IsMEMRd = (req_opcode == MRD); 
endfunction : f_IsMEMRd

function automatic logic f_IsMEMWr (
    input logic [3:0] req_opcode
);
    f_IsMEMWr = (req_opcode == MWR); 
endfunction : f_IsMEMWr

function automatic logic [CR_REQ_ADDR_HI:0] f_MEMAddr (
    input hqm_sif_csr_cr_req_t req
);
begin
    f_MEMAddr[CR_REQ_ADDR_HI:0] = 48'h0;
    f_MEMAddr[CR_MEM_ADDR_HI:0] = 
       req.addr.mem.offset[CR_MEM_ADDR_HI:0];
end
endfunction : f_MEMAddr


function automatic logic f_IsRdOpCode (
    input logic [3:0] req_opcode
);
    f_IsRdOpCode = (!req_opcode[0]); 
endfunction : f_IsRdOpCode

function automatic logic f_IsWrOpCode (
    input logic [3:0] req_opcode
);
    f_IsWrOpCode = (req_opcode[0]); 
endfunction : f_IsWrOpCode

// Shared registers definitions

logic sai_HQM_OS_W_control_en;
always_comb sai_HQM_OS_W_control_en = req.sai[5] ? HQM_CSR_CP_HI[req.sai[4:0]] : HQM_CSR_CP_LO[req.sai[4:0]];
always_comb sai_export.HQM_OS_W_control_en = sai_HQM_OS_W_control_en;
logic sai_HQM_OS_W_write_en;
always_comb sai_HQM_OS_W_write_en = req.sai[5] ? HQM_CSR_WAC_HI[req.sai[4:0]] : HQM_CSR_WAC_LO[req.sai[4:0]];
always_comb sai_export.HQM_OS_W_write_en = sai_HQM_OS_W_write_en;
logic sai_HQM_OS_W_read_en;
always_comb sai_HQM_OS_W_read_en = req.sai[5] ? HQM_CSR_RAC_HI[req.sai[4:0]] : HQM_CSR_RAC_LO[req.sai[4:0]];
always_comb sai_export.HQM_OS_W_read_en = sai_HQM_OS_W_read_en;



logic [3:0] req_opcode;
always_comb req_opcode = {1'b0, req.opcode[2:0]};

logic req_valid;
assign req_valid = req.valid;


logic IsWrOpcode;
logic IsRdOpcode;
assign IsWrOpcode = f_IsWrOpCode(req_opcode);
assign IsRdOpcode = f_IsRdOpCode(req_opcode);

logic IsMEMRd;
logic IsMEMWr;
assign IsMEMRd = f_IsMEMRd(req_opcode);
assign IsMEMWr = f_IsMEMWr(req_opcode);


logic [47:0] req_addr;
always_comb begin : REQ_ADDR_BLOCK
    unique casez (req_opcode) 
        MRD: begin 
            req_addr = f_MEMAddr(req);
        end 
        MWR: begin
            req_addr = f_MEMAddr(req);
        end 
        default: begin
           req_addr = 48'h0;
        end
    endcase 
end

logic [HQM_SIF_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] case_req_addr_HQM_SIF_CSR_MEM;
assign case_req_addr_HQM_SIF_CSR_MEM = req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
logic [3:0] be;
always_comb be = {4{req.valid}} & req.be;
logic [3:0] sai_successfull_per_byte;
logic [31:0] read_data;
logic [31:0] write_data;




// ======================================================================
// begin register logic section {

//---------------------------------------------------------------------
// HQM_CSR_CP_LO Address Decode
logic  addr_decode_HQM_CSR_CP_LO;
logic  write_req_HQM_CSR_CP_LO;
always_comb begin
   addr_decode_HQM_CSR_CP_LO = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_CSR_CP_LO_DECODE_ADDR) && req.valid ;
   write_req_HQM_CSR_CP_LO = IsMEMWr && addr_decode_HQM_CSR_CP_LO && sai_HQM_OS_W_control_en;
end

// ----------------------------------------------------------------------
// HQM_CSR_CP_LO.SAI_MASK x8 RW, using RW template.
logic [3:0] up_HQM_CSR_CP_LO_SAI_MASK;
always_comb begin
 up_HQM_CSR_CP_LO_SAI_MASK =
    ({4{write_req_HQM_CSR_CP_LO }} &
    be[3:0]);
end

logic [31:0] nxt_HQM_CSR_CP_LO_SAI_MASK;
always_comb begin
 nxt_HQM_CSR_CP_LO_SAI_MASK = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_CP_LO_sai_rst_strap[7:0], up_HQM_CSR_CP_LO_SAI_MASK[0], nxt_HQM_CSR_CP_LO_SAI_MASK[7:0], HQM_CSR_CP_LO.SAI_MASK[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_CP_LO_sai_rst_strap[15:8], up_HQM_CSR_CP_LO_SAI_MASK[1], nxt_HQM_CSR_CP_LO_SAI_MASK[15:8], HQM_CSR_CP_LO.SAI_MASK[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_CP_LO_sai_rst_strap[23:16], up_HQM_CSR_CP_LO_SAI_MASK[2], nxt_HQM_CSR_CP_LO_SAI_MASK[23:16], HQM_CSR_CP_LO.SAI_MASK[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_CP_LO_sai_rst_strap[31:24], up_HQM_CSR_CP_LO_SAI_MASK[3], nxt_HQM_CSR_CP_LO_SAI_MASK[31:24], HQM_CSR_CP_LO.SAI_MASK[31:24])

//---------------------------------------------------------------------
// HQM_CSR_CP_HI Address Decode
logic  addr_decode_HQM_CSR_CP_HI;
logic  write_req_HQM_CSR_CP_HI;
always_comb begin
   addr_decode_HQM_CSR_CP_HI = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_CSR_CP_HI_DECODE_ADDR) && req.valid ;
   write_req_HQM_CSR_CP_HI = IsMEMWr && addr_decode_HQM_CSR_CP_HI && sai_HQM_OS_W_control_en;
end

// ----------------------------------------------------------------------
// HQM_CSR_CP_HI.SAI_MASK x8 RW, using RW template.
logic [3:0] up_HQM_CSR_CP_HI_SAI_MASK;
always_comb begin
 up_HQM_CSR_CP_HI_SAI_MASK =
    ({4{write_req_HQM_CSR_CP_HI }} &
    be[3:0]);
end

logic [31:0] nxt_HQM_CSR_CP_HI_SAI_MASK;
always_comb begin
 nxt_HQM_CSR_CP_HI_SAI_MASK = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_CP_HI_sai_rst_strap[7:0], up_HQM_CSR_CP_HI_SAI_MASK[0], nxt_HQM_CSR_CP_HI_SAI_MASK[7:0], HQM_CSR_CP_HI.SAI_MASK[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_CP_HI_sai_rst_strap[15:8], up_HQM_CSR_CP_HI_SAI_MASK[1], nxt_HQM_CSR_CP_HI_SAI_MASK[15:8], HQM_CSR_CP_HI.SAI_MASK[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_CP_HI_sai_rst_strap[23:16], up_HQM_CSR_CP_HI_SAI_MASK[2], nxt_HQM_CSR_CP_HI_SAI_MASK[23:16], HQM_CSR_CP_HI.SAI_MASK[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_CP_HI_sai_rst_strap[31:24], up_HQM_CSR_CP_HI_SAI_MASK[3], nxt_HQM_CSR_CP_HI_SAI_MASK[31:24], HQM_CSR_CP_HI.SAI_MASK[31:24])

//---------------------------------------------------------------------
// HQM_CSR_RAC_LO Address Decode
logic  addr_decode_HQM_CSR_RAC_LO;
logic  write_req_HQM_CSR_RAC_LO;
always_comb begin
   addr_decode_HQM_CSR_RAC_LO = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_CSR_RAC_LO_DECODE_ADDR) && req.valid ;
   write_req_HQM_CSR_RAC_LO = IsMEMWr && addr_decode_HQM_CSR_RAC_LO && sai_HQM_OS_W_control_en;
end

// ----------------------------------------------------------------------
// HQM_CSR_RAC_LO.SAI_MASK x8 RW, using RW template.
logic [3:0] up_HQM_CSR_RAC_LO_SAI_MASK;
always_comb begin
 up_HQM_CSR_RAC_LO_SAI_MASK =
    ({4{write_req_HQM_CSR_RAC_LO }} &
    be[3:0]);
end

logic [31:0] nxt_HQM_CSR_RAC_LO_SAI_MASK;
always_comb begin
 nxt_HQM_CSR_RAC_LO_SAI_MASK = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_RAC_LO_sai_rst_strap[7:0], up_HQM_CSR_RAC_LO_SAI_MASK[0], nxt_HQM_CSR_RAC_LO_SAI_MASK[7:0], HQM_CSR_RAC_LO.SAI_MASK[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_RAC_LO_sai_rst_strap[15:8], up_HQM_CSR_RAC_LO_SAI_MASK[1], nxt_HQM_CSR_RAC_LO_SAI_MASK[15:8], HQM_CSR_RAC_LO.SAI_MASK[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_RAC_LO_sai_rst_strap[23:16], up_HQM_CSR_RAC_LO_SAI_MASK[2], nxt_HQM_CSR_RAC_LO_SAI_MASK[23:16], HQM_CSR_RAC_LO.SAI_MASK[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_RAC_LO_sai_rst_strap[31:24], up_HQM_CSR_RAC_LO_SAI_MASK[3], nxt_HQM_CSR_RAC_LO_SAI_MASK[31:24], HQM_CSR_RAC_LO.SAI_MASK[31:24])

//---------------------------------------------------------------------
// HQM_CSR_RAC_HI Address Decode
logic  addr_decode_HQM_CSR_RAC_HI;
logic  write_req_HQM_CSR_RAC_HI;
always_comb begin
   addr_decode_HQM_CSR_RAC_HI = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_CSR_RAC_HI_DECODE_ADDR) && req.valid ;
   write_req_HQM_CSR_RAC_HI = IsMEMWr && addr_decode_HQM_CSR_RAC_HI && sai_HQM_OS_W_control_en;
end

// ----------------------------------------------------------------------
// HQM_CSR_RAC_HI.SAI_MASK x8 RW, using RW template.
logic [3:0] up_HQM_CSR_RAC_HI_SAI_MASK;
always_comb begin
 up_HQM_CSR_RAC_HI_SAI_MASK =
    ({4{write_req_HQM_CSR_RAC_HI }} &
    be[3:0]);
end

logic [31:0] nxt_HQM_CSR_RAC_HI_SAI_MASK;
always_comb begin
 nxt_HQM_CSR_RAC_HI_SAI_MASK = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_RAC_HI_sai_rst_strap[7:0], up_HQM_CSR_RAC_HI_SAI_MASK[0], nxt_HQM_CSR_RAC_HI_SAI_MASK[7:0], HQM_CSR_RAC_HI.SAI_MASK[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_RAC_HI_sai_rst_strap[15:8], up_HQM_CSR_RAC_HI_SAI_MASK[1], nxt_HQM_CSR_RAC_HI_SAI_MASK[15:8], HQM_CSR_RAC_HI.SAI_MASK[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_RAC_HI_sai_rst_strap[23:16], up_HQM_CSR_RAC_HI_SAI_MASK[2], nxt_HQM_CSR_RAC_HI_SAI_MASK[23:16], HQM_CSR_RAC_HI.SAI_MASK[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_RAC_HI_sai_rst_strap[31:24], up_HQM_CSR_RAC_HI_SAI_MASK[3], nxt_HQM_CSR_RAC_HI_SAI_MASK[31:24], HQM_CSR_RAC_HI.SAI_MASK[31:24])

//---------------------------------------------------------------------
// HQM_CSR_WAC_LO Address Decode
logic  addr_decode_HQM_CSR_WAC_LO;
logic  write_req_HQM_CSR_WAC_LO;
always_comb begin
   addr_decode_HQM_CSR_WAC_LO = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_CSR_WAC_LO_DECODE_ADDR) && req.valid ;
   write_req_HQM_CSR_WAC_LO = IsMEMWr && addr_decode_HQM_CSR_WAC_LO && sai_HQM_OS_W_control_en;
end

// ----------------------------------------------------------------------
// HQM_CSR_WAC_LO.SAI_MASK x8 RW, using RW template.
logic [3:0] up_HQM_CSR_WAC_LO_SAI_MASK;
always_comb begin
 up_HQM_CSR_WAC_LO_SAI_MASK =
    ({4{write_req_HQM_CSR_WAC_LO }} &
    be[3:0]);
end

logic [31:0] nxt_HQM_CSR_WAC_LO_SAI_MASK;
always_comb begin
 nxt_HQM_CSR_WAC_LO_SAI_MASK = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_WAC_LO_sai_rst_strap[7:0], up_HQM_CSR_WAC_LO_SAI_MASK[0], nxt_HQM_CSR_WAC_LO_SAI_MASK[7:0], HQM_CSR_WAC_LO.SAI_MASK[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_WAC_LO_sai_rst_strap[15:8], up_HQM_CSR_WAC_LO_SAI_MASK[1], nxt_HQM_CSR_WAC_LO_SAI_MASK[15:8], HQM_CSR_WAC_LO.SAI_MASK[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_WAC_LO_sai_rst_strap[23:16], up_HQM_CSR_WAC_LO_SAI_MASK[2], nxt_HQM_CSR_WAC_LO_SAI_MASK[23:16], HQM_CSR_WAC_LO.SAI_MASK[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_WAC_LO_sai_rst_strap[31:24], up_HQM_CSR_WAC_LO_SAI_MASK[3], nxt_HQM_CSR_WAC_LO_SAI_MASK[31:24], HQM_CSR_WAC_LO.SAI_MASK[31:24])

//---------------------------------------------------------------------
// HQM_CSR_WAC_HI Address Decode
logic  addr_decode_HQM_CSR_WAC_HI;
logic  write_req_HQM_CSR_WAC_HI;
always_comb begin
   addr_decode_HQM_CSR_WAC_HI = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_CSR_WAC_HI_DECODE_ADDR) && req.valid ;
   write_req_HQM_CSR_WAC_HI = IsMEMWr && addr_decode_HQM_CSR_WAC_HI && sai_HQM_OS_W_control_en;
end

// ----------------------------------------------------------------------
// HQM_CSR_WAC_HI.SAI_MASK x8 RW, using RW template.
logic [3:0] up_HQM_CSR_WAC_HI_SAI_MASK;
always_comb begin
 up_HQM_CSR_WAC_HI_SAI_MASK =
    ({4{write_req_HQM_CSR_WAC_HI }} &
    be[3:0]);
end

logic [31:0] nxt_HQM_CSR_WAC_HI_SAI_MASK;
always_comb begin
 nxt_HQM_CSR_WAC_HI_SAI_MASK = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_WAC_HI_sai_rst_strap[7:0], up_HQM_CSR_WAC_HI_SAI_MASK[0], nxt_HQM_CSR_WAC_HI_SAI_MASK[7:0], HQM_CSR_WAC_HI.SAI_MASK[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_WAC_HI_sai_rst_strap[15:8], up_HQM_CSR_WAC_HI_SAI_MASK[1], nxt_HQM_CSR_WAC_HI_SAI_MASK[15:8], HQM_CSR_WAC_HI.SAI_MASK[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_WAC_HI_sai_rst_strap[23:16], up_HQM_CSR_WAC_HI_SAI_MASK[2], nxt_HQM_CSR_WAC_HI_SAI_MASK[23:16], HQM_CSR_WAC_HI.SAI_MASK[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF_RSTD(gated_clk, prim_gated_rst_b, HQM_CSR_WAC_HI_sai_rst_strap[31:24], up_HQM_CSR_WAC_HI_SAI_MASK[3], nxt_HQM_CSR_WAC_HI_SAI_MASK[31:24], HQM_CSR_WAC_HI.SAI_MASK[31:24])

//---------------------------------------------------------------------
// SIF_CTL Address Decode
logic  addr_decode_SIF_CTL;
logic  write_req_SIF_CTL;
always_comb begin
   addr_decode_SIF_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SIF_CTL_DECODE_ADDR) && req.valid ;
   write_req_SIF_CTL = IsMEMWr && addr_decode_SIF_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SIF_CTL.SIF_CON_DLY x4 RW, using RW template.
logic [0:0] up_SIF_CTL_SIF_CON_DLY;
always_comb begin
 up_SIF_CTL_SIF_CON_DLY =
    ({1{write_req_SIF_CTL }} &
    be[0:0]);
end

logic [3:0] nxt_SIF_CTL_SIF_CON_DLY;
always_comb begin
 nxt_SIF_CTL_SIF_CON_DLY = write_data[3:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_SIF_CTL_SIF_CON_DLY[0], nxt_SIF_CTL_SIF_CON_DLY[3:0], SIF_CTL.SIF_CON_DLY[3:0])

// ----------------------------------------------------------------------
// SIF_CTL.IDLE_DLY x3 RW, using RW template.
logic [0:0] up_SIF_CTL_IDLE_DLY;
always_comb begin
 up_SIF_CTL_IDLE_DLY =
    ({1{write_req_SIF_CTL }} &
    be[0:0]);
end

logic [2:0] nxt_SIF_CTL_IDLE_DLY;
always_comb begin
 nxt_SIF_CTL_IDLE_DLY = write_data[6:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_CTL_IDLE_DLY[0], nxt_SIF_CTL_IDLE_DLY[2:0], SIF_CTL.IDLE_DLY[2:0])

//---------------------------------------------------------------------
// SIF_VC_RXMAP Address Decode
logic  addr_decode_SIF_VC_RXMAP;
logic  write_req_SIF_VC_RXMAP;
always_comb begin
   addr_decode_SIF_VC_RXMAP = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SIF_VC_RXMAP_DECODE_ADDR) && req.valid ;
   write_req_SIF_VC_RXMAP = IsMEMWr && addr_decode_SIF_VC_RXMAP && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SIF_VC_RXMAP.VC0_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_RXMAP_VC0_MAP;
always_comb begin
 up_SIF_VC_RXMAP_VC0_MAP =
    ({1{write_req_SIF_VC_RXMAP }} &
    be[0:0]);
end

logic [2:0] nxt_SIF_VC_RXMAP_VC0_MAP;
always_comb begin
 nxt_SIF_VC_RXMAP_VC0_MAP = write_data[2:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_RXMAP_VC0_MAP[0], nxt_SIF_VC_RXMAP_VC0_MAP[2:0], SIF_VC_RXMAP.VC0_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_RXMAP.VC1_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_RXMAP_VC1_MAP;
always_comb begin
 up_SIF_VC_RXMAP_VC1_MAP =
    ({1{write_req_SIF_VC_RXMAP }} &
    be[0:0]);
end

logic [2:0] nxt_SIF_VC_RXMAP_VC1_MAP;
always_comb begin
 nxt_SIF_VC_RXMAP_VC1_MAP = write_data[6:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_RXMAP_VC1_MAP[0], nxt_SIF_VC_RXMAP_VC1_MAP[2:0], SIF_VC_RXMAP.VC1_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_RXMAP.VC2_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_RXMAP_VC2_MAP;
always_comb begin
 up_SIF_VC_RXMAP_VC2_MAP =
    ({1{write_req_SIF_VC_RXMAP }} &
    be[1:1]);
end

logic [2:0] nxt_SIF_VC_RXMAP_VC2_MAP;
always_comb begin
 nxt_SIF_VC_RXMAP_VC2_MAP = write_data[10:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h2, up_SIF_VC_RXMAP_VC2_MAP[0], nxt_SIF_VC_RXMAP_VC2_MAP[2:0], SIF_VC_RXMAP.VC2_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_RXMAP.VC3_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_RXMAP_VC3_MAP;
always_comb begin
 up_SIF_VC_RXMAP_VC3_MAP =
    ({1{write_req_SIF_VC_RXMAP }} &
    be[1:1]);
end

logic [2:0] nxt_SIF_VC_RXMAP_VC3_MAP;
always_comb begin
 nxt_SIF_VC_RXMAP_VC3_MAP = write_data[14:12];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h1, up_SIF_VC_RXMAP_VC3_MAP[0], nxt_SIF_VC_RXMAP_VC3_MAP[2:0], SIF_VC_RXMAP.VC3_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_RXMAP.VC4_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_RXMAP_VC4_MAP;
always_comb begin
 up_SIF_VC_RXMAP_VC4_MAP =
    ({1{write_req_SIF_VC_RXMAP }} &
    be[2:2]);
end

logic [2:0] nxt_SIF_VC_RXMAP_VC4_MAP;
always_comb begin
 nxt_SIF_VC_RXMAP_VC4_MAP = write_data[18:16];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_RXMAP_VC4_MAP[0], nxt_SIF_VC_RXMAP_VC4_MAP[2:0], SIF_VC_RXMAP.VC4_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_RXMAP.VC5_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_RXMAP_VC5_MAP;
always_comb begin
 up_SIF_VC_RXMAP_VC5_MAP =
    ({1{write_req_SIF_VC_RXMAP }} &
    be[2:2]);
end

logic [2:0] nxt_SIF_VC_RXMAP_VC5_MAP;
always_comb begin
 nxt_SIF_VC_RXMAP_VC5_MAP = write_data[22:20];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_RXMAP_VC5_MAP[0], nxt_SIF_VC_RXMAP_VC5_MAP[2:0], SIF_VC_RXMAP.VC5_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_RXMAP.VC6_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_RXMAP_VC6_MAP;
always_comb begin
 up_SIF_VC_RXMAP_VC6_MAP =
    ({1{write_req_SIF_VC_RXMAP }} &
    be[3:3]);
end

logic [2:0] nxt_SIF_VC_RXMAP_VC6_MAP;
always_comb begin
 nxt_SIF_VC_RXMAP_VC6_MAP = write_data[26:24];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_RXMAP_VC6_MAP[0], nxt_SIF_VC_RXMAP_VC6_MAP[2:0], SIF_VC_RXMAP.VC6_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_RXMAP.VC7_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_RXMAP_VC7_MAP;
always_comb begin
 up_SIF_VC_RXMAP_VC7_MAP =
    ({1{write_req_SIF_VC_RXMAP }} &
    be[3:3]);
end

logic [2:0] nxt_SIF_VC_RXMAP_VC7_MAP;
always_comb begin
 nxt_SIF_VC_RXMAP_VC7_MAP = write_data[30:28];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_RXMAP_VC7_MAP[0], nxt_SIF_VC_RXMAP_VC7_MAP[2:0], SIF_VC_RXMAP.VC7_MAP[2:0])

//---------------------------------------------------------------------
// SIF_VC_TXMAP Address Decode
logic  addr_decode_SIF_VC_TXMAP;
logic  write_req_SIF_VC_TXMAP;
always_comb begin
   addr_decode_SIF_VC_TXMAP = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SIF_VC_TXMAP_DECODE_ADDR) && req.valid ;
   write_req_SIF_VC_TXMAP = IsMEMWr && addr_decode_SIF_VC_TXMAP && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SIF_VC_TXMAP.VC0_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_TXMAP_VC0_MAP;
always_comb begin
 up_SIF_VC_TXMAP_VC0_MAP =
    ({1{write_req_SIF_VC_TXMAP }} &
    be[0:0]);
end

logic [2:0] nxt_SIF_VC_TXMAP_VC0_MAP;
always_comb begin
 nxt_SIF_VC_TXMAP_VC0_MAP = write_data[2:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_TXMAP_VC0_MAP[0], nxt_SIF_VC_TXMAP_VC0_MAP[2:0], SIF_VC_TXMAP.VC0_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_TXMAP.VC1_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_TXMAP_VC1_MAP;
always_comb begin
 up_SIF_VC_TXMAP_VC1_MAP =
    ({1{write_req_SIF_VC_TXMAP }} &
    be[0:0]);
end

logic [2:0] nxt_SIF_VC_TXMAP_VC1_MAP;
always_comb begin
 nxt_SIF_VC_TXMAP_VC1_MAP = write_data[6:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h3, up_SIF_VC_TXMAP_VC1_MAP[0], nxt_SIF_VC_TXMAP_VC1_MAP[2:0], SIF_VC_TXMAP.VC1_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_TXMAP.VC2_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_TXMAP_VC2_MAP;
always_comb begin
 up_SIF_VC_TXMAP_VC2_MAP =
    ({1{write_req_SIF_VC_TXMAP }} &
    be[1:1]);
end

logic [2:0] nxt_SIF_VC_TXMAP_VC2_MAP;
always_comb begin
 nxt_SIF_VC_TXMAP_VC2_MAP = write_data[10:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h2, up_SIF_VC_TXMAP_VC2_MAP[0], nxt_SIF_VC_TXMAP_VC2_MAP[2:0], SIF_VC_TXMAP.VC2_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_TXMAP.VC3_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_TXMAP_VC3_MAP;
always_comb begin
 up_SIF_VC_TXMAP_VC3_MAP =
    ({1{write_req_SIF_VC_TXMAP }} &
    be[1:1]);
end

logic [2:0] nxt_SIF_VC_TXMAP_VC3_MAP;
always_comb begin
 nxt_SIF_VC_TXMAP_VC3_MAP = write_data[14:12];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_TXMAP_VC3_MAP[0], nxt_SIF_VC_TXMAP_VC3_MAP[2:0], SIF_VC_TXMAP.VC3_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_TXMAP.VC4_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_TXMAP_VC4_MAP;
always_comb begin
 up_SIF_VC_TXMAP_VC4_MAP =
    ({1{write_req_SIF_VC_TXMAP }} &
    be[2:2]);
end

logic [2:0] nxt_SIF_VC_TXMAP_VC4_MAP;
always_comb begin
 nxt_SIF_VC_TXMAP_VC4_MAP = write_data[18:16];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_TXMAP_VC4_MAP[0], nxt_SIF_VC_TXMAP_VC4_MAP[2:0], SIF_VC_TXMAP.VC4_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_TXMAP.VC5_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_TXMAP_VC5_MAP;
always_comb begin
 up_SIF_VC_TXMAP_VC5_MAP =
    ({1{write_req_SIF_VC_TXMAP }} &
    be[2:2]);
end

logic [2:0] nxt_SIF_VC_TXMAP_VC5_MAP;
always_comb begin
 nxt_SIF_VC_TXMAP_VC5_MAP = write_data[22:20];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_TXMAP_VC5_MAP[0], nxt_SIF_VC_TXMAP_VC5_MAP[2:0], SIF_VC_TXMAP.VC5_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_TXMAP.VC6_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_TXMAP_VC6_MAP;
always_comb begin
 up_SIF_VC_TXMAP_VC6_MAP =
    ({1{write_req_SIF_VC_TXMAP }} &
    be[3:3]);
end

logic [2:0] nxt_SIF_VC_TXMAP_VC6_MAP;
always_comb begin
 nxt_SIF_VC_TXMAP_VC6_MAP = write_data[26:24];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_TXMAP_VC6_MAP[0], nxt_SIF_VC_TXMAP_VC6_MAP[2:0], SIF_VC_TXMAP.VC6_MAP[2:0])

// ----------------------------------------------------------------------
// SIF_VC_TXMAP.VC7_MAP x3 RW, using RW template.
logic [0:0] up_SIF_VC_TXMAP_VC7_MAP;
always_comb begin
 up_SIF_VC_TXMAP_VC7_MAP =
    ({1{write_req_SIF_VC_TXMAP }} &
    be[3:3]);
end

logic [2:0] nxt_SIF_VC_TXMAP_VC7_MAP;
always_comb begin
 nxt_SIF_VC_TXMAP_VC7_MAP = write_data[30:28];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h0, up_SIF_VC_TXMAP_VC7_MAP[0], nxt_SIF_VC_TXMAP_VC7_MAP[2:0], SIF_VC_TXMAP.VC7_MAP[2:0])

//---------------------------------------------------------------------
// DEVTLB_ATS_ERR Address Decode
logic  addr_decode_DEVTLB_ATS_ERR;
logic  write_req_DEVTLB_ATS_ERR;
always_comb begin
   addr_decode_DEVTLB_ATS_ERR = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DEVTLB_ATS_ERR_DECODE_ADDR) && req.valid ;
   write_req_DEVTLB_ATS_ERR = IsMEMWr && addr_decode_DEVTLB_ATS_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DEVTLB_ATS_ERR.BAD_RESULT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DEVTLB_ATS_ERR_BAD_RESULT;
always_comb begin
 req_up_DEVTLB_ATS_ERR_BAD_RESULT[0:0] = 
   {1{write_req_DEVTLB_ATS_ERR & be[0]}}
;
end

logic [0:0] clr_DEVTLB_ATS_ERR_BAD_RESULT;
always_comb begin
 clr_DEVTLB_ATS_ERR_BAD_RESULT = write_data[0:0] & req_up_DEVTLB_ATS_ERR_BAD_RESULT;

end
logic [0:0] swwr_DEVTLB_ATS_ERR_BAD_RESULT;
logic [0:0] sw_nxt_DEVTLB_ATS_ERR_BAD_RESULT;
always_comb begin
 swwr_DEVTLB_ATS_ERR_BAD_RESULT = clr_DEVTLB_ATS_ERR_BAD_RESULT;
 sw_nxt_DEVTLB_ATS_ERR_BAD_RESULT = {1{1'b0}};

end
logic [0:0] up_DEVTLB_ATS_ERR_BAD_RESULT;
logic [0:0] nxt_DEVTLB_ATS_ERR_BAD_RESULT;
always_comb begin
 up_DEVTLB_ATS_ERR_BAD_RESULT = 
   swwr_DEVTLB_ATS_ERR_BAD_RESULT | {1{load_DEVTLB_ATS_ERR.BAD_RESULT}};
end
always_comb begin
 nxt_DEVTLB_ATS_ERR_BAD_RESULT[0] = 
    load_DEVTLB_ATS_ERR.BAD_RESULT ?
    new_DEVTLB_ATS_ERR.BAD_RESULT[0] :
    sw_nxt_DEVTLB_ATS_ERR_BAD_RESULT[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_DEVTLB_ATS_ERR_BAD_RESULT[0], nxt_DEVTLB_ATS_ERR_BAD_RESULT[0], DEVTLB_ATS_ERR.BAD_RESULT[0])

// ----------------------------------------------------------------------
// DEVTLB_ATS_ERR.HDRERROR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DEVTLB_ATS_ERR_HDRERROR;
always_comb begin
 req_up_DEVTLB_ATS_ERR_HDRERROR[0:0] = 
   {1{write_req_DEVTLB_ATS_ERR & be[0]}}
;
end

logic [0:0] clr_DEVTLB_ATS_ERR_HDRERROR;
always_comb begin
 clr_DEVTLB_ATS_ERR_HDRERROR = write_data[1:1] & req_up_DEVTLB_ATS_ERR_HDRERROR;

end
logic [0:0] swwr_DEVTLB_ATS_ERR_HDRERROR;
logic [0:0] sw_nxt_DEVTLB_ATS_ERR_HDRERROR;
always_comb begin
 swwr_DEVTLB_ATS_ERR_HDRERROR = clr_DEVTLB_ATS_ERR_HDRERROR;
 sw_nxt_DEVTLB_ATS_ERR_HDRERROR = {1{1'b0}};

end
logic [0:0] up_DEVTLB_ATS_ERR_HDRERROR;
logic [0:0] nxt_DEVTLB_ATS_ERR_HDRERROR;
always_comb begin
 up_DEVTLB_ATS_ERR_HDRERROR = 
   swwr_DEVTLB_ATS_ERR_HDRERROR | {1{load_DEVTLB_ATS_ERR.HDRERROR}};
end
always_comb begin
 nxt_DEVTLB_ATS_ERR_HDRERROR[0] = 
    load_DEVTLB_ATS_ERR.HDRERROR ?
    new_DEVTLB_ATS_ERR.HDRERROR[0] :
    sw_nxt_DEVTLB_ATS_ERR_HDRERROR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_DEVTLB_ATS_ERR_HDRERROR[0], nxt_DEVTLB_ATS_ERR_HDRERROR[0], DEVTLB_ATS_ERR.HDRERROR[0])

// ----------------------------------------------------------------------
// DEVTLB_ATS_ERR.DPERROR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DEVTLB_ATS_ERR_DPERROR;
always_comb begin
 req_up_DEVTLB_ATS_ERR_DPERROR[0:0] = 
   {1{write_req_DEVTLB_ATS_ERR & be[0]}}
;
end

logic [0:0] clr_DEVTLB_ATS_ERR_DPERROR;
always_comb begin
 clr_DEVTLB_ATS_ERR_DPERROR = write_data[2:2] & req_up_DEVTLB_ATS_ERR_DPERROR;

end
logic [0:0] swwr_DEVTLB_ATS_ERR_DPERROR;
logic [0:0] sw_nxt_DEVTLB_ATS_ERR_DPERROR;
always_comb begin
 swwr_DEVTLB_ATS_ERR_DPERROR = clr_DEVTLB_ATS_ERR_DPERROR;
 sw_nxt_DEVTLB_ATS_ERR_DPERROR = {1{1'b0}};

end
logic [0:0] up_DEVTLB_ATS_ERR_DPERROR;
logic [0:0] nxt_DEVTLB_ATS_ERR_DPERROR;
always_comb begin
 up_DEVTLB_ATS_ERR_DPERROR = 
   swwr_DEVTLB_ATS_ERR_DPERROR | {1{load_DEVTLB_ATS_ERR.DPERROR}};
end
always_comb begin
 nxt_DEVTLB_ATS_ERR_DPERROR[0] = 
    load_DEVTLB_ATS_ERR.DPERROR ?
    new_DEVTLB_ATS_ERR.DPERROR[0] :
    sw_nxt_DEVTLB_ATS_ERR_DPERROR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_DEVTLB_ATS_ERR_DPERROR[0], nxt_DEVTLB_ATS_ERR_DPERROR[0], DEVTLB_ATS_ERR.DPERROR[0])

//---------------------------------------------------------------------
// SIF_ALARM_ERR Address Decode
logic  addr_decode_SIF_ALARM_ERR;
logic  write_req_SIF_ALARM_ERR;
always_comb begin
   addr_decode_SIF_ALARM_ERR = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SIF_ALARM_ERR_DECODE_ADDR) && req.valid ;
   write_req_SIF_ALARM_ERR = IsMEMWr && addr_decode_SIF_ALARM_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.TIMEOUT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_TIMEOUT;
always_comb begin
 req_up_SIF_ALARM_ERR_TIMEOUT[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_TIMEOUT;
always_comb begin
 clr_SIF_ALARM_ERR_TIMEOUT = write_data[0:0] & req_up_SIF_ALARM_ERR_TIMEOUT;

end
logic [0:0] swwr_SIF_ALARM_ERR_TIMEOUT;
logic [0:0] sw_nxt_SIF_ALARM_ERR_TIMEOUT;
always_comb begin
 swwr_SIF_ALARM_ERR_TIMEOUT = clr_SIF_ALARM_ERR_TIMEOUT;
 sw_nxt_SIF_ALARM_ERR_TIMEOUT = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_TIMEOUT;
logic [0:0] nxt_SIF_ALARM_ERR_TIMEOUT;
always_comb begin
 up_SIF_ALARM_ERR_TIMEOUT = 
   swwr_SIF_ALARM_ERR_TIMEOUT | {1{load_SIF_ALARM_ERR.TIMEOUT}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_TIMEOUT[0] = 
    load_SIF_ALARM_ERR.TIMEOUT ?
    new_SIF_ALARM_ERR.TIMEOUT[0] :
    sw_nxt_SIF_ALARM_ERR_TIMEOUT[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_TIMEOUT[0], nxt_SIF_ALARM_ERR_TIMEOUT[0], SIF_ALARM_ERR.TIMEOUT[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.SB_EP_PARITY_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_SB_EP_PARITY_ERR;
always_comb begin
 req_up_SIF_ALARM_ERR_SB_EP_PARITY_ERR[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_SB_EP_PARITY_ERR;
always_comb begin
 clr_SIF_ALARM_ERR_SB_EP_PARITY_ERR = write_data[1:1] & req_up_SIF_ALARM_ERR_SB_EP_PARITY_ERR;

end
logic [0:0] swwr_SIF_ALARM_ERR_SB_EP_PARITY_ERR;
logic [0:0] sw_nxt_SIF_ALARM_ERR_SB_EP_PARITY_ERR;
always_comb begin
 swwr_SIF_ALARM_ERR_SB_EP_PARITY_ERR = clr_SIF_ALARM_ERR_SB_EP_PARITY_ERR;
 sw_nxt_SIF_ALARM_ERR_SB_EP_PARITY_ERR = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_SB_EP_PARITY_ERR;
logic [0:0] nxt_SIF_ALARM_ERR_SB_EP_PARITY_ERR;
always_comb begin
 up_SIF_ALARM_ERR_SB_EP_PARITY_ERR = 
   swwr_SIF_ALARM_ERR_SB_EP_PARITY_ERR | {1{load_SIF_ALARM_ERR.SB_EP_PARITY_ERR}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_SB_EP_PARITY_ERR[0] = 
    load_SIF_ALARM_ERR.SB_EP_PARITY_ERR ?
    new_SIF_ALARM_ERR.SB_EP_PARITY_ERR[0] :
    sw_nxt_SIF_ALARM_ERR_SB_EP_PARITY_ERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_SB_EP_PARITY_ERR[0], nxt_SIF_ALARM_ERR_SB_EP_PARITY_ERR[0], SIF_ALARM_ERR.SB_EP_PARITY_ERR[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.FIFO_UNDERFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_FIFO_UNDERFLOW;
always_comb begin
 req_up_SIF_ALARM_ERR_FIFO_UNDERFLOW[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_FIFO_UNDERFLOW;
always_comb begin
 clr_SIF_ALARM_ERR_FIFO_UNDERFLOW = write_data[2:2] & req_up_SIF_ALARM_ERR_FIFO_UNDERFLOW;

end
logic [0:0] swwr_SIF_ALARM_ERR_FIFO_UNDERFLOW;
logic [0:0] sw_nxt_SIF_ALARM_ERR_FIFO_UNDERFLOW;
always_comb begin
 swwr_SIF_ALARM_ERR_FIFO_UNDERFLOW = clr_SIF_ALARM_ERR_FIFO_UNDERFLOW;
 sw_nxt_SIF_ALARM_ERR_FIFO_UNDERFLOW = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_FIFO_UNDERFLOW;
logic [0:0] nxt_SIF_ALARM_ERR_FIFO_UNDERFLOW;
always_comb begin
 up_SIF_ALARM_ERR_FIFO_UNDERFLOW = 
   swwr_SIF_ALARM_ERR_FIFO_UNDERFLOW | {1{load_SIF_ALARM_ERR.FIFO_UNDERFLOW}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_FIFO_UNDERFLOW[0] = 
    load_SIF_ALARM_ERR.FIFO_UNDERFLOW ?
    new_SIF_ALARM_ERR.FIFO_UNDERFLOW[0] :
    sw_nxt_SIF_ALARM_ERR_FIFO_UNDERFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_FIFO_UNDERFLOW[0], nxt_SIF_ALARM_ERR_FIFO_UNDERFLOW[0], SIF_ALARM_ERR.FIFO_UNDERFLOW[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.FIFO_OVERFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_FIFO_OVERFLOW;
always_comb begin
 req_up_SIF_ALARM_ERR_FIFO_OVERFLOW[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_FIFO_OVERFLOW;
always_comb begin
 clr_SIF_ALARM_ERR_FIFO_OVERFLOW = write_data[3:3] & req_up_SIF_ALARM_ERR_FIFO_OVERFLOW;

end
logic [0:0] swwr_SIF_ALARM_ERR_FIFO_OVERFLOW;
logic [0:0] sw_nxt_SIF_ALARM_ERR_FIFO_OVERFLOW;
always_comb begin
 swwr_SIF_ALARM_ERR_FIFO_OVERFLOW = clr_SIF_ALARM_ERR_FIFO_OVERFLOW;
 sw_nxt_SIF_ALARM_ERR_FIFO_OVERFLOW = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_FIFO_OVERFLOW;
logic [0:0] nxt_SIF_ALARM_ERR_FIFO_OVERFLOW;
always_comb begin
 up_SIF_ALARM_ERR_FIFO_OVERFLOW = 
   swwr_SIF_ALARM_ERR_FIFO_OVERFLOW | {1{load_SIF_ALARM_ERR.FIFO_OVERFLOW}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_FIFO_OVERFLOW[0] = 
    load_SIF_ALARM_ERR.FIFO_OVERFLOW ?
    new_SIF_ALARM_ERR.FIFO_OVERFLOW[0] :
    sw_nxt_SIF_ALARM_ERR_FIFO_OVERFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_FIFO_OVERFLOW[0], nxt_SIF_ALARM_ERR_FIFO_OVERFLOW[0], SIF_ALARM_ERR.FIFO_OVERFLOW[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.RI_PARITY_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_RI_PARITY_ERR;
always_comb begin
 req_up_SIF_ALARM_ERR_RI_PARITY_ERR[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_RI_PARITY_ERR;
always_comb begin
 clr_SIF_ALARM_ERR_RI_PARITY_ERR = write_data[4:4] & req_up_SIF_ALARM_ERR_RI_PARITY_ERR;

end
logic [0:0] swwr_SIF_ALARM_ERR_RI_PARITY_ERR;
logic [0:0] sw_nxt_SIF_ALARM_ERR_RI_PARITY_ERR;
always_comb begin
 swwr_SIF_ALARM_ERR_RI_PARITY_ERR = clr_SIF_ALARM_ERR_RI_PARITY_ERR;
 sw_nxt_SIF_ALARM_ERR_RI_PARITY_ERR = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_RI_PARITY_ERR;
logic [0:0] nxt_SIF_ALARM_ERR_RI_PARITY_ERR;
always_comb begin
 up_SIF_ALARM_ERR_RI_PARITY_ERR = 
   swwr_SIF_ALARM_ERR_RI_PARITY_ERR | {1{load_SIF_ALARM_ERR.RI_PARITY_ERR}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_RI_PARITY_ERR[0] = 
    load_SIF_ALARM_ERR.RI_PARITY_ERR ?
    new_SIF_ALARM_ERR.RI_PARITY_ERR[0] :
    sw_nxt_SIF_ALARM_ERR_RI_PARITY_ERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_RI_PARITY_ERR[0], nxt_SIF_ALARM_ERR_RI_PARITY_ERR[0], SIF_ALARM_ERR.RI_PARITY_ERR[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.SIF_PARITY_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_SIF_PARITY_ERR;
always_comb begin
 req_up_SIF_ALARM_ERR_SIF_PARITY_ERR[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_SIF_PARITY_ERR;
always_comb begin
 clr_SIF_ALARM_ERR_SIF_PARITY_ERR = write_data[5:5] & req_up_SIF_ALARM_ERR_SIF_PARITY_ERR;

end
logic [0:0] swwr_SIF_ALARM_ERR_SIF_PARITY_ERR;
logic [0:0] sw_nxt_SIF_ALARM_ERR_SIF_PARITY_ERR;
always_comb begin
 swwr_SIF_ALARM_ERR_SIF_PARITY_ERR = clr_SIF_ALARM_ERR_SIF_PARITY_ERR;
 sw_nxt_SIF_ALARM_ERR_SIF_PARITY_ERR = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_SIF_PARITY_ERR;
logic [0:0] nxt_SIF_ALARM_ERR_SIF_PARITY_ERR;
always_comb begin
 up_SIF_ALARM_ERR_SIF_PARITY_ERR = 
   swwr_SIF_ALARM_ERR_SIF_PARITY_ERR | {1{load_SIF_ALARM_ERR.SIF_PARITY_ERR}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_SIF_PARITY_ERR[0] = 
    load_SIF_ALARM_ERR.SIF_PARITY_ERR ?
    new_SIF_ALARM_ERR.SIF_PARITY_ERR[0] :
    sw_nxt_SIF_ALARM_ERR_SIF_PARITY_ERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_SIF_PARITY_ERR[0], nxt_SIF_ALARM_ERR_SIF_PARITY_ERR[0], SIF_ALARM_ERR.SIF_PARITY_ERR[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.CFGM_TARGET_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_CFGM_TARGET_ERR;
always_comb begin
 req_up_SIF_ALARM_ERR_CFGM_TARGET_ERR[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_CFGM_TARGET_ERR;
always_comb begin
 clr_SIF_ALARM_ERR_CFGM_TARGET_ERR = write_data[6:6] & req_up_SIF_ALARM_ERR_CFGM_TARGET_ERR;

end
logic [0:0] swwr_SIF_ALARM_ERR_CFGM_TARGET_ERR;
logic [0:0] sw_nxt_SIF_ALARM_ERR_CFGM_TARGET_ERR;
always_comb begin
 swwr_SIF_ALARM_ERR_CFGM_TARGET_ERR = clr_SIF_ALARM_ERR_CFGM_TARGET_ERR;
 sw_nxt_SIF_ALARM_ERR_CFGM_TARGET_ERR = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_CFGM_TARGET_ERR;
logic [0:0] nxt_SIF_ALARM_ERR_CFGM_TARGET_ERR;
always_comb begin
 up_SIF_ALARM_ERR_CFGM_TARGET_ERR = 
   swwr_SIF_ALARM_ERR_CFGM_TARGET_ERR | {1{load_SIF_ALARM_ERR.CFGM_TARGET_ERR}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_CFGM_TARGET_ERR[0] = 
    load_SIF_ALARM_ERR.CFGM_TARGET_ERR ?
    new_SIF_ALARM_ERR.CFGM_TARGET_ERR[0] :
    sw_nxt_SIF_ALARM_ERR_CFGM_TARGET_ERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_CFGM_TARGET_ERR[0], nxt_SIF_ALARM_ERR_CFGM_TARGET_ERR[0], SIF_ALARM_ERR.CFGM_TARGET_ERR[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.RF_IPAR_ERROR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_RF_IPAR_ERROR;
always_comb begin
 req_up_SIF_ALARM_ERR_RF_IPAR_ERROR[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_RF_IPAR_ERROR;
always_comb begin
 clr_SIF_ALARM_ERR_RF_IPAR_ERROR = write_data[7:7] & req_up_SIF_ALARM_ERR_RF_IPAR_ERROR;

end
logic [0:0] swwr_SIF_ALARM_ERR_RF_IPAR_ERROR;
logic [0:0] sw_nxt_SIF_ALARM_ERR_RF_IPAR_ERROR;
always_comb begin
 swwr_SIF_ALARM_ERR_RF_IPAR_ERROR = clr_SIF_ALARM_ERR_RF_IPAR_ERROR;
 sw_nxt_SIF_ALARM_ERR_RF_IPAR_ERROR = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_RF_IPAR_ERROR;
logic [0:0] nxt_SIF_ALARM_ERR_RF_IPAR_ERROR;
always_comb begin
 up_SIF_ALARM_ERR_RF_IPAR_ERROR = 
   swwr_SIF_ALARM_ERR_RF_IPAR_ERROR | {1{load_SIF_ALARM_ERR.RF_IPAR_ERROR}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_RF_IPAR_ERROR[0] = 
    load_SIF_ALARM_ERR.RF_IPAR_ERROR ?
    new_SIF_ALARM_ERR.RF_IPAR_ERROR[0] :
    sw_nxt_SIF_ALARM_ERR_RF_IPAR_ERROR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_RF_IPAR_ERROR[0], nxt_SIF_ALARM_ERR_RF_IPAR_ERROR[0], SIF_ALARM_ERR.RF_IPAR_ERROR[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.CPL_ERROR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_CPL_ERROR;
always_comb begin
 req_up_SIF_ALARM_ERR_CPL_ERROR[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[1]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_CPL_ERROR;
always_comb begin
 clr_SIF_ALARM_ERR_CPL_ERROR = write_data[8:8] & req_up_SIF_ALARM_ERR_CPL_ERROR;

end
logic [0:0] swwr_SIF_ALARM_ERR_CPL_ERROR;
logic [0:0] sw_nxt_SIF_ALARM_ERR_CPL_ERROR;
always_comb begin
 swwr_SIF_ALARM_ERR_CPL_ERROR = clr_SIF_ALARM_ERR_CPL_ERROR;
 sw_nxt_SIF_ALARM_ERR_CPL_ERROR = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_CPL_ERROR;
logic [0:0] nxt_SIF_ALARM_ERR_CPL_ERROR;
always_comb begin
 up_SIF_ALARM_ERR_CPL_ERROR = 
   swwr_SIF_ALARM_ERR_CPL_ERROR | {1{load_SIF_ALARM_ERR.CPL_ERROR}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_CPL_ERROR[0] = 
    load_SIF_ALARM_ERR.CPL_ERROR ?
    new_SIF_ALARM_ERR.CPL_ERROR[0] :
    sw_nxt_SIF_ALARM_ERR_CPL_ERROR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_CPL_ERROR[0], nxt_SIF_ALARM_ERR_CPL_ERROR[0], SIF_ALARM_ERR.CPL_ERROR[0])

// ----------------------------------------------------------------------
// SIF_ALARM_ERR.DEVTLB_ATS_ERROR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_ERR_DEVTLB_ATS_ERROR;
always_comb begin
 req_up_SIF_ALARM_ERR_DEVTLB_ATS_ERROR[0:0] = 
   {1{write_req_SIF_ALARM_ERR & be[1]}}
;
end

logic [0:0] clr_SIF_ALARM_ERR_DEVTLB_ATS_ERROR;
always_comb begin
 clr_SIF_ALARM_ERR_DEVTLB_ATS_ERROR = write_data[9:9] & req_up_SIF_ALARM_ERR_DEVTLB_ATS_ERROR;

end
logic [0:0] swwr_SIF_ALARM_ERR_DEVTLB_ATS_ERROR;
logic [0:0] sw_nxt_SIF_ALARM_ERR_DEVTLB_ATS_ERROR;
always_comb begin
 swwr_SIF_ALARM_ERR_DEVTLB_ATS_ERROR = clr_SIF_ALARM_ERR_DEVTLB_ATS_ERROR;
 sw_nxt_SIF_ALARM_ERR_DEVTLB_ATS_ERROR = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_ERR_DEVTLB_ATS_ERROR;
logic [0:0] nxt_SIF_ALARM_ERR_DEVTLB_ATS_ERROR;
always_comb begin
 up_SIF_ALARM_ERR_DEVTLB_ATS_ERROR = 
   swwr_SIF_ALARM_ERR_DEVTLB_ATS_ERROR | {1{load_SIF_ALARM_ERR.DEVTLB_ATS_ERROR}};
end
always_comb begin
 nxt_SIF_ALARM_ERR_DEVTLB_ATS_ERROR[0] = 
    load_SIF_ALARM_ERR.DEVTLB_ATS_ERROR ?
    new_SIF_ALARM_ERR.DEVTLB_ATS_ERROR[0] :
    sw_nxt_SIF_ALARM_ERR_DEVTLB_ATS_ERROR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, side_gated_rst_prim_b, 1'h0, up_SIF_ALARM_ERR_DEVTLB_ATS_ERROR[0], nxt_SIF_ALARM_ERR_DEVTLB_ATS_ERROR[0], SIF_ALARM_ERR.DEVTLB_ATS_ERROR[0])

//---------------------------------------------------------------------
// RI_PARITY_ERR Address Decode
logic  addr_decode_RI_PARITY_ERR;
logic  write_req_RI_PARITY_ERR;
always_comb begin
   addr_decode_RI_PARITY_ERR = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_PARITY_ERR_DECODE_ADDR) && req.valid ;
   write_req_RI_PARITY_ERR = IsMEMWr && addr_decode_RI_PARITY_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_PARITY_ERR.NPD_FIFO_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_NPD_FIFO_PERR;
always_comb begin
 req_up_RI_PARITY_ERR_NPD_FIFO_PERR[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_NPD_FIFO_PERR;
always_comb begin
 clr_RI_PARITY_ERR_NPD_FIFO_PERR = write_data[0:0] & req_up_RI_PARITY_ERR_NPD_FIFO_PERR;

end
logic [0:0] swwr_RI_PARITY_ERR_NPD_FIFO_PERR;
logic [0:0] sw_nxt_RI_PARITY_ERR_NPD_FIFO_PERR;
always_comb begin
 swwr_RI_PARITY_ERR_NPD_FIFO_PERR = clr_RI_PARITY_ERR_NPD_FIFO_PERR;
 sw_nxt_RI_PARITY_ERR_NPD_FIFO_PERR = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_NPD_FIFO_PERR;
logic [0:0] nxt_RI_PARITY_ERR_NPD_FIFO_PERR;
always_comb begin
 up_RI_PARITY_ERR_NPD_FIFO_PERR = 
   swwr_RI_PARITY_ERR_NPD_FIFO_PERR | {1{load_RI_PARITY_ERR.NPD_FIFO_PERR}};
end
always_comb begin
 nxt_RI_PARITY_ERR_NPD_FIFO_PERR[0] = 
    load_RI_PARITY_ERR.NPD_FIFO_PERR ?
    new_RI_PARITY_ERR.NPD_FIFO_PERR[0] :
    sw_nxt_RI_PARITY_ERR_NPD_FIFO_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_NPD_FIFO_PERR[0], nxt_RI_PARITY_ERR_NPD_FIFO_PERR[0], RI_PARITY_ERR.NPD_FIFO_PERR[0])

// ----------------------------------------------------------------------
// RI_PARITY_ERR.NPH_FIFO_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_NPH_FIFO_PERR;
always_comb begin
 req_up_RI_PARITY_ERR_NPH_FIFO_PERR[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_NPH_FIFO_PERR;
always_comb begin
 clr_RI_PARITY_ERR_NPH_FIFO_PERR = write_data[1:1] & req_up_RI_PARITY_ERR_NPH_FIFO_PERR;

end
logic [0:0] swwr_RI_PARITY_ERR_NPH_FIFO_PERR;
logic [0:0] sw_nxt_RI_PARITY_ERR_NPH_FIFO_PERR;
always_comb begin
 swwr_RI_PARITY_ERR_NPH_FIFO_PERR = clr_RI_PARITY_ERR_NPH_FIFO_PERR;
 sw_nxt_RI_PARITY_ERR_NPH_FIFO_PERR = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_NPH_FIFO_PERR;
logic [0:0] nxt_RI_PARITY_ERR_NPH_FIFO_PERR;
always_comb begin
 up_RI_PARITY_ERR_NPH_FIFO_PERR = 
   swwr_RI_PARITY_ERR_NPH_FIFO_PERR | {1{load_RI_PARITY_ERR.NPH_FIFO_PERR}};
end
always_comb begin
 nxt_RI_PARITY_ERR_NPH_FIFO_PERR[0] = 
    load_RI_PARITY_ERR.NPH_FIFO_PERR ?
    new_RI_PARITY_ERR.NPH_FIFO_PERR[0] :
    sw_nxt_RI_PARITY_ERR_NPH_FIFO_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_NPH_FIFO_PERR[0], nxt_RI_PARITY_ERR_NPH_FIFO_PERR[0], RI_PARITY_ERR.NPH_FIFO_PERR[0])

// ----------------------------------------------------------------------
// RI_PARITY_ERR.NPH_FIFO_SCREAM x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_NPH_FIFO_SCREAM;
always_comb begin
 req_up_RI_PARITY_ERR_NPH_FIFO_SCREAM[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_NPH_FIFO_SCREAM;
always_comb begin
 clr_RI_PARITY_ERR_NPH_FIFO_SCREAM = write_data[2:2] & req_up_RI_PARITY_ERR_NPH_FIFO_SCREAM;

end
logic [0:0] swwr_RI_PARITY_ERR_NPH_FIFO_SCREAM;
logic [0:0] sw_nxt_RI_PARITY_ERR_NPH_FIFO_SCREAM;
always_comb begin
 swwr_RI_PARITY_ERR_NPH_FIFO_SCREAM = clr_RI_PARITY_ERR_NPH_FIFO_SCREAM;
 sw_nxt_RI_PARITY_ERR_NPH_FIFO_SCREAM = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_NPH_FIFO_SCREAM;
logic [0:0] nxt_RI_PARITY_ERR_NPH_FIFO_SCREAM;
always_comb begin
 up_RI_PARITY_ERR_NPH_FIFO_SCREAM = 
   swwr_RI_PARITY_ERR_NPH_FIFO_SCREAM | {1{load_RI_PARITY_ERR.NPH_FIFO_SCREAM}};
end
always_comb begin
 nxt_RI_PARITY_ERR_NPH_FIFO_SCREAM[0] = 
    load_RI_PARITY_ERR.NPH_FIFO_SCREAM ?
    new_RI_PARITY_ERR.NPH_FIFO_SCREAM[0] :
    sw_nxt_RI_PARITY_ERR_NPH_FIFO_SCREAM[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_NPH_FIFO_SCREAM[0], nxt_RI_PARITY_ERR_NPH_FIFO_SCREAM[0], RI_PARITY_ERR.NPH_FIFO_SCREAM[0])

// ----------------------------------------------------------------------
// RI_PARITY_ERR.PD_FIFO_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_PD_FIFO_PERR;
always_comb begin
 req_up_RI_PARITY_ERR_PD_FIFO_PERR[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_PD_FIFO_PERR;
always_comb begin
 clr_RI_PARITY_ERR_PD_FIFO_PERR = write_data[3:3] & req_up_RI_PARITY_ERR_PD_FIFO_PERR;

end
logic [0:0] swwr_RI_PARITY_ERR_PD_FIFO_PERR;
logic [0:0] sw_nxt_RI_PARITY_ERR_PD_FIFO_PERR;
always_comb begin
 swwr_RI_PARITY_ERR_PD_FIFO_PERR = clr_RI_PARITY_ERR_PD_FIFO_PERR;
 sw_nxt_RI_PARITY_ERR_PD_FIFO_PERR = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_PD_FIFO_PERR;
logic [0:0] nxt_RI_PARITY_ERR_PD_FIFO_PERR;
always_comb begin
 up_RI_PARITY_ERR_PD_FIFO_PERR = 
   swwr_RI_PARITY_ERR_PD_FIFO_PERR | {1{load_RI_PARITY_ERR.PD_FIFO_PERR}};
end
always_comb begin
 nxt_RI_PARITY_ERR_PD_FIFO_PERR[0] = 
    load_RI_PARITY_ERR.PD_FIFO_PERR ?
    new_RI_PARITY_ERR.PD_FIFO_PERR[0] :
    sw_nxt_RI_PARITY_ERR_PD_FIFO_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_PD_FIFO_PERR[0], nxt_RI_PARITY_ERR_PD_FIFO_PERR[0], RI_PARITY_ERR.PD_FIFO_PERR[0])

// ----------------------------------------------------------------------
// RI_PARITY_ERR.PH_FIFO_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_PH_FIFO_PERR;
always_comb begin
 req_up_RI_PARITY_ERR_PH_FIFO_PERR[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_PH_FIFO_PERR;
always_comb begin
 clr_RI_PARITY_ERR_PH_FIFO_PERR = write_data[4:4] & req_up_RI_PARITY_ERR_PH_FIFO_PERR;

end
logic [0:0] swwr_RI_PARITY_ERR_PH_FIFO_PERR;
logic [0:0] sw_nxt_RI_PARITY_ERR_PH_FIFO_PERR;
always_comb begin
 swwr_RI_PARITY_ERR_PH_FIFO_PERR = clr_RI_PARITY_ERR_PH_FIFO_PERR;
 sw_nxt_RI_PARITY_ERR_PH_FIFO_PERR = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_PH_FIFO_PERR;
logic [0:0] nxt_RI_PARITY_ERR_PH_FIFO_PERR;
always_comb begin
 up_RI_PARITY_ERR_PH_FIFO_PERR = 
   swwr_RI_PARITY_ERR_PH_FIFO_PERR | {1{load_RI_PARITY_ERR.PH_FIFO_PERR}};
end
always_comb begin
 nxt_RI_PARITY_ERR_PH_FIFO_PERR[0] = 
    load_RI_PARITY_ERR.PH_FIFO_PERR ?
    new_RI_PARITY_ERR.PH_FIFO_PERR[0] :
    sw_nxt_RI_PARITY_ERR_PH_FIFO_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_PH_FIFO_PERR[0], nxt_RI_PARITY_ERR_PH_FIFO_PERR[0], RI_PARITY_ERR.PH_FIFO_PERR[0])

// ----------------------------------------------------------------------
// RI_PARITY_ERR.PH_FIFO_SCREAM x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_PH_FIFO_SCREAM;
always_comb begin
 req_up_RI_PARITY_ERR_PH_FIFO_SCREAM[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_PH_FIFO_SCREAM;
always_comb begin
 clr_RI_PARITY_ERR_PH_FIFO_SCREAM = write_data[5:5] & req_up_RI_PARITY_ERR_PH_FIFO_SCREAM;

end
logic [0:0] swwr_RI_PARITY_ERR_PH_FIFO_SCREAM;
logic [0:0] sw_nxt_RI_PARITY_ERR_PH_FIFO_SCREAM;
always_comb begin
 swwr_RI_PARITY_ERR_PH_FIFO_SCREAM = clr_RI_PARITY_ERR_PH_FIFO_SCREAM;
 sw_nxt_RI_PARITY_ERR_PH_FIFO_SCREAM = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_PH_FIFO_SCREAM;
logic [0:0] nxt_RI_PARITY_ERR_PH_FIFO_SCREAM;
always_comb begin
 up_RI_PARITY_ERR_PH_FIFO_SCREAM = 
   swwr_RI_PARITY_ERR_PH_FIFO_SCREAM | {1{load_RI_PARITY_ERR.PH_FIFO_SCREAM}};
end
always_comb begin
 nxt_RI_PARITY_ERR_PH_FIFO_SCREAM[0] = 
    load_RI_PARITY_ERR.PH_FIFO_SCREAM ?
    new_RI_PARITY_ERR.PH_FIFO_SCREAM[0] :
    sw_nxt_RI_PARITY_ERR_PH_FIFO_SCREAM[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_PH_FIFO_SCREAM[0], nxt_RI_PARITY_ERR_PH_FIFO_SCREAM[0], RI_PARITY_ERR.PH_FIFO_SCREAM[0])

// ----------------------------------------------------------------------
// RI_PARITY_ERR.HCW_DATA_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_HCW_DATA_PERR;
always_comb begin
 req_up_RI_PARITY_ERR_HCW_DATA_PERR[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_HCW_DATA_PERR;
always_comb begin
 clr_RI_PARITY_ERR_HCW_DATA_PERR = write_data[6:6] & req_up_RI_PARITY_ERR_HCW_DATA_PERR;

end
logic [0:0] swwr_RI_PARITY_ERR_HCW_DATA_PERR;
logic [0:0] sw_nxt_RI_PARITY_ERR_HCW_DATA_PERR;
always_comb begin
 swwr_RI_PARITY_ERR_HCW_DATA_PERR = clr_RI_PARITY_ERR_HCW_DATA_PERR;
 sw_nxt_RI_PARITY_ERR_HCW_DATA_PERR = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_HCW_DATA_PERR;
logic [0:0] nxt_RI_PARITY_ERR_HCW_DATA_PERR;
always_comb begin
 up_RI_PARITY_ERR_HCW_DATA_PERR = 
   swwr_RI_PARITY_ERR_HCW_DATA_PERR | {1{load_RI_PARITY_ERR.HCW_DATA_PERR}};
end
always_comb begin
 nxt_RI_PARITY_ERR_HCW_DATA_PERR[0] = 
    load_RI_PARITY_ERR.HCW_DATA_PERR ?
    new_RI_PARITY_ERR.HCW_DATA_PERR[0] :
    sw_nxt_RI_PARITY_ERR_HCW_DATA_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_HCW_DATA_PERR[0], nxt_RI_PARITY_ERR_HCW_DATA_PERR[0], RI_PARITY_ERR.HCW_DATA_PERR[0])

// ----------------------------------------------------------------------
// RI_PARITY_ERR.CBD_DATA_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_CBD_DATA_PERR;
always_comb begin
 req_up_RI_PARITY_ERR_CBD_DATA_PERR[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_CBD_DATA_PERR;
always_comb begin
 clr_RI_PARITY_ERR_CBD_DATA_PERR = write_data[7:7] & req_up_RI_PARITY_ERR_CBD_DATA_PERR;

end
logic [0:0] swwr_RI_PARITY_ERR_CBD_DATA_PERR;
logic [0:0] sw_nxt_RI_PARITY_ERR_CBD_DATA_PERR;
always_comb begin
 swwr_RI_PARITY_ERR_CBD_DATA_PERR = clr_RI_PARITY_ERR_CBD_DATA_PERR;
 sw_nxt_RI_PARITY_ERR_CBD_DATA_PERR = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_CBD_DATA_PERR;
logic [0:0] nxt_RI_PARITY_ERR_CBD_DATA_PERR;
always_comb begin
 up_RI_PARITY_ERR_CBD_DATA_PERR = 
   swwr_RI_PARITY_ERR_CBD_DATA_PERR | {1{load_RI_PARITY_ERR.CBD_DATA_PERR}};
end
always_comb begin
 nxt_RI_PARITY_ERR_CBD_DATA_PERR[0] = 
    load_RI_PARITY_ERR.CBD_DATA_PERR ?
    new_RI_PARITY_ERR.CBD_DATA_PERR[0] :
    sw_nxt_RI_PARITY_ERR_CBD_DATA_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_CBD_DATA_PERR[0], nxt_RI_PARITY_ERR_CBD_DATA_PERR[0], RI_PARITY_ERR.CBD_DATA_PERR[0])

// ----------------------------------------------------------------------
// RI_PARITY_ERR.CBD_HDR_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PARITY_ERR_CBD_HDR_PERR;
always_comb begin
 req_up_RI_PARITY_ERR_CBD_HDR_PERR[0:0] = 
   {1{write_req_RI_PARITY_ERR & be[1]}}
;
end

logic [0:0] clr_RI_PARITY_ERR_CBD_HDR_PERR;
always_comb begin
 clr_RI_PARITY_ERR_CBD_HDR_PERR = write_data[8:8] & req_up_RI_PARITY_ERR_CBD_HDR_PERR;

end
logic [0:0] swwr_RI_PARITY_ERR_CBD_HDR_PERR;
logic [0:0] sw_nxt_RI_PARITY_ERR_CBD_HDR_PERR;
always_comb begin
 swwr_RI_PARITY_ERR_CBD_HDR_PERR = clr_RI_PARITY_ERR_CBD_HDR_PERR;
 sw_nxt_RI_PARITY_ERR_CBD_HDR_PERR = {1{1'b0}};

end
logic [0:0] up_RI_PARITY_ERR_CBD_HDR_PERR;
logic [0:0] nxt_RI_PARITY_ERR_CBD_HDR_PERR;
always_comb begin
 up_RI_PARITY_ERR_CBD_HDR_PERR = 
   swwr_RI_PARITY_ERR_CBD_HDR_PERR | {1{load_RI_PARITY_ERR.CBD_HDR_PERR}};
end
always_comb begin
 nxt_RI_PARITY_ERR_CBD_HDR_PERR[0] = 
    load_RI_PARITY_ERR.CBD_HDR_PERR ?
    new_RI_PARITY_ERR.CBD_HDR_PERR[0] :
    sw_nxt_RI_PARITY_ERR_CBD_HDR_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PARITY_ERR_CBD_HDR_PERR[0], nxt_RI_PARITY_ERR_CBD_HDR_PERR[0], RI_PARITY_ERR.CBD_HDR_PERR[0])

//---------------------------------------------------------------------
// SIF_PARITY_ERR Address Decode
logic  addr_decode_SIF_PARITY_ERR;
logic  write_req_SIF_PARITY_ERR;
always_comb begin
   addr_decode_SIF_PARITY_ERR = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SIF_PARITY_ERR_DECODE_ADDR) && req.valid ;
   write_req_SIF_PARITY_ERR = IsMEMWr && addr_decode_SIF_PARITY_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.TLB_TAG_4K_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_TLB_TAG_4K_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_TLB_TAG_4K_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_TLB_TAG_4K_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_TLB_TAG_4K_PERR = write_data[0:0] & req_up_SIF_PARITY_ERR_TLB_TAG_4K_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_TLB_TAG_4K_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_TLB_TAG_4K_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_TLB_TAG_4K_PERR = clr_SIF_PARITY_ERR_TLB_TAG_4K_PERR;
 sw_nxt_SIF_PARITY_ERR_TLB_TAG_4K_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_TLB_TAG_4K_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_TLB_TAG_4K_PERR;
always_comb begin
 up_SIF_PARITY_ERR_TLB_TAG_4K_PERR = 
   swwr_SIF_PARITY_ERR_TLB_TAG_4K_PERR | {1{load_SIF_PARITY_ERR.TLB_TAG_4K_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_TLB_TAG_4K_PERR[0] = 
    load_SIF_PARITY_ERR.TLB_TAG_4K_PERR ?
    new_SIF_PARITY_ERR.TLB_TAG_4K_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_TLB_TAG_4K_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_TLB_TAG_4K_PERR[0], nxt_SIF_PARITY_ERR_TLB_TAG_4K_PERR[0], SIF_PARITY_ERR.TLB_TAG_4K_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.TLB_TAG_2M_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_TLB_TAG_2M_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_TLB_TAG_2M_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_TLB_TAG_2M_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_TLB_TAG_2M_PERR = write_data[1:1] & req_up_SIF_PARITY_ERR_TLB_TAG_2M_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_TLB_TAG_2M_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_TLB_TAG_2M_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_TLB_TAG_2M_PERR = clr_SIF_PARITY_ERR_TLB_TAG_2M_PERR;
 sw_nxt_SIF_PARITY_ERR_TLB_TAG_2M_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_TLB_TAG_2M_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_TLB_TAG_2M_PERR;
always_comb begin
 up_SIF_PARITY_ERR_TLB_TAG_2M_PERR = 
   swwr_SIF_PARITY_ERR_TLB_TAG_2M_PERR | {1{load_SIF_PARITY_ERR.TLB_TAG_2M_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_TLB_TAG_2M_PERR[0] = 
    load_SIF_PARITY_ERR.TLB_TAG_2M_PERR ?
    new_SIF_PARITY_ERR.TLB_TAG_2M_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_TLB_TAG_2M_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_TLB_TAG_2M_PERR[0], nxt_SIF_PARITY_ERR_TLB_TAG_2M_PERR[0], SIF_PARITY_ERR.TLB_TAG_2M_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.TLB_TAG_1G_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_TLB_TAG_1G_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_TLB_TAG_1G_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_TLB_TAG_1G_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_TLB_TAG_1G_PERR = write_data[2:2] & req_up_SIF_PARITY_ERR_TLB_TAG_1G_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_TLB_TAG_1G_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_TLB_TAG_1G_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_TLB_TAG_1G_PERR = clr_SIF_PARITY_ERR_TLB_TAG_1G_PERR;
 sw_nxt_SIF_PARITY_ERR_TLB_TAG_1G_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_TLB_TAG_1G_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_TLB_TAG_1G_PERR;
always_comb begin
 up_SIF_PARITY_ERR_TLB_TAG_1G_PERR = 
   swwr_SIF_PARITY_ERR_TLB_TAG_1G_PERR | {1{load_SIF_PARITY_ERR.TLB_TAG_1G_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_TLB_TAG_1G_PERR[0] = 
    load_SIF_PARITY_ERR.TLB_TAG_1G_PERR ?
    new_SIF_PARITY_ERR.TLB_TAG_1G_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_TLB_TAG_1G_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_TLB_TAG_1G_PERR[0], nxt_SIF_PARITY_ERR_TLB_TAG_1G_PERR[0], SIF_PARITY_ERR.TLB_TAG_1G_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.TLB_DATA_4K_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_TLB_DATA_4K_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_TLB_DATA_4K_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_TLB_DATA_4K_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_TLB_DATA_4K_PERR = write_data[3:3] & req_up_SIF_PARITY_ERR_TLB_DATA_4K_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_TLB_DATA_4K_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_TLB_DATA_4K_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_TLB_DATA_4K_PERR = clr_SIF_PARITY_ERR_TLB_DATA_4K_PERR;
 sw_nxt_SIF_PARITY_ERR_TLB_DATA_4K_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_TLB_DATA_4K_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_TLB_DATA_4K_PERR;
always_comb begin
 up_SIF_PARITY_ERR_TLB_DATA_4K_PERR = 
   swwr_SIF_PARITY_ERR_TLB_DATA_4K_PERR | {1{load_SIF_PARITY_ERR.TLB_DATA_4K_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_TLB_DATA_4K_PERR[0] = 
    load_SIF_PARITY_ERR.TLB_DATA_4K_PERR ?
    new_SIF_PARITY_ERR.TLB_DATA_4K_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_TLB_DATA_4K_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_TLB_DATA_4K_PERR[0], nxt_SIF_PARITY_ERR_TLB_DATA_4K_PERR[0], SIF_PARITY_ERR.TLB_DATA_4K_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.TLB_DATA_2M_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_TLB_DATA_2M_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_TLB_DATA_2M_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_TLB_DATA_2M_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_TLB_DATA_2M_PERR = write_data[4:4] & req_up_SIF_PARITY_ERR_TLB_DATA_2M_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_TLB_DATA_2M_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_TLB_DATA_2M_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_TLB_DATA_2M_PERR = clr_SIF_PARITY_ERR_TLB_DATA_2M_PERR;
 sw_nxt_SIF_PARITY_ERR_TLB_DATA_2M_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_TLB_DATA_2M_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_TLB_DATA_2M_PERR;
always_comb begin
 up_SIF_PARITY_ERR_TLB_DATA_2M_PERR = 
   swwr_SIF_PARITY_ERR_TLB_DATA_2M_PERR | {1{load_SIF_PARITY_ERR.TLB_DATA_2M_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_TLB_DATA_2M_PERR[0] = 
    load_SIF_PARITY_ERR.TLB_DATA_2M_PERR ?
    new_SIF_PARITY_ERR.TLB_DATA_2M_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_TLB_DATA_2M_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_TLB_DATA_2M_PERR[0], nxt_SIF_PARITY_ERR_TLB_DATA_2M_PERR[0], SIF_PARITY_ERR.TLB_DATA_2M_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.TLB_DATA_1G_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_TLB_DATA_1G_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_TLB_DATA_1G_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_TLB_DATA_1G_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_TLB_DATA_1G_PERR = write_data[5:5] & req_up_SIF_PARITY_ERR_TLB_DATA_1G_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_TLB_DATA_1G_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_TLB_DATA_1G_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_TLB_DATA_1G_PERR = clr_SIF_PARITY_ERR_TLB_DATA_1G_PERR;
 sw_nxt_SIF_PARITY_ERR_TLB_DATA_1G_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_TLB_DATA_1G_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_TLB_DATA_1G_PERR;
always_comb begin
 up_SIF_PARITY_ERR_TLB_DATA_1G_PERR = 
   swwr_SIF_PARITY_ERR_TLB_DATA_1G_PERR | {1{load_SIF_PARITY_ERR.TLB_DATA_1G_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_TLB_DATA_1G_PERR[0] = 
    load_SIF_PARITY_ERR.TLB_DATA_1G_PERR ?
    new_SIF_PARITY_ERR.TLB_DATA_1G_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_TLB_DATA_1G_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_TLB_DATA_1G_PERR[0], nxt_SIF_PARITY_ERR_TLB_DATA_1G_PERR[0], SIF_PARITY_ERR.TLB_DATA_1G_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.IBCPL_HDR_FIFO_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR = write_data[6:6] & req_up_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR = clr_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR;
 sw_nxt_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR;
always_comb begin
 up_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR = 
   swwr_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR | {1{load_SIF_PARITY_ERR.IBCPL_HDR_FIFO_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR[0] = 
    load_SIF_PARITY_ERR.IBCPL_HDR_FIFO_PERR ?
    new_SIF_PARITY_ERR.IBCPL_HDR_FIFO_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR[0], nxt_SIF_PARITY_ERR_IBCPL_HDR_FIFO_PERR[0], SIF_PARITY_ERR.IBCPL_HDR_FIFO_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.IBCPL_DATA_FIFO_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[0]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR = write_data[7:7] & req_up_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR = clr_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR;
 sw_nxt_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR;
always_comb begin
 up_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR = 
   swwr_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR | {1{load_SIF_PARITY_ERR.IBCPL_DATA_FIFO_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR[0] = 
    load_SIF_PARITY_ERR.IBCPL_DATA_FIFO_PERR ?
    new_SIF_PARITY_ERR.IBCPL_DATA_FIFO_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR[0], nxt_SIF_PARITY_ERR_IBCPL_DATA_FIFO_PERR[0], SIF_PARITY_ERR.IBCPL_DATA_FIFO_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.SCRBD_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_SCRBD_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_SCRBD_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[1]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_SCRBD_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_SCRBD_PERR = write_data[8:8] & req_up_SIF_PARITY_ERR_SCRBD_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_SCRBD_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_SCRBD_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_SCRBD_PERR = clr_SIF_PARITY_ERR_SCRBD_PERR;
 sw_nxt_SIF_PARITY_ERR_SCRBD_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_SCRBD_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_SCRBD_PERR;
always_comb begin
 up_SIF_PARITY_ERR_SCRBD_PERR = 
   swwr_SIF_PARITY_ERR_SCRBD_PERR | {1{load_SIF_PARITY_ERR.SCRBD_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_SCRBD_PERR[0] = 
    load_SIF_PARITY_ERR.SCRBD_PERR ?
    new_SIF_PARITY_ERR.SCRBD_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_SCRBD_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_SIF_PARITY_ERR_SCRBD_PERR[0], nxt_SIF_PARITY_ERR_SCRBD_PERR[0], SIF_PARITY_ERR.SCRBD_PERR[0])

// ----------------------------------------------------------------------
// SIF_PARITY_ERR.GPSB_PERR x1 RW/1C/V/P, using RW/1C/V/P template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_PARITY_ERR_GPSB_PERR;
always_comb begin
 req_up_SIF_PARITY_ERR_GPSB_PERR[0:0] = 
   {1{write_req_SIF_PARITY_ERR & be[1]}}
;
end

logic [0:0] clr_SIF_PARITY_ERR_GPSB_PERR;
always_comb begin
 clr_SIF_PARITY_ERR_GPSB_PERR = write_data[9:9] & req_up_SIF_PARITY_ERR_GPSB_PERR;

end
logic [0:0] swwr_SIF_PARITY_ERR_GPSB_PERR;
logic [0:0] sw_nxt_SIF_PARITY_ERR_GPSB_PERR;
always_comb begin
 swwr_SIF_PARITY_ERR_GPSB_PERR = clr_SIF_PARITY_ERR_GPSB_PERR;
 sw_nxt_SIF_PARITY_ERR_GPSB_PERR = {1{1'b0}};

end
logic [0:0] up_SIF_PARITY_ERR_GPSB_PERR;
logic [0:0] nxt_SIF_PARITY_ERR_GPSB_PERR;
always_comb begin
 up_SIF_PARITY_ERR_GPSB_PERR = 
   swwr_SIF_PARITY_ERR_GPSB_PERR | {1{load_SIF_PARITY_ERR.GPSB_PERR}};
end
always_comb begin
 nxt_SIF_PARITY_ERR_GPSB_PERR[0] = 
    load_SIF_PARITY_ERR.GPSB_PERR ?
    new_SIF_PARITY_ERR.GPSB_PERR[0] :
    sw_nxt_SIF_PARITY_ERR_GPSB_PERR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, powergood_rst_b, 1'h0, up_SIF_PARITY_ERR_GPSB_PERR[0], nxt_SIF_PARITY_ERR_GPSB_PERR[0], SIF_PARITY_ERR.GPSB_PERR[0])

//---------------------------------------------------------------------
// HQM_SIF_CNT_CTL Address Decode
logic  addr_decode_HQM_SIF_CNT_CTL;
logic  write_req_HQM_SIF_CNT_CTL;
always_comb begin
   addr_decode_HQM_SIF_CNT_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_SIF_CNT_CTL_DECODE_ADDR) && req.valid ;
   write_req_HQM_SIF_CNT_CTL = IsMEMWr && addr_decode_HQM_SIF_CNT_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HQM_SIF_CNT_CTL.CNT_CLR x1 RW, using RW template.
logic [0:0] up_HQM_SIF_CNT_CTL_CNT_CLR;
always_comb begin
 up_HQM_SIF_CNT_CTL_CNT_CLR =
    ({1{write_req_HQM_SIF_CNT_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_HQM_SIF_CNT_CTL_CNT_CLR;
always_comb begin
 nxt_HQM_SIF_CNT_CTL_CNT_CLR = write_data[0:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_HQM_SIF_CNT_CTL_CNT_CLR[0], nxt_HQM_SIF_CNT_CTL_CNT_CLR[0:0], HQM_SIF_CNT_CTL.CNT_CLR[0:0])

// ----------------------------------------------------------------------
// HQM_SIF_CNT_CTL.CNT_CLRV x1 RW, using RW template.
logic [0:0] up_HQM_SIF_CNT_CTL_CNT_CLRV;
always_comb begin
 up_HQM_SIF_CNT_CTL_CNT_CLRV =
    ({1{write_req_HQM_SIF_CNT_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_HQM_SIF_CNT_CTL_CNT_CLRV;
always_comb begin
 nxt_HQM_SIF_CNT_CTL_CNT_CLRV = write_data[1:1];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_HQM_SIF_CNT_CTL_CNT_CLRV[0], nxt_HQM_SIF_CNT_CTL_CNT_CLRV[0:0], HQM_SIF_CNT_CTL.CNT_CLRV[0:0])

//---------------------------------------------------------------------
// DIR_CQ2TC_MAP Address Decode
logic  addr_decode_DIR_CQ2TC_MAP;
logic  write_req_DIR_CQ2TC_MAP;
always_comb begin
   addr_decode_DIR_CQ2TC_MAP = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_CQ2TC_MAP_DECODE_ADDR) && req.valid ;
   write_req_DIR_CQ2TC_MAP = IsMEMWr && addr_decode_DIR_CQ2TC_MAP && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DIR_CQ2TC_MAP.DIR0_TC x4 RW, using RW template.
logic [0:0] up_DIR_CQ2TC_MAP_DIR0_TC;
always_comb begin
 up_DIR_CQ2TC_MAP_DIR0_TC =
    ({1{write_req_DIR_CQ2TC_MAP }} &
    be[0:0]);
end

logic [3:0] nxt_DIR_CQ2TC_MAP_DIR0_TC;
always_comb begin
 nxt_DIR_CQ2TC_MAP_DIR0_TC = write_data[3:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_DIR_CQ2TC_MAP_DIR0_TC[0], nxt_DIR_CQ2TC_MAP_DIR0_TC[3:0], DIR_CQ2TC_MAP.DIR0_TC[3:0])

// ----------------------------------------------------------------------
// DIR_CQ2TC_MAP.DIR1_TC x4 RW, using RW template.
logic [0:0] up_DIR_CQ2TC_MAP_DIR1_TC;
always_comb begin
 up_DIR_CQ2TC_MAP_DIR1_TC =
    ({1{write_req_DIR_CQ2TC_MAP }} &
    be[0:0]);
end

logic [3:0] nxt_DIR_CQ2TC_MAP_DIR1_TC;
always_comb begin
 nxt_DIR_CQ2TC_MAP_DIR1_TC = write_data[7:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_DIR_CQ2TC_MAP_DIR1_TC[0], nxt_DIR_CQ2TC_MAP_DIR1_TC[3:0], DIR_CQ2TC_MAP.DIR1_TC[3:0])

// ----------------------------------------------------------------------
// DIR_CQ2TC_MAP.DIR2_TC x4 RW, using RW template.
logic [0:0] up_DIR_CQ2TC_MAP_DIR2_TC;
always_comb begin
 up_DIR_CQ2TC_MAP_DIR2_TC =
    ({1{write_req_DIR_CQ2TC_MAP }} &
    be[1:1]);
end

logic [3:0] nxt_DIR_CQ2TC_MAP_DIR2_TC;
always_comb begin
 nxt_DIR_CQ2TC_MAP_DIR2_TC = write_data[11:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_DIR_CQ2TC_MAP_DIR2_TC[0], nxt_DIR_CQ2TC_MAP_DIR2_TC[3:0], DIR_CQ2TC_MAP.DIR2_TC[3:0])

// ----------------------------------------------------------------------
// DIR_CQ2TC_MAP.DIR3_TC x4 RW, using RW template.
logic [0:0] up_DIR_CQ2TC_MAP_DIR3_TC;
always_comb begin
 up_DIR_CQ2TC_MAP_DIR3_TC =
    ({1{write_req_DIR_CQ2TC_MAP }} &
    be[1:1]);
end

logic [3:0] nxt_DIR_CQ2TC_MAP_DIR3_TC;
always_comb begin
 nxt_DIR_CQ2TC_MAP_DIR3_TC = write_data[15:12];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_DIR_CQ2TC_MAP_DIR3_TC[0], nxt_DIR_CQ2TC_MAP_DIR3_TC[3:0], DIR_CQ2TC_MAP.DIR3_TC[3:0])

//---------------------------------------------------------------------
// LDB_CQ2TC_MAP Address Decode
logic  addr_decode_LDB_CQ2TC_MAP;
logic  write_req_LDB_CQ2TC_MAP;
always_comb begin
   addr_decode_LDB_CQ2TC_MAP = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_CQ2TC_MAP_DECODE_ADDR) && req.valid ;
   write_req_LDB_CQ2TC_MAP = IsMEMWr && addr_decode_LDB_CQ2TC_MAP && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// LDB_CQ2TC_MAP.LDB0_TC x4 RW, using RW template.
logic [0:0] up_LDB_CQ2TC_MAP_LDB0_TC;
always_comb begin
 up_LDB_CQ2TC_MAP_LDB0_TC =
    ({1{write_req_LDB_CQ2TC_MAP }} &
    be[0:0]);
end

logic [3:0] nxt_LDB_CQ2TC_MAP_LDB0_TC;
always_comb begin
 nxt_LDB_CQ2TC_MAP_LDB0_TC = write_data[3:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_LDB_CQ2TC_MAP_LDB0_TC[0], nxt_LDB_CQ2TC_MAP_LDB0_TC[3:0], LDB_CQ2TC_MAP.LDB0_TC[3:0])

// ----------------------------------------------------------------------
// LDB_CQ2TC_MAP.LDB1_TC x4 RW, using RW template.
logic [0:0] up_LDB_CQ2TC_MAP_LDB1_TC;
always_comb begin
 up_LDB_CQ2TC_MAP_LDB1_TC =
    ({1{write_req_LDB_CQ2TC_MAP }} &
    be[0:0]);
end

logic [3:0] nxt_LDB_CQ2TC_MAP_LDB1_TC;
always_comb begin
 nxt_LDB_CQ2TC_MAP_LDB1_TC = write_data[7:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_LDB_CQ2TC_MAP_LDB1_TC[0], nxt_LDB_CQ2TC_MAP_LDB1_TC[3:0], LDB_CQ2TC_MAP.LDB1_TC[3:0])

// ----------------------------------------------------------------------
// LDB_CQ2TC_MAP.LDB2_TC x4 RW, using RW template.
logic [0:0] up_LDB_CQ2TC_MAP_LDB2_TC;
always_comb begin
 up_LDB_CQ2TC_MAP_LDB2_TC =
    ({1{write_req_LDB_CQ2TC_MAP }} &
    be[1:1]);
end

logic [3:0] nxt_LDB_CQ2TC_MAP_LDB2_TC;
always_comb begin
 nxt_LDB_CQ2TC_MAP_LDB2_TC = write_data[11:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_LDB_CQ2TC_MAP_LDB2_TC[0], nxt_LDB_CQ2TC_MAP_LDB2_TC[3:0], LDB_CQ2TC_MAP.LDB2_TC[3:0])

// ----------------------------------------------------------------------
// LDB_CQ2TC_MAP.LDB3_TC x4 RW, using RW template.
logic [0:0] up_LDB_CQ2TC_MAP_LDB3_TC;
always_comb begin
 up_LDB_CQ2TC_MAP_LDB3_TC =
    ({1{write_req_LDB_CQ2TC_MAP }} &
    be[1:1]);
end

logic [3:0] nxt_LDB_CQ2TC_MAP_LDB3_TC;
always_comb begin
 nxt_LDB_CQ2TC_MAP_LDB3_TC = write_data[15:12];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_LDB_CQ2TC_MAP_LDB3_TC[0], nxt_LDB_CQ2TC_MAP_LDB3_TC[3:0], LDB_CQ2TC_MAP.LDB3_TC[3:0])

//---------------------------------------------------------------------
// INT2TC_MAP Address Decode
logic  addr_decode_INT2TC_MAP;
logic  write_req_INT2TC_MAP;
always_comb begin
   addr_decode_INT2TC_MAP = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == INT2TC_MAP_DECODE_ADDR) && req.valid ;
   write_req_INT2TC_MAP = IsMEMWr && addr_decode_INT2TC_MAP && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// INT2TC_MAP.INT_TC x4 RW, using RW template.
logic [0:0] up_INT2TC_MAP_INT_TC;
always_comb begin
 up_INT2TC_MAP_INT_TC =
    ({1{write_req_INT2TC_MAP }} &
    be[0:0]);
end

logic [3:0] nxt_INT2TC_MAP_INT_TC;
always_comb begin
 nxt_INT2TC_MAP_INT_TC = write_data[3:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_INT2TC_MAP_INT_TC[0], nxt_INT2TC_MAP_INT_TC[3:0], INT2TC_MAP.INT_TC[3:0])

//---------------------------------------------------------------------
// CFG_UNIT_VERSION Address Decode

// ----------------------------------------------------------------------
// CFG_UNIT_VERSION.UNIT_VERSION x8 RO, using RO template.
assign CFG_UNIT_VERSION.UNIT_VERSION = 8'h3;



//---------------------------------------------------------------------
// HQM_SIF_CNT_0 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_0.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_0.CNT = new_HQM_SIF_CNT_0.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_1 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_1.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_1.CNT = new_HQM_SIF_CNT_1.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_2 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_2.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_2.CNT = new_HQM_SIF_CNT_2.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_3 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_3.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_3.CNT = new_HQM_SIF_CNT_3.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_4 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_4.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_4.CNT = new_HQM_SIF_CNT_4.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_5 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_5.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_5.CNT = new_HQM_SIF_CNT_5.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_6 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_6.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_6.CNT = new_HQM_SIF_CNT_6.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_7 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_7.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_7.CNT = new_HQM_SIF_CNT_7.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_8 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_8.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_8.CNT = new_HQM_SIF_CNT_8.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_9 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_9.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_9.CNT = new_HQM_SIF_CNT_9.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_10 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_10.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_10.CNT = new_HQM_SIF_CNT_10.CNT;




//---------------------------------------------------------------------
// HQM_SIF_CNT_11 Address Decode
// ----------------------------------------------------------------------
// HQM_SIF_CNT_11.CNT x8 RO/V, using RO/V template.
assign HQM_SIF_CNT_11.CNT = new_HQM_SIF_CNT_11.CNT;




//---------------------------------------------------------------------
// OBCPL_AFULL_AGITATE_CONTROL Address Decode
logic  addr_decode_OBCPL_AFULL_AGITATE_CONTROL;
logic  write_req_OBCPL_AFULL_AGITATE_CONTROL;
always_comb begin
   addr_decode_OBCPL_AFULL_AGITATE_CONTROL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == OBCPL_AFULL_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_OBCPL_AFULL_AGITATE_CONTROL = IsMEMWr && addr_decode_OBCPL_AFULL_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// OBCPL_AFULL_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_OBCPL_AFULL_AGITATE_CONTROL_MODE;
always_comb begin
 up_OBCPL_AFULL_AGITATE_CONTROL_MODE =
    ({1{write_req_OBCPL_AFULL_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_OBCPL_AFULL_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_OBCPL_AFULL_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 2'h0, up_OBCPL_AFULL_AGITATE_CONTROL_MODE[0], nxt_OBCPL_AFULL_AGITATE_CONTROL_MODE[1:0], OBCPL_AFULL_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// OBCPL_AFULL_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_OBCPL_AFULL_AGITATE_CONTROL_CTRL;
always_comb begin
 up_OBCPL_AFULL_AGITATE_CONTROL_CTRL =
    ({4{write_req_OBCPL_AFULL_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_OBCPL_AFULL_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_OBCPL_AFULL_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 6'h0, up_OBCPL_AFULL_AGITATE_CONTROL_CTRL[0], nxt_OBCPL_AFULL_AGITATE_CONTROL_CTRL[5:0], OBCPL_AFULL_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 8'h0, up_OBCPL_AFULL_AGITATE_CONTROL_CTRL[1], nxt_OBCPL_AFULL_AGITATE_CONTROL_CTRL[13:6], OBCPL_AFULL_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 8'h0, up_OBCPL_AFULL_AGITATE_CONTROL_CTRL[2], nxt_OBCPL_AFULL_AGITATE_CONTROL_CTRL[21:14], OBCPL_AFULL_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 8'h0, up_OBCPL_AFULL_AGITATE_CONTROL_CTRL[3], nxt_OBCPL_AFULL_AGITATE_CONTROL_CTRL[29:22], OBCPL_AFULL_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// PRIM_CDC_CTL Address Decode
logic  addr_decode_PRIM_CDC_CTL;
logic  write_req_PRIM_CDC_CTL;
always_comb begin
   addr_decode_PRIM_CDC_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == PRIM_CDC_CTL_DECODE_ADDR) && req.valid ;
   write_req_PRIM_CDC_CTL = IsMEMWr && addr_decode_PRIM_CDC_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// PRIM_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF x4 RW, using RW template.
logic [0:0] up_PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF;
always_comb begin
 up_PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF =
    ({1{write_req_PRIM_CDC_CTL }} &
    be[0:0]);
end

logic [3:0] nxt_PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF;
always_comb begin
 nxt_PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF = write_data[3:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h4, up_PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF[0], nxt_PRIM_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF[3:0], PRIM_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF[3:0])

// ----------------------------------------------------------------------
// PRIM_CDC_CTL.CLKREQ_OFF_HOLDOFF x4 RW, using RW template.
logic [0:0] up_PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF;
always_comb begin
 up_PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF =
    ({1{write_req_PRIM_CDC_CTL }} &
    be[0:0]);
end

logic [3:0] nxt_PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF;
always_comb begin
 nxt_PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF = write_data[7:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h4, up_PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF[0], nxt_PRIM_CDC_CTL_CLKREQ_OFF_HOLDOFF[3:0], PRIM_CDC_CTL.CLKREQ_OFF_HOLDOFF[3:0])

// ----------------------------------------------------------------------
// PRIM_CDC_CTL.PWRGATE_HOLDOFF x4 RW, using RW template.
logic [0:0] up_PRIM_CDC_CTL_PWRGATE_HOLDOFF;
always_comb begin
 up_PRIM_CDC_CTL_PWRGATE_HOLDOFF =
    ({1{write_req_PRIM_CDC_CTL }} &
    be[1:1]);
end

logic [3:0] nxt_PRIM_CDC_CTL_PWRGATE_HOLDOFF;
always_comb begin
 nxt_PRIM_CDC_CTL_PWRGATE_HOLDOFF = write_data[11:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h4, up_PRIM_CDC_CTL_PWRGATE_HOLDOFF[0], nxt_PRIM_CDC_CTL_PWRGATE_HOLDOFF[3:0], PRIM_CDC_CTL.PWRGATE_HOLDOFF[3:0])

// ----------------------------------------------------------------------
// PRIM_CDC_CTL.CLKGATE_HOLDOFF x4 RW, using RW template.
logic [0:0] up_PRIM_CDC_CTL_CLKGATE_HOLDOFF;
always_comb begin
 up_PRIM_CDC_CTL_CLKGATE_HOLDOFF =
    ({1{write_req_PRIM_CDC_CTL }} &
    be[1:1]);
end

logic [3:0] nxt_PRIM_CDC_CTL_CLKGATE_HOLDOFF;
always_comb begin
 nxt_PRIM_CDC_CTL_CLKGATE_HOLDOFF = write_data[15:12];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h4, up_PRIM_CDC_CTL_CLKGATE_HOLDOFF[0], nxt_PRIM_CDC_CTL_CLKGATE_HOLDOFF[3:0], PRIM_CDC_CTL.CLKGATE_HOLDOFF[3:0])

// ----------------------------------------------------------------------
// PRIM_CDC_CTL.CLKREQ_CTL_DISABLED x1 RW, using RW template.
logic [0:0] up_PRIM_CDC_CTL_CLKREQ_CTL_DISABLED;
always_comb begin
 up_PRIM_CDC_CTL_CLKREQ_CTL_DISABLED =
    ({1{write_req_PRIM_CDC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_PRIM_CDC_CTL_CLKREQ_CTL_DISABLED;
always_comb begin
 nxt_PRIM_CDC_CTL_CLKREQ_CTL_DISABLED = write_data[16:16];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_PRIM_CDC_CTL_CLKREQ_CTL_DISABLED[0], nxt_PRIM_CDC_CTL_CLKREQ_CTL_DISABLED[0:0], PRIM_CDC_CTL.CLKREQ_CTL_DISABLED[0:0])

// ----------------------------------------------------------------------
// PRIM_CDC_CTL.CLKGATE_DISABLED x1 RW, using RW template.
logic [0:0] up_PRIM_CDC_CTL_CLKGATE_DISABLED;
always_comb begin
 up_PRIM_CDC_CTL_CLKGATE_DISABLED =
    ({1{write_req_PRIM_CDC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_PRIM_CDC_CTL_CLKGATE_DISABLED;
always_comb begin
 nxt_PRIM_CDC_CTL_CLKGATE_DISABLED = write_data[17:17];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_PRIM_CDC_CTL_CLKGATE_DISABLED[0], nxt_PRIM_CDC_CTL_CLKGATE_DISABLED[0:0], PRIM_CDC_CTL.CLKGATE_DISABLED[0:0])

//---------------------------------------------------------------------
// SIDE_CDC_CTL Address Decode
logic  addr_decode_SIDE_CDC_CTL;
logic  write_req_SIDE_CDC_CTL;
always_comb begin
   addr_decode_SIDE_CDC_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SIDE_CDC_CTL_DECODE_ADDR) && req.valid ;
   write_req_SIDE_CDC_CTL = IsMEMWr && addr_decode_SIDE_CDC_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SIDE_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF x4 RW, using RW template.
logic [0:0] up_SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF;
always_comb begin
 up_SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF =
    ({1{write_req_SIDE_CDC_CTL }} &
    be[0:0]);
end

logic [3:0] nxt_SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF;
always_comb begin
 nxt_SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF = write_data[3:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h4, up_SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF[0], nxt_SIDE_CDC_CTL_CLKREQ_SYNCOFF_HOLDOFF[3:0], SIDE_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF[3:0])

// ----------------------------------------------------------------------
// SIDE_CDC_CTL.CLKREQ_OFF_HOLDOFF x4 RW, using RW template.
logic [0:0] up_SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF;
always_comb begin
 up_SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF =
    ({1{write_req_SIDE_CDC_CTL }} &
    be[0:0]);
end

logic [3:0] nxt_SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF;
always_comb begin
 nxt_SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF = write_data[7:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h4, up_SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF[0], nxt_SIDE_CDC_CTL_CLKREQ_OFF_HOLDOFF[3:0], SIDE_CDC_CTL.CLKREQ_OFF_HOLDOFF[3:0])

// ----------------------------------------------------------------------
// SIDE_CDC_CTL.PWRGATE_HOLDOFF x4 RW, using RW template.
logic [0:0] up_SIDE_CDC_CTL_PWRGATE_HOLDOFF;
always_comb begin
 up_SIDE_CDC_CTL_PWRGATE_HOLDOFF =
    ({1{write_req_SIDE_CDC_CTL }} &
    be[1:1]);
end

logic [3:0] nxt_SIDE_CDC_CTL_PWRGATE_HOLDOFF;
always_comb begin
 nxt_SIDE_CDC_CTL_PWRGATE_HOLDOFF = write_data[11:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h4, up_SIDE_CDC_CTL_PWRGATE_HOLDOFF[0], nxt_SIDE_CDC_CTL_PWRGATE_HOLDOFF[3:0], SIDE_CDC_CTL.PWRGATE_HOLDOFF[3:0])

// ----------------------------------------------------------------------
// SIDE_CDC_CTL.CLKGATE_HOLDOFF x4 RW, using RW template.
logic [0:0] up_SIDE_CDC_CTL_CLKGATE_HOLDOFF;
always_comb begin
 up_SIDE_CDC_CTL_CLKGATE_HOLDOFF =
    ({1{write_req_SIDE_CDC_CTL }} &
    be[1:1]);
end

logic [3:0] nxt_SIDE_CDC_CTL_CLKGATE_HOLDOFF;
always_comb begin
 nxt_SIDE_CDC_CTL_CLKGATE_HOLDOFF = write_data[15:12];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h4, up_SIDE_CDC_CTL_CLKGATE_HOLDOFF[0], nxt_SIDE_CDC_CTL_CLKGATE_HOLDOFF[3:0], SIDE_CDC_CTL.CLKGATE_HOLDOFF[3:0])

// ----------------------------------------------------------------------
// SIDE_CDC_CTL.CLKREQ_CTL_DISABLED x1 RW, using RW template.
logic [0:0] up_SIDE_CDC_CTL_CLKREQ_CTL_DISABLED;
always_comb begin
 up_SIDE_CDC_CTL_CLKREQ_CTL_DISABLED =
    ({1{write_req_SIDE_CDC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_SIDE_CDC_CTL_CLKREQ_CTL_DISABLED;
always_comb begin
 nxt_SIDE_CDC_CTL_CLKREQ_CTL_DISABLED = write_data[16:16];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_SIDE_CDC_CTL_CLKREQ_CTL_DISABLED[0], nxt_SIDE_CDC_CTL_CLKREQ_CTL_DISABLED[0:0], SIDE_CDC_CTL.CLKREQ_CTL_DISABLED[0:0])

// ----------------------------------------------------------------------
// SIDE_CDC_CTL.CLKGATE_DISABLED x1 RW, using RW template.
logic [0:0] up_SIDE_CDC_CTL_CLKGATE_DISABLED;
always_comb begin
 up_SIDE_CDC_CTL_CLKGATE_DISABLED =
    ({1{write_req_SIDE_CDC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_SIDE_CDC_CTL_CLKGATE_DISABLED;
always_comb begin
 nxt_SIDE_CDC_CTL_CLKGATE_DISABLED = write_data[17:17];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_SIDE_CDC_CTL_CLKGATE_DISABLED[0], nxt_SIDE_CDC_CTL_CLKGATE_DISABLED[0:0], SIDE_CDC_CTL.CLKGATE_DISABLED[0:0])

//---------------------------------------------------------------------
// IOSFP_CGCTL Address Decode
logic  addr_decode_IOSFP_CGCTL;
logic  write_req_IOSFP_CGCTL;
always_comb begin
   addr_decode_IOSFP_CGCTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IOSFP_CGCTL_DECODE_ADDR) && req.valid ;
   write_req_IOSFP_CGCTL = IsMEMWr && addr_decode_IOSFP_CGCTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IOSFP_CGCTL.IDLE_COUNT x8 RW, using RW template.
logic [0:0] up_IOSFP_CGCTL_IDLE_COUNT;
always_comb begin
 up_IOSFP_CGCTL_IDLE_COUNT =
    ({1{write_req_IOSFP_CGCTL }} &
    be[0:0]);
end

logic [7:0] nxt_IOSFP_CGCTL_IDLE_COUNT;
always_comb begin
 nxt_IOSFP_CGCTL_IDLE_COUNT = write_data[7:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 8'h10, up_IOSFP_CGCTL_IDLE_COUNT[0], nxt_IOSFP_CGCTL_IDLE_COUNT[7:0], IOSFP_CGCTL.IDLE_COUNT[7:0])

// ----------------------------------------------------------------------
// IOSFP_CGCTL.CLKGATE_ENABLE x1 RW, using RW template.
logic [0:0] up_IOSFP_CGCTL_CLKGATE_ENABLE;
always_comb begin
 up_IOSFP_CGCTL_CLKGATE_ENABLE =
    ({1{write_req_IOSFP_CGCTL }} &
    be[1:1]);
end

logic [0:0] nxt_IOSFP_CGCTL_CLKGATE_ENABLE;
always_comb begin
 nxt_IOSFP_CGCTL_CLKGATE_ENABLE = write_data[8:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h1, up_IOSFP_CGCTL_CLKGATE_ENABLE[0], nxt_IOSFP_CGCTL_CLKGATE_ENABLE[0:0], IOSFP_CGCTL.CLKGATE_ENABLE[0:0])

//---------------------------------------------------------------------
// IOSFS_CGCTL Address Decode
logic  addr_decode_IOSFS_CGCTL;
logic  write_req_IOSFS_CGCTL;
always_comb begin
   addr_decode_IOSFS_CGCTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IOSFS_CGCTL_DECODE_ADDR) && req.valid ;
   write_req_IOSFS_CGCTL = IsMEMWr && addr_decode_IOSFS_CGCTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IOSFS_CGCTL.IDLE_COUNT x8 RW, using RW template.
logic [0:0] up_IOSFS_CGCTL_IDLE_COUNT;
always_comb begin
 up_IOSFS_CGCTL_IDLE_COUNT =
    ({1{write_req_IOSFS_CGCTL }} &
    be[0:0]);
end

logic [7:0] nxt_IOSFS_CGCTL_IDLE_COUNT;
always_comb begin
 nxt_IOSFS_CGCTL_IDLE_COUNT = write_data[7:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 8'h10, up_IOSFS_CGCTL_IDLE_COUNT[0], nxt_IOSFS_CGCTL_IDLE_COUNT[7:0], IOSFS_CGCTL.IDLE_COUNT[7:0])

// ----------------------------------------------------------------------
// IOSFS_CGCTL.CLKGATE_ENABLE x1 RW, using RW template.
logic [0:0] up_IOSFS_CGCTL_CLKGATE_ENABLE;
always_comb begin
 up_IOSFS_CGCTL_CLKGATE_ENABLE =
    ({1{write_req_IOSFS_CGCTL }} &
    be[1:1]);
end

logic [0:0] nxt_IOSFS_CGCTL_CLKGATE_ENABLE;
always_comb begin
 nxt_IOSFS_CGCTL_CLKGATE_ENABLE = write_data[8:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h1, up_IOSFS_CGCTL_CLKGATE_ENABLE[0], nxt_IOSFS_CGCTL_CLKGATE_ENABLE[0:0], IOSFS_CGCTL.CLKGATE_ENABLE[0:0])

//---------------------------------------------------------------------
// PARITY_CTL Address Decode
logic  addr_decode_PARITY_CTL;
logic  write_req_PARITY_CTL;
always_comb begin
   addr_decode_PARITY_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == PARITY_CTL_DECODE_ADDR) && req.valid ;
   write_req_PARITY_CTL = IsMEMWr && addr_decode_PARITY_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// PARITY_CTL.SIFP_PAR_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_SIFP_PAR_OFF;
always_comb begin
 up_PARITY_CTL_SIFP_PAR_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_SIFP_PAR_OFF;
always_comb begin
 nxt_PARITY_CTL_SIFP_PAR_OFF = write_data[0:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_PARITY_CTL_SIFP_PAR_OFF[0], nxt_PARITY_CTL_SIFP_PAR_OFF[0:0], PARITY_CTL.SIFP_PAR_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.MSTR_PAR_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_MSTR_PAR_OFF;
always_comb begin
 up_PARITY_CTL_MSTR_PAR_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_MSTR_PAR_OFF;
always_comb begin
 nxt_PARITY_CTL_MSTR_PAR_OFF = write_data[1:1];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_PARITY_CTL_MSTR_PAR_OFF[0], nxt_PARITY_CTL_MSTR_PAR_OFF[0:0], PARITY_CTL.MSTR_PAR_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.RI_PAR_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_RI_PAR_OFF;
always_comb begin
 up_PARITY_CTL_RI_PAR_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_RI_PAR_OFF;
always_comb begin
 nxt_PARITY_CTL_RI_PAR_OFF = write_data[2:2];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_PARITY_CTL_RI_PAR_OFF[0], nxt_PARITY_CTL_RI_PAR_OFF[0:0], PARITY_CTL.RI_PAR_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_SIF_MCPERR x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_SIF_MCPERR;
always_comb begin
 up_PARITY_CTL_INJ_SIF_MCPERR =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_INJ_SIF_MCPERR;
always_comb begin
 nxt_PARITY_CTL_INJ_SIF_MCPERR = write_data[3:3];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_PARITY_CTL_INJ_SIF_MCPERR[0], nxt_PARITY_CTL_INJ_SIF_MCPERR[0:0], PARITY_CTL.INJ_SIF_MCPERR[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_SIF_MDPERR x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_SIF_MDPERR;
always_comb begin
 up_PARITY_CTL_INJ_SIF_MDPERR =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_INJ_SIF_MDPERR;
always_comb begin
 nxt_PARITY_CTL_INJ_SIF_MDPERR = write_data[4:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h0, up_PARITY_CTL_INJ_SIF_MDPERR[0], nxt_PARITY_CTL_INJ_SIF_MDPERR[0:0], PARITY_CTL.INJ_SIF_MDPERR[0:0])

//---------------------------------------------------------------------
// CFG_MASTER_TIMEOUT Address Decode
logic  addr_decode_CFG_MASTER_TIMEOUT;
logic  write_req_CFG_MASTER_TIMEOUT;
always_comb begin
   addr_decode_CFG_MASTER_TIMEOUT = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == CFG_MASTER_TIMEOUT_DECODE_ADDR) && req.valid ;
   write_req_CFG_MASTER_TIMEOUT = IsMEMWr && addr_decode_CFG_MASTER_TIMEOUT && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// CFG_MASTER_TIMEOUT.TIMEOUT_PWR2 x5 RW, using RW template.
logic [0:0] up_CFG_MASTER_TIMEOUT_TIMEOUT_PWR2;
always_comb begin
 up_CFG_MASTER_TIMEOUT_TIMEOUT_PWR2 =
    ({1{write_req_CFG_MASTER_TIMEOUT }} &
    be[0:0]);
end

logic [4:0] nxt_CFG_MASTER_TIMEOUT_TIMEOUT_PWR2;
always_comb begin
 nxt_CFG_MASTER_TIMEOUT_TIMEOUT_PWR2 = write_data[4:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 5'h15, up_CFG_MASTER_TIMEOUT_TIMEOUT_PWR2[0], nxt_CFG_MASTER_TIMEOUT_TIMEOUT_PWR2[4:0], CFG_MASTER_TIMEOUT.TIMEOUT_PWR2[4:0])

// ----------------------------------------------------------------------
// CFG_MASTER_TIMEOUT.TIMEOUT_ENABLE x1 RW, using RW template.
logic [0:0] up_CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE;
always_comb begin
 up_CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE =
    ({1{write_req_CFG_MASTER_TIMEOUT }} &
    be[3:3]);
end

logic [0:0] nxt_CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE;
always_comb begin
 nxt_CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE = write_data[31:31];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h1, up_CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE[0], nxt_CFG_MASTER_TIMEOUT_TIMEOUT_ENABLE[0:0], CFG_MASTER_TIMEOUT.TIMEOUT_ENABLE[0:0])

//---------------------------------------------------------------------
// MMIO_TIMEOUT Address Decode
logic  addr_decode_MMIO_TIMEOUT;
logic  write_req_MMIO_TIMEOUT;
always_comb begin
   addr_decode_MMIO_TIMEOUT = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MMIO_TIMEOUT_DECODE_ADDR) && req.valid ;
   write_req_MMIO_TIMEOUT = IsMEMWr && addr_decode_MMIO_TIMEOUT && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MMIO_TIMEOUT.TIMEOUT_PWR2 x5 RW, using RW template.
logic [0:0] up_MMIO_TIMEOUT_TIMEOUT_PWR2;
always_comb begin
 up_MMIO_TIMEOUT_TIMEOUT_PWR2 =
    ({1{write_req_MMIO_TIMEOUT }} &
    be[0:0]);
end

logic [4:0] nxt_MMIO_TIMEOUT_TIMEOUT_PWR2;
always_comb begin
 nxt_MMIO_TIMEOUT_TIMEOUT_PWR2 = write_data[4:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 5'h15, up_MMIO_TIMEOUT_TIMEOUT_PWR2[0], nxt_MMIO_TIMEOUT_TIMEOUT_PWR2[4:0], MMIO_TIMEOUT.TIMEOUT_PWR2[4:0])

// ----------------------------------------------------------------------
// MMIO_TIMEOUT.TIMEOUT_ENABLE x1 RW, using RW template.
logic [0:0] up_MMIO_TIMEOUT_TIMEOUT_ENABLE;
always_comb begin
 up_MMIO_TIMEOUT_TIMEOUT_ENABLE =
    ({1{write_req_MMIO_TIMEOUT }} &
    be[3:3]);
end

logic [0:0] nxt_MMIO_TIMEOUT_TIMEOUT_ENABLE;
always_comb begin
 nxt_MMIO_TIMEOUT_TIMEOUT_ENABLE = write_data[31:31];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h1, up_MMIO_TIMEOUT_TIMEOUT_ENABLE[0], nxt_MMIO_TIMEOUT_TIMEOUT_ENABLE[0:0], MMIO_TIMEOUT.TIMEOUT_ENABLE[0:0])

//---------------------------------------------------------------------
// HCW_TIMEOUT Address Decode
logic  addr_decode_HCW_TIMEOUT;
logic  write_req_HCW_TIMEOUT;
always_comb begin
   addr_decode_HCW_TIMEOUT = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HCW_TIMEOUT_DECODE_ADDR) && req.valid ;
   write_req_HCW_TIMEOUT = IsMEMWr && addr_decode_HCW_TIMEOUT && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HCW_TIMEOUT.TIMEOUT_PWR2 x5 RW, using RW template.
logic [0:0] up_HCW_TIMEOUT_TIMEOUT_PWR2;
always_comb begin
 up_HCW_TIMEOUT_TIMEOUT_PWR2 =
    ({1{write_req_HCW_TIMEOUT }} &
    be[0:0]);
end

logic [4:0] nxt_HCW_TIMEOUT_TIMEOUT_PWR2;
always_comb begin
 nxt_HCW_TIMEOUT_TIMEOUT_PWR2 = write_data[4:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 5'h15, up_HCW_TIMEOUT_TIMEOUT_PWR2[0], nxt_HCW_TIMEOUT_TIMEOUT_PWR2[4:0], HCW_TIMEOUT.TIMEOUT_PWR2[4:0])

// ----------------------------------------------------------------------
// HCW_TIMEOUT.TIMEOUT_ENABLE x1 RW, using RW template.
logic [0:0] up_HCW_TIMEOUT_TIMEOUT_ENABLE;
always_comb begin
 up_HCW_TIMEOUT_TIMEOUT_ENABLE =
    ({1{write_req_HCW_TIMEOUT }} &
    be[3:3]);
end

logic [0:0] nxt_HCW_TIMEOUT_TIMEOUT_ENABLE;
always_comb begin
 nxt_HCW_TIMEOUT_TIMEOUT_ENABLE = write_data[31:31];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h1, up_HCW_TIMEOUT_TIMEOUT_ENABLE[0], nxt_HCW_TIMEOUT_TIMEOUT_ENABLE[0:0], HCW_TIMEOUT.TIMEOUT_ENABLE[0:0])

// ----------------------------------------------------------------------
// VISA_SW_CONTROL using HANDCODED_REG template.
logic addr_decode_VISA_SW_CONTROL;
logic write_req_VISA_SW_CONTROL;
logic read_req_VISA_SW_CONTROL;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h800103,2'b00}: 
         addr_decode_VISA_SW_CONTROL = req.valid;
      default: 
         addr_decode_VISA_SW_CONTROL = 1'b0; 
   endcase
end

always_comb write_req_VISA_SW_CONTROL = f_IsMEMWr(req_opcode) && addr_decode_VISA_SW_CONTROL  && sai_HQM_OS_W_write_en;
always_comb read_req_VISA_SW_CONTROL  = f_IsMEMRd(req_opcode) && addr_decode_VISA_SW_CONTROL  && sai_HQM_OS_W_read_en;

always_comb we_VISA_SW_CONTROL = {4{write_req_VISA_SW_CONTROL}} & req.be[3:0];
always_comb re_VISA_SW_CONTROL = {4{read_req_VISA_SW_CONTROL}} & req.be[3:0];
always_comb handcode_reg_wdata_VISA_SW_CONTROL = req.data[31:0];


//---------------------------------------------------------------------
// CFG_PH_TRIGGER_ADDR_L Address Decode
logic  addr_decode_CFG_PH_TRIGGER_ADDR_L;
logic  write_req_CFG_PH_TRIGGER_ADDR_L;
always_comb begin
   addr_decode_CFG_PH_TRIGGER_ADDR_L = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == CFG_PH_TRIGGER_ADDR_L_DECODE_ADDR) && req.valid ;
   write_req_CFG_PH_TRIGGER_ADDR_L = IsMEMWr && addr_decode_CFG_PH_TRIGGER_ADDR_L && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// CFG_PH_TRIGGER_ADDR_L.ADDR_L x8 RW, using RW template.
logic [3:0] up_CFG_PH_TRIGGER_ADDR_L_ADDR_L;
always_comb begin
 up_CFG_PH_TRIGGER_ADDR_L_ADDR_L =
    ({4{write_req_CFG_PH_TRIGGER_ADDR_L }} &
    be[3:0]);
end

logic [31:0] nxt_CFG_PH_TRIGGER_ADDR_L_ADDR_L;
always_comb begin
 nxt_CFG_PH_TRIGGER_ADDR_L_ADDR_L = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_ADDR_L_ADDR_L[0], nxt_CFG_PH_TRIGGER_ADDR_L_ADDR_L[7:0], CFG_PH_TRIGGER_ADDR_L.ADDR_L[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_ADDR_L_ADDR_L[1], nxt_CFG_PH_TRIGGER_ADDR_L_ADDR_L[15:8], CFG_PH_TRIGGER_ADDR_L.ADDR_L[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_ADDR_L_ADDR_L[2], nxt_CFG_PH_TRIGGER_ADDR_L_ADDR_L[23:16], CFG_PH_TRIGGER_ADDR_L.ADDR_L[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_ADDR_L_ADDR_L[3], nxt_CFG_PH_TRIGGER_ADDR_L_ADDR_L[31:24], CFG_PH_TRIGGER_ADDR_L.ADDR_L[31:24])

//---------------------------------------------------------------------
// CFG_PH_TRIGGER_ADDR_U Address Decode
logic  addr_decode_CFG_PH_TRIGGER_ADDR_U;
logic  write_req_CFG_PH_TRIGGER_ADDR_U;
always_comb begin
   addr_decode_CFG_PH_TRIGGER_ADDR_U = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == CFG_PH_TRIGGER_ADDR_U_DECODE_ADDR) && req.valid ;
   write_req_CFG_PH_TRIGGER_ADDR_U = IsMEMWr && addr_decode_CFG_PH_TRIGGER_ADDR_U && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// CFG_PH_TRIGGER_ADDR_U.ADDR_U x8 RW, using RW template.
logic [3:0] up_CFG_PH_TRIGGER_ADDR_U_ADDR_U;
always_comb begin
 up_CFG_PH_TRIGGER_ADDR_U_ADDR_U =
    ({4{write_req_CFG_PH_TRIGGER_ADDR_U }} &
    be[3:0]);
end

logic [31:0] nxt_CFG_PH_TRIGGER_ADDR_U_ADDR_U;
always_comb begin
 nxt_CFG_PH_TRIGGER_ADDR_U_ADDR_U = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_ADDR_U_ADDR_U[0], nxt_CFG_PH_TRIGGER_ADDR_U_ADDR_U[7:0], CFG_PH_TRIGGER_ADDR_U.ADDR_U[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_ADDR_U_ADDR_U[1], nxt_CFG_PH_TRIGGER_ADDR_U_ADDR_U[15:8], CFG_PH_TRIGGER_ADDR_U.ADDR_U[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_ADDR_U_ADDR_U[2], nxt_CFG_PH_TRIGGER_ADDR_U_ADDR_U[23:16], CFG_PH_TRIGGER_ADDR_U.ADDR_U[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_ADDR_U_ADDR_U[3], nxt_CFG_PH_TRIGGER_ADDR_U_ADDR_U[31:24], CFG_PH_TRIGGER_ADDR_U.ADDR_U[31:24])

//---------------------------------------------------------------------
// CFG_PH_TRIGGER_MASK_L Address Decode
logic  addr_decode_CFG_PH_TRIGGER_MASK_L;
logic  write_req_CFG_PH_TRIGGER_MASK_L;
always_comb begin
   addr_decode_CFG_PH_TRIGGER_MASK_L = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == CFG_PH_TRIGGER_MASK_L_DECODE_ADDR) && req.valid ;
   write_req_CFG_PH_TRIGGER_MASK_L = IsMEMWr && addr_decode_CFG_PH_TRIGGER_MASK_L && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// CFG_PH_TRIGGER_MASK_L.MASK_L x8 RW, using RW template.
logic [3:0] up_CFG_PH_TRIGGER_MASK_L_MASK_L;
always_comb begin
 up_CFG_PH_TRIGGER_MASK_L_MASK_L =
    ({4{write_req_CFG_PH_TRIGGER_MASK_L }} &
    be[3:0]);
end

logic [31:0] nxt_CFG_PH_TRIGGER_MASK_L_MASK_L;
always_comb begin
 nxt_CFG_PH_TRIGGER_MASK_L_MASK_L = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_MASK_L_MASK_L[0], nxt_CFG_PH_TRIGGER_MASK_L_MASK_L[7:0], CFG_PH_TRIGGER_MASK_L.MASK_L[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_MASK_L_MASK_L[1], nxt_CFG_PH_TRIGGER_MASK_L_MASK_L[15:8], CFG_PH_TRIGGER_MASK_L.MASK_L[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_MASK_L_MASK_L[2], nxt_CFG_PH_TRIGGER_MASK_L_MASK_L[23:16], CFG_PH_TRIGGER_MASK_L.MASK_L[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_MASK_L_MASK_L[3], nxt_CFG_PH_TRIGGER_MASK_L_MASK_L[31:24], CFG_PH_TRIGGER_MASK_L.MASK_L[31:24])

//---------------------------------------------------------------------
// CFG_PH_TRIGGER_MASK_U Address Decode
logic  addr_decode_CFG_PH_TRIGGER_MASK_U;
logic  write_req_CFG_PH_TRIGGER_MASK_U;
always_comb begin
   addr_decode_CFG_PH_TRIGGER_MASK_U = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == CFG_PH_TRIGGER_MASK_U_DECODE_ADDR) && req.valid ;
   write_req_CFG_PH_TRIGGER_MASK_U = IsMEMWr && addr_decode_CFG_PH_TRIGGER_MASK_U && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// CFG_PH_TRIGGER_MASK_U.MASK_U x8 RW, using RW template.
logic [3:0] up_CFG_PH_TRIGGER_MASK_U_MASK_U;
always_comb begin
 up_CFG_PH_TRIGGER_MASK_U_MASK_U =
    ({4{write_req_CFG_PH_TRIGGER_MASK_U }} &
    be[3:0]);
end

logic [31:0] nxt_CFG_PH_TRIGGER_MASK_U_MASK_U;
always_comb begin
 nxt_CFG_PH_TRIGGER_MASK_U_MASK_U = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_MASK_U_MASK_U[0], nxt_CFG_PH_TRIGGER_MASK_U_MASK_U[7:0], CFG_PH_TRIGGER_MASK_U.MASK_U[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_MASK_U_MASK_U[1], nxt_CFG_PH_TRIGGER_MASK_U_MASK_U[15:8], CFG_PH_TRIGGER_MASK_U.MASK_U[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_MASK_U_MASK_U[2], nxt_CFG_PH_TRIGGER_MASK_U_MASK_U[23:16], CFG_PH_TRIGGER_MASK_U.MASK_U[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_CFG_PH_TRIGGER_MASK_U_MASK_U[3], nxt_CFG_PH_TRIGGER_MASK_U_MASK_U[31:24], CFG_PH_TRIGGER_MASK_U.MASK_U[31:24])

//---------------------------------------------------------------------
// SIF_IDLE_STATUS Address Decode
// ----------------------------------------------------------------------
// SIF_IDLE_STATUS.CFGM_IDLE x1 RO/V, using RO/V template.
assign SIF_IDLE_STATUS.CFGM_IDLE = new_SIF_IDLE_STATUS.CFGM_IDLE;



// ----------------------------------------------------------------------
// SIF_IDLE_STATUS.RI_IDLE x1 RO/V, using RO/V template.
assign SIF_IDLE_STATUS.RI_IDLE = new_SIF_IDLE_STATUS.RI_IDLE;



// ----------------------------------------------------------------------
// SIF_IDLE_STATUS.TGT_IDLE x1 RO/V, using RO/V template.
assign SIF_IDLE_STATUS.TGT_IDLE = new_SIF_IDLE_STATUS.TGT_IDLE;



// ----------------------------------------------------------------------
// SIF_IDLE_STATUS.MSTR_INTF_IDLE x1 RO/V, using RO/V template.
assign SIF_IDLE_STATUS.MSTR_INTF_IDLE = new_SIF_IDLE_STATUS.MSTR_INTF_IDLE;



// ----------------------------------------------------------------------
// SIF_IDLE_STATUS.MSTR_IDLE x1 RO/V, using RO/V template.
assign SIF_IDLE_STATUS.MSTR_IDLE = new_SIF_IDLE_STATUS.MSTR_IDLE;



// ----------------------------------------------------------------------
// SIF_IDLE_STATUS.INT_IDLE x1 RO/V, using RO/V template.
assign SIF_IDLE_STATUS.INT_IDLE = new_SIF_IDLE_STATUS.INT_IDLE;



// ----------------------------------------------------------------------
// SIF_IDLE_STATUS.PROC_IDLE x1 RO/V, using RO/V template.
assign SIF_IDLE_STATUS.PROC_IDLE = new_SIF_IDLE_STATUS.PROC_IDLE;




//---------------------------------------------------------------------
// SIF_DB_STATUS Address Decode
// ----------------------------------------------------------------------
// SIF_DB_STATUS.ALARM_DB_DEPTH x2 RO/V, using RO/V template.
assign SIF_DB_STATUS.ALARM_DB_DEPTH = new_SIF_DB_STATUS.ALARM_DB_DEPTH;



// ----------------------------------------------------------------------
// SIF_DB_STATUS.ALARM_DB_READY x1 RO/V, using RO/V template.
assign SIF_DB_STATUS.ALARM_DB_READY = new_SIF_DB_STATUS.ALARM_DB_READY;



// ----------------------------------------------------------------------
// SIF_DB_STATUS.P_REQ_DB_DEPTH x2 RO/V, using RO/V template.
assign SIF_DB_STATUS.P_REQ_DB_DEPTH = new_SIF_DB_STATUS.P_REQ_DB_DEPTH;



// ----------------------------------------------------------------------
// SIF_DB_STATUS.P_REQ_DB_READY x1 RO/V, using RO/V template.
assign SIF_DB_STATUS.P_REQ_DB_READY = new_SIF_DB_STATUS.P_REQ_DB_READY;



// ----------------------------------------------------------------------
// SIF_DB_STATUS.NP_REQ_DB_DEPTH x2 RO/V, using RO/V template.
assign SIF_DB_STATUS.NP_REQ_DB_DEPTH = new_SIF_DB_STATUS.NP_REQ_DB_DEPTH;



// ----------------------------------------------------------------------
// SIF_DB_STATUS.NP_REQ_DB_READY x1 RO/V, using RO/V template.
assign SIF_DB_STATUS.NP_REQ_DB_READY = new_SIF_DB_STATUS.NP_REQ_DB_READY;



// ----------------------------------------------------------------------
// SIF_DB_STATUS.CPL_REQ_DB_DEPTH x2 RO/V, using RO/V template.
assign SIF_DB_STATUS.CPL_REQ_DB_DEPTH = new_SIF_DB_STATUS.CPL_REQ_DB_DEPTH;



// ----------------------------------------------------------------------
// SIF_DB_STATUS.CPL_REQ_DB_READY x1 RO/V, using RO/V template.
assign SIF_DB_STATUS.CPL_REQ_DB_READY = new_SIF_DB_STATUS.CPL_REQ_DB_READY;




//---------------------------------------------------------------------
// RI_DB_STATUS Address Decode
// ----------------------------------------------------------------------
// RI_DB_STATUS.PH_DB_DEPTH x2 RO/V, using RO/V template.
assign RI_DB_STATUS.PH_DB_DEPTH = new_RI_DB_STATUS.PH_DB_DEPTH;



// ----------------------------------------------------------------------
// RI_DB_STATUS.PH_DB_READY x1 RO/V, using RO/V template.
assign RI_DB_STATUS.PH_DB_READY = new_RI_DB_STATUS.PH_DB_READY;



// ----------------------------------------------------------------------
// RI_DB_STATUS.PD_DB_DEPTH x2 RO/V, using RO/V template.
assign RI_DB_STATUS.PD_DB_DEPTH = new_RI_DB_STATUS.PD_DB_DEPTH;



// ----------------------------------------------------------------------
// RI_DB_STATUS.PD_DB_READY x1 RO/V, using RO/V template.
assign RI_DB_STATUS.PD_DB_READY = new_RI_DB_STATUS.PD_DB_READY;



// ----------------------------------------------------------------------
// RI_DB_STATUS.NPH_DB_DEPTH x2 RO/V, using RO/V template.
assign RI_DB_STATUS.NPH_DB_DEPTH = new_RI_DB_STATUS.NPH_DB_DEPTH;



// ----------------------------------------------------------------------
// RI_DB_STATUS.NPH_DB_READY x1 RO/V, using RO/V template.
assign RI_DB_STATUS.NPH_DB_READY = new_RI_DB_STATUS.NPH_DB_READY;



// ----------------------------------------------------------------------
// RI_DB_STATUS.NPD_DB_DEPTH x2 RO/V, using RO/V template.
assign RI_DB_STATUS.NPD_DB_DEPTH = new_RI_DB_STATUS.NPD_DB_DEPTH;



// ----------------------------------------------------------------------
// RI_DB_STATUS.NPD_DB_READY x1 RO/V, using RO/V template.
assign RI_DB_STATUS.NPD_DB_READY = new_RI_DB_STATUS.NPD_DB_READY;



// ----------------------------------------------------------------------
// RI_DB_STATUS.IOQ_DB_DEPTH x2 RO/V, using RO/V template.
assign RI_DB_STATUS.IOQ_DB_DEPTH = new_RI_DB_STATUS.IOQ_DB_DEPTH;



// ----------------------------------------------------------------------
// RI_DB_STATUS.IOQ_DB_READY x1 RO/V, using RO/V template.
assign RI_DB_STATUS.IOQ_DB_READY = new_RI_DB_STATUS.IOQ_DB_READY;



// ----------------------------------------------------------------------
// RI_DB_STATUS.HCW_DB_DEPTH x2 RO/V, using RO/V template.
assign RI_DB_STATUS.HCW_DB_DEPTH = new_RI_DB_STATUS.HCW_DB_DEPTH;



// ----------------------------------------------------------------------
// RI_DB_STATUS.HCW_DB_READY x1 RO/V, using RO/V template.
assign RI_DB_STATUS.HCW_DB_READY = new_RI_DB_STATUS.HCW_DB_READY;




//---------------------------------------------------------------------
// RI_PHDR_FIFO_CTL Address Decode
logic  addr_decode_RI_PHDR_FIFO_CTL;
logic  write_req_RI_PHDR_FIFO_CTL;
always_comb begin
   addr_decode_RI_PHDR_FIFO_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_PHDR_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_RI_PHDR_FIFO_CTL = IsMEMWr && addr_decode_RI_PHDR_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_PHDR_FIFO_CTL.HIGH_WM x5 RW, using RW template.
logic [0:0] up_RI_PHDR_FIFO_CTL_HIGH_WM;
always_comb begin
 up_RI_PHDR_FIFO_CTL_HIGH_WM =
    ({1{write_req_RI_PHDR_FIFO_CTL }} &
    be[0:0]);
end

logic [4:0] nxt_RI_PHDR_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_RI_PHDR_FIFO_CTL_HIGH_WM = write_data[4:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 5'hF, up_RI_PHDR_FIFO_CTL_HIGH_WM[0], nxt_RI_PHDR_FIFO_CTL_HIGH_WM[4:0], RI_PHDR_FIFO_CTL.HIGH_WM[4:0])

//---------------------------------------------------------------------
// RI_PDATA_FIFO_CTL Address Decode
logic  addr_decode_RI_PDATA_FIFO_CTL;
logic  write_req_RI_PDATA_FIFO_CTL;
always_comb begin
   addr_decode_RI_PDATA_FIFO_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_PDATA_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_RI_PDATA_FIFO_CTL = IsMEMWr && addr_decode_RI_PDATA_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_PDATA_FIFO_CTL.HIGH_WM x6 RW, using RW template.
logic [0:0] up_RI_PDATA_FIFO_CTL_HIGH_WM;
always_comb begin
 up_RI_PDATA_FIFO_CTL_HIGH_WM =
    ({1{write_req_RI_PDATA_FIFO_CTL }} &
    be[0:0]);
end

logic [5:0] nxt_RI_PDATA_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_RI_PDATA_FIFO_CTL_HIGH_WM = write_data[5:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 6'h1F, up_RI_PDATA_FIFO_CTL_HIGH_WM[0], nxt_RI_PDATA_FIFO_CTL_HIGH_WM[5:0], RI_PDATA_FIFO_CTL.HIGH_WM[5:0])

//---------------------------------------------------------------------
// RI_NPHDR_FIFO_CTL Address Decode
logic  addr_decode_RI_NPHDR_FIFO_CTL;
logic  write_req_RI_NPHDR_FIFO_CTL;
always_comb begin
   addr_decode_RI_NPHDR_FIFO_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_NPHDR_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_RI_NPHDR_FIFO_CTL = IsMEMWr && addr_decode_RI_NPHDR_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_CTL.HIGH_WM x4 RW, using RW template.
logic [0:0] up_RI_NPHDR_FIFO_CTL_HIGH_WM;
always_comb begin
 up_RI_NPHDR_FIFO_CTL_HIGH_WM =
    ({1{write_req_RI_NPHDR_FIFO_CTL }} &
    be[0:0]);
end

logic [3:0] nxt_RI_NPHDR_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_RI_NPHDR_FIFO_CTL_HIGH_WM = write_data[3:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h7, up_RI_NPHDR_FIFO_CTL_HIGH_WM[0], nxt_RI_NPHDR_FIFO_CTL_HIGH_WM[3:0], RI_NPHDR_FIFO_CTL.HIGH_WM[3:0])

//---------------------------------------------------------------------
// RI_NPDATA_FIFO_CTL Address Decode
logic  addr_decode_RI_NPDATA_FIFO_CTL;
logic  write_req_RI_NPDATA_FIFO_CTL;
always_comb begin
   addr_decode_RI_NPDATA_FIFO_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_NPDATA_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_RI_NPDATA_FIFO_CTL = IsMEMWr && addr_decode_RI_NPDATA_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_CTL.HIGH_WM x4 RW, using RW template.
logic [0:0] up_RI_NPDATA_FIFO_CTL_HIGH_WM;
always_comb begin
 up_RI_NPDATA_FIFO_CTL_HIGH_WM =
    ({1{write_req_RI_NPDATA_FIFO_CTL }} &
    be[0:0]);
end

logic [3:0] nxt_RI_NPDATA_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_RI_NPDATA_FIFO_CTL_HIGH_WM = write_data[3:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 4'h7, up_RI_NPDATA_FIFO_CTL_HIGH_WM[0], nxt_RI_NPDATA_FIFO_CTL_HIGH_WM[3:0], RI_NPDATA_FIFO_CTL.HIGH_WM[3:0])

//---------------------------------------------------------------------
// RI_IOQ_FIFO_CTL Address Decode
logic  addr_decode_RI_IOQ_FIFO_CTL;
logic  write_req_RI_IOQ_FIFO_CTL;
always_comb begin
   addr_decode_RI_IOQ_FIFO_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_IOQ_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_RI_IOQ_FIFO_CTL = IsMEMWr && addr_decode_RI_IOQ_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_IOQ_FIFO_CTL.HIGH_WM x6 RW, using RW template.
logic [0:0] up_RI_IOQ_FIFO_CTL_HIGH_WM;
always_comb begin
 up_RI_IOQ_FIFO_CTL_HIGH_WM =
    ({1{write_req_RI_IOQ_FIFO_CTL }} &
    be[0:0]);
end

logic [5:0] nxt_RI_IOQ_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_RI_IOQ_FIFO_CTL_HIGH_WM = write_data[5:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 6'h1F, up_RI_IOQ_FIFO_CTL_HIGH_WM[0], nxt_RI_IOQ_FIFO_CTL_HIGH_WM[5:0], RI_IOQ_FIFO_CTL.HIGH_WM[5:0])

//---------------------------------------------------------------------
// IBCPL_HDR_FIFO_CTL Address Decode
logic  addr_decode_IBCPL_HDR_FIFO_CTL;
logic  write_req_IBCPL_HDR_FIFO_CTL;
always_comb begin
   addr_decode_IBCPL_HDR_FIFO_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IBCPL_HDR_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_IBCPL_HDR_FIFO_CTL = IsMEMWr && addr_decode_IBCPL_HDR_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_CTL.HIGH_WM x1 RW, using RW template.
logic [1:0] up_IBCPL_HDR_FIFO_CTL_HIGH_WM;
always_comb begin
 up_IBCPL_HDR_FIFO_CTL_HIGH_WM =
    ({2{write_req_IBCPL_HDR_FIFO_CTL }} &
    be[1:0]);
end

logic [8:0] nxt_IBCPL_HDR_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_IBCPL_HDR_FIFO_CTL_HIGH_WM = write_data[8:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 8'h0, up_IBCPL_HDR_FIFO_CTL_HIGH_WM[0], nxt_IBCPL_HDR_FIFO_CTL_HIGH_WM[7:0], IBCPL_HDR_FIFO_CTL.HIGH_WM[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h1, up_IBCPL_HDR_FIFO_CTL_HIGH_WM[1], nxt_IBCPL_HDR_FIFO_CTL_HIGH_WM[8:8], IBCPL_HDR_FIFO_CTL.HIGH_WM[8:8])

//---------------------------------------------------------------------
// IBCPL_DATA_FIFO_CTL Address Decode
logic  addr_decode_IBCPL_DATA_FIFO_CTL;
logic  write_req_IBCPL_DATA_FIFO_CTL;
always_comb begin
   addr_decode_IBCPL_DATA_FIFO_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IBCPL_DATA_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_IBCPL_DATA_FIFO_CTL = IsMEMWr && addr_decode_IBCPL_DATA_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_CTL.HIGH_WM x1 RW, using RW template.
logic [1:0] up_IBCPL_DATA_FIFO_CTL_HIGH_WM;
always_comb begin
 up_IBCPL_DATA_FIFO_CTL_HIGH_WM =
    ({2{write_req_IBCPL_DATA_FIFO_CTL }} &
    be[1:0]);
end

logic [8:0] nxt_IBCPL_DATA_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_IBCPL_DATA_FIFO_CTL_HIGH_WM = write_data[8:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 8'h0, up_IBCPL_DATA_FIFO_CTL_HIGH_WM[0], nxt_IBCPL_DATA_FIFO_CTL_HIGH_WM[7:0], IBCPL_DATA_FIFO_CTL.HIGH_WM[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, side_gated_rst_prim_b, 1'h1, up_IBCPL_DATA_FIFO_CTL_HIGH_WM[1], nxt_IBCPL_DATA_FIFO_CTL_HIGH_WM[8:8], IBCPL_DATA_FIFO_CTL.HIGH_WM[8:8])

//---------------------------------------------------------------------
// SCRBD_CTL Address Decode
logic  addr_decode_SCRBD_CTL;
logic  write_req_SCRBD_CTL;
always_comb begin
   addr_decode_SCRBD_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SCRBD_CTL_DECODE_ADDR) && req.valid ;
   write_req_SCRBD_CTL = IsMEMWr && addr_decode_SCRBD_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SCRBD_CTL.SCRBD_LIMIT x1 RW, using RW template.
logic [1:0] up_SCRBD_CTL_SCRBD_LIMIT;
always_comb begin
 up_SCRBD_CTL_SCRBD_LIMIT =
    ({2{write_req_SCRBD_CTL }} &
    be[1:0]);
end

logic [8:0] nxt_SCRBD_CTL_SCRBD_LIMIT;
always_comb begin
 nxt_SCRBD_CTL_SCRBD_LIMIT = write_data[8:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_SCRBD_CTL_SCRBD_LIMIT[0], nxt_SCRBD_CTL_SCRBD_LIMIT[7:0], SCRBD_CTL.SCRBD_LIMIT[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h1, up_SCRBD_CTL_SCRBD_LIMIT[1], nxt_SCRBD_CTL_SCRBD_LIMIT[8:8], SCRBD_CTL.SCRBD_LIMIT[8:8])

// ----------------------------------------------------------------------
// SCRBD_CTL.ATS_LIMIT x6 RW, using RW template.
logic [0:0] up_SCRBD_CTL_ATS_LIMIT;
always_comb begin
 up_SCRBD_CTL_ATS_LIMIT =
    ({1{write_req_SCRBD_CTL }} &
    be[1:1]);
end

logic [5:0] nxt_SCRBD_CTL_ATS_LIMIT;
always_comb begin
 nxt_SCRBD_CTL_ATS_LIMIT = write_data[14:9];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 6'h20, up_SCRBD_CTL_ATS_LIMIT[0], nxt_SCRBD_CTL_ATS_LIMIT[5:0], SCRBD_CTL.ATS_LIMIT[5:0])

// ----------------------------------------------------------------------
// SCRBD_CTL.TIMEOUT8 x1 RW, using RW template.
logic [0:0] up_SCRBD_CTL_TIMEOUT8;
always_comb begin
 up_SCRBD_CTL_TIMEOUT8 =
    ({1{write_req_SCRBD_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_SCRBD_CTL_TIMEOUT8;
always_comb begin
 nxt_SCRBD_CTL_TIMEOUT8 = write_data[15:15];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_SCRBD_CTL_TIMEOUT8[0], nxt_SCRBD_CTL_TIMEOUT8[0:0], SCRBD_CTL.TIMEOUT8[0:0])

// ----------------------------------------------------------------------
// SCRBD_CTL.XREQ_LIMIT x7 RW, using RW template.
logic [0:0] up_SCRBD_CTL_XREQ_LIMIT;
always_comb begin
 up_SCRBD_CTL_XREQ_LIMIT =
    ({1{write_req_SCRBD_CTL }} &
    be[2:2]);
end

logic [6:0] nxt_SCRBD_CTL_XREQ_LIMIT;
always_comb begin
 nxt_SCRBD_CTL_XREQ_LIMIT = write_data[22:16];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 7'h40, up_SCRBD_CTL_XREQ_LIMIT[0], nxt_SCRBD_CTL_XREQ_LIMIT[6:0], SCRBD_CTL.XREQ_LIMIT[6:0])

//---------------------------------------------------------------------
// SCRBD_STATUS Address Decode
// ----------------------------------------------------------------------
// SCRBD_STATUS.SCRBD_CNT x1 RO/V, using RO/V template.
assign SCRBD_STATUS.SCRBD_CNT = new_SCRBD_STATUS.SCRBD_CNT;



// ----------------------------------------------------------------------
// SCRBD_STATUS.TO_PEND x1 RO/V, using RO/V template.
assign SCRBD_STATUS.TO_PEND = new_SCRBD_STATUS.TO_PEND;



// ----------------------------------------------------------------------
// SCRBD_STATUS.TIM_INUSE x1 RO/V, using RO/V template.
assign SCRBD_STATUS.TIM_INUSE = new_SCRBD_STATUS.TIM_INUSE;



// ----------------------------------------------------------------------
// SCRBD_STATUS.STOPNSCREAM x1 RO/V, using RO/V template.
assign SCRBD_STATUS.STOPNSCREAM = new_SCRBD_STATUS.STOPNSCREAM;




//---------------------------------------------------------------------
// DEVTLB_CTL Address Decode
logic  addr_decode_DEVTLB_CTL;
logic  write_req_DEVTLB_CTL;
always_comb begin
   addr_decode_DEVTLB_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DEVTLB_CTL_DECODE_ADDR) && req.valid ;
   write_req_DEVTLB_CTL = IsMEMWr && addr_decode_DEVTLB_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DEVTLB_CTL.DISABLE_1G x1 RW, using RW template.
logic [0:0] up_DEVTLB_CTL_DISABLE_1G;
always_comb begin
 up_DEVTLB_CTL_DISABLE_1G =
    ({1{write_req_DEVTLB_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_DEVTLB_CTL_DISABLE_1G;
always_comb begin
 nxt_DEVTLB_CTL_DISABLE_1G = write_data[0:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_DEVTLB_CTL_DISABLE_1G[0], nxt_DEVTLB_CTL_DISABLE_1G[0:0], DEVTLB_CTL.DISABLE_1G[0:0])

// ----------------------------------------------------------------------
// DEVTLB_CTL.DISABLE_2M x1 RW, using RW template.
logic [0:0] up_DEVTLB_CTL_DISABLE_2M;
always_comb begin
 up_DEVTLB_CTL_DISABLE_2M =
    ({1{write_req_DEVTLB_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_DEVTLB_CTL_DISABLE_2M;
always_comb begin
 nxt_DEVTLB_CTL_DISABLE_2M = write_data[1:1];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_DEVTLB_CTL_DISABLE_2M[0], nxt_DEVTLB_CTL_DISABLE_2M[0:0], DEVTLB_CTL.DISABLE_2M[0:0])

// ----------------------------------------------------------------------
// DEVTLB_CTL.DISABLE_PRS x1 RW, using RW template.
logic [0:0] up_DEVTLB_CTL_DISABLE_PRS;
always_comb begin
 up_DEVTLB_CTL_DISABLE_PRS =
    ({1{write_req_DEVTLB_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_DEVTLB_CTL_DISABLE_PRS;
always_comb begin
 nxt_DEVTLB_CTL_DISABLE_PRS = write_data[2:2];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_DEVTLB_CTL_DISABLE_PRS[0], nxt_DEVTLB_CTL_DISABLE_PRS[0:0], DEVTLB_CTL.DISABLE_PRS[0:0])

// ----------------------------------------------------------------------
// DEVTLB_CTL.PRS_CRETRY x1 RW, using RW template.
logic [0:0] up_DEVTLB_CTL_PRS_CRETRY;
always_comb begin
 up_DEVTLB_CTL_PRS_CRETRY =
    ({1{write_req_DEVTLB_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_DEVTLB_CTL_PRS_CRETRY;
always_comb begin
 nxt_DEVTLB_CTL_PRS_CRETRY = write_data[3:3];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_DEVTLB_CTL_PRS_CRETRY[0], nxt_DEVTLB_CTL_PRS_CRETRY[0:0], DEVTLB_CTL.PRS_CRETRY[0:0])

// ----------------------------------------------------------------------
// DEVTLB_CTL.FILL_GCNT x3 RW, using RW template.
logic [0:0] up_DEVTLB_CTL_FILL_GCNT;
always_comb begin
 up_DEVTLB_CTL_FILL_GCNT =
    ({1{write_req_DEVTLB_CTL }} &
    be[0:0]);
end

logic [2:0] nxt_DEVTLB_CTL_FILL_GCNT;
always_comb begin
 nxt_DEVTLB_CTL_FILL_GCNT = write_data[6:4];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h4, up_DEVTLB_CTL_FILL_GCNT[0], nxt_DEVTLB_CTL_FILL_GCNT[2:0], DEVTLB_CTL.FILL_GCNT[2:0])

// ----------------------------------------------------------------------
// DEVTLB_CTL.PENDQ_GCNT x2 RW, using RW template.
logic [1:0] up_DEVTLB_CTL_PENDQ_GCNT;
always_comb begin
 up_DEVTLB_CTL_PENDQ_GCNT =
    ({2{write_req_DEVTLB_CTL }} &
    be[1:0]);
end

logic [2:0] nxt_DEVTLB_CTL_PENDQ_GCNT;
always_comb begin
 nxt_DEVTLB_CTL_PENDQ_GCNT = write_data[9:7];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_DEVTLB_CTL_PENDQ_GCNT[0], nxt_DEVTLB_CTL_PENDQ_GCNT[0:0], DEVTLB_CTL.PENDQ_GCNT[0:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 2'h2, up_DEVTLB_CTL_PENDQ_GCNT[1], nxt_DEVTLB_CTL_PENDQ_GCNT[2:1], DEVTLB_CTL.PENDQ_GCNT[2:1])

// ----------------------------------------------------------------------
// DEVTLB_CTL.HIXREQ_GCNT x3 RW, using RW template.
logic [0:0] up_DEVTLB_CTL_HIXREQ_GCNT;
always_comb begin
 up_DEVTLB_CTL_HIXREQ_GCNT =
    ({1{write_req_DEVTLB_CTL }} &
    be[1:1]);
end

logic [2:0] nxt_DEVTLB_CTL_HIXREQ_GCNT;
always_comb begin
 nxt_DEVTLB_CTL_HIXREQ_GCNT = write_data[12:10];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h4, up_DEVTLB_CTL_HIXREQ_GCNT[0], nxt_DEVTLB_CTL_HIXREQ_GCNT[2:0], DEVTLB_CTL.HIXREQ_GCNT[2:0])

// ----------------------------------------------------------------------
// DEVTLB_CTL.LOXREQ_GCNT x3 RW, using RW template.
logic [0:0] up_DEVTLB_CTL_LOXREQ_GCNT;
always_comb begin
 up_DEVTLB_CTL_LOXREQ_GCNT =
    ({1{write_req_DEVTLB_CTL }} &
    be[1:1]);
end

logic [2:0] nxt_DEVTLB_CTL_LOXREQ_GCNT;
always_comb begin
 nxt_DEVTLB_CTL_LOXREQ_GCNT = write_data[15:13];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 3'h4, up_DEVTLB_CTL_LOXREQ_GCNT[0], nxt_DEVTLB_CTL_LOXREQ_GCNT[2:0], DEVTLB_CTL.LOXREQ_GCNT[2:0])

//---------------------------------------------------------------------
// DEVTLB_SPARE Address Decode
logic  addr_decode_DEVTLB_SPARE;
logic  write_req_DEVTLB_SPARE;
always_comb begin
   addr_decode_DEVTLB_SPARE = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DEVTLB_SPARE_DECODE_ADDR) && req.valid ;
   write_req_DEVTLB_SPARE = IsMEMWr && addr_decode_DEVTLB_SPARE && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DEVTLB_SPARE.SPARE x8 RW, using RW template.
logic [3:0] up_DEVTLB_SPARE_SPARE;
always_comb begin
 up_DEVTLB_SPARE_SPARE =
    ({4{write_req_DEVTLB_SPARE }} &
    be[3:0]);
end

logic [31:0] nxt_DEVTLB_SPARE_SPARE;
always_comb begin
 nxt_DEVTLB_SPARE_SPARE = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_SPARE_SPARE[0], nxt_DEVTLB_SPARE_SPARE[7:0], DEVTLB_SPARE.SPARE[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_SPARE_SPARE[1], nxt_DEVTLB_SPARE_SPARE[15:8], DEVTLB_SPARE.SPARE[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_SPARE_SPARE[2], nxt_DEVTLB_SPARE_SPARE[23:16], DEVTLB_SPARE.SPARE[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_SPARE_SPARE[3], nxt_DEVTLB_SPARE_SPARE[31:24], DEVTLB_SPARE.SPARE[31:24])

//---------------------------------------------------------------------
// DEVTLB_DEFEATURE0 Address Decode
logic  addr_decode_DEVTLB_DEFEATURE0;
logic  write_req_DEVTLB_DEFEATURE0;
always_comb begin
   addr_decode_DEVTLB_DEFEATURE0 = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DEVTLB_DEFEATURE0_DECODE_ADDR) && req.valid ;
   write_req_DEVTLB_DEFEATURE0 = IsMEMWr && addr_decode_DEVTLB_DEFEATURE0 && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DEVTLB_DEFEATURE0.DEFEATURE x8 RW, using RW template.
logic [3:0] up_DEVTLB_DEFEATURE0_DEFEATURE;
always_comb begin
 up_DEVTLB_DEFEATURE0_DEFEATURE =
    ({4{write_req_DEVTLB_DEFEATURE0 }} &
    be[3:0]);
end

logic [31:0] nxt_DEVTLB_DEFEATURE0_DEFEATURE;
always_comb begin
 nxt_DEVTLB_DEFEATURE0_DEFEATURE = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE0_DEFEATURE[0], nxt_DEVTLB_DEFEATURE0_DEFEATURE[7:0], DEVTLB_DEFEATURE0.DEFEATURE[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE0_DEFEATURE[1], nxt_DEVTLB_DEFEATURE0_DEFEATURE[15:8], DEVTLB_DEFEATURE0.DEFEATURE[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE0_DEFEATURE[2], nxt_DEVTLB_DEFEATURE0_DEFEATURE[23:16], DEVTLB_DEFEATURE0.DEFEATURE[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE0_DEFEATURE[3], nxt_DEVTLB_DEFEATURE0_DEFEATURE[31:24], DEVTLB_DEFEATURE0.DEFEATURE[31:24])

//---------------------------------------------------------------------
// DEVTLB_DEFEATURE1 Address Decode
logic  addr_decode_DEVTLB_DEFEATURE1;
logic  write_req_DEVTLB_DEFEATURE1;
always_comb begin
   addr_decode_DEVTLB_DEFEATURE1 = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DEVTLB_DEFEATURE1_DECODE_ADDR) && req.valid ;
   write_req_DEVTLB_DEFEATURE1 = IsMEMWr && addr_decode_DEVTLB_DEFEATURE1 && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DEVTLB_DEFEATURE1.DEFEATURE x8 RW, using RW template.
logic [3:0] up_DEVTLB_DEFEATURE1_DEFEATURE;
always_comb begin
 up_DEVTLB_DEFEATURE1_DEFEATURE =
    ({4{write_req_DEVTLB_DEFEATURE1 }} &
    be[3:0]);
end

logic [31:0] nxt_DEVTLB_DEFEATURE1_DEFEATURE;
always_comb begin
 nxt_DEVTLB_DEFEATURE1_DEFEATURE = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE1_DEFEATURE[0], nxt_DEVTLB_DEFEATURE1_DEFEATURE[7:0], DEVTLB_DEFEATURE1.DEFEATURE[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE1_DEFEATURE[1], nxt_DEVTLB_DEFEATURE1_DEFEATURE[15:8], DEVTLB_DEFEATURE1.DEFEATURE[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE1_DEFEATURE[2], nxt_DEVTLB_DEFEATURE1_DEFEATURE[23:16], DEVTLB_DEFEATURE1.DEFEATURE[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE1_DEFEATURE[3], nxt_DEVTLB_DEFEATURE1_DEFEATURE[31:24], DEVTLB_DEFEATURE1.DEFEATURE[31:24])

//---------------------------------------------------------------------
// DEVTLB_DEFEATURE2 Address Decode
logic  addr_decode_DEVTLB_DEFEATURE2;
logic  write_req_DEVTLB_DEFEATURE2;
always_comb begin
   addr_decode_DEVTLB_DEFEATURE2 = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DEVTLB_DEFEATURE2_DECODE_ADDR) && req.valid ;
   write_req_DEVTLB_DEFEATURE2 = IsMEMWr && addr_decode_DEVTLB_DEFEATURE2 && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DEVTLB_DEFEATURE2.DEFEATURE x8 RW, using RW template.
logic [3:0] up_DEVTLB_DEFEATURE2_DEFEATURE;
always_comb begin
 up_DEVTLB_DEFEATURE2_DEFEATURE =
    ({4{write_req_DEVTLB_DEFEATURE2 }} &
    be[3:0]);
end

logic [31:0] nxt_DEVTLB_DEFEATURE2_DEFEATURE;
always_comb begin
 nxt_DEVTLB_DEFEATURE2_DEFEATURE = write_data[31:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE2_DEFEATURE[0], nxt_DEVTLB_DEFEATURE2_DEFEATURE[7:0], DEVTLB_DEFEATURE2.DEFEATURE[7:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE2_DEFEATURE[1], nxt_DEVTLB_DEFEATURE2_DEFEATURE[15:8], DEVTLB_DEFEATURE2.DEFEATURE[15:8])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE2_DEFEATURE[2], nxt_DEVTLB_DEFEATURE2_DEFEATURE[23:16], DEVTLB_DEFEATURE2.DEFEATURE[23:16])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_DEVTLB_DEFEATURE2_DEFEATURE[3], nxt_DEVTLB_DEFEATURE2_DEFEATURE[31:24], DEVTLB_DEFEATURE2.DEFEATURE[31:24])

//---------------------------------------------------------------------
// DEVTLB_STATUS Address Decode
// ----------------------------------------------------------------------
// DEVTLB_STATUS.XREQS_ACTIVE x1 RO/V, using RO/V template.
assign DEVTLB_STATUS.XREQS_ACTIVE = new_DEVTLB_STATUS.XREQS_ACTIVE;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.INVREQS_ACTIVE x1 RO/V, using RO/V template.
assign DEVTLB_STATUS.INVREQS_ACTIVE = new_DEVTLB_STATUS.INVREQS_ACTIVE;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.RESET_ACTIVE x1 RO/V, using RO/V template.
assign DEVTLB_STATUS.RESET_ACTIVE = new_DEVTLB_STATUS.RESET_ACTIVE;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.ATS_ENABLED x1 RO/V, using RO/V template.
assign DEVTLB_STATUS.ATS_ENABLED = new_DEVTLB_STATUS.ATS_ENABLED;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.LCRD_CNT x3 RO/V, using RO/V template.
assign DEVTLB_STATUS.LCRD_CNT = new_DEVTLB_STATUS.LCRD_CNT;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.HCRD_CNT x3 RO/V, using RO/V template.
assign DEVTLB_STATUS.HCRD_CNT = new_DEVTLB_STATUS.HCRD_CNT;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.ATS_LREQ_V x1 RO/V, using RO/V template.
assign DEVTLB_STATUS.ATS_LREQ_V = new_DEVTLB_STATUS.ATS_LREQ_V;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.ATS_HREQ_V x1 RO/V, using RO/V template.
assign DEVTLB_STATUS.ATS_HREQ_V = new_DEVTLB_STATUS.ATS_HREQ_V;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.TX_MSG_V x1 RO/V, using RO/V template.
assign DEVTLB_STATUS.TX_MSG_V = new_DEVTLB_STATUS.TX_MSG_V;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.DRAIN_REQ_V x1 RO/V, using RO/V template.
assign DEVTLB_STATUS.DRAIN_REQ_V = new_DEVTLB_STATUS.DRAIN_REQ_V;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.ATS_REQ_CNT x6 RO/V, using RO/V template.
assign DEVTLB_STATUS.ATS_REQ_CNT = new_DEVTLB_STATUS.ATS_REQ_CNT;



// ----------------------------------------------------------------------
// DEVTLB_STATUS.XREQ_CNT x5 RO/V, using RO/V template.
assign DEVTLB_STATUS.XREQ_CNT = new_DEVTLB_STATUS.XREQ_CNT;




//---------------------------------------------------------------------
// CFGM_STATUS Address Decode
// ----------------------------------------------------------------------
// CFGM_STATUS.PADDR x8 RO/V, using RO/V template.
assign CFGM_STATUS.PADDR = new_CFGM_STATUS.PADDR;




//---------------------------------------------------------------------
// CFGM_STATUS2 Address Decode
// ----------------------------------------------------------------------
// CFGM_STATUS2.PWDATA x5 RO/V, using RO/V template.
assign CFGM_STATUS2.PWDATA = new_CFGM_STATUS2.PWDATA;



// ----------------------------------------------------------------------
// CFGM_STATUS2.PWRITE x1 RO/V, using RO/V template.
assign CFGM_STATUS2.PWRITE = new_CFGM_STATUS2.PWRITE;



// ----------------------------------------------------------------------
// CFGM_STATUS2.PSLVERR x1 RO/V, using RO/V template.
assign CFGM_STATUS2.PSLVERR = new_CFGM_STATUS2.PSLVERR;



// ----------------------------------------------------------------------
// CFGM_STATUS2.PSEL x1 RO/V, using RO/V template.
assign CFGM_STATUS2.PSEL = new_CFGM_STATUS2.PSEL;




//---------------------------------------------------------------------
// LOCAL_BME_STATUS Address Decode
// ----------------------------------------------------------------------
// LOCAL_BME_STATUS.BME_PF x1 RO/V, using RO/V template.
assign LOCAL_BME_STATUS.BME_PF = new_LOCAL_BME_STATUS.BME_PF;




//---------------------------------------------------------------------
// LOCAL_MSIXE_STATUS Address Decode
// ----------------------------------------------------------------------
// LOCAL_MSIXE_STATUS.MSIXE_PF x1 RO/V, using RO/V template.
assign LOCAL_MSIXE_STATUS.MSIXE_PF = new_LOCAL_MSIXE_STATUS.MSIXE_PF;




//---------------------------------------------------------------------
// MSTR_CRD_STATUS Address Decode
// ----------------------------------------------------------------------
// MSTR_CRD_STATUS.P_REQ_PUT_CNT x5 RO/V, using RO/V template.
assign MSTR_CRD_STATUS.P_REQ_PUT_CNT = new_MSTR_CRD_STATUS.P_REQ_PUT_CNT;



// ----------------------------------------------------------------------
// MSTR_CRD_STATUS.NP_REQ_PUT_CNT x2 RO/V, using RO/V template.
assign MSTR_CRD_STATUS.NP_REQ_PUT_CNT = new_MSTR_CRD_STATUS.NP_REQ_PUT_CNT;



// ----------------------------------------------------------------------
// MSTR_CRD_STATUS.CPL_REQ_PUT_CNT x5 RO/V, using RO/V template.
assign MSTR_CRD_STATUS.CPL_REQ_PUT_CNT = new_MSTR_CRD_STATUS.CPL_REQ_PUT_CNT;




//---------------------------------------------------------------------
// MSTR_FL_STATUS Address Decode
// ----------------------------------------------------------------------
// MSTR_FL_STATUS.FL_HPTR x8 RO/V, using RO/V template.
assign MSTR_FL_STATUS.FL_HPTR = new_MSTR_FL_STATUS.FL_HPTR;



// ----------------------------------------------------------------------
// MSTR_FL_STATUS.FL_CNT x1 RO/V, using RO/V template.
assign MSTR_FL_STATUS.FL_CNT = new_MSTR_FL_STATUS.FL_CNT;



// ----------------------------------------------------------------------
// MSTR_FL_STATUS.FL_EMPTY x1 RO/V, using RO/V template.
assign MSTR_FL_STATUS.FL_EMPTY = new_MSTR_FL_STATUS.FL_EMPTY;



// ----------------------------------------------------------------------
// MSTR_FL_STATUS.FL_AEMPTY x1 RO/V, using RO/V template.
assign MSTR_FL_STATUS.FL_AEMPTY = new_MSTR_FL_STATUS.FL_AEMPTY;



// ----------------------------------------------------------------------
// MSTR_FL_STATUS.FL_FULL x1 RO/V, using RO/V template.
assign MSTR_FL_STATUS.FL_FULL = new_MSTR_FL_STATUS.FL_FULL;




//---------------------------------------------------------------------
// MSTR_LL_STATUS Address Decode
// ----------------------------------------------------------------------
// MSTR_LL_STATUS.TPTR x8 RO/V, using RO/V template.
assign MSTR_LL_STATUS.TPTR = new_MSTR_LL_STATUS.TPTR;



// ----------------------------------------------------------------------
// MSTR_LL_STATUS.HPTR x8 RO/V, using RO/V template.
assign MSTR_LL_STATUS.HPTR = new_MSTR_LL_STATUS.HPTR;



// ----------------------------------------------------------------------
// MSTR_LL_STATUS.VALID x1 RO/V, using RO/V template.
assign MSTR_LL_STATUS.VALID = new_MSTR_LL_STATUS.VALID;



// ----------------------------------------------------------------------
// MSTR_LL_STATUS.HPA_PND x1 RO/V, using RO/V template.
assign MSTR_LL_STATUS.HPA_PND = new_MSTR_LL_STATUS.HPA_PND;



// ----------------------------------------------------------------------
// MSTR_LL_STATUS.HPA_ERR x1 RO/V, using RO/V template.
assign MSTR_LL_STATUS.HPA_ERR = new_MSTR_LL_STATUS.HPA_ERR;



// ----------------------------------------------------------------------
// MSTR_LL_STATUS.HPA_V x1 RO/V, using RO/V template.
assign MSTR_LL_STATUS.HPA_V = new_MSTR_LL_STATUS.HPA_V;




//---------------------------------------------------------------------
// MSTR_LL_CTL Address Decode
logic  addr_decode_MSTR_LL_CTL;
logic  write_req_MSTR_LL_CTL;
always_comb begin
   addr_decode_MSTR_LL_CTL = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSTR_LL_CTL_DECODE_ADDR) && req.valid ;
   write_req_MSTR_LL_CTL = IsMEMWr && addr_decode_MSTR_LL_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSTR_LL_CTL.PTR x8 RW, using RW template.
logic [0:0] up_MSTR_LL_CTL_PTR;
always_comb begin
 up_MSTR_LL_CTL_PTR =
    ({1{write_req_MSTR_LL_CTL }} &
    be[0:0]);
end

logic [7:0] nxt_MSTR_LL_CTL_PTR;
always_comb begin
 nxt_MSTR_LL_CTL_PTR = write_data[7:0];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 8'h0, up_MSTR_LL_CTL_PTR[0], nxt_MSTR_LL_CTL_PTR[7:0], MSTR_LL_CTL.PTR[7:0])

// ----------------------------------------------------------------------
// MSTR_LL_CTL.RD_LL x1 RW, using RW template.
logic [0:0] up_MSTR_LL_CTL_RD_LL;
always_comb begin
 up_MSTR_LL_CTL_RD_LL =
    ({1{write_req_MSTR_LL_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_MSTR_LL_CTL_RD_LL;
always_comb begin
 nxt_MSTR_LL_CTL_RD_LL = write_data[8:8];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_MSTR_LL_CTL_RD_LL[0], nxt_MSTR_LL_CTL_RD_LL[0:0], MSTR_LL_CTL.RD_LL[0:0])

// ----------------------------------------------------------------------
// MSTR_LL_CTL.RD_RL x1 RW, using RW template.
logic [0:0] up_MSTR_LL_CTL_RD_RL;
always_comb begin
 up_MSTR_LL_CTL_RD_RL =
    ({1{write_req_MSTR_LL_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_MSTR_LL_CTL_RD_RL;
always_comb begin
 nxt_MSTR_LL_CTL_RD_RL = write_data[9:9];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_MSTR_LL_CTL_RD_RL[0], nxt_MSTR_LL_CTL_RD_RL[0:0], MSTR_LL_CTL.RD_RL[0:0])

// ----------------------------------------------------------------------
// MSTR_LL_CTL.RD_BLK x1 RW, using RW template.
logic [0:0] up_MSTR_LL_CTL_RD_BLK;
always_comb begin
 up_MSTR_LL_CTL_RD_BLK =
    ({1{write_req_MSTR_LL_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_MSTR_LL_CTL_RD_BLK;
always_comb begin
 nxt_MSTR_LL_CTL_RD_BLK = write_data[10:10];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_MSTR_LL_CTL_RD_BLK[0], nxt_MSTR_LL_CTL_RD_BLK[0:0], MSTR_LL_CTL.RD_BLK[0:0])

// ----------------------------------------------------------------------
// MSTR_LL_CTL.CLR_HPA_ERR x1 RW, using RW template.
logic [0:0] up_MSTR_LL_CTL_CLR_HPA_ERR;
always_comb begin
 up_MSTR_LL_CTL_CLR_HPA_ERR =
    ({1{write_req_MSTR_LL_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_MSTR_LL_CTL_CLR_HPA_ERR;
always_comb begin
 nxt_MSTR_LL_CTL_CLR_HPA_ERR = write_data[11:11];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 1'h0, up_MSTR_LL_CTL_CLR_HPA_ERR[0], nxt_MSTR_LL_CTL_CLR_HPA_ERR[0:0], MSTR_LL_CTL.CLR_HPA_ERR[0:0])

// ----------------------------------------------------------------------
// MSTR_LL_CTL.CQ_LL_LIMIT x4 RW, using RW template.
logic [1:0] up_MSTR_LL_CTL_CQ_LL_LIMIT;
always_comb begin
 up_MSTR_LL_CTL_CQ_LL_LIMIT =
    ({2{write_req_MSTR_LL_CTL }} &
    be[2:1]);
end

logic [7:0] nxt_MSTR_LL_CTL_CQ_LL_LIMIT;
always_comb begin
 nxt_MSTR_LL_CTL_CQ_LL_LIMIT = write_data[19:12];

end


`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h0, up_MSTR_LL_CTL_CQ_LL_LIMIT[0], nxt_MSTR_LL_CTL_CQ_LL_LIMIT[3:0], MSTR_LL_CTL.CQ_LL_LIMIT[3:0])
`RTLGEN_HQM_SIF_CSR_EN_FF(gated_clk, hqm_csr_mmio_rst_n, 4'h1, up_MSTR_LL_CTL_CQ_LL_LIMIT[1], nxt_MSTR_LL_CTL_CQ_LL_LIMIT[7:4], MSTR_LL_CTL.CQ_LL_LIMIT[7:4])

//---------------------------------------------------------------------
// SIF_MSTR_DEBUG Address Decode
// ----------------------------------------------------------------------
// SIF_MSTR_DEBUG.FABRIC_P_CREDITS x5 RO/V, using RO/V template.
assign SIF_MSTR_DEBUG.FABRIC_P_CREDITS = new_SIF_MSTR_DEBUG.FABRIC_P_CREDITS;



// ----------------------------------------------------------------------
// SIF_MSTR_DEBUG.FABRIC_NP_CREDITS x2 RO/V, using RO/V template.
assign SIF_MSTR_DEBUG.FABRIC_NP_CREDITS = new_SIF_MSTR_DEBUG.FABRIC_NP_CREDITS;



// ----------------------------------------------------------------------
// SIF_MSTR_DEBUG.FABRIC_CPL_CREDITS x5 RO/V, using RO/V template.
assign SIF_MSTR_DEBUG.FABRIC_CPL_CREDITS = new_SIF_MSTR_DEBUG.FABRIC_CPL_CREDITS;




//---------------------------------------------------------------------
// IBCPL_ERR Address Decode
logic  addr_decode_IBCPL_ERR;
logic  write_req_IBCPL_ERR;
always_comb begin
   addr_decode_IBCPL_ERR = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IBCPL_ERR_DECODE_ADDR) && req.valid ;
   write_req_IBCPL_ERR = IsMEMWr && addr_decode_IBCPL_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IBCPL_ERR.IBCPL_ABORT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_IBCPL_ERR_IBCPL_ABORT;
always_comb begin
 req_up_IBCPL_ERR_IBCPL_ABORT[0:0] = 
   {1{write_req_IBCPL_ERR & be[0]}}
;
end

logic [0:0] clr_IBCPL_ERR_IBCPL_ABORT;
always_comb begin
 clr_IBCPL_ERR_IBCPL_ABORT = write_data[0:0] & req_up_IBCPL_ERR_IBCPL_ABORT;

end
logic [0:0] swwr_IBCPL_ERR_IBCPL_ABORT;
logic [0:0] sw_nxt_IBCPL_ERR_IBCPL_ABORT;
always_comb begin
 swwr_IBCPL_ERR_IBCPL_ABORT = clr_IBCPL_ERR_IBCPL_ABORT;
 sw_nxt_IBCPL_ERR_IBCPL_ABORT = {1{1'b0}};

end
logic [0:0] up_IBCPL_ERR_IBCPL_ABORT;
logic [0:0] nxt_IBCPL_ERR_IBCPL_ABORT;
always_comb begin
 up_IBCPL_ERR_IBCPL_ABORT = 
   swwr_IBCPL_ERR_IBCPL_ABORT | {1{load_IBCPL_ERR.IBCPL_ABORT}};
end
always_comb begin
 nxt_IBCPL_ERR_IBCPL_ABORT[0] = 
    load_IBCPL_ERR.IBCPL_ABORT ?
    new_IBCPL_ERR.IBCPL_ABORT[0] :
    sw_nxt_IBCPL_ERR_IBCPL_ABORT[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_IBCPL_ABORT[0], nxt_IBCPL_ERR_IBCPL_ABORT[0], IBCPL_ERR.IBCPL_ABORT[0])

// ----------------------------------------------------------------------
// IBCPL_ERR.IBCPL_UR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_IBCPL_ERR_IBCPL_UR;
always_comb begin
 req_up_IBCPL_ERR_IBCPL_UR[0:0] = 
   {1{write_req_IBCPL_ERR & be[0]}}
;
end

logic [0:0] clr_IBCPL_ERR_IBCPL_UR;
always_comb begin
 clr_IBCPL_ERR_IBCPL_UR = write_data[1:1] & req_up_IBCPL_ERR_IBCPL_UR;

end
logic [0:0] swwr_IBCPL_ERR_IBCPL_UR;
logic [0:0] sw_nxt_IBCPL_ERR_IBCPL_UR;
always_comb begin
 swwr_IBCPL_ERR_IBCPL_UR = clr_IBCPL_ERR_IBCPL_UR;
 sw_nxt_IBCPL_ERR_IBCPL_UR = {1{1'b0}};

end
logic [0:0] up_IBCPL_ERR_IBCPL_UR;
logic [0:0] nxt_IBCPL_ERR_IBCPL_UR;
always_comb begin
 up_IBCPL_ERR_IBCPL_UR = 
   swwr_IBCPL_ERR_IBCPL_UR | {1{load_IBCPL_ERR.IBCPL_UR}};
end
always_comb begin
 nxt_IBCPL_ERR_IBCPL_UR[0] = 
    load_IBCPL_ERR.IBCPL_UR ?
    new_IBCPL_ERR.IBCPL_UR[0] :
    sw_nxt_IBCPL_ERR_IBCPL_UR[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_IBCPL_UR[0], nxt_IBCPL_ERR_IBCPL_UR[0], IBCPL_ERR.IBCPL_UR[0])

//---------------------------------------------------------------------
// IBCPL_ERR_HDR_0 Address Decode
logic  addr_decode_IBCPL_ERR_HDR_0;
logic  write_req_IBCPL_ERR_HDR_0;
always_comb begin
   addr_decode_IBCPL_ERR_HDR_0 = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IBCPL_ERR_HDR_0_DECODE_ADDR) && req.valid ;
   write_req_IBCPL_ERR_HDR_0 = IsMEMWr && addr_decode_IBCPL_ERR_HDR_0 && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IBCPL_ERR_HDR_0.HDR x8 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [31:0] req_up_IBCPL_ERR_HDR_0_HDR;
always_comb begin
 req_up_IBCPL_ERR_HDR_0_HDR[7:0] = 
   {8{write_req_IBCPL_ERR_HDR_0 & be[0]}}
;
 req_up_IBCPL_ERR_HDR_0_HDR[15:8] = 
   {8{write_req_IBCPL_ERR_HDR_0 & be[1]}}
;
 req_up_IBCPL_ERR_HDR_0_HDR[23:16] = 
   {8{write_req_IBCPL_ERR_HDR_0 & be[2]}}
;
 req_up_IBCPL_ERR_HDR_0_HDR[31:24] = 
   {8{write_req_IBCPL_ERR_HDR_0 & be[3]}}
;
end

logic [31:0] clr_IBCPL_ERR_HDR_0_HDR;
always_comb begin
 clr_IBCPL_ERR_HDR_0_HDR = write_data[31:0] & req_up_IBCPL_ERR_HDR_0_HDR;

end
logic [31:0] swwr_IBCPL_ERR_HDR_0_HDR;
logic [31:0] sw_nxt_IBCPL_ERR_HDR_0_HDR;
always_comb begin
 swwr_IBCPL_ERR_HDR_0_HDR = clr_IBCPL_ERR_HDR_0_HDR;
 sw_nxt_IBCPL_ERR_HDR_0_HDR = {32{1'b0}};

end
logic [31:0] up_IBCPL_ERR_HDR_0_HDR;
logic [31:0] nxt_IBCPL_ERR_HDR_0_HDR;
always_comb begin
 up_IBCPL_ERR_HDR_0_HDR = 
   swwr_IBCPL_ERR_HDR_0_HDR | {32{load_IBCPL_ERR_HDR_0.HDR}};
end
always_comb begin
 nxt_IBCPL_ERR_HDR_0_HDR[0] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[0] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[0];
 nxt_IBCPL_ERR_HDR_0_HDR[1] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[1] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[1];
 nxt_IBCPL_ERR_HDR_0_HDR[2] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[2] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[2];
 nxt_IBCPL_ERR_HDR_0_HDR[3] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[3] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[3];
 nxt_IBCPL_ERR_HDR_0_HDR[4] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[4] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[4];
 nxt_IBCPL_ERR_HDR_0_HDR[5] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[5] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[5];
 nxt_IBCPL_ERR_HDR_0_HDR[6] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[6] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[6];
 nxt_IBCPL_ERR_HDR_0_HDR[7] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[7] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[7];
 nxt_IBCPL_ERR_HDR_0_HDR[8] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[8] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[8];
 nxt_IBCPL_ERR_HDR_0_HDR[9] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[9] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[9];
 nxt_IBCPL_ERR_HDR_0_HDR[10] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[10] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[10];
 nxt_IBCPL_ERR_HDR_0_HDR[11] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[11] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[11];
 nxt_IBCPL_ERR_HDR_0_HDR[12] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[12] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[12];
 nxt_IBCPL_ERR_HDR_0_HDR[13] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[13] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[13];
 nxt_IBCPL_ERR_HDR_0_HDR[14] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[14] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[14];
 nxt_IBCPL_ERR_HDR_0_HDR[15] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[15] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[15];
 nxt_IBCPL_ERR_HDR_0_HDR[16] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[16] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[16];
 nxt_IBCPL_ERR_HDR_0_HDR[17] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[17] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[17];
 nxt_IBCPL_ERR_HDR_0_HDR[18] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[18] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[18];
 nxt_IBCPL_ERR_HDR_0_HDR[19] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[19] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[19];
 nxt_IBCPL_ERR_HDR_0_HDR[20] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[20] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[20];
 nxt_IBCPL_ERR_HDR_0_HDR[21] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[21] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[21];
 nxt_IBCPL_ERR_HDR_0_HDR[22] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[22] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[22];
 nxt_IBCPL_ERR_HDR_0_HDR[23] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[23] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[23];
 nxt_IBCPL_ERR_HDR_0_HDR[24] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[24] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[24];
 nxt_IBCPL_ERR_HDR_0_HDR[25] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[25] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[25];
 nxt_IBCPL_ERR_HDR_0_HDR[26] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[26] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[26];
 nxt_IBCPL_ERR_HDR_0_HDR[27] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[27] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[27];
 nxt_IBCPL_ERR_HDR_0_HDR[28] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[28] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[28];
 nxt_IBCPL_ERR_HDR_0_HDR[29] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[29] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[29];
 nxt_IBCPL_ERR_HDR_0_HDR[30] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[30] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[30];
 nxt_IBCPL_ERR_HDR_0_HDR[31] = 
    load_IBCPL_ERR_HDR_0.HDR ?
    new_IBCPL_ERR_HDR_0.HDR[31] :
    sw_nxt_IBCPL_ERR_HDR_0_HDR[31];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[0], nxt_IBCPL_ERR_HDR_0_HDR[0], IBCPL_ERR_HDR_0.HDR[0])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[1], nxt_IBCPL_ERR_HDR_0_HDR[1], IBCPL_ERR_HDR_0.HDR[1])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[2], nxt_IBCPL_ERR_HDR_0_HDR[2], IBCPL_ERR_HDR_0.HDR[2])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[3], nxt_IBCPL_ERR_HDR_0_HDR[3], IBCPL_ERR_HDR_0.HDR[3])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[4], nxt_IBCPL_ERR_HDR_0_HDR[4], IBCPL_ERR_HDR_0.HDR[4])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[5], nxt_IBCPL_ERR_HDR_0_HDR[5], IBCPL_ERR_HDR_0.HDR[5])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[6], nxt_IBCPL_ERR_HDR_0_HDR[6], IBCPL_ERR_HDR_0.HDR[6])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[7], nxt_IBCPL_ERR_HDR_0_HDR[7], IBCPL_ERR_HDR_0.HDR[7])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[8], nxt_IBCPL_ERR_HDR_0_HDR[8], IBCPL_ERR_HDR_0.HDR[8])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[9], nxt_IBCPL_ERR_HDR_0_HDR[9], IBCPL_ERR_HDR_0.HDR[9])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[10], nxt_IBCPL_ERR_HDR_0_HDR[10], IBCPL_ERR_HDR_0.HDR[10])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[11], nxt_IBCPL_ERR_HDR_0_HDR[11], IBCPL_ERR_HDR_0.HDR[11])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[12], nxt_IBCPL_ERR_HDR_0_HDR[12], IBCPL_ERR_HDR_0.HDR[12])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[13], nxt_IBCPL_ERR_HDR_0_HDR[13], IBCPL_ERR_HDR_0.HDR[13])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[14], nxt_IBCPL_ERR_HDR_0_HDR[14], IBCPL_ERR_HDR_0.HDR[14])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[15], nxt_IBCPL_ERR_HDR_0_HDR[15], IBCPL_ERR_HDR_0.HDR[15])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[16], nxt_IBCPL_ERR_HDR_0_HDR[16], IBCPL_ERR_HDR_0.HDR[16])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[17], nxt_IBCPL_ERR_HDR_0_HDR[17], IBCPL_ERR_HDR_0.HDR[17])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[18], nxt_IBCPL_ERR_HDR_0_HDR[18], IBCPL_ERR_HDR_0.HDR[18])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[19], nxt_IBCPL_ERR_HDR_0_HDR[19], IBCPL_ERR_HDR_0.HDR[19])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[20], nxt_IBCPL_ERR_HDR_0_HDR[20], IBCPL_ERR_HDR_0.HDR[20])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[21], nxt_IBCPL_ERR_HDR_0_HDR[21], IBCPL_ERR_HDR_0.HDR[21])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[22], nxt_IBCPL_ERR_HDR_0_HDR[22], IBCPL_ERR_HDR_0.HDR[22])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[23], nxt_IBCPL_ERR_HDR_0_HDR[23], IBCPL_ERR_HDR_0.HDR[23])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[24], nxt_IBCPL_ERR_HDR_0_HDR[24], IBCPL_ERR_HDR_0.HDR[24])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[25], nxt_IBCPL_ERR_HDR_0_HDR[25], IBCPL_ERR_HDR_0.HDR[25])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[26], nxt_IBCPL_ERR_HDR_0_HDR[26], IBCPL_ERR_HDR_0.HDR[26])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[27], nxt_IBCPL_ERR_HDR_0_HDR[27], IBCPL_ERR_HDR_0.HDR[27])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[28], nxt_IBCPL_ERR_HDR_0_HDR[28], IBCPL_ERR_HDR_0.HDR[28])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[29], nxt_IBCPL_ERR_HDR_0_HDR[29], IBCPL_ERR_HDR_0.HDR[29])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[30], nxt_IBCPL_ERR_HDR_0_HDR[30], IBCPL_ERR_HDR_0.HDR[30])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_0_HDR[31], nxt_IBCPL_ERR_HDR_0_HDR[31], IBCPL_ERR_HDR_0.HDR[31])

//---------------------------------------------------------------------
// IBCPL_ERR_HDR_1 Address Decode
logic  addr_decode_IBCPL_ERR_HDR_1;
logic  write_req_IBCPL_ERR_HDR_1;
always_comb begin
   addr_decode_IBCPL_ERR_HDR_1 = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IBCPL_ERR_HDR_1_DECODE_ADDR) && req.valid ;
   write_req_IBCPL_ERR_HDR_1 = IsMEMWr && addr_decode_IBCPL_ERR_HDR_1 && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IBCPL_ERR_HDR_1.HDR x8 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [31:0] req_up_IBCPL_ERR_HDR_1_HDR;
always_comb begin
 req_up_IBCPL_ERR_HDR_1_HDR[7:0] = 
   {8{write_req_IBCPL_ERR_HDR_1 & be[0]}}
;
 req_up_IBCPL_ERR_HDR_1_HDR[15:8] = 
   {8{write_req_IBCPL_ERR_HDR_1 & be[1]}}
;
 req_up_IBCPL_ERR_HDR_1_HDR[23:16] = 
   {8{write_req_IBCPL_ERR_HDR_1 & be[2]}}
;
 req_up_IBCPL_ERR_HDR_1_HDR[31:24] = 
   {8{write_req_IBCPL_ERR_HDR_1 & be[3]}}
;
end

logic [31:0] clr_IBCPL_ERR_HDR_1_HDR;
always_comb begin
 clr_IBCPL_ERR_HDR_1_HDR = write_data[31:0] & req_up_IBCPL_ERR_HDR_1_HDR;

end
logic [31:0] swwr_IBCPL_ERR_HDR_1_HDR;
logic [31:0] sw_nxt_IBCPL_ERR_HDR_1_HDR;
always_comb begin
 swwr_IBCPL_ERR_HDR_1_HDR = clr_IBCPL_ERR_HDR_1_HDR;
 sw_nxt_IBCPL_ERR_HDR_1_HDR = {32{1'b0}};

end
logic [31:0] up_IBCPL_ERR_HDR_1_HDR;
logic [31:0] nxt_IBCPL_ERR_HDR_1_HDR;
always_comb begin
 up_IBCPL_ERR_HDR_1_HDR = 
   swwr_IBCPL_ERR_HDR_1_HDR | {32{load_IBCPL_ERR_HDR_1.HDR}};
end
always_comb begin
 nxt_IBCPL_ERR_HDR_1_HDR[0] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[0] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[0];
 nxt_IBCPL_ERR_HDR_1_HDR[1] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[1] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[1];
 nxt_IBCPL_ERR_HDR_1_HDR[2] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[2] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[2];
 nxt_IBCPL_ERR_HDR_1_HDR[3] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[3] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[3];
 nxt_IBCPL_ERR_HDR_1_HDR[4] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[4] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[4];
 nxt_IBCPL_ERR_HDR_1_HDR[5] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[5] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[5];
 nxt_IBCPL_ERR_HDR_1_HDR[6] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[6] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[6];
 nxt_IBCPL_ERR_HDR_1_HDR[7] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[7] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[7];
 nxt_IBCPL_ERR_HDR_1_HDR[8] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[8] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[8];
 nxt_IBCPL_ERR_HDR_1_HDR[9] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[9] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[9];
 nxt_IBCPL_ERR_HDR_1_HDR[10] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[10] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[10];
 nxt_IBCPL_ERR_HDR_1_HDR[11] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[11] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[11];
 nxt_IBCPL_ERR_HDR_1_HDR[12] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[12] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[12];
 nxt_IBCPL_ERR_HDR_1_HDR[13] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[13] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[13];
 nxt_IBCPL_ERR_HDR_1_HDR[14] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[14] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[14];
 nxt_IBCPL_ERR_HDR_1_HDR[15] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[15] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[15];
 nxt_IBCPL_ERR_HDR_1_HDR[16] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[16] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[16];
 nxt_IBCPL_ERR_HDR_1_HDR[17] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[17] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[17];
 nxt_IBCPL_ERR_HDR_1_HDR[18] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[18] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[18];
 nxt_IBCPL_ERR_HDR_1_HDR[19] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[19] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[19];
 nxt_IBCPL_ERR_HDR_1_HDR[20] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[20] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[20];
 nxt_IBCPL_ERR_HDR_1_HDR[21] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[21] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[21];
 nxt_IBCPL_ERR_HDR_1_HDR[22] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[22] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[22];
 nxt_IBCPL_ERR_HDR_1_HDR[23] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[23] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[23];
 nxt_IBCPL_ERR_HDR_1_HDR[24] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[24] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[24];
 nxt_IBCPL_ERR_HDR_1_HDR[25] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[25] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[25];
 nxt_IBCPL_ERR_HDR_1_HDR[26] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[26] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[26];
 nxt_IBCPL_ERR_HDR_1_HDR[27] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[27] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[27];
 nxt_IBCPL_ERR_HDR_1_HDR[28] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[28] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[28];
 nxt_IBCPL_ERR_HDR_1_HDR[29] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[29] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[29];
 nxt_IBCPL_ERR_HDR_1_HDR[30] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[30] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[30];
 nxt_IBCPL_ERR_HDR_1_HDR[31] = 
    load_IBCPL_ERR_HDR_1.HDR ?
    new_IBCPL_ERR_HDR_1.HDR[31] :
    sw_nxt_IBCPL_ERR_HDR_1_HDR[31];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[0], nxt_IBCPL_ERR_HDR_1_HDR[0], IBCPL_ERR_HDR_1.HDR[0])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[1], nxt_IBCPL_ERR_HDR_1_HDR[1], IBCPL_ERR_HDR_1.HDR[1])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[2], nxt_IBCPL_ERR_HDR_1_HDR[2], IBCPL_ERR_HDR_1.HDR[2])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[3], nxt_IBCPL_ERR_HDR_1_HDR[3], IBCPL_ERR_HDR_1.HDR[3])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[4], nxt_IBCPL_ERR_HDR_1_HDR[4], IBCPL_ERR_HDR_1.HDR[4])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[5], nxt_IBCPL_ERR_HDR_1_HDR[5], IBCPL_ERR_HDR_1.HDR[5])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[6], nxt_IBCPL_ERR_HDR_1_HDR[6], IBCPL_ERR_HDR_1.HDR[6])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[7], nxt_IBCPL_ERR_HDR_1_HDR[7], IBCPL_ERR_HDR_1.HDR[7])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[8], nxt_IBCPL_ERR_HDR_1_HDR[8], IBCPL_ERR_HDR_1.HDR[8])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[9], nxt_IBCPL_ERR_HDR_1_HDR[9], IBCPL_ERR_HDR_1.HDR[9])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[10], nxt_IBCPL_ERR_HDR_1_HDR[10], IBCPL_ERR_HDR_1.HDR[10])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[11], nxt_IBCPL_ERR_HDR_1_HDR[11], IBCPL_ERR_HDR_1.HDR[11])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[12], nxt_IBCPL_ERR_HDR_1_HDR[12], IBCPL_ERR_HDR_1.HDR[12])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[13], nxt_IBCPL_ERR_HDR_1_HDR[13], IBCPL_ERR_HDR_1.HDR[13])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[14], nxt_IBCPL_ERR_HDR_1_HDR[14], IBCPL_ERR_HDR_1.HDR[14])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[15], nxt_IBCPL_ERR_HDR_1_HDR[15], IBCPL_ERR_HDR_1.HDR[15])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[16], nxt_IBCPL_ERR_HDR_1_HDR[16], IBCPL_ERR_HDR_1.HDR[16])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[17], nxt_IBCPL_ERR_HDR_1_HDR[17], IBCPL_ERR_HDR_1.HDR[17])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[18], nxt_IBCPL_ERR_HDR_1_HDR[18], IBCPL_ERR_HDR_1.HDR[18])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[19], nxt_IBCPL_ERR_HDR_1_HDR[19], IBCPL_ERR_HDR_1.HDR[19])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[20], nxt_IBCPL_ERR_HDR_1_HDR[20], IBCPL_ERR_HDR_1.HDR[20])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[21], nxt_IBCPL_ERR_HDR_1_HDR[21], IBCPL_ERR_HDR_1.HDR[21])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[22], nxt_IBCPL_ERR_HDR_1_HDR[22], IBCPL_ERR_HDR_1.HDR[22])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[23], nxt_IBCPL_ERR_HDR_1_HDR[23], IBCPL_ERR_HDR_1.HDR[23])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[24], nxt_IBCPL_ERR_HDR_1_HDR[24], IBCPL_ERR_HDR_1.HDR[24])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[25], nxt_IBCPL_ERR_HDR_1_HDR[25], IBCPL_ERR_HDR_1.HDR[25])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[26], nxt_IBCPL_ERR_HDR_1_HDR[26], IBCPL_ERR_HDR_1.HDR[26])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[27], nxt_IBCPL_ERR_HDR_1_HDR[27], IBCPL_ERR_HDR_1.HDR[27])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[28], nxt_IBCPL_ERR_HDR_1_HDR[28], IBCPL_ERR_HDR_1.HDR[28])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[29], nxt_IBCPL_ERR_HDR_1_HDR[29], IBCPL_ERR_HDR_1.HDR[29])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[30], nxt_IBCPL_ERR_HDR_1_HDR[30], IBCPL_ERR_HDR_1.HDR[30])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_1_HDR[31], nxt_IBCPL_ERR_HDR_1_HDR[31], IBCPL_ERR_HDR_1.HDR[31])

//---------------------------------------------------------------------
// IBCPL_ERR_HDR_2 Address Decode
logic  addr_decode_IBCPL_ERR_HDR_2;
logic  write_req_IBCPL_ERR_HDR_2;
always_comb begin
   addr_decode_IBCPL_ERR_HDR_2 = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IBCPL_ERR_HDR_2_DECODE_ADDR) && req.valid ;
   write_req_IBCPL_ERR_HDR_2 = IsMEMWr && addr_decode_IBCPL_ERR_HDR_2 && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IBCPL_ERR_HDR_2.HDR x8 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [31:0] req_up_IBCPL_ERR_HDR_2_HDR;
always_comb begin
 req_up_IBCPL_ERR_HDR_2_HDR[7:0] = 
   {8{write_req_IBCPL_ERR_HDR_2 & be[0]}}
;
 req_up_IBCPL_ERR_HDR_2_HDR[15:8] = 
   {8{write_req_IBCPL_ERR_HDR_2 & be[1]}}
;
 req_up_IBCPL_ERR_HDR_2_HDR[23:16] = 
   {8{write_req_IBCPL_ERR_HDR_2 & be[2]}}
;
 req_up_IBCPL_ERR_HDR_2_HDR[31:24] = 
   {8{write_req_IBCPL_ERR_HDR_2 & be[3]}}
;
end

logic [31:0] clr_IBCPL_ERR_HDR_2_HDR;
always_comb begin
 clr_IBCPL_ERR_HDR_2_HDR = write_data[31:0] & req_up_IBCPL_ERR_HDR_2_HDR;

end
logic [31:0] swwr_IBCPL_ERR_HDR_2_HDR;
logic [31:0] sw_nxt_IBCPL_ERR_HDR_2_HDR;
always_comb begin
 swwr_IBCPL_ERR_HDR_2_HDR = clr_IBCPL_ERR_HDR_2_HDR;
 sw_nxt_IBCPL_ERR_HDR_2_HDR = {32{1'b0}};

end
logic [31:0] up_IBCPL_ERR_HDR_2_HDR;
logic [31:0] nxt_IBCPL_ERR_HDR_2_HDR;
always_comb begin
 up_IBCPL_ERR_HDR_2_HDR = 
   swwr_IBCPL_ERR_HDR_2_HDR | {32{load_IBCPL_ERR_HDR_2.HDR}};
end
always_comb begin
 nxt_IBCPL_ERR_HDR_2_HDR[0] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[0] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[0];
 nxt_IBCPL_ERR_HDR_2_HDR[1] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[1] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[1];
 nxt_IBCPL_ERR_HDR_2_HDR[2] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[2] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[2];
 nxt_IBCPL_ERR_HDR_2_HDR[3] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[3] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[3];
 nxt_IBCPL_ERR_HDR_2_HDR[4] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[4] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[4];
 nxt_IBCPL_ERR_HDR_2_HDR[5] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[5] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[5];
 nxt_IBCPL_ERR_HDR_2_HDR[6] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[6] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[6];
 nxt_IBCPL_ERR_HDR_2_HDR[7] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[7] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[7];
 nxt_IBCPL_ERR_HDR_2_HDR[8] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[8] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[8];
 nxt_IBCPL_ERR_HDR_2_HDR[9] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[9] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[9];
 nxt_IBCPL_ERR_HDR_2_HDR[10] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[10] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[10];
 nxt_IBCPL_ERR_HDR_2_HDR[11] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[11] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[11];
 nxt_IBCPL_ERR_HDR_2_HDR[12] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[12] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[12];
 nxt_IBCPL_ERR_HDR_2_HDR[13] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[13] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[13];
 nxt_IBCPL_ERR_HDR_2_HDR[14] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[14] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[14];
 nxt_IBCPL_ERR_HDR_2_HDR[15] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[15] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[15];
 nxt_IBCPL_ERR_HDR_2_HDR[16] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[16] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[16];
 nxt_IBCPL_ERR_HDR_2_HDR[17] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[17] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[17];
 nxt_IBCPL_ERR_HDR_2_HDR[18] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[18] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[18];
 nxt_IBCPL_ERR_HDR_2_HDR[19] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[19] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[19];
 nxt_IBCPL_ERR_HDR_2_HDR[20] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[20] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[20];
 nxt_IBCPL_ERR_HDR_2_HDR[21] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[21] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[21];
 nxt_IBCPL_ERR_HDR_2_HDR[22] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[22] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[22];
 nxt_IBCPL_ERR_HDR_2_HDR[23] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[23] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[23];
 nxt_IBCPL_ERR_HDR_2_HDR[24] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[24] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[24];
 nxt_IBCPL_ERR_HDR_2_HDR[25] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[25] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[25];
 nxt_IBCPL_ERR_HDR_2_HDR[26] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[26] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[26];
 nxt_IBCPL_ERR_HDR_2_HDR[27] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[27] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[27];
 nxt_IBCPL_ERR_HDR_2_HDR[28] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[28] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[28];
 nxt_IBCPL_ERR_HDR_2_HDR[29] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[29] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[29];
 nxt_IBCPL_ERR_HDR_2_HDR[30] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[30] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[30];
 nxt_IBCPL_ERR_HDR_2_HDR[31] = 
    load_IBCPL_ERR_HDR_2.HDR ?
    new_IBCPL_ERR_HDR_2.HDR[31] :
    sw_nxt_IBCPL_ERR_HDR_2_HDR[31];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[0], nxt_IBCPL_ERR_HDR_2_HDR[0], IBCPL_ERR_HDR_2.HDR[0])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[1], nxt_IBCPL_ERR_HDR_2_HDR[1], IBCPL_ERR_HDR_2.HDR[1])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[2], nxt_IBCPL_ERR_HDR_2_HDR[2], IBCPL_ERR_HDR_2.HDR[2])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[3], nxt_IBCPL_ERR_HDR_2_HDR[3], IBCPL_ERR_HDR_2.HDR[3])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[4], nxt_IBCPL_ERR_HDR_2_HDR[4], IBCPL_ERR_HDR_2.HDR[4])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[5], nxt_IBCPL_ERR_HDR_2_HDR[5], IBCPL_ERR_HDR_2.HDR[5])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[6], nxt_IBCPL_ERR_HDR_2_HDR[6], IBCPL_ERR_HDR_2.HDR[6])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[7], nxt_IBCPL_ERR_HDR_2_HDR[7], IBCPL_ERR_HDR_2.HDR[7])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[8], nxt_IBCPL_ERR_HDR_2_HDR[8], IBCPL_ERR_HDR_2.HDR[8])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[9], nxt_IBCPL_ERR_HDR_2_HDR[9], IBCPL_ERR_HDR_2.HDR[9])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[10], nxt_IBCPL_ERR_HDR_2_HDR[10], IBCPL_ERR_HDR_2.HDR[10])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[11], nxt_IBCPL_ERR_HDR_2_HDR[11], IBCPL_ERR_HDR_2.HDR[11])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[12], nxt_IBCPL_ERR_HDR_2_HDR[12], IBCPL_ERR_HDR_2.HDR[12])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[13], nxt_IBCPL_ERR_HDR_2_HDR[13], IBCPL_ERR_HDR_2.HDR[13])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[14], nxt_IBCPL_ERR_HDR_2_HDR[14], IBCPL_ERR_HDR_2.HDR[14])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[15], nxt_IBCPL_ERR_HDR_2_HDR[15], IBCPL_ERR_HDR_2.HDR[15])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[16], nxt_IBCPL_ERR_HDR_2_HDR[16], IBCPL_ERR_HDR_2.HDR[16])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[17], nxt_IBCPL_ERR_HDR_2_HDR[17], IBCPL_ERR_HDR_2.HDR[17])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[18], nxt_IBCPL_ERR_HDR_2_HDR[18], IBCPL_ERR_HDR_2.HDR[18])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[19], nxt_IBCPL_ERR_HDR_2_HDR[19], IBCPL_ERR_HDR_2.HDR[19])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[20], nxt_IBCPL_ERR_HDR_2_HDR[20], IBCPL_ERR_HDR_2.HDR[20])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[21], nxt_IBCPL_ERR_HDR_2_HDR[21], IBCPL_ERR_HDR_2.HDR[21])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[22], nxt_IBCPL_ERR_HDR_2_HDR[22], IBCPL_ERR_HDR_2.HDR[22])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[23], nxt_IBCPL_ERR_HDR_2_HDR[23], IBCPL_ERR_HDR_2.HDR[23])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[24], nxt_IBCPL_ERR_HDR_2_HDR[24], IBCPL_ERR_HDR_2.HDR[24])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[25], nxt_IBCPL_ERR_HDR_2_HDR[25], IBCPL_ERR_HDR_2.HDR[25])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[26], nxt_IBCPL_ERR_HDR_2_HDR[26], IBCPL_ERR_HDR_2.HDR[26])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[27], nxt_IBCPL_ERR_HDR_2_HDR[27], IBCPL_ERR_HDR_2.HDR[27])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[28], nxt_IBCPL_ERR_HDR_2_HDR[28], IBCPL_ERR_HDR_2.HDR[28])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[29], nxt_IBCPL_ERR_HDR_2_HDR[29], IBCPL_ERR_HDR_2.HDR[29])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[30], nxt_IBCPL_ERR_HDR_2_HDR[30], IBCPL_ERR_HDR_2.HDR[30])
`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_ERR_HDR_2_HDR[31], nxt_IBCPL_ERR_HDR_2_HDR[31], IBCPL_ERR_HDR_2.HDR[31])

//---------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS Address Decode
logic  addr_decode_RI_PHDR_FIFO_STATUS;
logic  write_req_RI_PHDR_FIFO_STATUS;
always_comb begin
   addr_decode_RI_PHDR_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_PHDR_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_RI_PHDR_FIFO_STATUS = IsMEMWr && addr_decode_RI_PHDR_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PHDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_RI_PHDR_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_RI_PHDR_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_PHDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_RI_PHDR_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_RI_PHDR_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_RI_PHDR_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_RI_PHDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_RI_PHDR_FIFO_STATUS_UNDFLOW = clr_RI_PHDR_FIFO_STATUS_UNDFLOW;
 sw_nxt_RI_PHDR_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_RI_PHDR_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_RI_PHDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_RI_PHDR_FIFO_STATUS_UNDFLOW = 
   swwr_RI_PHDR_FIFO_STATUS_UNDFLOW | {1{load_RI_PHDR_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_RI_PHDR_FIFO_STATUS_UNDFLOW[0] = 
    load_RI_PHDR_FIFO_STATUS.UNDFLOW ?
    new_RI_PHDR_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_RI_PHDR_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PHDR_FIFO_STATUS_UNDFLOW[0], nxt_RI_PHDR_FIFO_STATUS_UNDFLOW[0], RI_PHDR_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PHDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_RI_PHDR_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_RI_PHDR_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_PHDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_RI_PHDR_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_RI_PHDR_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_RI_PHDR_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_RI_PHDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_RI_PHDR_FIFO_STATUS_OVRFLOW = clr_RI_PHDR_FIFO_STATUS_OVRFLOW;
 sw_nxt_RI_PHDR_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_RI_PHDR_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_RI_PHDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_RI_PHDR_FIFO_STATUS_OVRFLOW = 
   swwr_RI_PHDR_FIFO_STATUS_OVRFLOW | {1{load_RI_PHDR_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_RI_PHDR_FIFO_STATUS_OVRFLOW[0] = 
    load_RI_PHDR_FIFO_STATUS.OVRFLOW ?
    new_RI_PHDR_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_RI_PHDR_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PHDR_FIFO_STATUS_OVRFLOW[0], nxt_RI_PHDR_FIFO_STATUS_OVRFLOW[0], RI_PHDR_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign RI_PHDR_FIFO_STATUS.RSVD32 = new_RI_PHDR_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign RI_PHDR_FIFO_STATUS.EMPTY = new_RI_PHDR_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign RI_PHDR_FIFO_STATUS.RSVD5 = new_RI_PHDR_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign RI_PHDR_FIFO_STATUS.AFULL = new_RI_PHDR_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign RI_PHDR_FIFO_STATUS.FULL = new_RI_PHDR_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// RI_PHDR_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign RI_PHDR_FIFO_STATUS.DEPTH = new_RI_PHDR_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS Address Decode
logic  addr_decode_RI_PDATA_FIFO_STATUS;
logic  write_req_RI_PDATA_FIFO_STATUS;
always_comb begin
   addr_decode_RI_PDATA_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_PDATA_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_RI_PDATA_FIFO_STATUS = IsMEMWr && addr_decode_RI_PDATA_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PDATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_RI_PDATA_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_RI_PDATA_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_PDATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_RI_PDATA_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_RI_PDATA_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_RI_PDATA_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_RI_PDATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_RI_PDATA_FIFO_STATUS_UNDFLOW = clr_RI_PDATA_FIFO_STATUS_UNDFLOW;
 sw_nxt_RI_PDATA_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_RI_PDATA_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_RI_PDATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_RI_PDATA_FIFO_STATUS_UNDFLOW = 
   swwr_RI_PDATA_FIFO_STATUS_UNDFLOW | {1{load_RI_PDATA_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_RI_PDATA_FIFO_STATUS_UNDFLOW[0] = 
    load_RI_PDATA_FIFO_STATUS.UNDFLOW ?
    new_RI_PDATA_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_RI_PDATA_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PDATA_FIFO_STATUS_UNDFLOW[0], nxt_RI_PDATA_FIFO_STATUS_UNDFLOW[0], RI_PDATA_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_PDATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_RI_PDATA_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_RI_PDATA_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_PDATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_RI_PDATA_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_RI_PDATA_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_RI_PDATA_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_RI_PDATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_RI_PDATA_FIFO_STATUS_OVRFLOW = clr_RI_PDATA_FIFO_STATUS_OVRFLOW;
 sw_nxt_RI_PDATA_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_RI_PDATA_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_RI_PDATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_RI_PDATA_FIFO_STATUS_OVRFLOW = 
   swwr_RI_PDATA_FIFO_STATUS_OVRFLOW | {1{load_RI_PDATA_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_RI_PDATA_FIFO_STATUS_OVRFLOW[0] = 
    load_RI_PDATA_FIFO_STATUS.OVRFLOW ?
    new_RI_PDATA_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_RI_PDATA_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_PDATA_FIFO_STATUS_OVRFLOW[0], nxt_RI_PDATA_FIFO_STATUS_OVRFLOW[0], RI_PDATA_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign RI_PDATA_FIFO_STATUS.RSVD32 = new_RI_PDATA_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign RI_PDATA_FIFO_STATUS.EMPTY = new_RI_PDATA_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign RI_PDATA_FIFO_STATUS.RSVD5 = new_RI_PDATA_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign RI_PDATA_FIFO_STATUS.AFULL = new_RI_PDATA_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign RI_PDATA_FIFO_STATUS.FULL = new_RI_PDATA_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// RI_PDATA_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign RI_PDATA_FIFO_STATUS.DEPTH = new_RI_PDATA_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS Address Decode
logic  addr_decode_RI_NPHDR_FIFO_STATUS;
logic  write_req_RI_NPHDR_FIFO_STATUS;
always_comb begin
   addr_decode_RI_NPHDR_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_NPHDR_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_RI_NPHDR_FIFO_STATUS = IsMEMWr && addr_decode_RI_NPHDR_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_NPHDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_RI_NPHDR_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_RI_NPHDR_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_NPHDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_RI_NPHDR_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_RI_NPHDR_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_RI_NPHDR_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_RI_NPHDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_RI_NPHDR_FIFO_STATUS_UNDFLOW = clr_RI_NPHDR_FIFO_STATUS_UNDFLOW;
 sw_nxt_RI_NPHDR_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_RI_NPHDR_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_RI_NPHDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_RI_NPHDR_FIFO_STATUS_UNDFLOW = 
   swwr_RI_NPHDR_FIFO_STATUS_UNDFLOW | {1{load_RI_NPHDR_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_RI_NPHDR_FIFO_STATUS_UNDFLOW[0] = 
    load_RI_NPHDR_FIFO_STATUS.UNDFLOW ?
    new_RI_NPHDR_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_RI_NPHDR_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_NPHDR_FIFO_STATUS_UNDFLOW[0], nxt_RI_NPHDR_FIFO_STATUS_UNDFLOW[0], RI_NPHDR_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_NPHDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_RI_NPHDR_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_RI_NPHDR_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_NPHDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_RI_NPHDR_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_RI_NPHDR_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_RI_NPHDR_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_RI_NPHDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_RI_NPHDR_FIFO_STATUS_OVRFLOW = clr_RI_NPHDR_FIFO_STATUS_OVRFLOW;
 sw_nxt_RI_NPHDR_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_RI_NPHDR_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_RI_NPHDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_RI_NPHDR_FIFO_STATUS_OVRFLOW = 
   swwr_RI_NPHDR_FIFO_STATUS_OVRFLOW | {1{load_RI_NPHDR_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_RI_NPHDR_FIFO_STATUS_OVRFLOW[0] = 
    load_RI_NPHDR_FIFO_STATUS.OVRFLOW ?
    new_RI_NPHDR_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_RI_NPHDR_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_NPHDR_FIFO_STATUS_OVRFLOW[0], nxt_RI_NPHDR_FIFO_STATUS_OVRFLOW[0], RI_NPHDR_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign RI_NPHDR_FIFO_STATUS.RSVD32 = new_RI_NPHDR_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign RI_NPHDR_FIFO_STATUS.EMPTY = new_RI_NPHDR_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign RI_NPHDR_FIFO_STATUS.RSVD5 = new_RI_NPHDR_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign RI_NPHDR_FIFO_STATUS.AFULL = new_RI_NPHDR_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign RI_NPHDR_FIFO_STATUS.FULL = new_RI_NPHDR_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// RI_NPHDR_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign RI_NPHDR_FIFO_STATUS.DEPTH = new_RI_NPHDR_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS Address Decode
logic  addr_decode_RI_NPDATA_FIFO_STATUS;
logic  write_req_RI_NPDATA_FIFO_STATUS;
always_comb begin
   addr_decode_RI_NPDATA_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_NPDATA_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_RI_NPDATA_FIFO_STATUS = IsMEMWr && addr_decode_RI_NPDATA_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_NPDATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_RI_NPDATA_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_RI_NPDATA_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_NPDATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_RI_NPDATA_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_RI_NPDATA_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_RI_NPDATA_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_RI_NPDATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_RI_NPDATA_FIFO_STATUS_UNDFLOW = clr_RI_NPDATA_FIFO_STATUS_UNDFLOW;
 sw_nxt_RI_NPDATA_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_RI_NPDATA_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_RI_NPDATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_RI_NPDATA_FIFO_STATUS_UNDFLOW = 
   swwr_RI_NPDATA_FIFO_STATUS_UNDFLOW | {1{load_RI_NPDATA_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_RI_NPDATA_FIFO_STATUS_UNDFLOW[0] = 
    load_RI_NPDATA_FIFO_STATUS.UNDFLOW ?
    new_RI_NPDATA_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_RI_NPDATA_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_NPDATA_FIFO_STATUS_UNDFLOW[0], nxt_RI_NPDATA_FIFO_STATUS_UNDFLOW[0], RI_NPDATA_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_NPDATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_RI_NPDATA_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_RI_NPDATA_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_NPDATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_RI_NPDATA_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_RI_NPDATA_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_RI_NPDATA_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_RI_NPDATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_RI_NPDATA_FIFO_STATUS_OVRFLOW = clr_RI_NPDATA_FIFO_STATUS_OVRFLOW;
 sw_nxt_RI_NPDATA_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_RI_NPDATA_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_RI_NPDATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_RI_NPDATA_FIFO_STATUS_OVRFLOW = 
   swwr_RI_NPDATA_FIFO_STATUS_OVRFLOW | {1{load_RI_NPDATA_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_RI_NPDATA_FIFO_STATUS_OVRFLOW[0] = 
    load_RI_NPDATA_FIFO_STATUS.OVRFLOW ?
    new_RI_NPDATA_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_RI_NPDATA_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_NPDATA_FIFO_STATUS_OVRFLOW[0], nxt_RI_NPDATA_FIFO_STATUS_OVRFLOW[0], RI_NPDATA_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign RI_NPDATA_FIFO_STATUS.RSVD32 = new_RI_NPDATA_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign RI_NPDATA_FIFO_STATUS.EMPTY = new_RI_NPDATA_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign RI_NPDATA_FIFO_STATUS.RSVD5 = new_RI_NPDATA_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign RI_NPDATA_FIFO_STATUS.AFULL = new_RI_NPDATA_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign RI_NPDATA_FIFO_STATUS.FULL = new_RI_NPDATA_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// RI_NPDATA_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign RI_NPDATA_FIFO_STATUS.DEPTH = new_RI_NPDATA_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS Address Decode
logic  addr_decode_RI_IOQ_FIFO_STATUS;
logic  write_req_RI_IOQ_FIFO_STATUS;
always_comb begin
   addr_decode_RI_IOQ_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == RI_IOQ_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_RI_IOQ_FIFO_STATUS = IsMEMWr && addr_decode_RI_IOQ_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_IOQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_RI_IOQ_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_RI_IOQ_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_IOQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_RI_IOQ_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_RI_IOQ_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_RI_IOQ_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_RI_IOQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_RI_IOQ_FIFO_STATUS_UNDFLOW = clr_RI_IOQ_FIFO_STATUS_UNDFLOW;
 sw_nxt_RI_IOQ_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_RI_IOQ_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_RI_IOQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_RI_IOQ_FIFO_STATUS_UNDFLOW = 
   swwr_RI_IOQ_FIFO_STATUS_UNDFLOW | {1{load_RI_IOQ_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_RI_IOQ_FIFO_STATUS_UNDFLOW[0] = 
    load_RI_IOQ_FIFO_STATUS.UNDFLOW ?
    new_RI_IOQ_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_RI_IOQ_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_IOQ_FIFO_STATUS_UNDFLOW[0], nxt_RI_IOQ_FIFO_STATUS_UNDFLOW[0], RI_IOQ_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_RI_IOQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_RI_IOQ_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_RI_IOQ_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_RI_IOQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_RI_IOQ_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_RI_IOQ_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_RI_IOQ_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_RI_IOQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_RI_IOQ_FIFO_STATUS_OVRFLOW = clr_RI_IOQ_FIFO_STATUS_OVRFLOW;
 sw_nxt_RI_IOQ_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_RI_IOQ_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_RI_IOQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_RI_IOQ_FIFO_STATUS_OVRFLOW = 
   swwr_RI_IOQ_FIFO_STATUS_OVRFLOW | {1{load_RI_IOQ_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_RI_IOQ_FIFO_STATUS_OVRFLOW[0] = 
    load_RI_IOQ_FIFO_STATUS.OVRFLOW ?
    new_RI_IOQ_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_RI_IOQ_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_RI_IOQ_FIFO_STATUS_OVRFLOW[0], nxt_RI_IOQ_FIFO_STATUS_OVRFLOW[0], RI_IOQ_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign RI_IOQ_FIFO_STATUS.RSVD32 = new_RI_IOQ_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign RI_IOQ_FIFO_STATUS.EMPTY = new_RI_IOQ_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign RI_IOQ_FIFO_STATUS.RSVD5 = new_RI_IOQ_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign RI_IOQ_FIFO_STATUS.AFULL = new_RI_IOQ_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign RI_IOQ_FIFO_STATUS.FULL = new_RI_IOQ_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// RI_IOQ_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign RI_IOQ_FIFO_STATUS.DEPTH = new_RI_IOQ_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS Address Decode
logic  addr_decode_IBCPL_DATA_FIFO_STATUS;
logic  write_req_IBCPL_DATA_FIFO_STATUS;
always_comb begin
   addr_decode_IBCPL_DATA_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IBCPL_DATA_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_IBCPL_DATA_FIFO_STATUS = IsMEMWr && addr_decode_IBCPL_DATA_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_IBCPL_DATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_IBCPL_DATA_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_IBCPL_DATA_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_IBCPL_DATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_IBCPL_DATA_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_IBCPL_DATA_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_IBCPL_DATA_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_IBCPL_DATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_IBCPL_DATA_FIFO_STATUS_UNDFLOW = clr_IBCPL_DATA_FIFO_STATUS_UNDFLOW;
 sw_nxt_IBCPL_DATA_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_IBCPL_DATA_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_IBCPL_DATA_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_IBCPL_DATA_FIFO_STATUS_UNDFLOW = 
   swwr_IBCPL_DATA_FIFO_STATUS_UNDFLOW | {1{load_IBCPL_DATA_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_IBCPL_DATA_FIFO_STATUS_UNDFLOW[0] = 
    load_IBCPL_DATA_FIFO_STATUS.UNDFLOW ?
    new_IBCPL_DATA_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_IBCPL_DATA_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_DATA_FIFO_STATUS_UNDFLOW[0], nxt_IBCPL_DATA_FIFO_STATUS_UNDFLOW[0], IBCPL_DATA_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_IBCPL_DATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_IBCPL_DATA_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_IBCPL_DATA_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_IBCPL_DATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_IBCPL_DATA_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_IBCPL_DATA_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_IBCPL_DATA_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_IBCPL_DATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_IBCPL_DATA_FIFO_STATUS_OVRFLOW = clr_IBCPL_DATA_FIFO_STATUS_OVRFLOW;
 sw_nxt_IBCPL_DATA_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_IBCPL_DATA_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_IBCPL_DATA_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_IBCPL_DATA_FIFO_STATUS_OVRFLOW = 
   swwr_IBCPL_DATA_FIFO_STATUS_OVRFLOW | {1{load_IBCPL_DATA_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_IBCPL_DATA_FIFO_STATUS_OVRFLOW[0] = 
    load_IBCPL_DATA_FIFO_STATUS.OVRFLOW ?
    new_IBCPL_DATA_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_IBCPL_DATA_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_DATA_FIFO_STATUS_OVRFLOW[0], nxt_IBCPL_DATA_FIFO_STATUS_OVRFLOW[0], IBCPL_DATA_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign IBCPL_DATA_FIFO_STATUS.RSVD32 = new_IBCPL_DATA_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign IBCPL_DATA_FIFO_STATUS.EMPTY = new_IBCPL_DATA_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign IBCPL_DATA_FIFO_STATUS.RSVD5 = new_IBCPL_DATA_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign IBCPL_DATA_FIFO_STATUS.AFULL = new_IBCPL_DATA_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign IBCPL_DATA_FIFO_STATUS.FULL = new_IBCPL_DATA_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// IBCPL_DATA_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign IBCPL_DATA_FIFO_STATUS.DEPTH = new_IBCPL_DATA_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// OBCPL_FIFO_STATUS Address Decode
logic  addr_decode_OBCPL_FIFO_STATUS;
logic  write_req_OBCPL_FIFO_STATUS;
always_comb begin
   addr_decode_OBCPL_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == OBCPL_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_OBCPL_FIFO_STATUS = IsMEMWr && addr_decode_OBCPL_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// OBCPL_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_OBCPL_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_OBCPL_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_OBCPL_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_OBCPL_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_OBCPL_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_OBCPL_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_OBCPL_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_OBCPL_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_OBCPL_FIFO_STATUS_UNDFLOW = clr_OBCPL_FIFO_STATUS_UNDFLOW;
 sw_nxt_OBCPL_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_OBCPL_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_OBCPL_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_OBCPL_FIFO_STATUS_UNDFLOW = 
   swwr_OBCPL_FIFO_STATUS_UNDFLOW | {1{load_OBCPL_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_OBCPL_FIFO_STATUS_UNDFLOW[0] = 
    load_OBCPL_FIFO_STATUS.UNDFLOW ?
    new_OBCPL_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_OBCPL_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_OBCPL_FIFO_STATUS_UNDFLOW[0], nxt_OBCPL_FIFO_STATUS_UNDFLOW[0], OBCPL_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// OBCPL_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_OBCPL_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_OBCPL_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_OBCPL_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_OBCPL_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_OBCPL_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_OBCPL_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_OBCPL_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_OBCPL_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_OBCPL_FIFO_STATUS_OVRFLOW = clr_OBCPL_FIFO_STATUS_OVRFLOW;
 sw_nxt_OBCPL_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_OBCPL_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_OBCPL_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_OBCPL_FIFO_STATUS_OVRFLOW = 
   swwr_OBCPL_FIFO_STATUS_OVRFLOW | {1{load_OBCPL_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_OBCPL_FIFO_STATUS_OVRFLOW[0] = 
    load_OBCPL_FIFO_STATUS.OVRFLOW ?
    new_OBCPL_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_OBCPL_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_OBCPL_FIFO_STATUS_OVRFLOW[0], nxt_OBCPL_FIFO_STATUS_OVRFLOW[0], OBCPL_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// OBCPL_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign OBCPL_FIFO_STATUS.RSVD32 = new_OBCPL_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// OBCPL_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign OBCPL_FIFO_STATUS.EMPTY = new_OBCPL_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// OBCPL_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign OBCPL_FIFO_STATUS.RSVD5 = new_OBCPL_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// OBCPL_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign OBCPL_FIFO_STATUS.AFULL = new_OBCPL_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// OBCPL_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign OBCPL_FIFO_STATUS.FULL = new_OBCPL_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// OBCPL_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign OBCPL_FIFO_STATUS.DEPTH = new_OBCPL_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS Address Decode
logic  addr_decode_IBCPL_HDR_FIFO_STATUS;
logic  write_req_IBCPL_HDR_FIFO_STATUS;
always_comb begin
   addr_decode_IBCPL_HDR_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IBCPL_HDR_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_IBCPL_HDR_FIFO_STATUS = IsMEMWr && addr_decode_IBCPL_HDR_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_IBCPL_HDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_IBCPL_HDR_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_IBCPL_HDR_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_IBCPL_HDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_IBCPL_HDR_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_IBCPL_HDR_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_IBCPL_HDR_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_IBCPL_HDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_IBCPL_HDR_FIFO_STATUS_UNDFLOW = clr_IBCPL_HDR_FIFO_STATUS_UNDFLOW;
 sw_nxt_IBCPL_HDR_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_IBCPL_HDR_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_IBCPL_HDR_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_IBCPL_HDR_FIFO_STATUS_UNDFLOW = 
   swwr_IBCPL_HDR_FIFO_STATUS_UNDFLOW | {1{load_IBCPL_HDR_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_IBCPL_HDR_FIFO_STATUS_UNDFLOW[0] = 
    load_IBCPL_HDR_FIFO_STATUS.UNDFLOW ?
    new_IBCPL_HDR_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_IBCPL_HDR_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_HDR_FIFO_STATUS_UNDFLOW[0], nxt_IBCPL_HDR_FIFO_STATUS_UNDFLOW[0], IBCPL_HDR_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_IBCPL_HDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_IBCPL_HDR_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_IBCPL_HDR_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_IBCPL_HDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_IBCPL_HDR_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_IBCPL_HDR_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_IBCPL_HDR_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_IBCPL_HDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_IBCPL_HDR_FIFO_STATUS_OVRFLOW = clr_IBCPL_HDR_FIFO_STATUS_OVRFLOW;
 sw_nxt_IBCPL_HDR_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_IBCPL_HDR_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_IBCPL_HDR_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_IBCPL_HDR_FIFO_STATUS_OVRFLOW = 
   swwr_IBCPL_HDR_FIFO_STATUS_OVRFLOW | {1{load_IBCPL_HDR_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_IBCPL_HDR_FIFO_STATUS_OVRFLOW[0] = 
    load_IBCPL_HDR_FIFO_STATUS.OVRFLOW ?
    new_IBCPL_HDR_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_IBCPL_HDR_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_IBCPL_HDR_FIFO_STATUS_OVRFLOW[0], nxt_IBCPL_HDR_FIFO_STATUS_OVRFLOW[0], IBCPL_HDR_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign IBCPL_HDR_FIFO_STATUS.RSVD32 = new_IBCPL_HDR_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign IBCPL_HDR_FIFO_STATUS.EMPTY = new_IBCPL_HDR_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign IBCPL_HDR_FIFO_STATUS.RSVD5 = new_IBCPL_HDR_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign IBCPL_HDR_FIFO_STATUS.AFULL = new_IBCPL_HDR_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign IBCPL_HDR_FIFO_STATUS.FULL = new_IBCPL_HDR_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// IBCPL_HDR_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign IBCPL_HDR_FIFO_STATUS.DEPTH = new_IBCPL_HDR_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS Address Decode
logic  addr_decode_P_RL_CQ_FIFO_STATUS;
logic  write_req_P_RL_CQ_FIFO_STATUS;
always_comb begin
   addr_decode_P_RL_CQ_FIFO_STATUS = (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == P_RL_CQ_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_P_RL_CQ_FIFO_STATUS = IsMEMWr && addr_decode_P_RL_CQ_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_P_RL_CQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_P_RL_CQ_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_P_RL_CQ_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_P_RL_CQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_P_RL_CQ_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_P_RL_CQ_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_P_RL_CQ_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_P_RL_CQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_P_RL_CQ_FIFO_STATUS_UNDFLOW = clr_P_RL_CQ_FIFO_STATUS_UNDFLOW;
 sw_nxt_P_RL_CQ_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_P_RL_CQ_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_P_RL_CQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_P_RL_CQ_FIFO_STATUS_UNDFLOW = 
   swwr_P_RL_CQ_FIFO_STATUS_UNDFLOW | {1{load_P_RL_CQ_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_P_RL_CQ_FIFO_STATUS_UNDFLOW[0] = 
    load_P_RL_CQ_FIFO_STATUS.UNDFLOW ?
    new_P_RL_CQ_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_P_RL_CQ_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_P_RL_CQ_FIFO_STATUS_UNDFLOW[0], nxt_P_RL_CQ_FIFO_STATUS_UNDFLOW[0], P_RL_CQ_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_P_RL_CQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_P_RL_CQ_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_P_RL_CQ_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_P_RL_CQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_P_RL_CQ_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_P_RL_CQ_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_P_RL_CQ_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_P_RL_CQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_P_RL_CQ_FIFO_STATUS_OVRFLOW = clr_P_RL_CQ_FIFO_STATUS_OVRFLOW;
 sw_nxt_P_RL_CQ_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_P_RL_CQ_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_P_RL_CQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_P_RL_CQ_FIFO_STATUS_OVRFLOW = 
   swwr_P_RL_CQ_FIFO_STATUS_OVRFLOW | {1{load_P_RL_CQ_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_P_RL_CQ_FIFO_STATUS_OVRFLOW[0] = 
    load_P_RL_CQ_FIFO_STATUS.OVRFLOW ?
    new_P_RL_CQ_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_P_RL_CQ_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SIF_CSR_EN_FF(rtl_clk, hqm_csr_mmio_rst_n, 1'h0, up_P_RL_CQ_FIFO_STATUS_OVRFLOW[0], nxt_P_RL_CQ_FIFO_STATUS_OVRFLOW[0], P_RL_CQ_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign P_RL_CQ_FIFO_STATUS.RSVD32 = new_P_RL_CQ_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign P_RL_CQ_FIFO_STATUS.EMPTY = new_P_RL_CQ_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign P_RL_CQ_FIFO_STATUS.RSVD5 = new_P_RL_CQ_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign P_RL_CQ_FIFO_STATUS.AFULL = new_P_RL_CQ_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign P_RL_CQ_FIFO_STATUS.FULL = new_P_RL_CQ_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// P_RL_CQ_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign P_RL_CQ_FIFO_STATUS.DEPTH = new_P_RL_CQ_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// TGT_INIT_HCREDITS Address Decode
// ----------------------------------------------------------------------
// TGT_INIT_HCREDITS.INIT_HCREDITS_P x8 RO/V, using RO/V template.
assign TGT_INIT_HCREDITS.INIT_HCREDITS_P = new_TGT_INIT_HCREDITS.INIT_HCREDITS_P;



// ----------------------------------------------------------------------
// TGT_INIT_HCREDITS.INIT_HCREDITS_NP x8 RO/V, using RO/V template.
assign TGT_INIT_HCREDITS.INIT_HCREDITS_NP = new_TGT_INIT_HCREDITS.INIT_HCREDITS_NP;



// ----------------------------------------------------------------------
// TGT_INIT_HCREDITS.INIT_HCREDITS_CPL x8 RO/V, using RO/V template.
assign TGT_INIT_HCREDITS.INIT_HCREDITS_CPL = new_TGT_INIT_HCREDITS.INIT_HCREDITS_CPL;




//---------------------------------------------------------------------
// TGT_INIT_DCREDITS Address Decode
// ----------------------------------------------------------------------
// TGT_INIT_DCREDITS.INIT_DCREDITS_P x8 RO/V, using RO/V template.
assign TGT_INIT_DCREDITS.INIT_DCREDITS_P = new_TGT_INIT_DCREDITS.INIT_DCREDITS_P;



// ----------------------------------------------------------------------
// TGT_INIT_DCREDITS.INIT_DCREDITS_NP x8 RO/V, using RO/V template.
assign TGT_INIT_DCREDITS.INIT_DCREDITS_NP = new_TGT_INIT_DCREDITS.INIT_DCREDITS_NP;



// ----------------------------------------------------------------------
// TGT_INIT_DCREDITS.INIT_DCREDITS_CPL x8 RO/V, using RO/V template.
assign TGT_INIT_DCREDITS.INIT_DCREDITS_CPL = new_TGT_INIT_DCREDITS.INIT_DCREDITS_CPL;




//---------------------------------------------------------------------
// TGT_REM_HCREDITS Address Decode
// ----------------------------------------------------------------------
// TGT_REM_HCREDITS.REM_HCREDITS_P x8 RO/V, using RO/V template.
assign TGT_REM_HCREDITS.REM_HCREDITS_P = new_TGT_REM_HCREDITS.REM_HCREDITS_P;



// ----------------------------------------------------------------------
// TGT_REM_HCREDITS.REM_HCREDITS_NP x8 RO/V, using RO/V template.
assign TGT_REM_HCREDITS.REM_HCREDITS_NP = new_TGT_REM_HCREDITS.REM_HCREDITS_NP;



// ----------------------------------------------------------------------
// TGT_REM_HCREDITS.REM_HCREDITS_CPL x8 RO/V, using RO/V template.
assign TGT_REM_HCREDITS.REM_HCREDITS_CPL = new_TGT_REM_HCREDITS.REM_HCREDITS_CPL;




//---------------------------------------------------------------------
// TGT_REM_DCREDITS Address Decode
// ----------------------------------------------------------------------
// TGT_REM_DCREDITS.REM_DCREDITS_P x8 RO/V, using RO/V template.
assign TGT_REM_DCREDITS.REM_DCREDITS_P = new_TGT_REM_DCREDITS.REM_DCREDITS_P;



// ----------------------------------------------------------------------
// TGT_REM_DCREDITS.REM_DCREDITS_NP x8 RO/V, using RO/V template.
assign TGT_REM_DCREDITS.REM_DCREDITS_NP = new_TGT_REM_DCREDITS.REM_DCREDITS_NP;



// ----------------------------------------------------------------------
// TGT_REM_DCREDITS.REM_DCREDITS_CPL x8 RO/V, using RO/V template.
assign TGT_REM_DCREDITS.REM_DCREDITS_CPL = new_TGT_REM_DCREDITS.REM_DCREDITS_CPL;




//---------------------------------------------------------------------
// TGT_RET_HCREDITS Address Decode
// ----------------------------------------------------------------------
// TGT_RET_HCREDITS.RET_HCREDITS_P x8 RO/V, using RO/V template.
assign TGT_RET_HCREDITS.RET_HCREDITS_P = new_TGT_RET_HCREDITS.RET_HCREDITS_P;



// ----------------------------------------------------------------------
// TGT_RET_HCREDITS.RET_HCREDITS_NP x8 RO/V, using RO/V template.
assign TGT_RET_HCREDITS.RET_HCREDITS_NP = new_TGT_RET_HCREDITS.RET_HCREDITS_NP;



// ----------------------------------------------------------------------
// TGT_RET_HCREDITS.RET_HCREDITS_CPL x8 RO/V, using RO/V template.
assign TGT_RET_HCREDITS.RET_HCREDITS_CPL = new_TGT_RET_HCREDITS.RET_HCREDITS_CPL;




//---------------------------------------------------------------------
// TGT_RET_DCREDITS Address Decode
// ----------------------------------------------------------------------
// TGT_RET_DCREDITS.RET_DCREDITS_P x8 RO/V, using RO/V template.
assign TGT_RET_DCREDITS.RET_DCREDITS_P = new_TGT_RET_DCREDITS.RET_DCREDITS_P;



// ----------------------------------------------------------------------
// TGT_RET_DCREDITS.RET_DCREDITS_NP x8 RO/V, using RO/V template.
assign TGT_RET_DCREDITS.RET_DCREDITS_NP = new_TGT_RET_DCREDITS.RET_DCREDITS_NP;



// ----------------------------------------------------------------------
// TGT_RET_DCREDITS.RET_DCREDITS_CPL x8 RO/V, using RO/V template.
assign TGT_RET_DCREDITS.RET_DCREDITS_CPL = new_TGT_RET_DCREDITS.RET_DCREDITS_CPL;




// ----------------------------------------------------------------------
// AW_SMON_CONFIGURATION0 using HANDCODED_REG template.
logic addr_decode_AW_SMON_CONFIGURATION0;
logic write_req_AW_SMON_CONFIGURATION0;
logic read_req_AW_SMON_CONFIGURATION0;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?00,2'b00}: 
         addr_decode_AW_SMON_CONFIGURATION0 = req.valid;
      default: 
         addr_decode_AW_SMON_CONFIGURATION0 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_CONFIGURATION0 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_CONFIGURATION0  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_CONFIGURATION0  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_CONFIGURATION0  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_CONFIGURATION0 = {4{write_req_AW_SMON_CONFIGURATION0}} & req.be[3:0];
always_comb re_AW_SMON_CONFIGURATION0 = {4{read_req_AW_SMON_CONFIGURATION0}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_CONFIGURATION0 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_CONFIGURATION1 using HANDCODED_REG template.
logic addr_decode_AW_SMON_CONFIGURATION1;
logic write_req_AW_SMON_CONFIGURATION1;
logic read_req_AW_SMON_CONFIGURATION1;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?00,2'b01}: 
         addr_decode_AW_SMON_CONFIGURATION1 = req.valid;
      default: 
         addr_decode_AW_SMON_CONFIGURATION1 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_CONFIGURATION1 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_CONFIGURATION1  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_CONFIGURATION1  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_CONFIGURATION1  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_CONFIGURATION1 = {4{write_req_AW_SMON_CONFIGURATION1}} & req.be[3:0];
always_comb re_AW_SMON_CONFIGURATION1 = {4{read_req_AW_SMON_CONFIGURATION1}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_CONFIGURATION1 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_COMPARE0 using HANDCODED_REG template.
logic addr_decode_AW_SMON_COMPARE0;
logic write_req_AW_SMON_COMPARE0;
logic read_req_AW_SMON_COMPARE0;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?00,2'b10}: 
         addr_decode_AW_SMON_COMPARE0 = req.valid;
      default: 
         addr_decode_AW_SMON_COMPARE0 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_COMPARE0 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_COMPARE0  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_COMPARE0  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_COMPARE0  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_COMPARE0 = {4{write_req_AW_SMON_COMPARE0}} & req.be[3:0];
always_comb re_AW_SMON_COMPARE0 = {4{read_req_AW_SMON_COMPARE0}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_COMPARE0 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_COMPARE1 using HANDCODED_REG template.
logic addr_decode_AW_SMON_COMPARE1;
logic write_req_AW_SMON_COMPARE1;
logic read_req_AW_SMON_COMPARE1;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?00,2'b11}: 
         addr_decode_AW_SMON_COMPARE1 = req.valid;
      default: 
         addr_decode_AW_SMON_COMPARE1 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_COMPARE1 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_COMPARE1  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_COMPARE1  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_COMPARE1  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_COMPARE1 = {4{write_req_AW_SMON_COMPARE1}} & req.be[3:0];
always_comb re_AW_SMON_COMPARE1 = {4{read_req_AW_SMON_COMPARE1}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_COMPARE1 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_ACTIVITYCOUNTER0 using HANDCODED_REG template.
logic addr_decode_AW_SMON_ACTIVITYCOUNTER0;
logic write_req_AW_SMON_ACTIVITYCOUNTER0;
logic read_req_AW_SMON_ACTIVITYCOUNTER0;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?01,2'b00}: 
         addr_decode_AW_SMON_ACTIVITYCOUNTER0 = req.valid;
      default: 
         addr_decode_AW_SMON_ACTIVITYCOUNTER0 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_ACTIVITYCOUNTER0 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_ACTIVITYCOUNTER0  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_ACTIVITYCOUNTER0  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_ACTIVITYCOUNTER0  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_ACTIVITYCOUNTER0 = {4{write_req_AW_SMON_ACTIVITYCOUNTER0}} & req.be[3:0];
always_comb re_AW_SMON_ACTIVITYCOUNTER0 = {4{read_req_AW_SMON_ACTIVITYCOUNTER0}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER0 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_ACTIVITYCOUNTER1 using HANDCODED_REG template.
logic addr_decode_AW_SMON_ACTIVITYCOUNTER1;
logic write_req_AW_SMON_ACTIVITYCOUNTER1;
logic read_req_AW_SMON_ACTIVITYCOUNTER1;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?01,2'b01}: 
         addr_decode_AW_SMON_ACTIVITYCOUNTER1 = req.valid;
      default: 
         addr_decode_AW_SMON_ACTIVITYCOUNTER1 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_ACTIVITYCOUNTER1 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_ACTIVITYCOUNTER1  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_ACTIVITYCOUNTER1  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_ACTIVITYCOUNTER1  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_ACTIVITYCOUNTER1 = {4{write_req_AW_SMON_ACTIVITYCOUNTER1}} & req.be[3:0];
always_comb re_AW_SMON_ACTIVITYCOUNTER1 = {4{read_req_AW_SMON_ACTIVITYCOUNTER1}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER1 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_TIMER using HANDCODED_REG template.
logic addr_decode_AW_SMON_TIMER;
logic write_req_AW_SMON_TIMER;
logic read_req_AW_SMON_TIMER;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?01,2'b10}: 
         addr_decode_AW_SMON_TIMER = req.valid;
      default: 
         addr_decode_AW_SMON_TIMER = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_TIMER = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_TIMER  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_TIMER  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_TIMER  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_TIMER = {4{write_req_AW_SMON_TIMER}} & req.be[3:0];
always_comb re_AW_SMON_TIMER = {4{read_req_AW_SMON_TIMER}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_TIMER = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_MAXIMUM_TIMER using HANDCODED_REG template.
logic addr_decode_AW_SMON_MAXIMUM_TIMER;
logic write_req_AW_SMON_MAXIMUM_TIMER;
logic read_req_AW_SMON_MAXIMUM_TIMER;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?01,2'b11}: 
         addr_decode_AW_SMON_MAXIMUM_TIMER = req.valid;
      default: 
         addr_decode_AW_SMON_MAXIMUM_TIMER = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_MAXIMUM_TIMER = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_MAXIMUM_TIMER  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_MAXIMUM_TIMER  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_MAXIMUM_TIMER  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_MAXIMUM_TIMER = {4{write_req_AW_SMON_MAXIMUM_TIMER}} & req.be[3:0];
always_comb re_AW_SMON_MAXIMUM_TIMER = {4{read_req_AW_SMON_MAXIMUM_TIMER}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_MAXIMUM_TIMER = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_COMP_MASK0 using HANDCODED_REG template.
logic addr_decode_AW_SMON_COMP_MASK0;
logic write_req_AW_SMON_COMP_MASK0;
logic read_req_AW_SMON_COMP_MASK0;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?10,2'b00}: 
         addr_decode_AW_SMON_COMP_MASK0 = req.valid;
      default: 
         addr_decode_AW_SMON_COMP_MASK0 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_COMP_MASK0 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_COMP_MASK0  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_COMP_MASK0  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_COMP_MASK0  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_COMP_MASK0 = {4{write_req_AW_SMON_COMP_MASK0}} & req.be[3:0];
always_comb re_AW_SMON_COMP_MASK0 = {4{read_req_AW_SMON_COMP_MASK0}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_COMP_MASK0 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_COMP_MASK1 using HANDCODED_REG template.
logic addr_decode_AW_SMON_COMP_MASK1;
logic write_req_AW_SMON_COMP_MASK1;
logic read_req_AW_SMON_COMP_MASK1;

always_comb begin 
   unique casez (req_addr[HQM_SIF_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?10,2'b01}: 
         addr_decode_AW_SMON_COMP_MASK1 = req.valid;
      default: 
         addr_decode_AW_SMON_COMP_MASK1 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_COMP_MASK1 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_COMP_MASK1  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_COMP_MASK1  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_COMP_MASK1  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_COMP_MASK1 = {4{write_req_AW_SMON_COMP_MASK1}} & req.be[3:0];
always_comb re_AW_SMON_COMP_MASK1 = {4{read_req_AW_SMON_COMP_MASK1}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_COMP_MASK1 = req.data[31:0];


//---------------------------------------------------------------------
// HQM_PULLED_FUSES_0 Address Decode
// ----------------------------------------------------------------------
// HQM_PULLED_FUSES_0.FUSES x8 RO/V, using RO/V template.
assign HQM_PULLED_FUSES_0.FUSES = new_HQM_PULLED_FUSES_0.FUSES;



// Shared registers assignments


// end register logic section }

always_comb begin : MISS_VALID_BLOCK

   unique casez (req_opcode) 
      MRD: begin
         ack.read_valid = req_valid;
         ack.write_valid  = 1'b0; 
         ack.write_miss = ack.write_valid; 
         unique casez (case_req_addr_HQM_SIF_CSR_MEM) 
           HQM_CSR_CP_LO_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_CSR_CP_HI_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_CSR_RAC_LO_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_CSR_RAC_HI_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_CSR_WAC_LO_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_CSR_WAC_HI_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_VC_RXMAP_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_VC_TXMAP_DECODE_ADDR: ack.read_miss = 1'b0;
           DEVTLB_ATS_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_ALARM_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_PARITY_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_PARITY_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           DIR_CQ2TC_MAP_DECODE_ADDR: ack.read_miss = 1'b0;
           LDB_CQ2TC_MAP_DECODE_ADDR: ack.read_miss = 1'b0;
           INT2TC_MAP_DECODE_ADDR: ack.read_miss = 1'b0;
           CFG_UNIT_VERSION_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_0_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_1_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_2_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_3_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_4_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_5_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_6_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_7_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_8_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_9_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_10_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SIF_CNT_11_DECODE_ADDR: ack.read_miss = 1'b0;
           OBCPL_AFULL_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           PRIM_CDC_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           SIDE_CDC_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           IOSFP_CGCTL_DECODE_ADDR: ack.read_miss = 1'b0;
           IOSFS_CGCTL_DECODE_ADDR: ack.read_miss = 1'b0;
           PARITY_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           CFG_MASTER_TIMEOUT_DECODE_ADDR: ack.read_miss = 1'b0;
           MMIO_TIMEOUT_DECODE_ADDR: ack.read_miss = 1'b0;
           HCW_TIMEOUT_DECODE_ADDR: ack.read_miss = 1'b0;
           {44'h800103,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VISA_SW_CONTROL || ~(|re_VISA_SW_CONTROL)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VISA_SW_CONTROL;
           end
           CFG_PH_TRIGGER_ADDR_L_DECODE_ADDR: ack.read_miss = 1'b0;
           CFG_PH_TRIGGER_ADDR_U_DECODE_ADDR: ack.read_miss = 1'b0;
           CFG_PH_TRIGGER_MASK_L_DECODE_ADDR: ack.read_miss = 1'b0;
           CFG_PH_TRIGGER_MASK_U_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_IDLE_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_DB_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_DB_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_PHDR_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_PDATA_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_NPHDR_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_NPDATA_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_IOQ_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           IBCPL_HDR_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           IBCPL_DATA_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           SCRBD_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           SCRBD_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           DEVTLB_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           DEVTLB_SPARE_DECODE_ADDR: ack.read_miss = 1'b0;
           DEVTLB_DEFEATURE0_DECODE_ADDR: ack.read_miss = 1'b0;
           DEVTLB_DEFEATURE1_DECODE_ADDR: ack.read_miss = 1'b0;
           DEVTLB_DEFEATURE2_DECODE_ADDR: ack.read_miss = 1'b0;
           DEVTLB_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           CFGM_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           CFGM_STATUS2_DECODE_ADDR: ack.read_miss = 1'b0;
           LOCAL_BME_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           LOCAL_MSIXE_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           MSTR_CRD_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           MSTR_FL_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           MSTR_LL_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           MSTR_LL_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_MSTR_DEBUG_DECODE_ADDR: ack.read_miss = 1'b0;
           IBCPL_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           IBCPL_ERR_HDR_0_DECODE_ADDR: ack.read_miss = 1'b0;
           IBCPL_ERR_HDR_1_DECODE_ADDR: ack.read_miss = 1'b0;
           IBCPL_ERR_HDR_2_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_PHDR_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_PDATA_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_NPHDR_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_NPDATA_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           RI_IOQ_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           IBCPL_DATA_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           OBCPL_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           IBCPL_HDR_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           P_RL_CQ_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           TGT_INIT_HCREDITS_DECODE_ADDR: ack.read_miss = 1'b0;
           TGT_INIT_DCREDITS_DECODE_ADDR: ack.read_miss = 1'b0;
           TGT_REM_HCREDITS_DECODE_ADDR: ack.read_miss = 1'b0;
           TGT_REM_DCREDITS_DECODE_ADDR: ack.read_miss = 1'b0;
           TGT_RET_HCREDITS_DECODE_ADDR: ack.read_miss = 1'b0;
           TGT_RET_DCREDITS_DECODE_ADDR: ack.read_miss = 1'b0;
           {40'h80020,4'b0?00,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_CONFIGURATION0 || ~(|re_AW_SMON_CONFIGURATION0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_CONFIGURATION0;
           end
           {40'h80020,4'b0?00,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_CONFIGURATION1 || ~(|re_AW_SMON_CONFIGURATION1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_CONFIGURATION1;
           end
           {40'h80020,4'b0?00,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_COMPARE0 || ~(|re_AW_SMON_COMPARE0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_COMPARE0;
           end
           {40'h80020,4'b0?00,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_COMPARE1 || ~(|re_AW_SMON_COMPARE1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_COMPARE1;
           end
           {40'h80020,4'b0?01,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0 || ~(|re_AW_SMON_ACTIVITYCOUNTER0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_ACTIVITYCOUNTER0;
           end
           {40'h80020,4'b0?01,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1 || ~(|re_AW_SMON_ACTIVITYCOUNTER1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_ACTIVITYCOUNTER1;
           end
           {40'h80020,4'b0?01,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_TIMER || ~(|re_AW_SMON_TIMER)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_TIMER;
           end
           {40'h80020,4'b0?01,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_MAXIMUM_TIMER || ~(|re_AW_SMON_MAXIMUM_TIMER)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_MAXIMUM_TIMER;
           end
           {40'h80020,4'b0?10,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_COMP_MASK0 || ~(|re_AW_SMON_COMP_MASK0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_COMP_MASK0;
           end
           {40'h80020,4'b0?10,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_COMP_MASK1 || ~(|re_AW_SMON_COMP_MASK1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_COMP_MASK1;
           end
           HQM_PULLED_FUSES_0_DECODE_ADDR: ack.read_miss = 1'b0;
            default: ack.read_miss  = ack.read_valid; 
         endcase
      end    
      MWR: begin
         ack.write_valid = req_valid;
         ack.read_valid  = 1'b0; 
         ack.read_miss = ack.read_valid;
         unique casez (case_req_addr_HQM_SIF_CSR_MEM) 
           HQM_CSR_CP_LO_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_CSR_CP_HI_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_CSR_RAC_LO_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_CSR_RAC_HI_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_CSR_WAC_LO_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_CSR_WAC_HI_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_VC_RXMAP_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_VC_TXMAP_DECODE_ADDR: ack.write_miss = 1'b0;
           DEVTLB_ATS_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_ALARM_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_PARITY_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_PARITY_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           DIR_CQ2TC_MAP_DECODE_ADDR: ack.write_miss = 1'b0;
           LDB_CQ2TC_MAP_DECODE_ADDR: ack.write_miss = 1'b0;
           INT2TC_MAP_DECODE_ADDR: ack.write_miss = 1'b0;
           CFG_UNIT_VERSION_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_0_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_1_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_2_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_3_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_4_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_5_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_6_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_7_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_8_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_9_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_10_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SIF_CNT_11_DECODE_ADDR: ack.write_miss = 1'b0;
           OBCPL_AFULL_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           PRIM_CDC_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           SIDE_CDC_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           IOSFP_CGCTL_DECODE_ADDR: ack.write_miss = 1'b0;
           IOSFS_CGCTL_DECODE_ADDR: ack.write_miss = 1'b0;
           PARITY_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           CFG_MASTER_TIMEOUT_DECODE_ADDR: ack.write_miss = 1'b0;
           MMIO_TIMEOUT_DECODE_ADDR: ack.write_miss = 1'b0;
           HCW_TIMEOUT_DECODE_ADDR: ack.write_miss = 1'b0;
           {44'h800103,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VISA_SW_CONTROL || ~(|we_VISA_SW_CONTROL)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VISA_SW_CONTROL;
           end
           CFG_PH_TRIGGER_ADDR_L_DECODE_ADDR: ack.write_miss = 1'b0;
           CFG_PH_TRIGGER_ADDR_U_DECODE_ADDR: ack.write_miss = 1'b0;
           CFG_PH_TRIGGER_MASK_L_DECODE_ADDR: ack.write_miss = 1'b0;
           CFG_PH_TRIGGER_MASK_U_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_IDLE_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_DB_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_DB_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_PHDR_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_PDATA_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_NPHDR_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_NPDATA_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_IOQ_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           IBCPL_HDR_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           IBCPL_DATA_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           SCRBD_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           SCRBD_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           DEVTLB_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           DEVTLB_SPARE_DECODE_ADDR: ack.write_miss = 1'b0;
           DEVTLB_DEFEATURE0_DECODE_ADDR: ack.write_miss = 1'b0;
           DEVTLB_DEFEATURE1_DECODE_ADDR: ack.write_miss = 1'b0;
           DEVTLB_DEFEATURE2_DECODE_ADDR: ack.write_miss = 1'b0;
           DEVTLB_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           CFGM_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           CFGM_STATUS2_DECODE_ADDR: ack.write_miss = 1'b0;
           LOCAL_BME_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           LOCAL_MSIXE_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           MSTR_CRD_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           MSTR_FL_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           MSTR_LL_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           MSTR_LL_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_MSTR_DEBUG_DECODE_ADDR: ack.write_miss = 1'b0;
           IBCPL_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           IBCPL_ERR_HDR_0_DECODE_ADDR: ack.write_miss = 1'b0;
           IBCPL_ERR_HDR_1_DECODE_ADDR: ack.write_miss = 1'b0;
           IBCPL_ERR_HDR_2_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_PHDR_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_PDATA_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_NPHDR_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_NPDATA_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           RI_IOQ_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           IBCPL_DATA_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           OBCPL_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           IBCPL_HDR_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           P_RL_CQ_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           TGT_INIT_HCREDITS_DECODE_ADDR: ack.write_miss = 1'b0;
           TGT_INIT_DCREDITS_DECODE_ADDR: ack.write_miss = 1'b0;
           TGT_REM_HCREDITS_DECODE_ADDR: ack.write_miss = 1'b0;
           TGT_REM_DCREDITS_DECODE_ADDR: ack.write_miss = 1'b0;
           TGT_RET_HCREDITS_DECODE_ADDR: ack.write_miss = 1'b0;
           TGT_RET_DCREDITS_DECODE_ADDR: ack.write_miss = 1'b0;
           {40'h80020,4'b0?00,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_CONFIGURATION0 || ~(|we_AW_SMON_CONFIGURATION0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_CONFIGURATION0;
           end
           {40'h80020,4'b0?00,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_CONFIGURATION1 || ~(|we_AW_SMON_CONFIGURATION1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_CONFIGURATION1;
           end
           {40'h80020,4'b0?00,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_COMPARE0 || ~(|we_AW_SMON_COMPARE0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_COMPARE0;
           end
           {40'h80020,4'b0?00,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_COMPARE1 || ~(|we_AW_SMON_COMPARE1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_COMPARE1;
           end
           {40'h80020,4'b0?01,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0 || ~(|we_AW_SMON_ACTIVITYCOUNTER0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_ACTIVITYCOUNTER0;
           end
           {40'h80020,4'b0?01,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1 || ~(|we_AW_SMON_ACTIVITYCOUNTER1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_ACTIVITYCOUNTER1;
           end
           {40'h80020,4'b0?01,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_TIMER || ~(|we_AW_SMON_TIMER)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_TIMER;
           end
           {40'h80020,4'b0?01,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_MAXIMUM_TIMER || ~(|we_AW_SMON_MAXIMUM_TIMER)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_MAXIMUM_TIMER;
           end
           {40'h80020,4'b0?10,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_COMP_MASK0 || ~(|we_AW_SMON_COMP_MASK0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_COMP_MASK0;
           end
           {40'h80020,4'b0?10,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_COMP_MASK1 || ~(|we_AW_SMON_COMP_MASK1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_COMP_MASK1;
           end
           HQM_PULLED_FUSES_0_DECODE_ADDR: ack.write_miss = 1'b0;
            default: ack.write_miss = ack.write_valid;
         endcase 
      end  
      default: begin
         ack.write_valid  = req_valid & IsWrOpcode;
         ack.read_valid  = req_valid & IsRdOpcode;
         ack.read_miss  = ack.read_valid;
         ack.write_miss = ack.write_valid;
      end 
   endcase 
end

always_comb begin : SAI_BLOCK

   unique casez (req_opcode) 
      MRD: 
         unique casez (case_req_addr_HQM_SIF_CSR_MEM) 
           HQM_CSR_CP_LO_DECODE_ADDR: sai_successfull_per_byte = {{4{1'b1}}};
           HQM_CSR_CP_HI_DECODE_ADDR: sai_successfull_per_byte = {{4{1'b1}}};
           HQM_CSR_RAC_LO_DECODE_ADDR: sai_successfull_per_byte = {{4{1'b1}}};
           HQM_CSR_RAC_HI_DECODE_ADDR: sai_successfull_per_byte = {{4{1'b1}}};
           HQM_CSR_WAC_LO_DECODE_ADDR: sai_successfull_per_byte = {{4{1'b1}}};
           HQM_CSR_WAC_HI_DECODE_ADDR: sai_successfull_per_byte = {{4{1'b1}}};
           SIF_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_VC_RXMAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_VC_TXMAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DEVTLB_ATS_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_ALARM_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_PARITY_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_PARITY_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_CQ2TC_MAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_CQ2TC_MAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           INT2TC_MAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_UNIT_VERSION_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_3_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_4_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_5_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_6_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_7_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_8_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_9_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_10_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SIF_CNT_11_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           OBCPL_AFULL_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           PRIM_CDC_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIDE_CDC_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IOSFP_CGCTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IOSFS_CGCTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           PARITY_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_MASTER_TIMEOUT_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MMIO_TIMEOUT_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HCW_TIMEOUT_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h800103,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_PH_TRIGGER_ADDR_L_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_PH_TRIGGER_ADDR_U_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_PH_TRIGGER_MASK_L_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_PH_TRIGGER_MASK_U_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_IDLE_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_PHDR_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_PDATA_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_NPHDR_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_NPDATA_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_IOQ_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IBCPL_HDR_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IBCPL_DATA_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SCRBD_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SCRBD_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DEVTLB_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DEVTLB_SPARE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DEVTLB_DEFEATURE0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DEVTLB_DEFEATURE1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DEVTLB_DEFEATURE2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DEVTLB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFGM_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFGM_STATUS2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LOCAL_BME_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LOCAL_MSIXE_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSTR_CRD_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSTR_FL_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSTR_LL_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSTR_LL_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_MSTR_DEBUG_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IBCPL_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IBCPL_ERR_HDR_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IBCPL_ERR_HDR_1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IBCPL_ERR_HDR_2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_PHDR_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_PDATA_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_NPHDR_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_NPDATA_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           RI_IOQ_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IBCPL_DATA_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           OBCPL_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IBCPL_HDR_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           P_RL_CQ_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TGT_INIT_HCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TGT_INIT_DCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TGT_REM_HCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TGT_REM_DCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TGT_RET_HCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TGT_RET_DCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?00,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?00,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?00,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?00,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?01,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?01,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?01,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?01,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?10,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?10,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PULLED_FUSES_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
            default: sai_successfull_per_byte = {4{1'b1}};
         endcase 
      MWR: 
         unique casez (case_req_addr_HQM_SIF_CSR_MEM) 
           HQM_CSR_CP_LO_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_control_en}}};
           HQM_CSR_CP_HI_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_control_en}}};
           HQM_CSR_RAC_LO_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_control_en}}};
           HQM_CSR_RAC_HI_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_control_en}}};
           HQM_CSR_WAC_LO_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_control_en}}};
           HQM_CSR_WAC_HI_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_control_en}}};
           SIF_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_VC_RXMAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_VC_TXMAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DEVTLB_ATS_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_ALARM_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_PARITY_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_PARITY_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_CQ2TC_MAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_CQ2TC_MAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           INT2TC_MAP_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_UNIT_VERSION_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_3_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_4_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_5_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_6_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_7_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_8_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_9_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_10_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SIF_CNT_11_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           OBCPL_AFULL_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           PRIM_CDC_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIDE_CDC_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IOSFP_CGCTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IOSFS_CGCTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           PARITY_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_MASTER_TIMEOUT_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MMIO_TIMEOUT_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HCW_TIMEOUT_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h800103,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_PH_TRIGGER_ADDR_L_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_PH_TRIGGER_ADDR_U_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_PH_TRIGGER_MASK_L_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_PH_TRIGGER_MASK_U_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_IDLE_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_PHDR_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_PDATA_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_NPHDR_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_NPDATA_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_IOQ_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IBCPL_HDR_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IBCPL_DATA_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SCRBD_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SCRBD_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DEVTLB_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DEVTLB_SPARE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DEVTLB_DEFEATURE0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DEVTLB_DEFEATURE1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DEVTLB_DEFEATURE2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DEVTLB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFGM_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFGM_STATUS2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LOCAL_BME_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LOCAL_MSIXE_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSTR_CRD_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSTR_FL_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSTR_LL_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSTR_LL_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_MSTR_DEBUG_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IBCPL_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IBCPL_ERR_HDR_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IBCPL_ERR_HDR_1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IBCPL_ERR_HDR_2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_PHDR_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_PDATA_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_NPHDR_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_NPDATA_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           RI_IOQ_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IBCPL_DATA_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           OBCPL_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IBCPL_HDR_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           P_RL_CQ_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TGT_INIT_HCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TGT_INIT_DCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TGT_REM_HCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TGT_REM_DCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TGT_RET_HCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TGT_RET_DCREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?00,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?00,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?00,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?00,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?01,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?01,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?01,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?01,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?10,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?10,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PULLED_FUSES_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
            default: sai_successfull_per_byte = {4{1'b1}};
         endcase 
      default: sai_successfull_per_byte = {4{1'b1}};
   endcase 
end


always_comb ack.sai_successfull = &(sai_successfull_per_byte | ~be);


// end decode and addr logic section }

// ======================================================================
// begin rdata section {

always_comb begin : READ_DATA_BLOCK

   unique casez (req_opcode) 
      MRD:
         unique casez (case_req_addr_HQM_SIF_CSR_MEM) 
           HQM_CSR_CP_LO_DECODE_ADDR: read_data = {HQM_CSR_CP_LO};
           HQM_CSR_CP_HI_DECODE_ADDR: read_data = {HQM_CSR_CP_HI};
           HQM_CSR_RAC_LO_DECODE_ADDR: read_data = {HQM_CSR_RAC_LO};
           HQM_CSR_RAC_HI_DECODE_ADDR: read_data = {HQM_CSR_RAC_HI};
           HQM_CSR_WAC_LO_DECODE_ADDR: read_data = {HQM_CSR_WAC_LO};
           HQM_CSR_WAC_HI_DECODE_ADDR: read_data = {HQM_CSR_WAC_HI};
           SIF_CTL_DECODE_ADDR: read_data = {SIF_CTL};
           SIF_VC_RXMAP_DECODE_ADDR: read_data = {SIF_VC_RXMAP};
           SIF_VC_TXMAP_DECODE_ADDR: read_data = {SIF_VC_TXMAP};
           DEVTLB_ATS_ERR_DECODE_ADDR: read_data = {DEVTLB_ATS_ERR};
           SIF_ALARM_ERR_DECODE_ADDR: read_data = {SIF_ALARM_ERR};
           RI_PARITY_ERR_DECODE_ADDR: read_data = {RI_PARITY_ERR};
           SIF_PARITY_ERR_DECODE_ADDR: read_data = {SIF_PARITY_ERR};
           HQM_SIF_CNT_CTL_DECODE_ADDR: read_data = {HQM_SIF_CNT_CTL};
           DIR_CQ2TC_MAP_DECODE_ADDR: read_data = {DIR_CQ2TC_MAP};
           LDB_CQ2TC_MAP_DECODE_ADDR: read_data = {LDB_CQ2TC_MAP};
           INT2TC_MAP_DECODE_ADDR: read_data = {INT2TC_MAP};
           CFG_UNIT_VERSION_DECODE_ADDR: read_data = {CFG_UNIT_VERSION};
           HQM_SIF_CNT_0_DECODE_ADDR: read_data = {HQM_SIF_CNT_0};
           HQM_SIF_CNT_1_DECODE_ADDR: read_data = {HQM_SIF_CNT_1};
           HQM_SIF_CNT_2_DECODE_ADDR: read_data = {HQM_SIF_CNT_2};
           HQM_SIF_CNT_3_DECODE_ADDR: read_data = {HQM_SIF_CNT_3};
           HQM_SIF_CNT_4_DECODE_ADDR: read_data = {HQM_SIF_CNT_4};
           HQM_SIF_CNT_5_DECODE_ADDR: read_data = {HQM_SIF_CNT_5};
           HQM_SIF_CNT_6_DECODE_ADDR: read_data = {HQM_SIF_CNT_6};
           HQM_SIF_CNT_7_DECODE_ADDR: read_data = {HQM_SIF_CNT_7};
           HQM_SIF_CNT_8_DECODE_ADDR: read_data = {HQM_SIF_CNT_8};
           HQM_SIF_CNT_9_DECODE_ADDR: read_data = {HQM_SIF_CNT_9};
           HQM_SIF_CNT_10_DECODE_ADDR: read_data = {HQM_SIF_CNT_10};
           HQM_SIF_CNT_11_DECODE_ADDR: read_data = {HQM_SIF_CNT_11};
           OBCPL_AFULL_AGITATE_CONTROL_DECODE_ADDR: read_data = {OBCPL_AFULL_AGITATE_CONTROL};
           PRIM_CDC_CTL_DECODE_ADDR: read_data = {PRIM_CDC_CTL};
           SIDE_CDC_CTL_DECODE_ADDR: read_data = {SIDE_CDC_CTL};
           IOSFP_CGCTL_DECODE_ADDR: read_data = {IOSFP_CGCTL};
           IOSFS_CGCTL_DECODE_ADDR: read_data = {IOSFS_CGCTL};
           PARITY_CTL_DECODE_ADDR: read_data = {PARITY_CTL};
           CFG_MASTER_TIMEOUT_DECODE_ADDR: read_data = {CFG_MASTER_TIMEOUT};
           MMIO_TIMEOUT_DECODE_ADDR: read_data = {MMIO_TIMEOUT};
           HCW_TIMEOUT_DECODE_ADDR: read_data = {HCW_TIMEOUT};
           {44'h800103,2'b00}: read_data = handcode_reg_rdata_VISA_SW_CONTROL;
           CFG_PH_TRIGGER_ADDR_L_DECODE_ADDR: read_data = {CFG_PH_TRIGGER_ADDR_L};
           CFG_PH_TRIGGER_ADDR_U_DECODE_ADDR: read_data = {CFG_PH_TRIGGER_ADDR_U};
           CFG_PH_TRIGGER_MASK_L_DECODE_ADDR: read_data = {CFG_PH_TRIGGER_MASK_L};
           CFG_PH_TRIGGER_MASK_U_DECODE_ADDR: read_data = {CFG_PH_TRIGGER_MASK_U};
           SIF_IDLE_STATUS_DECODE_ADDR: read_data = {SIF_IDLE_STATUS};
           SIF_DB_STATUS_DECODE_ADDR: read_data = {SIF_DB_STATUS};
           RI_DB_STATUS_DECODE_ADDR: read_data = {RI_DB_STATUS};
           RI_PHDR_FIFO_CTL_DECODE_ADDR: read_data = {RI_PHDR_FIFO_CTL};
           RI_PDATA_FIFO_CTL_DECODE_ADDR: read_data = {RI_PDATA_FIFO_CTL};
           RI_NPHDR_FIFO_CTL_DECODE_ADDR: read_data = {RI_NPHDR_FIFO_CTL};
           RI_NPDATA_FIFO_CTL_DECODE_ADDR: read_data = {RI_NPDATA_FIFO_CTL};
           RI_IOQ_FIFO_CTL_DECODE_ADDR: read_data = {RI_IOQ_FIFO_CTL};
           IBCPL_HDR_FIFO_CTL_DECODE_ADDR: read_data = {IBCPL_HDR_FIFO_CTL};
           IBCPL_DATA_FIFO_CTL_DECODE_ADDR: read_data = {IBCPL_DATA_FIFO_CTL};
           SCRBD_CTL_DECODE_ADDR: read_data = {SCRBD_CTL};
           SCRBD_STATUS_DECODE_ADDR: read_data = {SCRBD_STATUS};
           DEVTLB_CTL_DECODE_ADDR: read_data = {DEVTLB_CTL};
           DEVTLB_SPARE_DECODE_ADDR: read_data = {DEVTLB_SPARE};
           DEVTLB_DEFEATURE0_DECODE_ADDR: read_data = {DEVTLB_DEFEATURE0};
           DEVTLB_DEFEATURE1_DECODE_ADDR: read_data = {DEVTLB_DEFEATURE1};
           DEVTLB_DEFEATURE2_DECODE_ADDR: read_data = {DEVTLB_DEFEATURE2};
           DEVTLB_STATUS_DECODE_ADDR: read_data = {DEVTLB_STATUS};
           CFGM_STATUS_DECODE_ADDR: read_data = {CFGM_STATUS};
           CFGM_STATUS2_DECODE_ADDR: read_data = {CFGM_STATUS2};
           LOCAL_BME_STATUS_DECODE_ADDR: read_data = {LOCAL_BME_STATUS};
           LOCAL_MSIXE_STATUS_DECODE_ADDR: read_data = {LOCAL_MSIXE_STATUS};
           MSTR_CRD_STATUS_DECODE_ADDR: read_data = {MSTR_CRD_STATUS};
           MSTR_FL_STATUS_DECODE_ADDR: read_data = {MSTR_FL_STATUS};
           MSTR_LL_STATUS_DECODE_ADDR: read_data = {MSTR_LL_STATUS};
           MSTR_LL_CTL_DECODE_ADDR: read_data = {MSTR_LL_CTL};
           SIF_MSTR_DEBUG_DECODE_ADDR: read_data = {SIF_MSTR_DEBUG};
           IBCPL_ERR_DECODE_ADDR: read_data = {IBCPL_ERR};
           IBCPL_ERR_HDR_0_DECODE_ADDR: read_data = {IBCPL_ERR_HDR_0};
           IBCPL_ERR_HDR_1_DECODE_ADDR: read_data = {IBCPL_ERR_HDR_1};
           IBCPL_ERR_HDR_2_DECODE_ADDR: read_data = {IBCPL_ERR_HDR_2};
           RI_PHDR_FIFO_STATUS_DECODE_ADDR: read_data = {RI_PHDR_FIFO_STATUS};
           RI_PDATA_FIFO_STATUS_DECODE_ADDR: read_data = {RI_PDATA_FIFO_STATUS};
           RI_NPHDR_FIFO_STATUS_DECODE_ADDR: read_data = {RI_NPHDR_FIFO_STATUS};
           RI_NPDATA_FIFO_STATUS_DECODE_ADDR: read_data = {RI_NPDATA_FIFO_STATUS};
           RI_IOQ_FIFO_STATUS_DECODE_ADDR: read_data = {RI_IOQ_FIFO_STATUS};
           IBCPL_DATA_FIFO_STATUS_DECODE_ADDR: read_data = {IBCPL_DATA_FIFO_STATUS};
           OBCPL_FIFO_STATUS_DECODE_ADDR: read_data = {OBCPL_FIFO_STATUS};
           IBCPL_HDR_FIFO_STATUS_DECODE_ADDR: read_data = {IBCPL_HDR_FIFO_STATUS};
           P_RL_CQ_FIFO_STATUS_DECODE_ADDR: read_data = {P_RL_CQ_FIFO_STATUS};
           TGT_INIT_HCREDITS_DECODE_ADDR: read_data = {TGT_INIT_HCREDITS};
           TGT_INIT_DCREDITS_DECODE_ADDR: read_data = {TGT_INIT_DCREDITS};
           TGT_REM_HCREDITS_DECODE_ADDR: read_data = {TGT_REM_HCREDITS};
           TGT_REM_DCREDITS_DECODE_ADDR: read_data = {TGT_REM_DCREDITS};
           TGT_RET_HCREDITS_DECODE_ADDR: read_data = {TGT_RET_HCREDITS};
           TGT_RET_DCREDITS_DECODE_ADDR: read_data = {TGT_RET_DCREDITS};
           {40'h80020,4'b0?00,2'b00}: read_data = handcode_reg_rdata_AW_SMON_CONFIGURATION0;
           {40'h80020,4'b0?00,2'b01}: read_data = handcode_reg_rdata_AW_SMON_CONFIGURATION1;
           {40'h80020,4'b0?00,2'b10}: read_data = handcode_reg_rdata_AW_SMON_COMPARE0;
           {40'h80020,4'b0?00,2'b11}: read_data = handcode_reg_rdata_AW_SMON_COMPARE1;
           {40'h80020,4'b0?01,2'b00}: read_data = handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER0;
           {40'h80020,4'b0?01,2'b01}: read_data = handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER1;
           {40'h80020,4'b0?01,2'b10}: read_data = handcode_reg_rdata_AW_SMON_TIMER;
           {40'h80020,4'b0?01,2'b11}: read_data = handcode_reg_rdata_AW_SMON_MAXIMUM_TIMER;
           {40'h80020,4'b0?10,2'b00}: read_data = handcode_reg_rdata_AW_SMON_COMP_MASK0;
           {40'h80020,4'b0?10,2'b01}: read_data = handcode_reg_rdata_AW_SMON_COMP_MASK1;
           HQM_PULLED_FUSES_0_DECODE_ADDR: read_data = {HQM_PULLED_FUSES_0};
         default : read_data = '0; 
      endcase
      default : read_data = '0;  
   endcase
end

always_comb ack.data = read_data & { {8{be[3] & sai_successfull_per_byte[3]}}, {8{be[2] & sai_successfull_per_byte[2]}}, {8{be[1] & sai_successfull_per_byte[1]}}, {8{be[0] & sai_successfull_per_byte[0]}} };

always_comb write_data = req.data;


// end rdata section }

// ======================================================================
// begin register RSVD init section {
always_comb begin
    SIF_CTL.reserved0 = '0;
    SIF_VC_RXMAP.reserved0 = '0;
    SIF_VC_RXMAP.reserved1 = '0;
    SIF_VC_RXMAP.reserved2 = '0;
    SIF_VC_RXMAP.reserved3 = '0;
    SIF_VC_RXMAP.reserved4 = '0;
    SIF_VC_RXMAP.reserved5 = '0;
    SIF_VC_RXMAP.reserved6 = '0;
    SIF_VC_RXMAP.reserved7 = '0;
    SIF_VC_TXMAP.reserved0 = '0;
    SIF_VC_TXMAP.reserved1 = '0;
    SIF_VC_TXMAP.reserved2 = '0;
    SIF_VC_TXMAP.reserved3 = '0;
    SIF_VC_TXMAP.reserved4 = '0;
    SIF_VC_TXMAP.reserved5 = '0;
    SIF_VC_TXMAP.reserved6 = '0;
    SIF_VC_TXMAP.reserved7 = '0;
    DEVTLB_ATS_ERR.reserved0 = '0;
    SIF_ALARM_ERR.reserved0 = '0;
    RI_PARITY_ERR.reserved0 = '0;
    SIF_PARITY_ERR.reserved0 = '0;
    HQM_SIF_CNT_CTL.reserved0 = '0;
    DIR_CQ2TC_MAP.reserved0 = '0;
    LDB_CQ2TC_MAP.reserved0 = '0;
    INT2TC_MAP.reserved0 = '0;
    CFG_UNIT_VERSION.reserved0 = '0;
    PRIM_CDC_CTL.reserved0 = '0;
    SIDE_CDC_CTL.reserved0 = '0;
    IOSFP_CGCTL.reserved0 = '0;
    IOSFS_CGCTL.reserved0 = '0;
    PARITY_CTL.reserved0 = '0;
    CFG_MASTER_TIMEOUT.reserved0 = '0;
    MMIO_TIMEOUT.reserved0 = '0;
    HCW_TIMEOUT.reserved0 = '0;
    SIF_IDLE_STATUS.reserved0 = '0;
    SIF_DB_STATUS.reserved0 = '0;
    SIF_DB_STATUS.reserved1 = '0;
    SIF_DB_STATUS.reserved2 = '0;
    SIF_DB_STATUS.reserved3 = '0;
    RI_DB_STATUS.reserved0 = '0;
    RI_DB_STATUS.reserved1 = '0;
    RI_DB_STATUS.reserved2 = '0;
    RI_DB_STATUS.reserved3 = '0;
    RI_DB_STATUS.reserved4 = '0;
    RI_DB_STATUS.reserved5 = '0;
    RI_PHDR_FIFO_CTL.reserved0 = '0;
    RI_PDATA_FIFO_CTL.reserved0 = '0;
    RI_NPHDR_FIFO_CTL.reserved0 = '0;
    RI_NPDATA_FIFO_CTL.reserved0 = '0;
    RI_IOQ_FIFO_CTL.reserved0 = '0;
    IBCPL_HDR_FIFO_CTL.reserved0 = '0;
    IBCPL_DATA_FIFO_CTL.reserved0 = '0;
    SCRBD_CTL.reserved0 = '0;
    SCRBD_STATUS.reserved0 = '0;
    DEVTLB_CTL.reserved0 = '0;
    DEVTLB_STATUS.reserved0 = '0;
    DEVTLB_STATUS.reserved1 = '0;
    DEVTLB_STATUS.reserved2 = '0;
    LOCAL_BME_STATUS.reserved0 = '0;
    LOCAL_MSIXE_STATUS.reserved0 = '0;
    MSTR_CRD_STATUS.reserved0 = '0;
    MSTR_FL_STATUS.reserved0 = '0;
    MSTR_LL_STATUS.reserved0 = '0;
    MSTR_LL_CTL.reserved0 = '0;
    SIF_MSTR_DEBUG.reserved0 = '0;
    IBCPL_ERR.reserved0 = '0;
    TGT_INIT_HCREDITS.reserved0 = '0;
    TGT_INIT_DCREDITS.reserved0 = '0;
    TGT_REM_HCREDITS.reserved0 = '0;
    TGT_REM_DCREDITS.reserved0 = '0;
    TGT_RET_HCREDITS.reserved0 = '0;
    TGT_RET_DCREDITS.reserved0 = '0;
end

// end register RSVD init section }


// ======================================================================
// begin unit parity section {


// end unit parity section }


endmodule
//lintra pop
//lintra pop
