///
///  INTEL CONFIDENTIAL
///
///  Copyright 2022 Intel Corporation All Rights Reserved.
///
///  The source code contained or described herein and all documents related
///  to the source code ("Material") are owned by Intel Corporation or its
///  suppliers or licensors. Title to the Material remains with Intel
///  Corporation or its suppliers and licensors. The Material contains trade
///  secrets and proprietary and confidential information of Intel or its
///  suppliers and licensors. The Material is protected by worldwide copyright
///  and trade secret laws and treaty provisions. No part of the Material may
///  be used, copied, reproduced, modified, published, uploaded, posted,
///  transmitted, distributed, or disclosed in any way without Intel's prior
///  express written permission.
///
///  No license under any patent, copyright, trade secret or other intellectual
///  property right is granted to or conferred upon you by disclosure or
///  delivery of the Materials, either expressly, by implication, inducement,
///  estoppel or otherwise. Any license under such intellectual property rights
///  must be express and approved by Intel in writing.
///

//                                                                             
// File:            hqm_pf_cfg_pkg.vh                                          
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


// The NEBULON_RTLGEN_TEMPLATE env was: /p/hdk/rtl/proj_tools/nebulon_data/shdk74/20.35.01_gen3/generators/rtltemplates:/p/hdk/rtl/cad/x86-64_linux26/dt/nebulon/d20ww52.1/generators/rtltemplates:/p/hdk/rtl/cad/x86-64_linux26/dt/nebulon/d20ww52.1/generators/overhead_templates::/nfs/site/disks/crt_tools_007/dt/nebulon/d22ww21.1/generators/rtlgen_include_template:/nfs/site/disks/crt_tools_007/dt/nebulon/d22ww21.1/generators/rtlgen_pkg_template

`ifndef HQM_PF_CFG_PKG_VH
`define HQM_PF_CFG_PKG_VH

`include "rtlgen_include_hqm_pf_cfg.vh"
`include "rtlgen_pkg_hqm_pf_cfg.vh"

package hqm_pf_cfg_pkg;

import rtlgen_pkg_hqm_pf_cfg::*;

typedef cfg_req_32bit_t hqm_pf_cfg_cr_req_t;
typedef cfg_ack_32bit_t hqm_pf_cfg_cr_ack_t;
typedef struct packed {
   logic treg_trdy; 
   logic treg_cerr;   
   logic [31:0] treg_rdata;
} hqm_pf_cfg_sb_ack_t;

// Comments were moved out of macro, due to collage failure
// treg_data 
//    Assumption1: (treg_trdy == 0 | treg_cerr == 0) => treg_rdata   
//    Assumption2: non relevant fields & reserved are also set to 0  
// treg_trdy
//    Regular case: All banks should return same treg_trdy value.    
//    Special case: Multi cycle read/write from handcoded memory.    
//               One bank hold ack until result is ready          
//    For this case all acks are AND                               
// treg_cerr
//    Assumption: treg_trdy=0 => treg_cerr=0                         
//    Regular case: return error when all banks return error         
//    Spacial case: when bank with multi cycle request, hold the     
//                request, its ack treg_trdy=0 && treg_cerr=0     
//               when bank with multi cycle ready, all banks      
//            return ack, since the request is hold for all banks 

`ifndef RTLGEN_MERGE_SB_ACK_LIST
`define RTLGEN_MERGE_SB_ACK_LIST(sb_ack_list,merged_sb_ack)         \
  always_comb begin                                                 \
     merged_sb_ack.treg_rdata = '0;                                 \
     for (int i=0; i<$size(sb_ack_list); i++) begin                 \
        merged_sb_ack.treg_rdata |= sb_ack_list[i].treg_rdata;      \
     end                                                            \
  end                                                               \
                                                                    \
  always_comb begin                                                 \
     merged_sb_ack.treg_trdy = '1;                                  \
     for (int i=0; i<$size(sb_ack_list); i = i + 1) begin           \
        merged_sb_ack.treg_trdy &= sb_ack_list[i].treg_trdy;        \
     end                                                            \
  end                                                               \
                                                                    \
  always_comb begin                                                 \
     merged_sb_ack.treg_cerr = '0;                                  \
     for (int i=0; i<$size(sb_ack_list); i = i + 1) begin           \
        merged_sb_ack.treg_cerr |= sb_ack_list[i].treg_cerr;        \
     end                                                            \
  end                                                               
`endif // RTLGEN_MERGE_SB_ACK_LIST                                  

// sai_successfull - acknowledge with zero value must have valid=1 and miss=0
// read/write valid - all acknowledges should have the same valid
// read/write miss - return miss when all banks return miss
`ifndef RTLGEN_MERGE_CR_ACK_LIST
`define RTLGEN_MERGE_CR_ACK_LIST(cr_ack_list,merged_cr_ack)       \
   always_comb begin                                              \
      merged_cr_ack.data = '0;                                    \
      for (int i=0; i<$size(cr_ack_list); i++) begin              \
         merged_cr_ack.data |= cr_ack_list[i].data;               \
      end                                                         \
   end                                                            \
   always_comb begin                                              \
      merged_cr_ack.read_valid = '1;                              \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin        \
         merged_cr_ack.read_valid &= cr_ack_list[i].read_valid;   \
      end                                                         \
   end                                                            \
   always_comb begin                                              \
      merged_cr_ack.write_valid = '1;                             \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin        \
         merged_cr_ack.write_valid &= cr_ack_list[i].write_valid; \
      end                                                         \
   end                                                            \
   always_comb begin                                                      \
      merged_cr_ack.sai_successfull = '1;                                 \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin                \
         merged_cr_ack.sai_successfull &= cr_ack_list[i].sai_successfull; \
      end                                                                 \
   end                                                                    \
   always_comb begin                                            \
      merged_cr_ack.read_miss = '1;                             \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin      \
         merged_cr_ack.read_miss &= cr_ack_list[i].read_miss;   \
      end                                                       \
   end                                                          \
   always_comb begin                                            \
      merged_cr_ack.write_miss = '1;                            \
      for (int i=0; i<$size(cr_ack_list); i = i + 1) begin      \
         merged_cr_ack.write_miss &= cr_ack_list[i].write_miss; \
      end                                                       \
   end                                                          
`endif // RTLGEN_MERGE_CR_ACK_LIST                         

// ===================================================
// register structs

typedef struct packed {
    logic [15:0] VID;  // RO
} VENDOR_ID_t;

localparam VENDOR_ID_REG_STRIDE = 12'h2;
localparam VENDOR_ID_REG_ENTRIES = 1;
localparam [11:0] VENDOR_ID_CR_ADDR = 12'h0;
localparam VENDOR_ID_SIZE = 16;
localparam VENDOR_ID_VID_LO = 0;
localparam VENDOR_ID_VID_HI = 15;
localparam VENDOR_ID_VID_RESET = 16'h8086;
localparam VENDOR_ID_USEMASK = 16'hFFFF;
localparam VENDOR_ID_RO_MASK = 16'hFFFF;
localparam VENDOR_ID_WO_MASK = 16'h0;
localparam VENDOR_ID_RESET = 16'h8086;

typedef struct packed {
    logic [15:0] DID;  // RO/V
} DEVICE_ID_t;

localparam DEVICE_ID_REG_STRIDE = 12'h2;
localparam DEVICE_ID_REG_ENTRIES = 1;
localparam [11:0] DEVICE_ID_CR_ADDR = 12'h2;
localparam DEVICE_ID_SIZE = 16;
localparam DEVICE_ID_DID_LO = 0;
localparam DEVICE_ID_DID_HI = 15;
localparam DEVICE_ID_DID_RESET = 16'h2714;
localparam DEVICE_ID_USEMASK = 16'hFFFF;
localparam DEVICE_ID_RO_MASK = 16'hFFFF;
localparam DEVICE_ID_WO_MASK = 16'h0;
localparam DEVICE_ID_RESET = 16'h2714;

typedef struct packed {
    logic  [4:0] RESERVED;  // RO
    logic  [0:0] INTD;  // RW
    logic  [0:0] FBTB;  // RO
    logic  [0:0] SER;  // RW
    logic  [0:0] RESERVED1;  // RO
    logic  [0:0] PER;  // RW
    logic  [0:0] VPS;  // RO
    logic  [0:0] MWE;  // RO
    logic  [0:0] SS;  // RO
    logic  [0:0] BM;  // RW
    logic  [0:0] MEM;  // RW
    logic  [0:0] IO;  // RO
} DEVICE_COMMAND_t;

localparam DEVICE_COMMAND_REG_STRIDE = 12'h2;
localparam DEVICE_COMMAND_REG_ENTRIES = 1;
localparam [11:0] DEVICE_COMMAND_CR_ADDR = 12'h4;
localparam DEVICE_COMMAND_SIZE = 16;
localparam DEVICE_COMMAND_RESERVED_LO = 11;
localparam DEVICE_COMMAND_RESERVED_HI = 15;
localparam DEVICE_COMMAND_RESERVED_RESET = 5'h0;
localparam DEVICE_COMMAND_INTD_LO = 10;
localparam DEVICE_COMMAND_INTD_HI = 10;
localparam DEVICE_COMMAND_INTD_RESET = 1'h0;
localparam DEVICE_COMMAND_FBTB_LO = 9;
localparam DEVICE_COMMAND_FBTB_HI = 9;
localparam DEVICE_COMMAND_FBTB_RESET = 1'h0;
localparam DEVICE_COMMAND_SER_LO = 8;
localparam DEVICE_COMMAND_SER_HI = 8;
localparam DEVICE_COMMAND_SER_RESET = 1'h0;
localparam DEVICE_COMMAND_RESERVED1_LO = 7;
localparam DEVICE_COMMAND_RESERVED1_HI = 7;
localparam DEVICE_COMMAND_RESERVED1_RESET = 1'h0;
localparam DEVICE_COMMAND_PER_LO = 6;
localparam DEVICE_COMMAND_PER_HI = 6;
localparam DEVICE_COMMAND_PER_RESET = 1'h0;
localparam DEVICE_COMMAND_VPS_LO = 5;
localparam DEVICE_COMMAND_VPS_HI = 5;
localparam DEVICE_COMMAND_VPS_RESET = 1'h0;
localparam DEVICE_COMMAND_MWE_LO = 4;
localparam DEVICE_COMMAND_MWE_HI = 4;
localparam DEVICE_COMMAND_MWE_RESET = 1'h0;
localparam DEVICE_COMMAND_SS_LO = 3;
localparam DEVICE_COMMAND_SS_HI = 3;
localparam DEVICE_COMMAND_SS_RESET = 1'h0;
localparam DEVICE_COMMAND_BM_LO = 2;
localparam DEVICE_COMMAND_BM_HI = 2;
localparam DEVICE_COMMAND_BM_RESET = 1'h0;
localparam DEVICE_COMMAND_MEM_LO = 1;
localparam DEVICE_COMMAND_MEM_HI = 1;
localparam DEVICE_COMMAND_MEM_RESET = 1'h0;
localparam DEVICE_COMMAND_IO_LO = 0;
localparam DEVICE_COMMAND_IO_HI = 0;
localparam DEVICE_COMMAND_IO_RESET = 1'h0;
localparam DEVICE_COMMAND_USEMASK = 16'hFFFF;
localparam DEVICE_COMMAND_RO_MASK = 16'hFAB9;
localparam DEVICE_COMMAND_WO_MASK = 16'h0;
localparam DEVICE_COMMAND_RESET = 16'h0;

typedef struct packed {
    logic  [0:0] DPE;  // RW/1C/V
    logic  [0:0] SSE;  // RW/1C/V
    logic  [0:0] RMA;  // RW/1C/V
    logic  [0:0] RTA;  // RW/1C/V
    logic  [0:0] STA;  // RW/1C/V
    logic  [1:0] DST;  // RO
    logic  [0:0] MDPE;  // RW/1C/V
    logic  [0:0] FB2B;  // RO
    logic  [0:0] RESERVED1;  // RO
    logic  [0:0] MC66;  // RO
    logic  [0:0] CL;  // RO
    logic  [0:0] INTSTS;  // RO/V
    logic  [2:0] RESERVED2;  // RO
} DEVICE_STATUS_t;

localparam DEVICE_STATUS_REG_STRIDE = 12'h2;
localparam DEVICE_STATUS_REG_ENTRIES = 1;
localparam [11:0] DEVICE_STATUS_CR_ADDR = 12'h6;
localparam DEVICE_STATUS_SIZE = 16;
localparam DEVICE_STATUS_DPE_LO = 15;
localparam DEVICE_STATUS_DPE_HI = 15;
localparam DEVICE_STATUS_DPE_RESET = 1'h0;
localparam DEVICE_STATUS_SSE_LO = 14;
localparam DEVICE_STATUS_SSE_HI = 14;
localparam DEVICE_STATUS_SSE_RESET = 1'h0;
localparam DEVICE_STATUS_RMA_LO = 13;
localparam DEVICE_STATUS_RMA_HI = 13;
localparam DEVICE_STATUS_RMA_RESET = 1'h0;
localparam DEVICE_STATUS_RTA_LO = 12;
localparam DEVICE_STATUS_RTA_HI = 12;
localparam DEVICE_STATUS_RTA_RESET = 1'h0;
localparam DEVICE_STATUS_STA_LO = 11;
localparam DEVICE_STATUS_STA_HI = 11;
localparam DEVICE_STATUS_STA_RESET = 1'h0;
localparam DEVICE_STATUS_DST_LO = 9;
localparam DEVICE_STATUS_DST_HI = 10;
localparam DEVICE_STATUS_DST_RESET = 2'b0;
localparam DEVICE_STATUS_MDPE_LO = 8;
localparam DEVICE_STATUS_MDPE_HI = 8;
localparam DEVICE_STATUS_MDPE_RESET = 1'h0;
localparam DEVICE_STATUS_FB2B_LO = 7;
localparam DEVICE_STATUS_FB2B_HI = 7;
localparam DEVICE_STATUS_FB2B_RESET = 1'h0;
localparam DEVICE_STATUS_RESERVED1_LO = 6;
localparam DEVICE_STATUS_RESERVED1_HI = 6;
localparam DEVICE_STATUS_RESERVED1_RESET = 1'h0;
localparam DEVICE_STATUS_MC66_LO = 5;
localparam DEVICE_STATUS_MC66_HI = 5;
localparam DEVICE_STATUS_MC66_RESET = 1'h0;
localparam DEVICE_STATUS_CL_LO = 4;
localparam DEVICE_STATUS_CL_HI = 4;
localparam DEVICE_STATUS_CL_RESET = 1'h1;
localparam DEVICE_STATUS_INTSTS_LO = 3;
localparam DEVICE_STATUS_INTSTS_HI = 3;
localparam DEVICE_STATUS_INTSTS_RESET = 1'h0;
localparam DEVICE_STATUS_RESERVED2_LO = 0;
localparam DEVICE_STATUS_RESERVED2_HI = 2;
localparam DEVICE_STATUS_RESERVED2_RESET = 3'h0;
localparam DEVICE_STATUS_USEMASK = 16'hFFFF;
localparam DEVICE_STATUS_RO_MASK = 16'h6FF;
localparam DEVICE_STATUS_WO_MASK = 16'h0;
localparam DEVICE_STATUS_RESET = 16'h10;

typedef struct packed {
    logic [23:0] CC;  // RO
    logic  [3:0] RIDU;  // RO/V
    logic  [3:0] RIDL;  // RO/V
} REVISION_ID_CLASS_CODE_t;

localparam REVISION_ID_CLASS_CODE_REG_STRIDE = 12'h4;
localparam REVISION_ID_CLASS_CODE_REG_ENTRIES = 1;
localparam [11:0] REVISION_ID_CLASS_CODE_CR_ADDR = 12'h8;
localparam REVISION_ID_CLASS_CODE_SIZE = 32;
localparam REVISION_ID_CLASS_CODE_CC_LO = 8;
localparam REVISION_ID_CLASS_CODE_CC_HI = 31;
localparam REVISION_ID_CLASS_CODE_CC_RESET = 24'hB4000;
localparam REVISION_ID_CLASS_CODE_RIDU_LO = 4;
localparam REVISION_ID_CLASS_CODE_RIDU_HI = 7;
localparam REVISION_ID_CLASS_CODE_RIDU_RESET = 4'b0;
localparam REVISION_ID_CLASS_CODE_RIDL_LO = 0;
localparam REVISION_ID_CLASS_CODE_RIDL_HI = 3;
localparam REVISION_ID_CLASS_CODE_RIDL_RESET = 4'b0;
localparam REVISION_ID_CLASS_CODE_USEMASK = 32'hFFFFFFFF;
localparam REVISION_ID_CLASS_CODE_RO_MASK = 32'hFFFFFFFF;
localparam REVISION_ID_CLASS_CODE_WO_MASK = 32'h0;
localparam REVISION_ID_CLASS_CODE_RESET = 32'hB400000;

typedef struct packed {
    logic  [7:0] CLS;  // RW
} CACHE_LINE_SIZE_t;

localparam CACHE_LINE_SIZE_REG_STRIDE = 12'h1;
localparam CACHE_LINE_SIZE_REG_ENTRIES = 1;
localparam [11:0] CACHE_LINE_SIZE_CR_ADDR = 12'hC;
localparam CACHE_LINE_SIZE_SIZE = 8;
localparam CACHE_LINE_SIZE_CLS_LO = 0;
localparam CACHE_LINE_SIZE_CLS_HI = 7;
localparam CACHE_LINE_SIZE_CLS_RESET = 8'h0;
localparam CACHE_LINE_SIZE_USEMASK = 8'hFF;
localparam CACHE_LINE_SIZE_RO_MASK = 8'h0;
localparam CACHE_LINE_SIZE_WO_MASK = 8'h0;
localparam CACHE_LINE_SIZE_RESET = 8'h0;

typedef struct packed {
    logic  [0:0] MFD;  // RO/V
    logic  [6:0] HDR;  // RO
} HEADER_TYPE_t;

localparam HEADER_TYPE_REG_STRIDE = 12'h1;
localparam HEADER_TYPE_REG_ENTRIES = 1;
localparam [11:0] HEADER_TYPE_CR_ADDR = 12'hE;
localparam HEADER_TYPE_SIZE = 8;
localparam HEADER_TYPE_MFD_LO = 7;
localparam HEADER_TYPE_MFD_HI = 7;
localparam HEADER_TYPE_MFD_RESET = 1'h0;
localparam HEADER_TYPE_HDR_LO = 0;
localparam HEADER_TYPE_HDR_HI = 6;
localparam HEADER_TYPE_HDR_RESET = 7'h0;
localparam HEADER_TYPE_USEMASK = 8'hFF;
localparam HEADER_TYPE_RO_MASK = 8'hFF;
localparam HEADER_TYPE_WO_MASK = 8'h0;
localparam HEADER_TYPE_RESET = 8'h0;

typedef struct packed {
    logic  [5:0] ADDR_L;  // RW
    logic [21:0] ZERO;  // RO
    logic  [0:0] PREF;  // RO
    logic  [1:0] TYP;  // RO
    logic  [0:0] MEM;  // RO
} FUNC_BAR_L_t;

localparam FUNC_BAR_L_REG_STRIDE = 12'h4;
localparam FUNC_BAR_L_REG_ENTRIES = 1;
localparam [11:0] FUNC_BAR_L_CR_ADDR = 12'h10;
localparam FUNC_BAR_L_SIZE = 32;
localparam FUNC_BAR_L_ADDR_L_LO = 26;
localparam FUNC_BAR_L_ADDR_L_HI = 31;
localparam FUNC_BAR_L_ADDR_L_RESET = 6'h0;
localparam FUNC_BAR_L_ZERO_LO = 4;
localparam FUNC_BAR_L_ZERO_HI = 25;
localparam FUNC_BAR_L_ZERO_RESET = 22'h0;
localparam FUNC_BAR_L_PREF_LO = 3;
localparam FUNC_BAR_L_PREF_HI = 3;
localparam FUNC_BAR_L_PREF_RESET = 1'b1;
localparam FUNC_BAR_L_TYP_LO = 1;
localparam FUNC_BAR_L_TYP_HI = 2;
localparam FUNC_BAR_L_TYP_RESET = 2'b10;
localparam FUNC_BAR_L_MEM_LO = 0;
localparam FUNC_BAR_L_MEM_HI = 0;
localparam FUNC_BAR_L_MEM_RESET = 1'b0;
localparam FUNC_BAR_L_USEMASK = 32'hFFFFFFFF;
localparam FUNC_BAR_L_RO_MASK = 32'h3FFFFFF;
localparam FUNC_BAR_L_WO_MASK = 32'h0;
localparam FUNC_BAR_L_RESET = 32'hC;

typedef struct packed {
    logic [31:0] ADDR;  // RW
} FUNC_BAR_U_t;

localparam FUNC_BAR_U_REG_STRIDE = 12'h4;
localparam FUNC_BAR_U_REG_ENTRIES = 1;
localparam [11:0] FUNC_BAR_U_CR_ADDR = 12'h14;
localparam FUNC_BAR_U_SIZE = 32;
localparam FUNC_BAR_U_ADDR_LO = 0;
localparam FUNC_BAR_U_ADDR_HI = 31;
localparam FUNC_BAR_U_ADDR_RESET = 32'h0;
localparam FUNC_BAR_U_USEMASK = 32'hFFFFFFFF;
localparam FUNC_BAR_U_RO_MASK = 32'h0;
localparam FUNC_BAR_U_WO_MASK = 32'h0;
localparam FUNC_BAR_U_RESET = 32'h0;

typedef struct packed {
    logic [27:0] ZERO;  // RO
    logic  [0:0] PREF;  // RO
    logic  [1:0] TYP;  // RO
    logic  [0:0] MEM;  // RO
} CSR_BAR_L_t;

localparam CSR_BAR_L_REG_STRIDE = 12'h4;
localparam CSR_BAR_L_REG_ENTRIES = 1;
localparam [11:0] CSR_BAR_L_CR_ADDR = 12'h18;
localparam CSR_BAR_L_SIZE = 32;
localparam CSR_BAR_L_ZERO_LO = 4;
localparam CSR_BAR_L_ZERO_HI = 31;
localparam CSR_BAR_L_ZERO_RESET = 28'h0;
localparam CSR_BAR_L_PREF_LO = 3;
localparam CSR_BAR_L_PREF_HI = 3;
localparam CSR_BAR_L_PREF_RESET = 1'b1;
localparam CSR_BAR_L_TYP_LO = 1;
localparam CSR_BAR_L_TYP_HI = 2;
localparam CSR_BAR_L_TYP_RESET = 2'b10;
localparam CSR_BAR_L_MEM_LO = 0;
localparam CSR_BAR_L_MEM_HI = 0;
localparam CSR_BAR_L_MEM_RESET = 1'b0;
localparam CSR_BAR_L_USEMASK = 32'hFFFFFFFF;
localparam CSR_BAR_L_RO_MASK = 32'hFFFFFFFF;
localparam CSR_BAR_L_WO_MASK = 32'h0;
localparam CSR_BAR_L_RESET = 32'hC;

typedef struct packed {
    logic [31:0] ADDR;  // RW
} CSR_BAR_U_t;

localparam CSR_BAR_U_REG_STRIDE = 12'h4;
localparam CSR_BAR_U_REG_ENTRIES = 1;
localparam [11:0] CSR_BAR_U_CR_ADDR = 12'h1C;
localparam CSR_BAR_U_SIZE = 32;
localparam CSR_BAR_U_ADDR_LO = 0;
localparam CSR_BAR_U_ADDR_HI = 31;
localparam CSR_BAR_U_ADDR_RESET = 32'h0;
localparam CSR_BAR_U_USEMASK = 32'hFFFFFFFF;
localparam CSR_BAR_U_RO_MASK = 32'h0;
localparam CSR_BAR_U_WO_MASK = 32'h0;
localparam CSR_BAR_U_RESET = 32'h0;

typedef struct packed {
    logic [15:0] SVID;  // RW/O
} SUBSYSTEM_VENDOR_ID_t;

localparam SUBSYSTEM_VENDOR_ID_REG_STRIDE = 12'h2;
localparam SUBSYSTEM_VENDOR_ID_REG_ENTRIES = 1;
localparam [11:0] SUBSYSTEM_VENDOR_ID_CR_ADDR = 12'h2C;
localparam SUBSYSTEM_VENDOR_ID_SIZE = 16;
localparam SUBSYSTEM_VENDOR_ID_SVID_LO = 0;
localparam SUBSYSTEM_VENDOR_ID_SVID_HI = 15;
localparam SUBSYSTEM_VENDOR_ID_SVID_RESET = 16'h8086;
localparam SUBSYSTEM_VENDOR_ID_USEMASK = 16'hFFFF;
localparam SUBSYSTEM_VENDOR_ID_RO_MASK = 16'h0;
localparam SUBSYSTEM_VENDOR_ID_WO_MASK = 16'h0;
localparam SUBSYSTEM_VENDOR_ID_RESET = 16'h8086;

typedef struct packed {
    logic [15:0] SID;  // RO
} SUBSYSTEM_ID_t;

localparam SUBSYSTEM_ID_REG_STRIDE = 12'h2;
localparam SUBSYSTEM_ID_REG_ENTRIES = 1;
localparam [11:0] SUBSYSTEM_ID_CR_ADDR = 12'h2E;
localparam SUBSYSTEM_ID_SIZE = 16;
localparam SUBSYSTEM_ID_SID_LO = 0;
localparam SUBSYSTEM_ID_SID_HI = 15;
localparam SUBSYSTEM_ID_SID_RESET = 16'h0;
localparam SUBSYSTEM_ID_USEMASK = 16'hFFFF;
localparam SUBSYSTEM_ID_RO_MASK = 16'hFFFF;
localparam SUBSYSTEM_ID_WO_MASK = 16'h0;
localparam SUBSYSTEM_ID_RESET = 16'h0;

typedef struct packed {
    logic  [7:0] CP;  // RO
} CAP_PTR_t;

localparam CAP_PTR_REG_STRIDE = 12'h1;
localparam CAP_PTR_REG_ENTRIES = 1;
localparam [11:0] CAP_PTR_CR_ADDR = 12'h34;
localparam CAP_PTR_SIZE = 8;
localparam CAP_PTR_CP_LO = 0;
localparam CAP_PTR_CP_HI = 7;
localparam CAP_PTR_CP_RESET = 8'h60;
localparam CAP_PTR_USEMASK = 8'hFF;
localparam CAP_PTR_RO_MASK = 8'hFF;
localparam CAP_PTR_WO_MASK = 8'h0;
localparam CAP_PTR_RESET = 8'h60;

typedef struct packed {
    logic  [7:0] IRQL;  // RW
} INT_LINE_t;

localparam INT_LINE_REG_STRIDE = 12'h1;
localparam INT_LINE_REG_ENTRIES = 1;
localparam [11:0] INT_LINE_CR_ADDR = 12'h3C;
localparam INT_LINE_SIZE = 8;
localparam INT_LINE_IRQL_LO = 0;
localparam INT_LINE_IRQL_HI = 7;
localparam INT_LINE_IRQL_RESET = 8'h0;
localparam INT_LINE_USEMASK = 8'hFF;
localparam INT_LINE_RO_MASK = 8'h0;
localparam INT_LINE_WO_MASK = 8'h0;
localparam INT_LINE_RESET = 8'h0;

typedef struct packed {
    logic  [7:0] IRQP;  // RO
} INT_PIN_t;

localparam INT_PIN_REG_STRIDE = 12'h1;
localparam INT_PIN_REG_ENTRIES = 1;
localparam [11:0] INT_PIN_CR_ADDR = 12'h3D;
localparam INT_PIN_SIZE = 8;
localparam INT_PIN_IRQP_LO = 0;
localparam INT_PIN_IRQP_HI = 7;
localparam INT_PIN_IRQP_RESET = 8'h0;
localparam INT_PIN_USEMASK = 8'hFF;
localparam INT_PIN_RO_MASK = 8'hFF;
localparam INT_PIN_WO_MASK = 8'h0;
localparam INT_PIN_RESET = 8'h0;

typedef struct packed {
    logic  [7:0] MSIX;  // RO
} MSIX_CAP_ID_t;

localparam MSIX_CAP_ID_REG_STRIDE = 12'h1;
localparam MSIX_CAP_ID_REG_ENTRIES = 1;
localparam HQM_PCIE_MSIX_CAP_REGFILE_STRIDE = 12'h10;
localparam HQM_PCIE_MSIX_CAP_REGFILE_ENTRIES = 1;
localparam [11:0] MSIX_CAP_ID_CR_ADDR = 12'h60;
localparam MSIX_CAP_ID_SIZE = 8;
localparam MSIX_CAP_ID_MSIX_LO = 0;
localparam MSIX_CAP_ID_MSIX_HI = 7;
localparam MSIX_CAP_ID_MSIX_RESET = 8'h11;
localparam MSIX_CAP_ID_USEMASK = 8'hFF;
localparam MSIX_CAP_ID_RO_MASK = 8'hFF;
localparam MSIX_CAP_ID_WO_MASK = 8'h0;
localparam MSIX_CAP_ID_RESET = 8'h11;

typedef struct packed {
    logic  [7:0] CAP_PTR;  // RO
} MSIX_CAP_NEXT_CAP_PTR_t;

localparam MSIX_CAP_NEXT_CAP_PTR_REG_STRIDE = 12'h1;
localparam MSIX_CAP_NEXT_CAP_PTR_REG_ENTRIES = 1;
localparam [11:0] MSIX_CAP_NEXT_CAP_PTR_CR_ADDR = 12'h61;
localparam MSIX_CAP_NEXT_CAP_PTR_SIZE = 8;
localparam MSIX_CAP_NEXT_CAP_PTR_CAP_PTR_LO = 0;
localparam MSIX_CAP_NEXT_CAP_PTR_CAP_PTR_HI = 7;
localparam MSIX_CAP_NEXT_CAP_PTR_CAP_PTR_RESET = 8'h6c;
localparam MSIX_CAP_NEXT_CAP_PTR_USEMASK = 8'hFF;
localparam MSIX_CAP_NEXT_CAP_PTR_RO_MASK = 8'hFF;
localparam MSIX_CAP_NEXT_CAP_PTR_WO_MASK = 8'h0;
localparam MSIX_CAP_NEXT_CAP_PTR_RESET = 8'h6C;

typedef struct packed {
    logic  [0:0] MSIXEN;  // RW
    logic  [0:0] FM;  // RW
    logic  [2:0] RESERVED;  // RO
    logic [10:0] TS;  // RO
} MSIX_CAP_CONTROL_t;

localparam MSIX_CAP_CONTROL_REG_STRIDE = 12'h2;
localparam MSIX_CAP_CONTROL_REG_ENTRIES = 1;
localparam [11:0] MSIX_CAP_CONTROL_CR_ADDR = 12'h62;
localparam MSIX_CAP_CONTROL_SIZE = 16;
localparam MSIX_CAP_CONTROL_MSIXEN_LO = 15;
localparam MSIX_CAP_CONTROL_MSIXEN_HI = 15;
localparam MSIX_CAP_CONTROL_MSIXEN_RESET = 1'h0;
localparam MSIX_CAP_CONTROL_FM_LO = 14;
localparam MSIX_CAP_CONTROL_FM_HI = 14;
localparam MSIX_CAP_CONTROL_FM_RESET = 1'h0;
localparam MSIX_CAP_CONTROL_RESERVED_LO = 11;
localparam MSIX_CAP_CONTROL_RESERVED_HI = 13;
localparam MSIX_CAP_CONTROL_RESERVED_RESET = 3'h0;
localparam MSIX_CAP_CONTROL_TS_LO = 0;
localparam MSIX_CAP_CONTROL_TS_HI = 10;
localparam MSIX_CAP_CONTROL_TS_RESET = 11'h40;
localparam MSIX_CAP_CONTROL_USEMASK = 16'hFFFF;
localparam MSIX_CAP_CONTROL_RO_MASK = 16'h3FFF;
localparam MSIX_CAP_CONTROL_WO_MASK = 16'h0;
localparam MSIX_CAP_CONTROL_RESET = 16'h40;

typedef struct packed {
    logic [28:0] TO;  // RO
    logic  [2:0] TBIR;  // RO
} MSIX_CAP_TABLE_OFFSET_BIR_t;

localparam MSIX_CAP_TABLE_OFFSET_BIR_REG_STRIDE = 12'h4;
localparam MSIX_CAP_TABLE_OFFSET_BIR_REG_ENTRIES = 1;
localparam [11:0] MSIX_CAP_TABLE_OFFSET_BIR_CR_ADDR = 12'h64;
localparam MSIX_CAP_TABLE_OFFSET_BIR_SIZE = 32;
localparam MSIX_CAP_TABLE_OFFSET_BIR_TO_LO = 3;
localparam MSIX_CAP_TABLE_OFFSET_BIR_TO_HI = 31;
localparam MSIX_CAP_TABLE_OFFSET_BIR_TO_RESET = 29'h200000;
localparam MSIX_CAP_TABLE_OFFSET_BIR_TBIR_LO = 0;
localparam MSIX_CAP_TABLE_OFFSET_BIR_TBIR_HI = 2;
localparam MSIX_CAP_TABLE_OFFSET_BIR_TBIR_RESET = 3'h0;
localparam MSIX_CAP_TABLE_OFFSET_BIR_USEMASK = 32'hFFFFFFFF;
localparam MSIX_CAP_TABLE_OFFSET_BIR_RO_MASK = 32'hFFFFFFFF;
localparam MSIX_CAP_TABLE_OFFSET_BIR_WO_MASK = 32'h0;
localparam MSIX_CAP_TABLE_OFFSET_BIR_RESET = 32'h1000000;

typedef struct packed {
    logic [28:0] PBAO;  // RO
    logic  [2:0] PBABIR;  // RO
} MSIX_CAP_PBA_OFFSET_BIR_t;

localparam MSIX_CAP_PBA_OFFSET_BIR_REG_STRIDE = 12'h4;
localparam MSIX_CAP_PBA_OFFSET_BIR_REG_ENTRIES = 1;
localparam [11:0] MSIX_CAP_PBA_OFFSET_BIR_CR_ADDR = 12'h68;
localparam MSIX_CAP_PBA_OFFSET_BIR_SIZE = 32;
localparam MSIX_CAP_PBA_OFFSET_BIR_PBAO_LO = 3;
localparam MSIX_CAP_PBA_OFFSET_BIR_PBAO_HI = 31;
localparam MSIX_CAP_PBA_OFFSET_BIR_PBAO_RESET = 29'h200200;
localparam MSIX_CAP_PBA_OFFSET_BIR_PBABIR_LO = 0;
localparam MSIX_CAP_PBA_OFFSET_BIR_PBABIR_HI = 2;
localparam MSIX_CAP_PBA_OFFSET_BIR_PBABIR_RESET = 3'h0;
localparam MSIX_CAP_PBA_OFFSET_BIR_USEMASK = 32'hFFFFFFFF;
localparam MSIX_CAP_PBA_OFFSET_BIR_RO_MASK = 32'hFFFFFFFF;
localparam MSIX_CAP_PBA_OFFSET_BIR_WO_MASK = 32'h0;
localparam MSIX_CAP_PBA_OFFSET_BIR_RESET = 32'h1001000;

typedef struct packed {
    logic  [7:0] PCIECID;  // RO
} PCIE_CAP_ID_t;

localparam PCIE_CAP_ID_REG_STRIDE = 12'h1;
localparam PCIE_CAP_ID_REG_ENTRIES = 1;
localparam HQM_PCIE_CAP_REGFILE_STRIDE = 12'h40;
localparam HQM_PCIE_CAP_REGFILE_ENTRIES = 1;
localparam [11:0] PCIE_CAP_ID_CR_ADDR = 12'h6C;
localparam PCIE_CAP_ID_SIZE = 8;
localparam PCIE_CAP_ID_PCIECID_LO = 0;
localparam PCIE_CAP_ID_PCIECID_HI = 7;
localparam PCIE_CAP_ID_PCIECID_RESET = 8'h10;
localparam PCIE_CAP_ID_USEMASK = 8'hFF;
localparam PCIE_CAP_ID_RO_MASK = 8'hFF;
localparam PCIE_CAP_ID_WO_MASK = 8'h0;
localparam PCIE_CAP_ID_RESET = 8'h10;

typedef struct packed {
    logic  [7:0] CAP_PTR;  // RO
} PCIE_CAP_NEXT_CAP_PTR_t;

localparam PCIE_CAP_NEXT_CAP_PTR_REG_STRIDE = 12'h1;
localparam PCIE_CAP_NEXT_CAP_PTR_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_NEXT_CAP_PTR_CR_ADDR = 12'h6D;
localparam PCIE_CAP_NEXT_CAP_PTR_SIZE = 8;
localparam PCIE_CAP_NEXT_CAP_PTR_CAP_PTR_LO = 0;
localparam PCIE_CAP_NEXT_CAP_PTR_CAP_PTR_HI = 7;
localparam PCIE_CAP_NEXT_CAP_PTR_CAP_PTR_RESET = 8'hb0;
localparam PCIE_CAP_NEXT_CAP_PTR_USEMASK = 8'hFF;
localparam PCIE_CAP_NEXT_CAP_PTR_RO_MASK = 8'hFF;
localparam PCIE_CAP_NEXT_CAP_PTR_WO_MASK = 8'h0;
localparam PCIE_CAP_NEXT_CAP_PTR_RESET = 8'hB0;

typedef struct packed {
    logic  [1:0] RESERVED;  // RO
    logic  [4:0] IMN;  // RO
    logic  [0:0] SI;  // RO
    logic  [3:0] DPT;  // RO/V
    logic  [3:0] CV;  // RO
} PCIE_CAP_t;

localparam PCIE_CAP_REG_STRIDE = 12'h2;
localparam PCIE_CAP_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_CR_ADDR = 12'h6E;
localparam PCIE_CAP_SIZE = 16;
localparam PCIE_CAP_RESERVED_LO = 14;
localparam PCIE_CAP_RESERVED_HI = 15;
localparam PCIE_CAP_RESERVED_RESET = 2'b0;
localparam PCIE_CAP_IMN_LO = 9;
localparam PCIE_CAP_IMN_HI = 13;
localparam PCIE_CAP_IMN_RESET = 5'b0;
localparam PCIE_CAP_SI_LO = 8;
localparam PCIE_CAP_SI_HI = 8;
localparam PCIE_CAP_SI_RESET = 1'b0;
localparam PCIE_CAP_DPT_LO = 4;
localparam PCIE_CAP_DPT_HI = 7;
localparam PCIE_CAP_DPT_RESET = 4'b0;
localparam PCIE_CAP_CV_LO = 0;
localparam PCIE_CAP_CV_HI = 3;
localparam PCIE_CAP_CV_RESET = 4'b10;
localparam PCIE_CAP_USEMASK = 16'hFFFF;
localparam PCIE_CAP_RO_MASK = 16'hFFFF;
localparam PCIE_CAP_WO_MASK = 16'h0;
localparam PCIE_CAP_RESET = 16'h2;

typedef struct packed {
    logic  [2:0] RESERVED0;  // RO
    logic  [0:0] FLR;  // RO
    logic  [1:0] CSPS;  // RO
    logic  [7:0] CSPV;  // RO
    logic  [1:0] RESERVED1;  // RO
    logic  [0:0] RBEP;  // RO
    logic  [2:0] ATTN;  // RO
    logic  [2:0] EL1L;  // RO
    logic  [2:0] EL0L;  // RO
    logic  [0:0] ETFS;  // RO
    logic  [1:0] PFS;  // RO
    logic  [2:0] MPS;  // RO
} PCIE_CAP_DEVICE_CAP_t;

localparam PCIE_CAP_DEVICE_CAP_REG_STRIDE = 12'h4;
localparam PCIE_CAP_DEVICE_CAP_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_DEVICE_CAP_CR_ADDR = 12'h70;
localparam PCIE_CAP_DEVICE_CAP_SIZE = 32;
localparam PCIE_CAP_DEVICE_CAP_RESERVED0_LO = 29;
localparam PCIE_CAP_DEVICE_CAP_RESERVED0_HI = 31;
localparam PCIE_CAP_DEVICE_CAP_RESERVED0_RESET = 3'h0;
localparam PCIE_CAP_DEVICE_CAP_FLR_LO = 28;
localparam PCIE_CAP_DEVICE_CAP_FLR_HI = 28;
localparam PCIE_CAP_DEVICE_CAP_FLR_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CAP_CSPS_LO = 26;
localparam PCIE_CAP_DEVICE_CAP_CSPS_HI = 27;
localparam PCIE_CAP_DEVICE_CAP_CSPS_RESET = 2'b0;
localparam PCIE_CAP_DEVICE_CAP_CSPV_LO = 18;
localparam PCIE_CAP_DEVICE_CAP_CSPV_HI = 25;
localparam PCIE_CAP_DEVICE_CAP_CSPV_RESET = 8'h0;
localparam PCIE_CAP_DEVICE_CAP_RESERVED1_LO = 16;
localparam PCIE_CAP_DEVICE_CAP_RESERVED1_HI = 17;
localparam PCIE_CAP_DEVICE_CAP_RESERVED1_RESET = 2'h0;
localparam PCIE_CAP_DEVICE_CAP_RBEP_LO = 15;
localparam PCIE_CAP_DEVICE_CAP_RBEP_HI = 15;
localparam PCIE_CAP_DEVICE_CAP_RBEP_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CAP_ATTN_LO = 12;
localparam PCIE_CAP_DEVICE_CAP_ATTN_HI = 14;
localparam PCIE_CAP_DEVICE_CAP_ATTN_RESET = 3'b0;
localparam PCIE_CAP_DEVICE_CAP_EL1L_LO = 9;
localparam PCIE_CAP_DEVICE_CAP_EL1L_HI = 11;
localparam PCIE_CAP_DEVICE_CAP_EL1L_RESET = 3'b0;
localparam PCIE_CAP_DEVICE_CAP_EL0L_LO = 6;
localparam PCIE_CAP_DEVICE_CAP_EL0L_HI = 8;
localparam PCIE_CAP_DEVICE_CAP_EL0L_RESET = 3'b1;
localparam PCIE_CAP_DEVICE_CAP_ETFS_LO = 5;
localparam PCIE_CAP_DEVICE_CAP_ETFS_HI = 5;
localparam PCIE_CAP_DEVICE_CAP_ETFS_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CAP_PFS_LO = 3;
localparam PCIE_CAP_DEVICE_CAP_PFS_HI = 4;
localparam PCIE_CAP_DEVICE_CAP_PFS_RESET = 2'b0;
localparam PCIE_CAP_DEVICE_CAP_MPS_LO = 0;
localparam PCIE_CAP_DEVICE_CAP_MPS_HI = 2;
localparam PCIE_CAP_DEVICE_CAP_MPS_RESET = 3'b10;
localparam PCIE_CAP_DEVICE_CAP_USEMASK = 32'hFFFFFFFF;
localparam PCIE_CAP_DEVICE_CAP_RO_MASK = 32'hFFFFFFFF;
localparam PCIE_CAP_DEVICE_CAP_WO_MASK = 32'h0;
localparam PCIE_CAP_DEVICE_CAP_RESET = 32'h10008062;

typedef struct packed {
    logic  [0:0] STARTFLR;  // RW
    logic  [2:0] MRS;  // RW
    logic  [0:0] ENS;  // RW
    logic  [0:0] APME;  // RO
    logic  [0:0] PFE;  // RO
    logic  [0:0] ETFE;  // RW
    logic  [2:0] MPS;  // RW
    logic  [0:0] ERO;  // RW
    logic  [0:0] URRO;  // RW
    logic  [0:0] FERE;  // RW
    logic  [0:0] NERE;  // RW
    logic  [0:0] CERE;  // RW
} PCIE_CAP_DEVICE_CONTROL_t;

localparam PCIE_CAP_DEVICE_CONTROL_REG_STRIDE = 12'h2;
localparam PCIE_CAP_DEVICE_CONTROL_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_DEVICE_CONTROL_CR_ADDR = 12'h74;
localparam PCIE_CAP_DEVICE_CONTROL_SIZE = 16;
localparam PCIE_CAP_DEVICE_CONTROL_STARTFLR_LO = 15;
localparam PCIE_CAP_DEVICE_CONTROL_STARTFLR_HI = 15;
localparam PCIE_CAP_DEVICE_CONTROL_STARTFLR_RESET = 1'b0;
localparam PCIE_CAP_DEVICE_CONTROL_MRS_LO = 12;
localparam PCIE_CAP_DEVICE_CONTROL_MRS_HI = 14;
localparam PCIE_CAP_DEVICE_CONTROL_MRS_RESET = 3'b10;
localparam PCIE_CAP_DEVICE_CONTROL_ENS_LO = 11;
localparam PCIE_CAP_DEVICE_CONTROL_ENS_HI = 11;
localparam PCIE_CAP_DEVICE_CONTROL_ENS_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CONTROL_APME_LO = 10;
localparam PCIE_CAP_DEVICE_CONTROL_APME_HI = 10;
localparam PCIE_CAP_DEVICE_CONTROL_APME_RESET = 1'b0;
localparam PCIE_CAP_DEVICE_CONTROL_PFE_LO = 9;
localparam PCIE_CAP_DEVICE_CONTROL_PFE_HI = 9;
localparam PCIE_CAP_DEVICE_CONTROL_PFE_RESET = 1'b0;
localparam PCIE_CAP_DEVICE_CONTROL_ETFE_LO = 8;
localparam PCIE_CAP_DEVICE_CONTROL_ETFE_HI = 8;
localparam PCIE_CAP_DEVICE_CONTROL_ETFE_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CONTROL_MPS_LO = 5;
localparam PCIE_CAP_DEVICE_CONTROL_MPS_HI = 7;
localparam PCIE_CAP_DEVICE_CONTROL_MPS_RESET = 3'b0;
localparam PCIE_CAP_DEVICE_CONTROL_ERO_LO = 4;
localparam PCIE_CAP_DEVICE_CONTROL_ERO_HI = 4;
localparam PCIE_CAP_DEVICE_CONTROL_ERO_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CONTROL_URRO_LO = 3;
localparam PCIE_CAP_DEVICE_CONTROL_URRO_HI = 3;
localparam PCIE_CAP_DEVICE_CONTROL_URRO_RESET = 1'b0;
localparam PCIE_CAP_DEVICE_CONTROL_FERE_LO = 2;
localparam PCIE_CAP_DEVICE_CONTROL_FERE_HI = 2;
localparam PCIE_CAP_DEVICE_CONTROL_FERE_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_CONTROL_NERE_LO = 1;
localparam PCIE_CAP_DEVICE_CONTROL_NERE_HI = 1;
localparam PCIE_CAP_DEVICE_CONTROL_NERE_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_CONTROL_CERE_LO = 0;
localparam PCIE_CAP_DEVICE_CONTROL_CERE_HI = 0;
localparam PCIE_CAP_DEVICE_CONTROL_CERE_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_CONTROL_USEMASK = 16'hFFFF;
localparam PCIE_CAP_DEVICE_CONTROL_RO_MASK = 16'h600;
localparam PCIE_CAP_DEVICE_CONTROL_WO_MASK = 16'h0;
localparam PCIE_CAP_DEVICE_CONTROL_RESET = 16'h2910;

typedef struct packed {
    logic  [9:0] RESERVED;  // RO
    logic  [0:0] TP;  // RO/V
    logic  [0:0] APD;  // RO
    logic  [0:0] URD;  // RW/1C/V
    logic  [0:0] FED;  // RW/1C/V
    logic  [0:0] NED;  // RW/1C/V
    logic  [0:0] CED;  // RW/1C/V
} PCIE_CAP_DEVICE_STATUS_t;

localparam PCIE_CAP_DEVICE_STATUS_REG_STRIDE = 12'h2;
localparam PCIE_CAP_DEVICE_STATUS_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_DEVICE_STATUS_CR_ADDR = 12'h76;
localparam PCIE_CAP_DEVICE_STATUS_SIZE = 16;
localparam PCIE_CAP_DEVICE_STATUS_RESERVED_LO = 6;
localparam PCIE_CAP_DEVICE_STATUS_RESERVED_HI = 15;
localparam PCIE_CAP_DEVICE_STATUS_RESERVED_RESET = 10'h0;
localparam PCIE_CAP_DEVICE_STATUS_TP_LO = 5;
localparam PCIE_CAP_DEVICE_STATUS_TP_HI = 5;
localparam PCIE_CAP_DEVICE_STATUS_TP_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_STATUS_APD_LO = 4;
localparam PCIE_CAP_DEVICE_STATUS_APD_HI = 4;
localparam PCIE_CAP_DEVICE_STATUS_APD_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_STATUS_URD_LO = 3;
localparam PCIE_CAP_DEVICE_STATUS_URD_HI = 3;
localparam PCIE_CAP_DEVICE_STATUS_URD_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_STATUS_FED_LO = 2;
localparam PCIE_CAP_DEVICE_STATUS_FED_HI = 2;
localparam PCIE_CAP_DEVICE_STATUS_FED_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_STATUS_NED_LO = 1;
localparam PCIE_CAP_DEVICE_STATUS_NED_HI = 1;
localparam PCIE_CAP_DEVICE_STATUS_NED_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_STATUS_CED_LO = 0;
localparam PCIE_CAP_DEVICE_STATUS_CED_HI = 0;
localparam PCIE_CAP_DEVICE_STATUS_CED_RESET = 1'h0;
localparam PCIE_CAP_DEVICE_STATUS_USEMASK = 16'hFFFF;
localparam PCIE_CAP_DEVICE_STATUS_RO_MASK = 16'hFFF0;
localparam PCIE_CAP_DEVICE_STATUS_WO_MASK = 16'h0;
localparam PCIE_CAP_DEVICE_STATUS_RESET = 16'h0;

typedef struct packed {
    logic  [7:0] PORTNUM;  // RW/O/P
    logic  [0:0] RESERVED;  // RO
    logic  [0:0] ASPM;  // RO
    logic  [0:0] LBN;  // RO
    logic  [2:0] NA_IOSF;  // RO
    logic  [2:0] L1EL;  // RO
    logic  [2:0] L0EL;  // RO
    logic  [1:0] ASLPM;  // RO
    logic  [5:0] LINKW;  // RO
    logic  [3:0] MAXSPEED;  // RO
} PCIE_CAP_LINK_CAP_t;

localparam PCIE_CAP_LINK_CAP_REG_STRIDE = 12'h4;
localparam PCIE_CAP_LINK_CAP_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_LINK_CAP_CR_ADDR = 12'h78;
localparam PCIE_CAP_LINK_CAP_SIZE = 32;
localparam PCIE_CAP_LINK_CAP_PORTNUM_LO = 24;
localparam PCIE_CAP_LINK_CAP_PORTNUM_HI = 31;
localparam PCIE_CAP_LINK_CAP_PORTNUM_RESET = 8'h0;
localparam PCIE_CAP_LINK_CAP_RESERVED_LO = 23;
localparam PCIE_CAP_LINK_CAP_RESERVED_HI = 23;
localparam PCIE_CAP_LINK_CAP_RESERVED_RESET = 1'b0;
localparam PCIE_CAP_LINK_CAP_ASPM_LO = 22;
localparam PCIE_CAP_LINK_CAP_ASPM_HI = 22;
localparam PCIE_CAP_LINK_CAP_ASPM_RESET = 1'b1;
localparam PCIE_CAP_LINK_CAP_LBN_LO = 21;
localparam PCIE_CAP_LINK_CAP_LBN_HI = 21;
localparam PCIE_CAP_LINK_CAP_LBN_RESET = 1'b0;
localparam PCIE_CAP_LINK_CAP_NA_IOSF_LO = 18;
localparam PCIE_CAP_LINK_CAP_NA_IOSF_HI = 20;
localparam PCIE_CAP_LINK_CAP_NA_IOSF_RESET = 3'b0;
localparam PCIE_CAP_LINK_CAP_L1EL_LO = 15;
localparam PCIE_CAP_LINK_CAP_L1EL_HI = 17;
localparam PCIE_CAP_LINK_CAP_L1EL_RESET = 3'b0;
localparam PCIE_CAP_LINK_CAP_L0EL_LO = 12;
localparam PCIE_CAP_LINK_CAP_L0EL_HI = 14;
localparam PCIE_CAP_LINK_CAP_L0EL_RESET = 3'b0;
localparam PCIE_CAP_LINK_CAP_ASLPM_LO = 10;
localparam PCIE_CAP_LINK_CAP_ASLPM_HI = 11;
localparam PCIE_CAP_LINK_CAP_ASLPM_RESET = 2'b11;
localparam PCIE_CAP_LINK_CAP_LINKW_LO = 4;
localparam PCIE_CAP_LINK_CAP_LINKW_HI = 9;
localparam PCIE_CAP_LINK_CAP_LINKW_RESET = 6'b1;
localparam PCIE_CAP_LINK_CAP_MAXSPEED_LO = 0;
localparam PCIE_CAP_LINK_CAP_MAXSPEED_HI = 3;
localparam PCIE_CAP_LINK_CAP_MAXSPEED_RESET = 4'b1;
localparam PCIE_CAP_LINK_CAP_USEMASK = 32'hFFFFFFFF;
localparam PCIE_CAP_LINK_CAP_RO_MASK = 32'hFFFFFF;
localparam PCIE_CAP_LINK_CAP_WO_MASK = 32'h0;
localparam PCIE_CAP_LINK_CAP_RESET = 32'h400C11;

typedef struct packed {
    logic  [3:0] RESERVED;  // RO
    logic  [0:0] LBWINTE;  // RO
    logic  [0:0] LBWMINTE;  // RO
    logic  [0:0] WD;  // RO
    logic  [0:0] ECLKPM;  // RO
    logic  [0:0] EXTSYNC;  // RW
    logic  [0:0] CCLKCFG;  // RW
    logic  [0:0] RETRAIN;  // RO
    logic  [0:0] LINKDIS;  // RO
    logic  [0:0] RCB;  // RW
    logic  [0:0] RESERVED2;  // RO
    logic  [1:0] ASPMC;  // RW
} PCIE_CAP_LINK_CONTROL_t;

localparam PCIE_CAP_LINK_CONTROL_REG_STRIDE = 12'h2;
localparam PCIE_CAP_LINK_CONTROL_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_LINK_CONTROL_CR_ADDR = 12'h7C;
localparam PCIE_CAP_LINK_CONTROL_SIZE = 16;
localparam PCIE_CAP_LINK_CONTROL_RESERVED_LO = 12;
localparam PCIE_CAP_LINK_CONTROL_RESERVED_HI = 15;
localparam PCIE_CAP_LINK_CONTROL_RESERVED_RESET = 4'b0;
localparam PCIE_CAP_LINK_CONTROL_LBWINTE_LO = 11;
localparam PCIE_CAP_LINK_CONTROL_LBWINTE_HI = 11;
localparam PCIE_CAP_LINK_CONTROL_LBWINTE_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_LBWMINTE_LO = 10;
localparam PCIE_CAP_LINK_CONTROL_LBWMINTE_HI = 10;
localparam PCIE_CAP_LINK_CONTROL_LBWMINTE_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_WD_LO = 9;
localparam PCIE_CAP_LINK_CONTROL_WD_HI = 9;
localparam PCIE_CAP_LINK_CONTROL_WD_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_ECLKPM_LO = 8;
localparam PCIE_CAP_LINK_CONTROL_ECLKPM_HI = 8;
localparam PCIE_CAP_LINK_CONTROL_ECLKPM_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_EXTSYNC_LO = 7;
localparam PCIE_CAP_LINK_CONTROL_EXTSYNC_HI = 7;
localparam PCIE_CAP_LINK_CONTROL_EXTSYNC_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_CCLKCFG_LO = 6;
localparam PCIE_CAP_LINK_CONTROL_CCLKCFG_HI = 6;
localparam PCIE_CAP_LINK_CONTROL_CCLKCFG_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_RETRAIN_LO = 5;
localparam PCIE_CAP_LINK_CONTROL_RETRAIN_HI = 5;
localparam PCIE_CAP_LINK_CONTROL_RETRAIN_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_LINKDIS_LO = 4;
localparam PCIE_CAP_LINK_CONTROL_LINKDIS_HI = 4;
localparam PCIE_CAP_LINK_CONTROL_LINKDIS_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_RCB_LO = 3;
localparam PCIE_CAP_LINK_CONTROL_RCB_HI = 3;
localparam PCIE_CAP_LINK_CONTROL_RCB_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_RESERVED2_LO = 2;
localparam PCIE_CAP_LINK_CONTROL_RESERVED2_HI = 2;
localparam PCIE_CAP_LINK_CONTROL_RESERVED2_RESET = 1'b0;
localparam PCIE_CAP_LINK_CONTROL_ASPMC_LO = 0;
localparam PCIE_CAP_LINK_CONTROL_ASPMC_HI = 1;
localparam PCIE_CAP_LINK_CONTROL_ASPMC_RESET = 2'b0;
localparam PCIE_CAP_LINK_CONTROL_USEMASK = 16'hFFFF;
localparam PCIE_CAP_LINK_CONTROL_RO_MASK = 16'hFF34;
localparam PCIE_CAP_LINK_CONTROL_WO_MASK = 16'h0;
localparam PCIE_CAP_LINK_CONTROL_RESET = 16'h0;

typedef struct packed {
    logic  [0:0] RESERVED;  // RO
    logic  [0:0] LBWMS;  // RO
    logic  [0:0] DLACT;  // RO
    logic  [0:0] SCLKCFG;  // RO
    logic  [0:0] LTINPROG;  // RO
    logic  [0:0] LTE;  // RO
    logic  [5:0] NLW;  // RO
    logic  [3:0] NLS;  // RO
} PCIE_CAP_LINK_STATUS_t;

localparam PCIE_CAP_LINK_STATUS_REG_STRIDE = 12'h2;
localparam PCIE_CAP_LINK_STATUS_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_LINK_STATUS_CR_ADDR = 12'h7E;
localparam PCIE_CAP_LINK_STATUS_SIZE = 16;
localparam PCIE_CAP_LINK_STATUS_RESERVED_LO = 15;
localparam PCIE_CAP_LINK_STATUS_RESERVED_HI = 15;
localparam PCIE_CAP_LINK_STATUS_RESERVED_RESET = 1'b0;
localparam PCIE_CAP_LINK_STATUS_LBWMS_LO = 14;
localparam PCIE_CAP_LINK_STATUS_LBWMS_HI = 14;
localparam PCIE_CAP_LINK_STATUS_LBWMS_RESET = 1'b0;
localparam PCIE_CAP_LINK_STATUS_DLACT_LO = 13;
localparam PCIE_CAP_LINK_STATUS_DLACT_HI = 13;
localparam PCIE_CAP_LINK_STATUS_DLACT_RESET = 1'b0;
localparam PCIE_CAP_LINK_STATUS_SCLKCFG_LO = 12;
localparam PCIE_CAP_LINK_STATUS_SCLKCFG_HI = 12;
localparam PCIE_CAP_LINK_STATUS_SCLKCFG_RESET = 1'b1;
localparam PCIE_CAP_LINK_STATUS_LTINPROG_LO = 11;
localparam PCIE_CAP_LINK_STATUS_LTINPROG_HI = 11;
localparam PCIE_CAP_LINK_STATUS_LTINPROG_RESET = 1'b0;
localparam PCIE_CAP_LINK_STATUS_LTE_LO = 10;
localparam PCIE_CAP_LINK_STATUS_LTE_HI = 10;
localparam PCIE_CAP_LINK_STATUS_LTE_RESET = 1'b0;
localparam PCIE_CAP_LINK_STATUS_NLW_LO = 4;
localparam PCIE_CAP_LINK_STATUS_NLW_HI = 9;
localparam PCIE_CAP_LINK_STATUS_NLW_RESET = 6'b1;
localparam PCIE_CAP_LINK_STATUS_NLS_LO = 0;
localparam PCIE_CAP_LINK_STATUS_NLS_HI = 3;
localparam PCIE_CAP_LINK_STATUS_NLS_RESET = 4'b1;
localparam PCIE_CAP_LINK_STATUS_USEMASK = 16'hFFFF;
localparam PCIE_CAP_LINK_STATUS_RO_MASK = 16'hFFFF;
localparam PCIE_CAP_LINK_STATUS_WO_MASK = 16'h0;
localparam PCIE_CAP_LINK_STATUS_RESET = 16'h1011;

typedef struct packed {
    logic  [7:0] RESERVED3;  // RO
    logic  [1:0] MAXE2ETLPP;  // RO
    logic  [0:0] E2ETLPPS;  // RO
    logic  [0:0] EFFS;  // RO
    logic  [1:0] RESERVED2;  // RO
    logic  [0:0] REQ10BTAGS;  // RO
    logic  [0:0] CMP10BTAGS;  // RO/V
    logic [10:0] RESERVED;  // RO
    logic  [0:0] CTODS;  // RO
    logic  [3:0] CTORS;  // RO
} PCIE_CAP_DEVICE_CAP_2_t;

localparam PCIE_CAP_DEVICE_CAP_2_REG_STRIDE = 12'h4;
localparam PCIE_CAP_DEVICE_CAP_2_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_DEVICE_CAP_2_CR_ADDR = 12'h90;
localparam PCIE_CAP_DEVICE_CAP_2_SIZE = 32;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED3_LO = 24;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED3_HI = 31;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED3_RESET = 8'h0;
localparam PCIE_CAP_DEVICE_CAP_2_MAXE2ETLPP_LO = 22;
localparam PCIE_CAP_DEVICE_CAP_2_MAXE2ETLPP_HI = 23;
localparam PCIE_CAP_DEVICE_CAP_2_MAXE2ETLPP_RESET = 2'b1;
localparam PCIE_CAP_DEVICE_CAP_2_E2ETLPPS_LO = 21;
localparam PCIE_CAP_DEVICE_CAP_2_E2ETLPPS_HI = 21;
localparam PCIE_CAP_DEVICE_CAP_2_E2ETLPPS_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CAP_2_EFFS_LO = 20;
localparam PCIE_CAP_DEVICE_CAP_2_EFFS_HI = 20;
localparam PCIE_CAP_DEVICE_CAP_2_EFFS_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED2_LO = 18;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED2_HI = 19;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED2_RESET = 2'h0;
localparam PCIE_CAP_DEVICE_CAP_2_REQ10BTAGS_LO = 17;
localparam PCIE_CAP_DEVICE_CAP_2_REQ10BTAGS_HI = 17;
localparam PCIE_CAP_DEVICE_CAP_2_REQ10BTAGS_RESET = 1'b0;
localparam PCIE_CAP_DEVICE_CAP_2_CMP10BTAGS_LO = 16;
localparam PCIE_CAP_DEVICE_CAP_2_CMP10BTAGS_HI = 16;
localparam PCIE_CAP_DEVICE_CAP_2_CMP10BTAGS_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED_LO = 5;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED_HI = 15;
localparam PCIE_CAP_DEVICE_CAP_2_RESERVED_RESET = 11'h0;
localparam PCIE_CAP_DEVICE_CAP_2_CTODS_LO = 4;
localparam PCIE_CAP_DEVICE_CAP_2_CTODS_HI = 4;
localparam PCIE_CAP_DEVICE_CAP_2_CTODS_RESET = 1'b1;
localparam PCIE_CAP_DEVICE_CAP_2_CTORS_LO = 0;
localparam PCIE_CAP_DEVICE_CAP_2_CTORS_HI = 3;
localparam PCIE_CAP_DEVICE_CAP_2_CTORS_RESET = 4'b0;
localparam PCIE_CAP_DEVICE_CAP_2_USEMASK = 32'hFFFFFFFF;
localparam PCIE_CAP_DEVICE_CAP_2_RO_MASK = 32'hFFFFFFFF;
localparam PCIE_CAP_DEVICE_CAP_2_WO_MASK = 32'h0;
localparam PCIE_CAP_DEVICE_CAP_2_RESET = 32'h710010;

typedef struct packed {
    logic  [6:0] RESERVED1;  // RO
    logic  [0:0] EIDO;  // RW
    logic  [2:0] RESERVED0;  // RO
    logic  [0:0] CTODIS;  // RW
    logic  [3:0] CTOV;  // RO
} PCIE_CAP_DEVICE_CONTROL_2_t;

localparam PCIE_CAP_DEVICE_CONTROL_2_REG_STRIDE = 12'h2;
localparam PCIE_CAP_DEVICE_CONTROL_2_REG_ENTRIES = 1;
localparam [11:0] PCIE_CAP_DEVICE_CONTROL_2_CR_ADDR = 12'h94;
localparam PCIE_CAP_DEVICE_CONTROL_2_SIZE = 16;
localparam PCIE_CAP_DEVICE_CONTROL_2_RESERVED1_LO = 9;
localparam PCIE_CAP_DEVICE_CONTROL_2_RESERVED1_HI = 15;
localparam PCIE_CAP_DEVICE_CONTROL_2_RESERVED1_RESET = 7'h0;
localparam PCIE_CAP_DEVICE_CONTROL_2_EIDO_LO = 8;
localparam PCIE_CAP_DEVICE_CONTROL_2_EIDO_HI = 8;
localparam PCIE_CAP_DEVICE_CONTROL_2_EIDO_RESET = 1'b0;
localparam PCIE_CAP_DEVICE_CONTROL_2_RESERVED0_LO = 5;
localparam PCIE_CAP_DEVICE_CONTROL_2_RESERVED0_HI = 7;
localparam PCIE_CAP_DEVICE_CONTROL_2_RESERVED0_RESET = 3'h0;
localparam PCIE_CAP_DEVICE_CONTROL_2_CTODIS_LO = 4;
localparam PCIE_CAP_DEVICE_CONTROL_2_CTODIS_HI = 4;
localparam PCIE_CAP_DEVICE_CONTROL_2_CTODIS_RESET = 1'b0;
localparam PCIE_CAP_DEVICE_CONTROL_2_CTOV_LO = 0;
localparam PCIE_CAP_DEVICE_CONTROL_2_CTOV_HI = 3;
localparam PCIE_CAP_DEVICE_CONTROL_2_CTOV_RESET = 4'b0;
localparam PCIE_CAP_DEVICE_CONTROL_2_USEMASK = 16'hFFFF;
localparam PCIE_CAP_DEVICE_CONTROL_2_RO_MASK = 16'hFEEF;
localparam PCIE_CAP_DEVICE_CONTROL_2_WO_MASK = 16'h0;
localparam PCIE_CAP_DEVICE_CONTROL_2_RESET = 16'h0;

typedef struct packed {
    logic  [7:0] PMID;  // RO
} PM_CAP_ID_t;

localparam PM_CAP_ID_REG_STRIDE = 12'h1;
localparam PM_CAP_ID_REG_ENTRIES = 1;
localparam HQM_PCIE_PM_CAP_REGFILE_STRIDE = 12'h8;
localparam HQM_PCIE_PM_CAP_REGFILE_ENTRIES = 1;
localparam [11:0] PM_CAP_ID_CR_ADDR = 12'hB0;
localparam PM_CAP_ID_SIZE = 8;
localparam PM_CAP_ID_PMID_LO = 0;
localparam PM_CAP_ID_PMID_HI = 7;
localparam PM_CAP_ID_PMID_RESET = 8'h1;
localparam PM_CAP_ID_USEMASK = 8'hFF;
localparam PM_CAP_ID_RO_MASK = 8'hFF;
localparam PM_CAP_ID_WO_MASK = 8'h0;
localparam PM_CAP_ID_RESET = 8'h1;

typedef struct packed {
    logic  [7:0] CAP_PTR;  // RO
} PM_CAP_NEXT_CAP_PTR_t;

localparam PM_CAP_NEXT_CAP_PTR_REG_STRIDE = 12'h1;
localparam PM_CAP_NEXT_CAP_PTR_REG_ENTRIES = 1;
localparam [11:0] PM_CAP_NEXT_CAP_PTR_CR_ADDR = 12'hB1;
localparam PM_CAP_NEXT_CAP_PTR_SIZE = 8;
localparam PM_CAP_NEXT_CAP_PTR_CAP_PTR_LO = 0;
localparam PM_CAP_NEXT_CAP_PTR_CAP_PTR_HI = 7;
localparam PM_CAP_NEXT_CAP_PTR_CAP_PTR_RESET = 8'h0;
localparam PM_CAP_NEXT_CAP_PTR_USEMASK = 8'hFF;
localparam PM_CAP_NEXT_CAP_PTR_RO_MASK = 8'hFF;
localparam PM_CAP_NEXT_CAP_PTR_WO_MASK = 8'h0;
localparam PM_CAP_NEXT_CAP_PTR_RESET = 8'h0;

typedef struct packed {
    logic  [4:0] PME;  // RO
    logic  [0:0] D2;  // RO
    logic  [0:0] D1;  // RO
    logic  [2:0] AC;  // RO
    logic  [0:0] DSI;  // RO
    logic  [0:0] IROR2D0;  // RO
    logic  [0:0] PMC;  // RO
    logic  [2:0] PMV;  // RO
} PM_CAP_t;

localparam PM_CAP_REG_STRIDE = 12'h2;
localparam PM_CAP_REG_ENTRIES = 1;
localparam [11:0] PM_CAP_CR_ADDR = 12'hB2;
localparam PM_CAP_SIZE = 16;
localparam PM_CAP_PME_LO = 11;
localparam PM_CAP_PME_HI = 15;
localparam PM_CAP_PME_RESET = 5'b0;
localparam PM_CAP_D2_LO = 10;
localparam PM_CAP_D2_HI = 10;
localparam PM_CAP_D2_RESET = 1'b0;
localparam PM_CAP_D1_LO = 9;
localparam PM_CAP_D1_HI = 9;
localparam PM_CAP_D1_RESET = 1'b0;
localparam PM_CAP_AC_LO = 6;
localparam PM_CAP_AC_HI = 8;
localparam PM_CAP_AC_RESET = 3'b0;
localparam PM_CAP_DSI_LO = 5;
localparam PM_CAP_DSI_HI = 5;
localparam PM_CAP_DSI_RESET = 1'b1;
localparam PM_CAP_IROR2D0_LO = 4;
localparam PM_CAP_IROR2D0_HI = 4;
localparam PM_CAP_IROR2D0_RESET = 1'b0;
localparam PM_CAP_PMC_LO = 3;
localparam PM_CAP_PMC_HI = 3;
localparam PM_CAP_PMC_RESET = 1'b0;
localparam PM_CAP_PMV_LO = 0;
localparam PM_CAP_PMV_HI = 2;
localparam PM_CAP_PMV_RESET = 3'b11;
localparam PM_CAP_USEMASK = 16'hFFFF;
localparam PM_CAP_RO_MASK = 16'hFFFF;
localparam PM_CAP_WO_MASK = 16'h0;
localparam PM_CAP_RESET = 16'h23;

typedef struct packed {
    logic [15:0] RESERVED;  // RO
    logic  [0:0] PMS;  // RO
    logic  [1:0] DSC;  // RO
    logic  [3:0] DSEL;  // RO
    logic  [0:0] PME;  // RO
    logic  [3:0] RESERVED1;  // RO
    logic  [0:0] NSR;  // RO
    logic  [0:0] RESERVED2;  // RO
    logic  [1:0] PS;  // RW
} PM_CAP_CONTROL_STATUS_t;

localparam PM_CAP_CONTROL_STATUS_REG_STRIDE = 12'h4;
localparam PM_CAP_CONTROL_STATUS_REG_ENTRIES = 1;
localparam [11:0] PM_CAP_CONTROL_STATUS_CR_ADDR = 12'hB4;
localparam PM_CAP_CONTROL_STATUS_SIZE = 32;
localparam PM_CAP_CONTROL_STATUS_RESERVED_LO = 16;
localparam PM_CAP_CONTROL_STATUS_RESERVED_HI = 31;
localparam PM_CAP_CONTROL_STATUS_RESERVED_RESET = 16'h0;
localparam PM_CAP_CONTROL_STATUS_PMS_LO = 15;
localparam PM_CAP_CONTROL_STATUS_PMS_HI = 15;
localparam PM_CAP_CONTROL_STATUS_PMS_RESET = 1'b0;
localparam PM_CAP_CONTROL_STATUS_DSC_LO = 13;
localparam PM_CAP_CONTROL_STATUS_DSC_HI = 14;
localparam PM_CAP_CONTROL_STATUS_DSC_RESET = 2'b0;
localparam PM_CAP_CONTROL_STATUS_DSEL_LO = 9;
localparam PM_CAP_CONTROL_STATUS_DSEL_HI = 12;
localparam PM_CAP_CONTROL_STATUS_DSEL_RESET = 4'b0;
localparam PM_CAP_CONTROL_STATUS_PME_LO = 8;
localparam PM_CAP_CONTROL_STATUS_PME_HI = 8;
localparam PM_CAP_CONTROL_STATUS_PME_RESET = 1'b0;
localparam PM_CAP_CONTROL_STATUS_RESERVED1_LO = 4;
localparam PM_CAP_CONTROL_STATUS_RESERVED1_HI = 7;
localparam PM_CAP_CONTROL_STATUS_RESERVED1_RESET = 4'b0;
localparam PM_CAP_CONTROL_STATUS_NSR_LO = 3;
localparam PM_CAP_CONTROL_STATUS_NSR_HI = 3;
localparam PM_CAP_CONTROL_STATUS_NSR_RESET = 1'b1;
localparam PM_CAP_CONTROL_STATUS_RESERVED2_LO = 2;
localparam PM_CAP_CONTROL_STATUS_RESERVED2_HI = 2;
localparam PM_CAP_CONTROL_STATUS_RESERVED2_RESET = 1'b0;
localparam PM_CAP_CONTROL_STATUS_PS_LO = 0;
localparam PM_CAP_CONTROL_STATUS_PS_HI = 1;
localparam PM_CAP_CONTROL_STATUS_PS_RESET = 2'b0;
localparam PM_CAP_CONTROL_STATUS_USEMASK = 32'hFFFFFFFF;
localparam PM_CAP_CONTROL_STATUS_RO_MASK = 32'hFFFFFFFC;
localparam PM_CAP_CONTROL_STATUS_WO_MASK = 32'h0;
localparam PM_CAP_CONTROL_STATUS_RESET = 32'h8;

typedef struct packed {
    logic [15:0] ACSCID;  // RO
} ACS_CAP_ID_t;

localparam ACS_CAP_ID_REG_STRIDE = 12'h2;
localparam ACS_CAP_ID_REG_ENTRIES = 1;
localparam HQM_PCIE_ACS_CAP_REGFILE_STRIDE = 12'h8;
localparam HQM_PCIE_ACS_CAP_REGFILE_ENTRIES = 1;
localparam [11:0] ACS_CAP_ID_CR_ADDR = 12'h100;
localparam ACS_CAP_ID_SIZE = 16;
localparam ACS_CAP_ID_ACSCID_LO = 0;
localparam ACS_CAP_ID_ACSCID_HI = 15;
localparam ACS_CAP_ID_ACSCID_RESET = 16'hD;
localparam ACS_CAP_ID_USEMASK = 16'hFFFF;
localparam ACS_CAP_ID_RO_MASK = 16'hFFFF;
localparam ACS_CAP_ID_WO_MASK = 16'h0;
localparam ACS_CAP_ID_RESET = 16'hD;

typedef struct packed {
    logic [11:0] CAP_PTR;  // RO
    logic  [3:0] ACSCV;  // RO
} ACS_CAP_VERSION_NEXT_PTR_t;

localparam ACS_CAP_VERSION_NEXT_PTR_REG_STRIDE = 12'h2;
localparam ACS_CAP_VERSION_NEXT_PTR_REG_ENTRIES = 1;
localparam [11:0] ACS_CAP_VERSION_NEXT_PTR_CR_ADDR = 12'h102;
localparam ACS_CAP_VERSION_NEXT_PTR_SIZE = 16;
localparam ACS_CAP_VERSION_NEXT_PTR_CAP_PTR_LO = 4;
localparam ACS_CAP_VERSION_NEXT_PTR_CAP_PTR_HI = 15;
localparam ACS_CAP_VERSION_NEXT_PTR_CAP_PTR_RESET = 12'h148;
localparam ACS_CAP_VERSION_NEXT_PTR_ACSCV_LO = 0;
localparam ACS_CAP_VERSION_NEXT_PTR_ACSCV_HI = 3;
localparam ACS_CAP_VERSION_NEXT_PTR_ACSCV_RESET = 4'h1;
localparam ACS_CAP_VERSION_NEXT_PTR_USEMASK = 16'hFFFF;
localparam ACS_CAP_VERSION_NEXT_PTR_RO_MASK = 16'hFFFF;
localparam ACS_CAP_VERSION_NEXT_PTR_WO_MASK = 16'h0;
localparam ACS_CAP_VERSION_NEXT_PTR_RESET = 16'h1481;

typedef struct packed {
    logic  [7:0] ACSECVS;  // RO
    logic  [0:0] RESERVED1;  // RO
    logic  [0:0] ACSDTP2P;  // RO
    logic  [0:0] ACSP2PEC;  // RO
    logic  [0:0] ACSUF;  // RO
    logic  [0:0] ACSP2PCR;  // RO
    logic  [0:0] ACSP2PRR;  // RO
    logic  [0:0] ACSTB;  // RO
    logic  [0:0] ACSSV;  // RO
} ACS_CAP_t;

localparam ACS_CAP_REG_STRIDE = 12'h2;
localparam ACS_CAP_REG_ENTRIES = 1;
localparam [11:0] ACS_CAP_CR_ADDR = 12'h104;
localparam ACS_CAP_SIZE = 16;
localparam ACS_CAP_ACSECVS_LO = 8;
localparam ACS_CAP_ACSECVS_HI = 15;
localparam ACS_CAP_ACSECVS_RESET = 8'h0;
localparam ACS_CAP_RESERVED1_LO = 7;
localparam ACS_CAP_RESERVED1_HI = 7;
localparam ACS_CAP_RESERVED1_RESET = 1'h0;
localparam ACS_CAP_ACSDTP2P_LO = 6;
localparam ACS_CAP_ACSDTP2P_HI = 6;
localparam ACS_CAP_ACSDTP2P_RESET = 1'h0;
localparam ACS_CAP_ACSP2PEC_LO = 5;
localparam ACS_CAP_ACSP2PEC_HI = 5;
localparam ACS_CAP_ACSP2PEC_RESET = 1'h0;
localparam ACS_CAP_ACSUF_LO = 4;
localparam ACS_CAP_ACSUF_HI = 4;
localparam ACS_CAP_ACSUF_RESET = 1'h0;
localparam ACS_CAP_ACSP2PCR_LO = 3;
localparam ACS_CAP_ACSP2PCR_HI = 3;
localparam ACS_CAP_ACSP2PCR_RESET = 1'h0;
localparam ACS_CAP_ACSP2PRR_LO = 2;
localparam ACS_CAP_ACSP2PRR_HI = 2;
localparam ACS_CAP_ACSP2PRR_RESET = 1'h0;
localparam ACS_CAP_ACSTB_LO = 1;
localparam ACS_CAP_ACSTB_HI = 1;
localparam ACS_CAP_ACSTB_RESET = 1'h0;
localparam ACS_CAP_ACSSV_LO = 0;
localparam ACS_CAP_ACSSV_HI = 0;
localparam ACS_CAP_ACSSV_RESET = 1'b0;
localparam ACS_CAP_USEMASK = 16'hFFFF;
localparam ACS_CAP_RO_MASK = 16'hFFFF;
localparam ACS_CAP_WO_MASK = 16'h0;
localparam ACS_CAP_RESET = 16'h0;

typedef struct packed {
    logic  [8:0] RESERVED;  // RO
    logic  [0:0] ACSDTP2PE;  // RO
    logic  [0:0] ACSP2PECE;  // RO
    logic  [0:0] ACSUFE;  // RO
    logic  [0:0] ACSP2PCRE;  // RO
    logic  [0:0] ACSP2PRRE;  // RO
    logic  [0:0] ACSTBE;  // RO
    logic  [0:0] ACSSVE;  // RO
} ACS_CAP_CONTROL_t;

localparam ACS_CAP_CONTROL_REG_STRIDE = 12'h2;
localparam ACS_CAP_CONTROL_REG_ENTRIES = 1;
localparam [11:0] ACS_CAP_CONTROL_CR_ADDR = 12'h106;
localparam ACS_CAP_CONTROL_SIZE = 16;
localparam ACS_CAP_CONTROL_RESERVED_LO = 7;
localparam ACS_CAP_CONTROL_RESERVED_HI = 15;
localparam ACS_CAP_CONTROL_RESERVED_RESET = 9'h0;
localparam ACS_CAP_CONTROL_ACSDTP2PE_LO = 6;
localparam ACS_CAP_CONTROL_ACSDTP2PE_HI = 6;
localparam ACS_CAP_CONTROL_ACSDTP2PE_RESET = 1'h0;
localparam ACS_CAP_CONTROL_ACSP2PECE_LO = 5;
localparam ACS_CAP_CONTROL_ACSP2PECE_HI = 5;
localparam ACS_CAP_CONTROL_ACSP2PECE_RESET = 1'h0;
localparam ACS_CAP_CONTROL_ACSUFE_LO = 4;
localparam ACS_CAP_CONTROL_ACSUFE_HI = 4;
localparam ACS_CAP_CONTROL_ACSUFE_RESET = 1'h0;
localparam ACS_CAP_CONTROL_ACSP2PCRE_LO = 3;
localparam ACS_CAP_CONTROL_ACSP2PCRE_HI = 3;
localparam ACS_CAP_CONTROL_ACSP2PCRE_RESET = 1'h0;
localparam ACS_CAP_CONTROL_ACSP2PRRE_LO = 2;
localparam ACS_CAP_CONTROL_ACSP2PRRE_HI = 2;
localparam ACS_CAP_CONTROL_ACSP2PRRE_RESET = 1'h0;
localparam ACS_CAP_CONTROL_ACSTBE_LO = 1;
localparam ACS_CAP_CONTROL_ACSTBE_HI = 1;
localparam ACS_CAP_CONTROL_ACSTBE_RESET = 1'h0;
localparam ACS_CAP_CONTROL_ACSSVE_LO = 0;
localparam ACS_CAP_CONTROL_ACSSVE_HI = 0;
localparam ACS_CAP_CONTROL_ACSSVE_RESET = 1'h0;
localparam ACS_CAP_CONTROL_USEMASK = 16'hFFFF;
localparam ACS_CAP_CONTROL_RO_MASK = 16'hFFFF;
localparam ACS_CAP_CONTROL_WO_MASK = 16'h0;
localparam ACS_CAP_CONTROL_RESET = 16'h0;

typedef struct packed {
    logic [15:0] CAP_ID;  // RO
} PASID_CAP_ID_t;

localparam PASID_CAP_ID_REG_STRIDE = 12'h2;
localparam PASID_CAP_ID_REG_ENTRIES = 1;
localparam HQM_PCIE_PASID_CAP_REGFILE_STRIDE = 12'h8;
localparam HQM_PCIE_PASID_CAP_REGFILE_ENTRIES = 1;
localparam [11:0] PASID_CAP_ID_CR_ADDR = 12'h148;
localparam PASID_CAP_ID_SIZE = 16;
localparam PASID_CAP_ID_CAP_ID_LO = 0;
localparam PASID_CAP_ID_CAP_ID_HI = 15;
localparam PASID_CAP_ID_CAP_ID_RESET = 16'h1b;
localparam PASID_CAP_ID_USEMASK = 16'hFFFF;
localparam PASID_CAP_ID_RO_MASK = 16'hFFFF;
localparam PASID_CAP_ID_WO_MASK = 16'h0;
localparam PASID_CAP_ID_RESET = 16'h1B;

typedef struct packed {
    logic [11:0] CAP_PTR;  // RO
    logic  [3:0] SRIOVCV;  // RO
} PASID_CAP_VERSION_NEXT_PTR_t;

localparam PASID_CAP_VERSION_NEXT_PTR_REG_STRIDE = 12'h2;
localparam PASID_CAP_VERSION_NEXT_PTR_REG_ENTRIES = 1;
localparam [11:0] PASID_CAP_VERSION_NEXT_PTR_CR_ADDR = 12'h14A;
localparam PASID_CAP_VERSION_NEXT_PTR_SIZE = 16;
localparam PASID_CAP_VERSION_NEXT_PTR_CAP_PTR_LO = 4;
localparam PASID_CAP_VERSION_NEXT_PTR_CAP_PTR_HI = 15;
localparam PASID_CAP_VERSION_NEXT_PTR_CAP_PTR_RESET = 12'h150;
localparam PASID_CAP_VERSION_NEXT_PTR_SRIOVCV_LO = 0;
localparam PASID_CAP_VERSION_NEXT_PTR_SRIOVCV_HI = 3;
localparam PASID_CAP_VERSION_NEXT_PTR_SRIOVCV_RESET = 4'h1;
localparam PASID_CAP_VERSION_NEXT_PTR_USEMASK = 16'hFFFF;
localparam PASID_CAP_VERSION_NEXT_PTR_RO_MASK = 16'hFFFF;
localparam PASID_CAP_VERSION_NEXT_PTR_WO_MASK = 16'h0;
localparam PASID_CAP_VERSION_NEXT_PTR_RESET = 16'h1501;

typedef struct packed {
    logic  [2:0] RESERVED2;  // RO
    logic  [4:0] MAX_PASID_WIDTH;  // RO
    logic  [4:0] RESERVED1;  // RO
    logic  [0:0] PRIV_MODE_SUPP;  // RO
    logic  [0:0] EXEC_PERM_SUPP;  // RO
    logic  [0:0] RESERVED0;  // RO
} PASID_CAP_t;

localparam PASID_CAP_REG_STRIDE = 12'h2;
localparam PASID_CAP_REG_ENTRIES = 1;
localparam [11:0] PASID_CAP_CR_ADDR = 12'h14C;
localparam PASID_CAP_SIZE = 16;
localparam PASID_CAP_RESERVED2_LO = 13;
localparam PASID_CAP_RESERVED2_HI = 15;
localparam PASID_CAP_RESERVED2_RESET = 3'h0;
localparam PASID_CAP_MAX_PASID_WIDTH_LO = 8;
localparam PASID_CAP_MAX_PASID_WIDTH_HI = 12;
localparam PASID_CAP_MAX_PASID_WIDTH_RESET = 5'h14;
localparam PASID_CAP_RESERVED1_LO = 3;
localparam PASID_CAP_RESERVED1_HI = 7;
localparam PASID_CAP_RESERVED1_RESET = 5'h0;
localparam PASID_CAP_PRIV_MODE_SUPP_LO = 2;
localparam PASID_CAP_PRIV_MODE_SUPP_HI = 2;
localparam PASID_CAP_PRIV_MODE_SUPP_RESET = 1'b0;
localparam PASID_CAP_EXEC_PERM_SUPP_LO = 1;
localparam PASID_CAP_EXEC_PERM_SUPP_HI = 1;
localparam PASID_CAP_EXEC_PERM_SUPP_RESET = 1'b0;
localparam PASID_CAP_RESERVED0_LO = 0;
localparam PASID_CAP_RESERVED0_HI = 0;
localparam PASID_CAP_RESERVED0_RESET = 1'b0;
localparam PASID_CAP_USEMASK = 16'hFFFF;
localparam PASID_CAP_RO_MASK = 16'hFFFF;
localparam PASID_CAP_WO_MASK = 16'h0;
localparam PASID_CAP_RESET = 16'h1400;

typedef struct packed {
    logic [12:0] RESERVED;  // RO
    logic  [0:0] PRIV_MODE_ENABLE;  // RO
    logic  [0:0] EXEC_PERM_ENABLE;  // RO
    logic  [0:0] PASID_ENABLE;  // RW
} PASID_CONTROL_t;

localparam PASID_CONTROL_REG_STRIDE = 12'h2;
localparam PASID_CONTROL_REG_ENTRIES = 1;
localparam [11:0] PASID_CONTROL_CR_ADDR = 12'h14E;
localparam PASID_CONTROL_SIZE = 16;
localparam PASID_CONTROL_RESERVED_LO = 3;
localparam PASID_CONTROL_RESERVED_HI = 15;
localparam PASID_CONTROL_RESERVED_RESET = 13'h0;
localparam PASID_CONTROL_PRIV_MODE_ENABLE_LO = 2;
localparam PASID_CONTROL_PRIV_MODE_ENABLE_HI = 2;
localparam PASID_CONTROL_PRIV_MODE_ENABLE_RESET = 1'b0;
localparam PASID_CONTROL_EXEC_PERM_ENABLE_LO = 1;
localparam PASID_CONTROL_EXEC_PERM_ENABLE_HI = 1;
localparam PASID_CONTROL_EXEC_PERM_ENABLE_RESET = 1'b0;
localparam PASID_CONTROL_PASID_ENABLE_LO = 0;
localparam PASID_CONTROL_PASID_ENABLE_HI = 0;
localparam PASID_CONTROL_PASID_ENABLE_RESET = 1'b0;
localparam PASID_CONTROL_USEMASK = 16'hFFFF;
localparam PASID_CONTROL_RO_MASK = 16'hFFFE;
localparam PASID_CONTROL_WO_MASK = 16'h0;
localparam PASID_CONTROL_RESET = 16'h0;

typedef struct packed {
    logic [15:0] CAP_ID;  // RO
} DVSEC_CAP_ID_t;

localparam DVSEC_CAP_ID_REG_STRIDE = 12'h2;
localparam DVSEC_CAP_ID_REG_ENTRIES = 1;
localparam HQM_PCIE_SCIOV_CAP_REGFILE_STRIDE = 12'h20;
localparam HQM_PCIE_SCIOV_CAP_REGFILE_ENTRIES = 1;
localparam [11:0] DVSEC_CAP_ID_CR_ADDR = 12'h150;
localparam DVSEC_CAP_ID_SIZE = 16;
localparam DVSEC_CAP_ID_CAP_ID_LO = 0;
localparam DVSEC_CAP_ID_CAP_ID_HI = 15;
localparam DVSEC_CAP_ID_CAP_ID_RESET = 16'h23;
localparam DVSEC_CAP_ID_USEMASK = 16'hFFFF;
localparam DVSEC_CAP_ID_RO_MASK = 16'hFFFF;
localparam DVSEC_CAP_ID_WO_MASK = 16'h0;
localparam DVSEC_CAP_ID_RESET = 16'h23;

typedef struct packed {
    logic [11:0] CAP_PTR;  // RO
    logic  [3:0] DVSECCV;  // RO
} DVSEC_CAP_VERSION_NEXT_PTR_t;

localparam DVSEC_CAP_VERSION_NEXT_PTR_REG_STRIDE = 12'h2;
localparam DVSEC_CAP_VERSION_NEXT_PTR_REG_ENTRIES = 1;
localparam [11:0] DVSEC_CAP_VERSION_NEXT_PTR_CR_ADDR = 12'h152;
localparam DVSEC_CAP_VERSION_NEXT_PTR_SIZE = 16;
localparam DVSEC_CAP_VERSION_NEXT_PTR_CAP_PTR_LO = 4;
localparam DVSEC_CAP_VERSION_NEXT_PTR_CAP_PTR_HI = 15;
localparam DVSEC_CAP_VERSION_NEXT_PTR_CAP_PTR_RESET = 12'h168;
localparam DVSEC_CAP_VERSION_NEXT_PTR_DVSECCV_LO = 0;
localparam DVSEC_CAP_VERSION_NEXT_PTR_DVSECCV_HI = 3;
localparam DVSEC_CAP_VERSION_NEXT_PTR_DVSECCV_RESET = 4'h1;
localparam DVSEC_CAP_VERSION_NEXT_PTR_USEMASK = 16'hFFFF;
localparam DVSEC_CAP_VERSION_NEXT_PTR_RO_MASK = 16'hFFFF;
localparam DVSEC_CAP_VERSION_NEXT_PTR_WO_MASK = 16'h0;
localparam DVSEC_CAP_VERSION_NEXT_PTR_RESET = 16'h1681;

typedef struct packed {
    logic [11:0] DVSEC_LENGTH;  // RO
    logic  [3:0] DVSEC_REVISION;  // RO
    logic [15:0] DVSEC_VENDOR_ID;  // RO
} DVSEC_HDR1_t;

localparam DVSEC_HDR1_REG_STRIDE = 12'h4;
localparam DVSEC_HDR1_REG_ENTRIES = 1;
localparam [11:0] DVSEC_HDR1_CR_ADDR = 12'h154;
localparam DVSEC_HDR1_SIZE = 32;
localparam DVSEC_HDR1_DVSEC_LENGTH_LO = 20;
localparam DVSEC_HDR1_DVSEC_LENGTH_HI = 31;
localparam DVSEC_HDR1_DVSEC_LENGTH_RESET = 12'h18;
localparam DVSEC_HDR1_DVSEC_REVISION_LO = 16;
localparam DVSEC_HDR1_DVSEC_REVISION_HI = 19;
localparam DVSEC_HDR1_DVSEC_REVISION_RESET = 4'h0;
localparam DVSEC_HDR1_DVSEC_VENDOR_ID_LO = 0;
localparam DVSEC_HDR1_DVSEC_VENDOR_ID_HI = 15;
localparam DVSEC_HDR1_DVSEC_VENDOR_ID_RESET = 16'h8086;
localparam DVSEC_HDR1_USEMASK = 32'hFFFFFFFF;
localparam DVSEC_HDR1_RO_MASK = 32'hFFFFFFFF;
localparam DVSEC_HDR1_WO_MASK = 32'h0;
localparam DVSEC_HDR1_RESET = 32'h1808086;

typedef struct packed {
    logic [15:0] DVSEC_ID;  // RO
} DVSEC_HDR2_t;

localparam DVSEC_HDR2_REG_STRIDE = 12'h2;
localparam DVSEC_HDR2_REG_ENTRIES = 1;
localparam [11:0] DVSEC_HDR2_CR_ADDR = 12'h158;
localparam DVSEC_HDR2_SIZE = 16;
localparam DVSEC_HDR2_DVSEC_ID_LO = 0;
localparam DVSEC_HDR2_DVSEC_ID_HI = 15;
localparam DVSEC_HDR2_DVSEC_ID_RESET = 16'h5;
localparam DVSEC_HDR2_USEMASK = 16'hFFFF;
localparam DVSEC_HDR2_RO_MASK = 16'hFFFF;
localparam DVSEC_HDR2_WO_MASK = 16'h0;
localparam DVSEC_HDR2_RESET = 16'h5;

typedef struct packed {
    logic  [5:0] RESERVED2;  // RO
    logic  [0:0] HOMOGEN_FUNC;  // RO
    logic  [0:0] AIS_DEPENDENT;  // RO
    logic  [7:0] RESERVED0;  // RO
} SCIOV_CAP_t;

localparam SCIOV_CAP_REG_STRIDE = 12'h2;
localparam SCIOV_CAP_REG_ENTRIES = 1;
localparam [11:0] SCIOV_CAP_CR_ADDR = 12'h15A;
localparam SCIOV_CAP_SIZE = 16;
localparam SCIOV_CAP_RESERVED2_LO = 10;
localparam SCIOV_CAP_RESERVED2_HI = 15;
localparam SCIOV_CAP_RESERVED2_RESET = 6'h0;
localparam SCIOV_CAP_HOMOGEN_FUNC_LO = 9;
localparam SCIOV_CAP_HOMOGEN_FUNC_HI = 9;
localparam SCIOV_CAP_HOMOGEN_FUNC_RESET = 1'h0;
localparam SCIOV_CAP_AIS_DEPENDENT_LO = 8;
localparam SCIOV_CAP_AIS_DEPENDENT_HI = 8;
localparam SCIOV_CAP_AIS_DEPENDENT_RESET = 1'h0;
localparam SCIOV_CAP_RESERVED0_LO = 0;
localparam SCIOV_CAP_RESERVED0_HI = 7;
localparam SCIOV_CAP_RESERVED0_RESET = 8'h0;
localparam SCIOV_CAP_USEMASK = 16'hFFFF;
localparam SCIOV_CAP_RO_MASK = 16'hFFFF;
localparam SCIOV_CAP_WO_MASK = 16'h0;
localparam SCIOV_CAP_RESET = 16'h0;

typedef struct packed {
    logic [30:0] RESERVED;  // RO
    logic  [0:0] SUPP_PGSZ;  // RO
} SCIOV_SUPP_PGSZ_t;

localparam SCIOV_SUPP_PGSZ_REG_STRIDE = 12'h4;
localparam SCIOV_SUPP_PGSZ_REG_ENTRIES = 1;
localparam [11:0] SCIOV_SUPP_PGSZ_CR_ADDR = 12'h15C;
localparam SCIOV_SUPP_PGSZ_SIZE = 32;
localparam SCIOV_SUPP_PGSZ_RESERVED_LO = 1;
localparam SCIOV_SUPP_PGSZ_RESERVED_HI = 31;
localparam SCIOV_SUPP_PGSZ_RESERVED_RESET = 31'h0;
localparam SCIOV_SUPP_PGSZ_SUPP_PGSZ_LO = 0;
localparam SCIOV_SUPP_PGSZ_SUPP_PGSZ_HI = 0;
localparam SCIOV_SUPP_PGSZ_SUPP_PGSZ_RESET = 1'b1;
localparam SCIOV_SUPP_PGSZ_USEMASK = 32'hFFFFFFFF;
localparam SCIOV_SUPP_PGSZ_RO_MASK = 32'hFFFFFFFF;
localparam SCIOV_SUPP_PGSZ_WO_MASK = 32'h0;
localparam SCIOV_SUPP_PGSZ_RESET = 32'h1;

typedef struct packed {
    logic [30:0] RESERVED;  // RO
    logic  [0:0] SYS_PGSZ;  // RW
} SCIOV_SYS_PGSZ_t;

localparam SCIOV_SYS_PGSZ_REG_STRIDE = 12'h4;
localparam SCIOV_SYS_PGSZ_REG_ENTRIES = 1;
localparam [11:0] SCIOV_SYS_PGSZ_CR_ADDR = 12'h160;
localparam SCIOV_SYS_PGSZ_SIZE = 32;
localparam SCIOV_SYS_PGSZ_RESERVED_LO = 1;
localparam SCIOV_SYS_PGSZ_RESERVED_HI = 31;
localparam SCIOV_SYS_PGSZ_RESERVED_RESET = 31'h0;
localparam SCIOV_SYS_PGSZ_SYS_PGSZ_LO = 0;
localparam SCIOV_SYS_PGSZ_SYS_PGSZ_HI = 0;
localparam SCIOV_SYS_PGSZ_SYS_PGSZ_RESET = 1'b1;
localparam SCIOV_SYS_PGSZ_USEMASK = 32'hFFFFFFFF;
localparam SCIOV_SYS_PGSZ_RO_MASK = 32'hFFFFFFFE;
localparam SCIOV_SYS_PGSZ_WO_MASK = 32'h0;
localparam SCIOV_SYS_PGSZ_RESET = 32'h1;

typedef struct packed {
    logic [30:0] RESERVED;  // RO
    logic  [0:0] IMS_SUPP;  // RO
} SCIOV_IMS_t;

localparam SCIOV_IMS_REG_STRIDE = 12'h4;
localparam SCIOV_IMS_REG_ENTRIES = 1;
localparam [11:0] SCIOV_IMS_CR_ADDR = 12'h164;
localparam SCIOV_IMS_SIZE = 32;
localparam SCIOV_IMS_RESERVED_LO = 1;
localparam SCIOV_IMS_RESERVED_HI = 31;
localparam SCIOV_IMS_RESERVED_RESET = 31'h0;
localparam SCIOV_IMS_IMS_SUPP_LO = 0;
localparam SCIOV_IMS_IMS_SUPP_HI = 0;
localparam SCIOV_IMS_IMS_SUPP_RESET = 1'b1;
localparam SCIOV_IMS_USEMASK = 32'hFFFFFFFF;
localparam SCIOV_IMS_RO_MASK = 32'hFFFFFFFF;
localparam SCIOV_IMS_WO_MASK = 32'h0;
localparam SCIOV_IMS_RESET = 32'h1;

typedef struct packed {
    logic [15:0] PCIEAERCID;  // RO
} AER_CAP_ID_t;

localparam AER_CAP_ID_REG_STRIDE = 12'h2;
localparam AER_CAP_ID_REG_ENTRIES = 1;
localparam HQM_PCIE_AER_CAP_REGFILE_STRIDE = 12'h80;
localparam HQM_PCIE_AER_CAP_REGFILE_ENTRIES = 1;
localparam [11:0] AER_CAP_ID_CR_ADDR = 12'h168;
localparam AER_CAP_ID_SIZE = 16;
localparam AER_CAP_ID_PCIEAERCID_LO = 0;
localparam AER_CAP_ID_PCIEAERCID_HI = 15;
localparam AER_CAP_ID_PCIEAERCID_RESET = 16'h1;
localparam AER_CAP_ID_USEMASK = 16'hFFFF;
localparam AER_CAP_ID_RO_MASK = 16'hFFFF;
localparam AER_CAP_ID_WO_MASK = 16'h0;
localparam AER_CAP_ID_RESET = 16'h1;

typedef struct packed {
    logic [11:0] CAP_PTR;  // RO
    logic  [3:0] PCIEAERCVN;  // RO
} AER_CAP_VERSION_NEXT_PTR_t;

localparam AER_CAP_VERSION_NEXT_PTR_REG_STRIDE = 12'h2;
localparam AER_CAP_VERSION_NEXT_PTR_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_VERSION_NEXT_PTR_CR_ADDR = 12'h16A;
localparam AER_CAP_VERSION_NEXT_PTR_SIZE = 16;
localparam AER_CAP_VERSION_NEXT_PTR_CAP_PTR_LO = 4;
localparam AER_CAP_VERSION_NEXT_PTR_CAP_PTR_HI = 15;
localparam AER_CAP_VERSION_NEXT_PTR_CAP_PTR_RESET = 12'h1b0;
localparam AER_CAP_VERSION_NEXT_PTR_PCIEAERCVN_LO = 0;
localparam AER_CAP_VERSION_NEXT_PTR_PCIEAERCVN_HI = 3;
localparam AER_CAP_VERSION_NEXT_PTR_PCIEAERCVN_RESET = 4'h2;
localparam AER_CAP_VERSION_NEXT_PTR_USEMASK = 16'hFFFF;
localparam AER_CAP_VERSION_NEXT_PTR_RO_MASK = 16'hFFFF;
localparam AER_CAP_VERSION_NEXT_PTR_WO_MASK = 16'h0;
localparam AER_CAP_VERSION_NEXT_PTR_RESET = 16'h1B02;

typedef struct packed {
    logic  [8:0] RESERVED0;  // RO
    logic  [0:0] IEUNC;  // RW/1C/V/P
    logic  [0:0] RESERVED3;  // RO
    logic  [0:0] UR;  // RW/1C/V/P
    logic  [0:0] ECRCC;  // RW/1C/V/P
    logic  [0:0] MTLP;  // RW/1C/V/P
    logic  [0:0] RO;  // RO
    logic  [0:0] EC;  // RW/1C/V/P
    logic  [0:0] CA;  // RW/1C/V/P
    logic  [0:0] CT;  // RW/1C/V/P
    logic  [0:0] FCPES;  // RO
    logic  [0:0] PTLPR;  // RW/1C/V/P
    logic  [5:0] RESERVED1;  // RO
    logic  [0:0] SDES;  // RO
    logic  [0:0] DLPE;  // RO
    logic  [3:0] RESERVED2;  // RO
} AER_CAP_UNCORR_ERR_STATUS_t;

localparam AER_CAP_UNCORR_ERR_STATUS_REG_STRIDE = 12'h4;
localparam AER_CAP_UNCORR_ERR_STATUS_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_UNCORR_ERR_STATUS_CR_ADDR = 12'h16C;
localparam AER_CAP_UNCORR_ERR_STATUS_SIZE = 32;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED0_LO = 23;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED0_HI = 31;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED0_RESET = 9'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_IEUNC_LO = 22;
localparam AER_CAP_UNCORR_ERR_STATUS_IEUNC_HI = 22;
localparam AER_CAP_UNCORR_ERR_STATUS_IEUNC_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED3_LO = 21;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED3_HI = 21;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED3_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_UR_LO = 20;
localparam AER_CAP_UNCORR_ERR_STATUS_UR_HI = 20;
localparam AER_CAP_UNCORR_ERR_STATUS_UR_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_ECRCC_LO = 19;
localparam AER_CAP_UNCORR_ERR_STATUS_ECRCC_HI = 19;
localparam AER_CAP_UNCORR_ERR_STATUS_ECRCC_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_MTLP_LO = 18;
localparam AER_CAP_UNCORR_ERR_STATUS_MTLP_HI = 18;
localparam AER_CAP_UNCORR_ERR_STATUS_MTLP_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_RO_LO = 17;
localparam AER_CAP_UNCORR_ERR_STATUS_RO_HI = 17;
localparam AER_CAP_UNCORR_ERR_STATUS_RO_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_EC_LO = 16;
localparam AER_CAP_UNCORR_ERR_STATUS_EC_HI = 16;
localparam AER_CAP_UNCORR_ERR_STATUS_EC_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_CA_LO = 15;
localparam AER_CAP_UNCORR_ERR_STATUS_CA_HI = 15;
localparam AER_CAP_UNCORR_ERR_STATUS_CA_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_CT_LO = 14;
localparam AER_CAP_UNCORR_ERR_STATUS_CT_HI = 14;
localparam AER_CAP_UNCORR_ERR_STATUS_CT_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_FCPES_LO = 13;
localparam AER_CAP_UNCORR_ERR_STATUS_FCPES_HI = 13;
localparam AER_CAP_UNCORR_ERR_STATUS_FCPES_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_PTLPR_LO = 12;
localparam AER_CAP_UNCORR_ERR_STATUS_PTLPR_HI = 12;
localparam AER_CAP_UNCORR_ERR_STATUS_PTLPR_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED1_LO = 6;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED1_HI = 11;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED1_RESET = 6'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_SDES_LO = 5;
localparam AER_CAP_UNCORR_ERR_STATUS_SDES_HI = 5;
localparam AER_CAP_UNCORR_ERR_STATUS_SDES_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_DLPE_LO = 4;
localparam AER_CAP_UNCORR_ERR_STATUS_DLPE_HI = 4;
localparam AER_CAP_UNCORR_ERR_STATUS_DLPE_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED2_LO = 0;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED2_HI = 3;
localparam AER_CAP_UNCORR_ERR_STATUS_RESERVED2_RESET = 4'h0;
localparam AER_CAP_UNCORR_ERR_STATUS_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_UNCORR_ERR_STATUS_RO_MASK = 32'hFFA22FFF;
localparam AER_CAP_UNCORR_ERR_STATUS_WO_MASK = 32'h0;
localparam AER_CAP_UNCORR_ERR_STATUS_RESET = 32'h0;

typedef struct packed {
    logic  [8:0] RESERVED0;  // RO
    logic  [0:0] IEUNC;  // RW/P
    logic  [0:0] RESERVED3;  // RO
    logic  [0:0] UR;  // RW/P
    logic  [0:0] ECRCC;  // RW/P
    logic  [0:0] MTLP;  // RW/P
    logic  [0:0] RO;  // RO
    logic  [0:0] EC;  // RW/P
    logic  [0:0] CA;  // RW/P
    logic  [0:0] CT;  // RW/P
    logic  [0:0] FCPES;  // RO
    logic  [0:0] PTLPR;  // RW/P
    logic  [5:0] RESERVED1;  // RO
    logic  [0:0] SDES;  // RO
    logic  [0:0] DLPE;  // RW/P
    logic  [3:0] RESERVED2;  // RO
} AER_CAP_UNCORR_ERR_MASK_t;

localparam AER_CAP_UNCORR_ERR_MASK_REG_STRIDE = 12'h4;
localparam AER_CAP_UNCORR_ERR_MASK_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_UNCORR_ERR_MASK_CR_ADDR = 12'h170;
localparam AER_CAP_UNCORR_ERR_MASK_SIZE = 32;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED0_LO = 23;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED0_HI = 31;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED0_RESET = 9'h0;
localparam AER_CAP_UNCORR_ERR_MASK_IEUNC_LO = 22;
localparam AER_CAP_UNCORR_ERR_MASK_IEUNC_HI = 22;
localparam AER_CAP_UNCORR_ERR_MASK_IEUNC_RESET = 1'b1;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED3_LO = 21;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED3_HI = 21;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED3_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_UR_LO = 20;
localparam AER_CAP_UNCORR_ERR_MASK_UR_HI = 20;
localparam AER_CAP_UNCORR_ERR_MASK_UR_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_ECRCC_LO = 19;
localparam AER_CAP_UNCORR_ERR_MASK_ECRCC_HI = 19;
localparam AER_CAP_UNCORR_ERR_MASK_ECRCC_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_MTLP_LO = 18;
localparam AER_CAP_UNCORR_ERR_MASK_MTLP_HI = 18;
localparam AER_CAP_UNCORR_ERR_MASK_MTLP_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_RO_LO = 17;
localparam AER_CAP_UNCORR_ERR_MASK_RO_HI = 17;
localparam AER_CAP_UNCORR_ERR_MASK_RO_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_EC_LO = 16;
localparam AER_CAP_UNCORR_ERR_MASK_EC_HI = 16;
localparam AER_CAP_UNCORR_ERR_MASK_EC_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_CA_LO = 15;
localparam AER_CAP_UNCORR_ERR_MASK_CA_HI = 15;
localparam AER_CAP_UNCORR_ERR_MASK_CA_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_CT_LO = 14;
localparam AER_CAP_UNCORR_ERR_MASK_CT_HI = 14;
localparam AER_CAP_UNCORR_ERR_MASK_CT_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_FCPES_LO = 13;
localparam AER_CAP_UNCORR_ERR_MASK_FCPES_HI = 13;
localparam AER_CAP_UNCORR_ERR_MASK_FCPES_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_PTLPR_LO = 12;
localparam AER_CAP_UNCORR_ERR_MASK_PTLPR_HI = 12;
localparam AER_CAP_UNCORR_ERR_MASK_PTLPR_RESET = 1'h0;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED1_LO = 6;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED1_HI = 11;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED1_RESET = 6'h0;
localparam AER_CAP_UNCORR_ERR_MASK_SDES_LO = 5;
localparam AER_CAP_UNCORR_ERR_MASK_SDES_HI = 5;
localparam AER_CAP_UNCORR_ERR_MASK_SDES_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_DLPE_LO = 4;
localparam AER_CAP_UNCORR_ERR_MASK_DLPE_HI = 4;
localparam AER_CAP_UNCORR_ERR_MASK_DLPE_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED2_LO = 0;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED2_HI = 3;
localparam AER_CAP_UNCORR_ERR_MASK_RESERVED2_RESET = 4'h0;
localparam AER_CAP_UNCORR_ERR_MASK_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_UNCORR_ERR_MASK_RO_MASK = 32'hFFA22FEF;
localparam AER_CAP_UNCORR_ERR_MASK_WO_MASK = 32'h0;
localparam AER_CAP_UNCORR_ERR_MASK_RESET = 32'h400000;

typedef struct packed {
    logic  [8:0] RESERVED0;  // RO
    logic  [0:0] IEUNC;  // RW/P
    logic  [0:0] RESERVED3;  // RO
    logic  [0:0] UR;  // RW/P
    logic  [0:0] ECRCC;  // RW/P
    logic  [0:0] MTLP;  // RW/P
    logic  [0:0] RO;  // RW/P
    logic  [0:0] EC;  // RW/P
    logic  [0:0] CA;  // RW/P
    logic  [0:0] CT;  // RW/P
    logic  [0:0] FCPES;  // RO
    logic  [0:0] PTLPR;  // RW/P
    logic  [5:0] RESERVED1;  // RO
    logic  [0:0] SDES;  // RO
    logic  [0:0] DLPE;  // RW/P
    logic  [3:0] RESERVED2;  // RO
} AER_CAP_UNCORR_ERR_SEV_t;

localparam AER_CAP_UNCORR_ERR_SEV_REG_STRIDE = 12'h4;
localparam AER_CAP_UNCORR_ERR_SEV_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_UNCORR_ERR_SEV_CR_ADDR = 12'h174;
localparam AER_CAP_UNCORR_ERR_SEV_SIZE = 32;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED0_LO = 23;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED0_HI = 31;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED0_RESET = 9'h0;
localparam AER_CAP_UNCORR_ERR_SEV_IEUNC_LO = 22;
localparam AER_CAP_UNCORR_ERR_SEV_IEUNC_HI = 22;
localparam AER_CAP_UNCORR_ERR_SEV_IEUNC_RESET = 1'b1;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED3_LO = 21;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED3_HI = 21;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED3_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_SEV_UR_LO = 20;
localparam AER_CAP_UNCORR_ERR_SEV_UR_HI = 20;
localparam AER_CAP_UNCORR_ERR_SEV_UR_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_SEV_ECRCC_LO = 19;
localparam AER_CAP_UNCORR_ERR_SEV_ECRCC_HI = 19;
localparam AER_CAP_UNCORR_ERR_SEV_ECRCC_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_SEV_MTLP_LO = 18;
localparam AER_CAP_UNCORR_ERR_SEV_MTLP_HI = 18;
localparam AER_CAP_UNCORR_ERR_SEV_MTLP_RESET = 1'b1;
localparam AER_CAP_UNCORR_ERR_SEV_RO_LO = 17;
localparam AER_CAP_UNCORR_ERR_SEV_RO_HI = 17;
localparam AER_CAP_UNCORR_ERR_SEV_RO_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_SEV_EC_LO = 16;
localparam AER_CAP_UNCORR_ERR_SEV_EC_HI = 16;
localparam AER_CAP_UNCORR_ERR_SEV_EC_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_SEV_CA_LO = 15;
localparam AER_CAP_UNCORR_ERR_SEV_CA_HI = 15;
localparam AER_CAP_UNCORR_ERR_SEV_CA_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_SEV_CT_LO = 14;
localparam AER_CAP_UNCORR_ERR_SEV_CT_HI = 14;
localparam AER_CAP_UNCORR_ERR_SEV_CT_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_SEV_FCPES_LO = 13;
localparam AER_CAP_UNCORR_ERR_SEV_FCPES_HI = 13;
localparam AER_CAP_UNCORR_ERR_SEV_FCPES_RESET = 1'b0;
localparam AER_CAP_UNCORR_ERR_SEV_PTLPR_LO = 12;
localparam AER_CAP_UNCORR_ERR_SEV_PTLPR_HI = 12;
localparam AER_CAP_UNCORR_ERR_SEV_PTLPR_RESET = 1'h0;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED1_LO = 6;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED1_HI = 11;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED1_RESET = 6'h0;
localparam AER_CAP_UNCORR_ERR_SEV_SDES_LO = 5;
localparam AER_CAP_UNCORR_ERR_SEV_SDES_HI = 5;
localparam AER_CAP_UNCORR_ERR_SEV_SDES_RESET = 1'h0;
localparam AER_CAP_UNCORR_ERR_SEV_DLPE_LO = 4;
localparam AER_CAP_UNCORR_ERR_SEV_DLPE_HI = 4;
localparam AER_CAP_UNCORR_ERR_SEV_DLPE_RESET = 1'h0;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED2_LO = 0;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED2_HI = 3;
localparam AER_CAP_UNCORR_ERR_SEV_RESERVED2_RESET = 4'h0;
localparam AER_CAP_UNCORR_ERR_SEV_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_UNCORR_ERR_SEV_RO_MASK = 32'hFFA02FEF;
localparam AER_CAP_UNCORR_ERR_SEV_WO_MASK = 32'h0;
localparam AER_CAP_UNCORR_ERR_SEV_RESET = 32'h440000;

typedef struct packed {
    logic [16:0] RESERVED0;  // RO
    logic  [0:0] IECOR;  // RW/1C/V/P
    logic  [0:0] ANFES;  // RW/1C/V/P
    logic  [0:0] RTTS;  // RO
    logic  [2:0] RESERVED1;  // RO
    logic  [0:0] RNRS;  // RO
    logic  [0:0] BDLLPS;  // RO
    logic  [0:0] DLPE;  // RO
    logic  [4:0] RESERVED2;  // RO
    logic  [0:0] RES;  // RO
} AER_CAP_CORR_ERR_STATUS_t;

localparam AER_CAP_CORR_ERR_STATUS_REG_STRIDE = 12'h4;
localparam AER_CAP_CORR_ERR_STATUS_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_CORR_ERR_STATUS_CR_ADDR = 12'h178;
localparam AER_CAP_CORR_ERR_STATUS_SIZE = 32;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED0_LO = 15;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED0_HI = 31;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED0_RESET = 17'h0;
localparam AER_CAP_CORR_ERR_STATUS_IECOR_LO = 14;
localparam AER_CAP_CORR_ERR_STATUS_IECOR_HI = 14;
localparam AER_CAP_CORR_ERR_STATUS_IECOR_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_STATUS_ANFES_LO = 13;
localparam AER_CAP_CORR_ERR_STATUS_ANFES_HI = 13;
localparam AER_CAP_CORR_ERR_STATUS_ANFES_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_STATUS_RTTS_LO = 12;
localparam AER_CAP_CORR_ERR_STATUS_RTTS_HI = 12;
localparam AER_CAP_CORR_ERR_STATUS_RTTS_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED1_LO = 9;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED1_HI = 11;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED1_RESET = 3'b0;
localparam AER_CAP_CORR_ERR_STATUS_RNRS_LO = 8;
localparam AER_CAP_CORR_ERR_STATUS_RNRS_HI = 8;
localparam AER_CAP_CORR_ERR_STATUS_RNRS_RESET = 1'h0;
localparam AER_CAP_CORR_ERR_STATUS_BDLLPS_LO = 7;
localparam AER_CAP_CORR_ERR_STATUS_BDLLPS_HI = 7;
localparam AER_CAP_CORR_ERR_STATUS_BDLLPS_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_STATUS_DLPE_LO = 6;
localparam AER_CAP_CORR_ERR_STATUS_DLPE_HI = 6;
localparam AER_CAP_CORR_ERR_STATUS_DLPE_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED2_LO = 1;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED2_HI = 5;
localparam AER_CAP_CORR_ERR_STATUS_RESERVED2_RESET = 5'h0;
localparam AER_CAP_CORR_ERR_STATUS_RES_LO = 0;
localparam AER_CAP_CORR_ERR_STATUS_RES_HI = 0;
localparam AER_CAP_CORR_ERR_STATUS_RES_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_STATUS_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_CORR_ERR_STATUS_RO_MASK = 32'hFFFF9FFF;
localparam AER_CAP_CORR_ERR_STATUS_WO_MASK = 32'h0;
localparam AER_CAP_CORR_ERR_STATUS_RESET = 32'h0;

typedef struct packed {
    logic [16:0] RESERVED0;  // RO
    logic  [0:0] IECOR;  // RW/P
    logic  [0:0] ANFES;  // RW/P
    logic  [0:0] RTTS;  // RO
    logic  [2:0] RESERVED1;  // RO
    logic  [0:0] RNRS;  // RW/P
    logic  [0:0] BDLLPS;  // RW/P
    logic  [0:0] DLPE;  // RW/P
    logic  [4:0] RESERVED2;  // RO
    logic  [0:0] RES;  // RO
} AER_CAP_CORR_ERR_MASK_t;

localparam AER_CAP_CORR_ERR_MASK_REG_STRIDE = 12'h4;
localparam AER_CAP_CORR_ERR_MASK_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_CORR_ERR_MASK_CR_ADDR = 12'h17C;
localparam AER_CAP_CORR_ERR_MASK_SIZE = 32;
localparam AER_CAP_CORR_ERR_MASK_RESERVED0_LO = 15;
localparam AER_CAP_CORR_ERR_MASK_RESERVED0_HI = 31;
localparam AER_CAP_CORR_ERR_MASK_RESERVED0_RESET = 17'h0;
localparam AER_CAP_CORR_ERR_MASK_IECOR_LO = 14;
localparam AER_CAP_CORR_ERR_MASK_IECOR_HI = 14;
localparam AER_CAP_CORR_ERR_MASK_IECOR_RESET = 1'b1;
localparam AER_CAP_CORR_ERR_MASK_ANFES_LO = 13;
localparam AER_CAP_CORR_ERR_MASK_ANFES_HI = 13;
localparam AER_CAP_CORR_ERR_MASK_ANFES_RESET = 1'b1;
localparam AER_CAP_CORR_ERR_MASK_RTTS_LO = 12;
localparam AER_CAP_CORR_ERR_MASK_RTTS_HI = 12;
localparam AER_CAP_CORR_ERR_MASK_RTTS_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_MASK_RESERVED1_LO = 9;
localparam AER_CAP_CORR_ERR_MASK_RESERVED1_HI = 11;
localparam AER_CAP_CORR_ERR_MASK_RESERVED1_RESET = 3'h0;
localparam AER_CAP_CORR_ERR_MASK_RNRS_LO = 8;
localparam AER_CAP_CORR_ERR_MASK_RNRS_HI = 8;
localparam AER_CAP_CORR_ERR_MASK_RNRS_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_MASK_BDLLPS_LO = 7;
localparam AER_CAP_CORR_ERR_MASK_BDLLPS_HI = 7;
localparam AER_CAP_CORR_ERR_MASK_BDLLPS_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_MASK_DLPE_LO = 6;
localparam AER_CAP_CORR_ERR_MASK_DLPE_HI = 6;
localparam AER_CAP_CORR_ERR_MASK_DLPE_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_MASK_RESERVED2_LO = 1;
localparam AER_CAP_CORR_ERR_MASK_RESERVED2_HI = 5;
localparam AER_CAP_CORR_ERR_MASK_RESERVED2_RESET = 5'h0;
localparam AER_CAP_CORR_ERR_MASK_RES_LO = 0;
localparam AER_CAP_CORR_ERR_MASK_RES_HI = 0;
localparam AER_CAP_CORR_ERR_MASK_RES_RESET = 1'b0;
localparam AER_CAP_CORR_ERR_MASK_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_CORR_ERR_MASK_RO_MASK = 32'hFFFF9E3F;
localparam AER_CAP_CORR_ERR_MASK_WO_MASK = 32'h0;
localparam AER_CAP_CORR_ERR_MASK_RESET = 32'h6000;

typedef struct packed {
    logic [19:0] RESERVED1;  // RO
    logic  [0:0] TLPPFLOGP;  // RO/V/P
    logic  [0:0] RESERVED;  // RO
    logic  [0:0] Multhdrrc;  // RO
    logic  [0:0] ECRCCE;  // RO
    logic  [0:0] ECRCCC;  // RO
    logic  [0:0] ECRCGE;  // RO
    logic  [0:0] ECRCGC;  // RO
    logic  [4:0] TFEP;  // RO/V/P
} AER_CAP_CONTROL_t;

localparam AER_CAP_CONTROL_REG_STRIDE = 12'h4;
localparam AER_CAP_CONTROL_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_CONTROL_CR_ADDR = 12'h180;
localparam AER_CAP_CONTROL_SIZE = 32;
localparam AER_CAP_CONTROL_RESERVED1_LO = 12;
localparam AER_CAP_CONTROL_RESERVED1_HI = 31;
localparam AER_CAP_CONTROL_RESERVED1_RESET = 20'h0;
localparam AER_CAP_CONTROL_TLPPFLOGP_LO = 11;
localparam AER_CAP_CONTROL_TLPPFLOGP_HI = 11;
localparam AER_CAP_CONTROL_TLPPFLOGP_RESET = 1'b0;
localparam AER_CAP_CONTROL_RESERVED_LO = 10;
localparam AER_CAP_CONTROL_RESERVED_HI = 10;
localparam AER_CAP_CONTROL_RESERVED_RESET = 1'b0;
localparam AER_CAP_CONTROL_MULTHDRRC_LO = 9;
localparam AER_CAP_CONTROL_MULTHDRRC_HI = 9;
localparam AER_CAP_CONTROL_MULTHDRRC_RESET = 1'b0;
localparam AER_CAP_CONTROL_ECRCCE_LO = 8;
localparam AER_CAP_CONTROL_ECRCCE_HI = 8;
localparam AER_CAP_CONTROL_ECRCCE_RESET = 1'b0;
localparam AER_CAP_CONTROL_ECRCCC_LO = 7;
localparam AER_CAP_CONTROL_ECRCCC_HI = 7;
localparam AER_CAP_CONTROL_ECRCCC_RESET = 1'b0;
localparam AER_CAP_CONTROL_ECRCGE_LO = 6;
localparam AER_CAP_CONTROL_ECRCGE_HI = 6;
localparam AER_CAP_CONTROL_ECRCGE_RESET = 1'b0;
localparam AER_CAP_CONTROL_ECRCGC_LO = 5;
localparam AER_CAP_CONTROL_ECRCGC_HI = 5;
localparam AER_CAP_CONTROL_ECRCGC_RESET = 1'b0;
localparam AER_CAP_CONTROL_TFEP_LO = 0;
localparam AER_CAP_CONTROL_TFEP_HI = 4;
localparam AER_CAP_CONTROL_TFEP_RESET = 5'b0;
localparam AER_CAP_CONTROL_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_CONTROL_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_CONTROL_WO_MASK = 32'h0;
localparam AER_CAP_CONTROL_RESET = 32'h0;

typedef struct packed {
    logic [31:0] HDRLOGDW0;  // RO/V/P
} AER_CAP_HEADER_LOG_0_t;

localparam AER_CAP_HEADER_LOG_0_REG_STRIDE = 12'h4;
localparam AER_CAP_HEADER_LOG_0_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_HEADER_LOG_0_CR_ADDR = 12'h184;
localparam AER_CAP_HEADER_LOG_0_SIZE = 32;
localparam AER_CAP_HEADER_LOG_0_HDRLOGDW0_LO = 0;
localparam AER_CAP_HEADER_LOG_0_HDRLOGDW0_HI = 31;
localparam AER_CAP_HEADER_LOG_0_HDRLOGDW0_RESET = 32'h0;
localparam AER_CAP_HEADER_LOG_0_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_HEADER_LOG_0_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_HEADER_LOG_0_WO_MASK = 32'h0;
localparam AER_CAP_HEADER_LOG_0_RESET = 32'h0;

typedef struct packed {
    logic [31:0] HDRLOGDW1;  // RO/V/P
} AER_CAP_HEADER_LOG_1_t;

localparam AER_CAP_HEADER_LOG_1_REG_STRIDE = 12'h4;
localparam AER_CAP_HEADER_LOG_1_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_HEADER_LOG_1_CR_ADDR = 12'h188;
localparam AER_CAP_HEADER_LOG_1_SIZE = 32;
localparam AER_CAP_HEADER_LOG_1_HDRLOGDW1_LO = 0;
localparam AER_CAP_HEADER_LOG_1_HDRLOGDW1_HI = 31;
localparam AER_CAP_HEADER_LOG_1_HDRLOGDW1_RESET = 32'h0;
localparam AER_CAP_HEADER_LOG_1_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_HEADER_LOG_1_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_HEADER_LOG_1_WO_MASK = 32'h0;
localparam AER_CAP_HEADER_LOG_1_RESET = 32'h0;

typedef struct packed {
    logic [31:0] HDRLOGDW2;  // RO/V/P
} AER_CAP_HEADER_LOG_2_t;

localparam AER_CAP_HEADER_LOG_2_REG_STRIDE = 12'h4;
localparam AER_CAP_HEADER_LOG_2_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_HEADER_LOG_2_CR_ADDR = 12'h18C;
localparam AER_CAP_HEADER_LOG_2_SIZE = 32;
localparam AER_CAP_HEADER_LOG_2_HDRLOGDW2_LO = 0;
localparam AER_CAP_HEADER_LOG_2_HDRLOGDW2_HI = 31;
localparam AER_CAP_HEADER_LOG_2_HDRLOGDW2_RESET = 32'h0;
localparam AER_CAP_HEADER_LOG_2_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_HEADER_LOG_2_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_HEADER_LOG_2_WO_MASK = 32'h0;
localparam AER_CAP_HEADER_LOG_2_RESET = 32'h0;

typedef struct packed {
    logic [31:0] HDRLOGDW3;  // RO/V/P
} AER_CAP_HEADER_LOG_3_t;

localparam AER_CAP_HEADER_LOG_3_REG_STRIDE = 12'h4;
localparam AER_CAP_HEADER_LOG_3_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_HEADER_LOG_3_CR_ADDR = 12'h190;
localparam AER_CAP_HEADER_LOG_3_SIZE = 32;
localparam AER_CAP_HEADER_LOG_3_HDRLOGDW3_LO = 0;
localparam AER_CAP_HEADER_LOG_3_HDRLOGDW3_HI = 31;
localparam AER_CAP_HEADER_LOG_3_HDRLOGDW3_RESET = 32'h0;
localparam AER_CAP_HEADER_LOG_3_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_HEADER_LOG_3_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_HEADER_LOG_3_WO_MASK = 32'h0;
localparam AER_CAP_HEADER_LOG_3_RESET = 32'h0;

typedef struct packed {
    logic [28:0] reserved0;  // RSVD
    logic  [0:0] FERE;  // RO
    logic  [0:0] NERE;  // RO
    logic  [0:0] CERE;  // RO
} AER_CAP_ROOT_ERROR_COMMAND_t;

localparam AER_CAP_ROOT_ERROR_COMMAND_REG_STRIDE = 12'h4;
localparam AER_CAP_ROOT_ERROR_COMMAND_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_ROOT_ERROR_COMMAND_CR_ADDR = 12'h194;
localparam AER_CAP_ROOT_ERROR_COMMAND_SIZE = 32;
localparam AER_CAP_ROOT_ERROR_COMMAND_FERE_LO = 2;
localparam AER_CAP_ROOT_ERROR_COMMAND_FERE_HI = 2;
localparam AER_CAP_ROOT_ERROR_COMMAND_FERE_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_COMMAND_NERE_LO = 1;
localparam AER_CAP_ROOT_ERROR_COMMAND_NERE_HI = 1;
localparam AER_CAP_ROOT_ERROR_COMMAND_NERE_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_COMMAND_CERE_LO = 0;
localparam AER_CAP_ROOT_ERROR_COMMAND_CERE_HI = 0;
localparam AER_CAP_ROOT_ERROR_COMMAND_CERE_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_COMMAND_USEMASK = 32'h7;
localparam AER_CAP_ROOT_ERROR_COMMAND_RO_MASK = 32'h7;
localparam AER_CAP_ROOT_ERROR_COMMAND_WO_MASK = 32'h0;
localparam AER_CAP_ROOT_ERROR_COMMAND_RESET = 32'h0;

typedef struct packed {
    logic  [4:0] AEIMN;  // RO
    logic [19:0] reserved0;  // RSVD
    logic  [0:0] FER;  // RO
    logic  [0:0] NER;  // RO
    logic  [0:0] FUF;  // RO
    logic  [0:0] MFNER;  // RO
    logic  [0:0] FNER;  // RO
    logic  [0:0] MCER;  // RO
    logic  [0:0] CER;  // RO
} AER_CAP_ROOT_ERROR_STATUS_t;

localparam AER_CAP_ROOT_ERROR_STATUS_REG_STRIDE = 12'h4;
localparam AER_CAP_ROOT_ERROR_STATUS_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_ROOT_ERROR_STATUS_CR_ADDR = 12'h198;
localparam AER_CAP_ROOT_ERROR_STATUS_SIZE = 32;
localparam AER_CAP_ROOT_ERROR_STATUS_AEIMN_LO = 27;
localparam AER_CAP_ROOT_ERROR_STATUS_AEIMN_HI = 31;
localparam AER_CAP_ROOT_ERROR_STATUS_AEIMN_RESET = 5'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_FER_LO = 6;
localparam AER_CAP_ROOT_ERROR_STATUS_FER_HI = 6;
localparam AER_CAP_ROOT_ERROR_STATUS_FER_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_NER_LO = 5;
localparam AER_CAP_ROOT_ERROR_STATUS_NER_HI = 5;
localparam AER_CAP_ROOT_ERROR_STATUS_NER_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_FUF_LO = 4;
localparam AER_CAP_ROOT_ERROR_STATUS_FUF_HI = 4;
localparam AER_CAP_ROOT_ERROR_STATUS_FUF_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_MFNER_LO = 3;
localparam AER_CAP_ROOT_ERROR_STATUS_MFNER_HI = 3;
localparam AER_CAP_ROOT_ERROR_STATUS_MFNER_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_FNER_LO = 2;
localparam AER_CAP_ROOT_ERROR_STATUS_FNER_HI = 2;
localparam AER_CAP_ROOT_ERROR_STATUS_FNER_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_MCER_LO = 1;
localparam AER_CAP_ROOT_ERROR_STATUS_MCER_HI = 1;
localparam AER_CAP_ROOT_ERROR_STATUS_MCER_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_CER_LO = 0;
localparam AER_CAP_ROOT_ERROR_STATUS_CER_HI = 0;
localparam AER_CAP_ROOT_ERROR_STATUS_CER_RESET = 1'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_USEMASK = 32'hF800007F;
localparam AER_CAP_ROOT_ERROR_STATUS_RO_MASK = 32'hF800007F;
localparam AER_CAP_ROOT_ERROR_STATUS_WO_MASK = 32'h0;
localparam AER_CAP_ROOT_ERROR_STATUS_RESET = 32'h0;

typedef struct packed {
    logic [15:0] FNSID;  // RO
    logic [15:0] CSID;  // RO
} AER_CAP_ERROR_SOURCE_IDENT_t;

localparam AER_CAP_ERROR_SOURCE_IDENT_REG_STRIDE = 12'h4;
localparam AER_CAP_ERROR_SOURCE_IDENT_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_ERROR_SOURCE_IDENT_CR_ADDR = 12'h19C;
localparam AER_CAP_ERROR_SOURCE_IDENT_SIZE = 32;
localparam AER_CAP_ERROR_SOURCE_IDENT_FNSID_LO = 16;
localparam AER_CAP_ERROR_SOURCE_IDENT_FNSID_HI = 31;
localparam AER_CAP_ERROR_SOURCE_IDENT_FNSID_RESET = 16'h0;
localparam AER_CAP_ERROR_SOURCE_IDENT_CSID_LO = 0;
localparam AER_CAP_ERROR_SOURCE_IDENT_CSID_HI = 15;
localparam AER_CAP_ERROR_SOURCE_IDENT_CSID_RESET = 16'h0;
localparam AER_CAP_ERROR_SOURCE_IDENT_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_ERROR_SOURCE_IDENT_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_ERROR_SOURCE_IDENT_WO_MASK = 32'h0;
localparam AER_CAP_ERROR_SOURCE_IDENT_RESET = 32'h0;

typedef struct packed {
    logic [31:0] TLPPFLOG0;  // RO/V/P
} AER_CAP_TLP_PREFIX_LOG_0_t;

localparam AER_CAP_TLP_PREFIX_LOG_0_REG_STRIDE = 12'h4;
localparam AER_CAP_TLP_PREFIX_LOG_0_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_TLP_PREFIX_LOG_0_CR_ADDR = 12'h1A0;
localparam AER_CAP_TLP_PREFIX_LOG_0_SIZE = 32;
localparam AER_CAP_TLP_PREFIX_LOG_0_TLPPFLOG0_LO = 0;
localparam AER_CAP_TLP_PREFIX_LOG_0_TLPPFLOG0_HI = 31;
localparam AER_CAP_TLP_PREFIX_LOG_0_TLPPFLOG0_RESET = 32'h0;
localparam AER_CAP_TLP_PREFIX_LOG_0_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_TLP_PREFIX_LOG_0_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_TLP_PREFIX_LOG_0_WO_MASK = 32'h0;
localparam AER_CAP_TLP_PREFIX_LOG_0_RESET = 32'h0;

typedef struct packed {
    logic [31:0] TLPPFLOG1;  // RO
} AER_CAP_TLP_PREFIX_LOG_1_t;

localparam AER_CAP_TLP_PREFIX_LOG_1_REG_STRIDE = 12'h4;
localparam AER_CAP_TLP_PREFIX_LOG_1_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_TLP_PREFIX_LOG_1_CR_ADDR = 12'h1A4;
localparam AER_CAP_TLP_PREFIX_LOG_1_SIZE = 32;
localparam AER_CAP_TLP_PREFIX_LOG_1_TLPPFLOG1_LO = 0;
localparam AER_CAP_TLP_PREFIX_LOG_1_TLPPFLOG1_HI = 31;
localparam AER_CAP_TLP_PREFIX_LOG_1_TLPPFLOG1_RESET = 32'h0;
localparam AER_CAP_TLP_PREFIX_LOG_1_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_TLP_PREFIX_LOG_1_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_TLP_PREFIX_LOG_1_WO_MASK = 32'h0;
localparam AER_CAP_TLP_PREFIX_LOG_1_RESET = 32'h0;

typedef struct packed {
    logic [31:0] TLPPFLOG2;  // RO
} AER_CAP_TLP_PREFIX_LOG_2_t;

localparam AER_CAP_TLP_PREFIX_LOG_2_REG_STRIDE = 12'h4;
localparam AER_CAP_TLP_PREFIX_LOG_2_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_TLP_PREFIX_LOG_2_CR_ADDR = 12'h1A8;
localparam AER_CAP_TLP_PREFIX_LOG_2_SIZE = 32;
localparam AER_CAP_TLP_PREFIX_LOG_2_TLPPFLOG2_LO = 0;
localparam AER_CAP_TLP_PREFIX_LOG_2_TLPPFLOG2_HI = 31;
localparam AER_CAP_TLP_PREFIX_LOG_2_TLPPFLOG2_RESET = 32'h0;
localparam AER_CAP_TLP_PREFIX_LOG_2_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_TLP_PREFIX_LOG_2_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_TLP_PREFIX_LOG_2_WO_MASK = 32'h0;
localparam AER_CAP_TLP_PREFIX_LOG_2_RESET = 32'h0;

typedef struct packed {
    logic [31:0] TLPPFLOG3;  // RO
} AER_CAP_TLP_PREFIX_LOG_3_t;

localparam AER_CAP_TLP_PREFIX_LOG_3_REG_STRIDE = 12'h4;
localparam AER_CAP_TLP_PREFIX_LOG_3_REG_ENTRIES = 1;
localparam [11:0] AER_CAP_TLP_PREFIX_LOG_3_CR_ADDR = 12'h1AC;
localparam AER_CAP_TLP_PREFIX_LOG_3_SIZE = 32;
localparam AER_CAP_TLP_PREFIX_LOG_3_TLPPFLOG3_LO = 0;
localparam AER_CAP_TLP_PREFIX_LOG_3_TLPPFLOG3_HI = 31;
localparam AER_CAP_TLP_PREFIX_LOG_3_TLPPFLOG3_RESET = 32'h0;
localparam AER_CAP_TLP_PREFIX_LOG_3_USEMASK = 32'hFFFFFFFF;
localparam AER_CAP_TLP_PREFIX_LOG_3_RO_MASK = 32'hFFFFFFFF;
localparam AER_CAP_TLP_PREFIX_LOG_3_WO_MASK = 32'h0;
localparam AER_CAP_TLP_PREFIX_LOG_3_RESET = 32'h0;

typedef struct packed {
    logic [15:0] ATSCID;  // RO
} ATS_CAP_ID_t;

localparam ATS_CAP_ID_REG_STRIDE = 12'h2;
localparam ATS_CAP_ID_REG_ENTRIES = 1;
localparam HQM_PCIE_ATS_CAP_REGFILE_STRIDE = 12'h8;
localparam HQM_PCIE_ATS_CAP_REGFILE_ENTRIES = 1;
localparam [11:0] ATS_CAP_ID_CR_ADDR = 12'h1B0;
localparam ATS_CAP_ID_SIZE = 16;
localparam ATS_CAP_ID_ATSCID_LO = 0;
localparam ATS_CAP_ID_ATSCID_HI = 15;
localparam ATS_CAP_ID_ATSCID_RESET = 16'hF;
localparam ATS_CAP_ID_USEMASK = 16'hFFFF;
localparam ATS_CAP_ID_RO_MASK = 16'hFFFF;
localparam ATS_CAP_ID_WO_MASK = 16'h0;
localparam ATS_CAP_ID_RESET = 16'hF;

typedef struct packed {
    logic [11:0] CAP_PTR;  // RO
    logic  [3:0] ATSCV;  // RO
} ATS_CAP_VERSION_NEXT_PTR_t;

localparam ATS_CAP_VERSION_NEXT_PTR_REG_STRIDE = 12'h2;
localparam ATS_CAP_VERSION_NEXT_PTR_REG_ENTRIES = 1;
localparam [11:0] ATS_CAP_VERSION_NEXT_PTR_CR_ADDR = 12'h1B2;
localparam ATS_CAP_VERSION_NEXT_PTR_SIZE = 16;
localparam ATS_CAP_VERSION_NEXT_PTR_CAP_PTR_LO = 4;
localparam ATS_CAP_VERSION_NEXT_PTR_CAP_PTR_HI = 15;
localparam ATS_CAP_VERSION_NEXT_PTR_CAP_PTR_RESET = 12'h0;
localparam ATS_CAP_VERSION_NEXT_PTR_ATSCV_LO = 0;
localparam ATS_CAP_VERSION_NEXT_PTR_ATSCV_HI = 3;
localparam ATS_CAP_VERSION_NEXT_PTR_ATSCV_RESET = 4'h1;
localparam ATS_CAP_VERSION_NEXT_PTR_USEMASK = 16'hFFFF;
localparam ATS_CAP_VERSION_NEXT_PTR_RO_MASK = 16'hFFFF;
localparam ATS_CAP_VERSION_NEXT_PTR_WO_MASK = 16'h0;
localparam ATS_CAP_VERSION_NEXT_PTR_RESET = 16'h1;

typedef struct packed {
    logic  [8:0] reserved0;  // RSVD
    logic  [0:0] ATSGIS;  // RO
    logic  [0:0] ATSPAR;  // RO
    logic  [4:0] ATSIQD;  // RO
} ATS_CAP_t;

localparam ATS_CAP_REG_STRIDE = 12'h2;
localparam ATS_CAP_REG_ENTRIES = 1;
localparam [11:0] ATS_CAP_CR_ADDR = 12'h1B4;
localparam ATS_CAP_SIZE = 16;
localparam ATS_CAP_ATSGIS_LO = 6;
localparam ATS_CAP_ATSGIS_HI = 6;
localparam ATS_CAP_ATSGIS_RESET = 1'h1;
localparam ATS_CAP_ATSPAR_LO = 5;
localparam ATS_CAP_ATSPAR_HI = 5;
localparam ATS_CAP_ATSPAR_RESET = 1'h1;
localparam ATS_CAP_ATSIQD_LO = 0;
localparam ATS_CAP_ATSIQD_HI = 4;
localparam ATS_CAP_ATSIQD_RESET = 5'h0;
localparam ATS_CAP_USEMASK = 16'h7F;
localparam ATS_CAP_RO_MASK = 16'h7F;
localparam ATS_CAP_WO_MASK = 16'h0;
localparam ATS_CAP_RESET = 16'h60;

typedef struct packed {
    logic  [0:0] ATSE;  // RW
    logic  [9:0] reserved0;  // RSVD
    logic  [4:0] ATSSTU;  // RW
} ATS_CAP_CONTROL_t;

localparam ATS_CAP_CONTROL_REG_STRIDE = 12'h2;
localparam ATS_CAP_CONTROL_REG_ENTRIES = 1;
localparam [11:0] ATS_CAP_CONTROL_CR_ADDR = 12'h1B6;
localparam ATS_CAP_CONTROL_SIZE = 16;
localparam ATS_CAP_CONTROL_ATSE_LO = 15;
localparam ATS_CAP_CONTROL_ATSE_HI = 15;
localparam ATS_CAP_CONTROL_ATSE_RESET = 1'h0;
localparam ATS_CAP_CONTROL_ATSSTU_LO = 0;
localparam ATS_CAP_CONTROL_ATSSTU_HI = 4;
localparam ATS_CAP_CONTROL_ATSSTU_RESET = 5'h0;
localparam ATS_CAP_CONTROL_USEMASK = 16'h801F;
localparam ATS_CAP_CONTROL_RO_MASK = 16'h0;
localparam ATS_CAP_CONTROL_WO_MASK = 16'h0;
localparam ATS_CAP_CONTROL_RESET = 16'h0;

typedef struct packed {
    VENDOR_ID_t  VENDOR_ID;
    DEVICE_ID_t  DEVICE_ID;
    DEVICE_COMMAND_t  DEVICE_COMMAND;
    DEVICE_STATUS_t  DEVICE_STATUS;
    REVISION_ID_CLASS_CODE_t  REVISION_ID_CLASS_CODE;
    CACHE_LINE_SIZE_t  CACHE_LINE_SIZE;
    HEADER_TYPE_t  HEADER_TYPE;
    FUNC_BAR_L_t  FUNC_BAR_L;
    FUNC_BAR_U_t  FUNC_BAR_U;
    CSR_BAR_L_t  CSR_BAR_L;
    CSR_BAR_U_t  CSR_BAR_U;
    SUBSYSTEM_VENDOR_ID_t  SUBSYSTEM_VENDOR_ID;
    SUBSYSTEM_ID_t  SUBSYSTEM_ID;
    CAP_PTR_t  CAP_PTR;
    INT_LINE_t  INT_LINE;
    INT_PIN_t  INT_PIN;
    MSIX_CAP_ID_t  MSIX_CAP_ID;
    MSIX_CAP_NEXT_CAP_PTR_t  MSIX_CAP_NEXT_CAP_PTR;
    MSIX_CAP_CONTROL_t  MSIX_CAP_CONTROL;
    MSIX_CAP_TABLE_OFFSET_BIR_t  MSIX_CAP_TABLE_OFFSET_BIR;
    MSIX_CAP_PBA_OFFSET_BIR_t  MSIX_CAP_PBA_OFFSET_BIR;
    PCIE_CAP_ID_t  PCIE_CAP_ID;
    PCIE_CAP_NEXT_CAP_PTR_t  PCIE_CAP_NEXT_CAP_PTR;
    PCIE_CAP_t  PCIE_CAP;
    PCIE_CAP_DEVICE_CAP_t  PCIE_CAP_DEVICE_CAP;
    PCIE_CAP_DEVICE_CONTROL_t  PCIE_CAP_DEVICE_CONTROL;
    PCIE_CAP_DEVICE_STATUS_t  PCIE_CAP_DEVICE_STATUS;
    PCIE_CAP_LINK_CAP_t  PCIE_CAP_LINK_CAP;
    PCIE_CAP_LINK_CONTROL_t  PCIE_CAP_LINK_CONTROL;
    PCIE_CAP_LINK_STATUS_t  PCIE_CAP_LINK_STATUS;
    PCIE_CAP_DEVICE_CAP_2_t  PCIE_CAP_DEVICE_CAP_2;
    PCIE_CAP_DEVICE_CONTROL_2_t  PCIE_CAP_DEVICE_CONTROL_2;
    PM_CAP_ID_t  PM_CAP_ID;
    PM_CAP_NEXT_CAP_PTR_t  PM_CAP_NEXT_CAP_PTR;
    PM_CAP_t  PM_CAP;
    PM_CAP_CONTROL_STATUS_t  PM_CAP_CONTROL_STATUS;
    ACS_CAP_ID_t  ACS_CAP_ID;
    ACS_CAP_VERSION_NEXT_PTR_t  ACS_CAP_VERSION_NEXT_PTR;
    ACS_CAP_t  ACS_CAP;
    ACS_CAP_CONTROL_t  ACS_CAP_CONTROL;
    PASID_CAP_ID_t  PASID_CAP_ID;
    PASID_CAP_VERSION_NEXT_PTR_t  PASID_CAP_VERSION_NEXT_PTR;
    PASID_CAP_t  PASID_CAP;
    PASID_CONTROL_t  PASID_CONTROL;
    DVSEC_CAP_ID_t  DVSEC_CAP_ID;
    DVSEC_CAP_VERSION_NEXT_PTR_t  DVSEC_CAP_VERSION_NEXT_PTR;
    DVSEC_HDR1_t  DVSEC_HDR1;
    DVSEC_HDR2_t  DVSEC_HDR2;
    SCIOV_CAP_t  SCIOV_CAP;
    SCIOV_SUPP_PGSZ_t  SCIOV_SUPP_PGSZ;
    SCIOV_SYS_PGSZ_t  SCIOV_SYS_PGSZ;
    SCIOV_IMS_t  SCIOV_IMS;
    AER_CAP_ID_t  AER_CAP_ID;
    AER_CAP_VERSION_NEXT_PTR_t  AER_CAP_VERSION_NEXT_PTR;
    AER_CAP_UNCORR_ERR_STATUS_t  AER_CAP_UNCORR_ERR_STATUS;
    AER_CAP_UNCORR_ERR_MASK_t  AER_CAP_UNCORR_ERR_MASK;
    AER_CAP_UNCORR_ERR_SEV_t  AER_CAP_UNCORR_ERR_SEV;
    AER_CAP_CORR_ERR_STATUS_t  AER_CAP_CORR_ERR_STATUS;
    AER_CAP_CORR_ERR_MASK_t  AER_CAP_CORR_ERR_MASK;
    AER_CAP_CONTROL_t  AER_CAP_CONTROL;
    AER_CAP_HEADER_LOG_0_t  AER_CAP_HEADER_LOG_0;
    AER_CAP_HEADER_LOG_1_t  AER_CAP_HEADER_LOG_1;
    AER_CAP_HEADER_LOG_2_t  AER_CAP_HEADER_LOG_2;
    AER_CAP_HEADER_LOG_3_t  AER_CAP_HEADER_LOG_3;
    AER_CAP_ROOT_ERROR_COMMAND_t  AER_CAP_ROOT_ERROR_COMMAND;
    AER_CAP_ROOT_ERROR_STATUS_t  AER_CAP_ROOT_ERROR_STATUS;
    AER_CAP_ERROR_SOURCE_IDENT_t  AER_CAP_ERROR_SOURCE_IDENT;
    AER_CAP_TLP_PREFIX_LOG_0_t  AER_CAP_TLP_PREFIX_LOG_0;
    AER_CAP_TLP_PREFIX_LOG_1_t  AER_CAP_TLP_PREFIX_LOG_1;
    AER_CAP_TLP_PREFIX_LOG_2_t  AER_CAP_TLP_PREFIX_LOG_2;
    AER_CAP_TLP_PREFIX_LOG_3_t  AER_CAP_TLP_PREFIX_LOG_3;
    ATS_CAP_ID_t  ATS_CAP_ID;
    ATS_CAP_VERSION_NEXT_PTR_t  ATS_CAP_VERSION_NEXT_PTR;
    ATS_CAP_t  ATS_CAP;
    ATS_CAP_CONTROL_t  ATS_CAP_CONTROL;
} hqm_pf_cfg_registers_t;

// ===================================================
// load

typedef struct packed {
    logic  [0:0] DPE;  // RW/1C/V
    logic  [0:0] SSE;  // RW/1C/V
    logic  [0:0] RMA;  // RW/1C/V
    logic  [0:0] RTA;  // RW/1C/V
    logic  [0:0] STA;  // RW/1C/V
    logic  [0:0] MDPE;  // RW/1C/V
} load_DEVICE_STATUS_t;

typedef struct packed {
    logic  [0:0] URD;  // RW/1C/V
    logic  [0:0] FED;  // RW/1C/V
    logic  [0:0] NED;  // RW/1C/V
    logic  [0:0] CED;  // RW/1C/V
} load_PCIE_CAP_DEVICE_STATUS_t;

typedef struct packed {
    logic  [0:0] IEUNC;  // RW/1C/V/P
    logic  [0:0] UR;  // RW/1C/V/P
    logic  [0:0] ECRCC;  // RW/1C/V/P
    logic  [0:0] MTLP;  // RW/1C/V/P
    logic  [0:0] EC;  // RW/1C/V/P
    logic  [0:0] CA;  // RW/1C/V/P
    logic  [0:0] CT;  // RW/1C/V/P
    logic  [0:0] PTLPR;  // RW/1C/V/P
} load_AER_CAP_UNCORR_ERR_STATUS_t;

typedef struct packed {
    logic  [0:0] IECOR;  // RW/1C/V/P
    logic  [0:0] ANFES;  // RW/1C/V/P
} load_AER_CAP_CORR_ERR_STATUS_t;

typedef struct packed {
    logic  [0:0] TLPPFLOGP;  // RO/V/P
    logic  [0:0] TFEP;  // RO/V/P
} load_AER_CAP_CONTROL_t;

typedef struct packed {
    logic  [0:0] HDRLOGDW0;  // RO/V/P
} load_AER_CAP_HEADER_LOG_0_t;

typedef struct packed {
    logic  [0:0] HDRLOGDW1;  // RO/V/P
} load_AER_CAP_HEADER_LOG_1_t;

typedef struct packed {
    logic  [0:0] HDRLOGDW2;  // RO/V/P
} load_AER_CAP_HEADER_LOG_2_t;

typedef struct packed {
    logic  [0:0] HDRLOGDW3;  // RO/V/P
} load_AER_CAP_HEADER_LOG_3_t;

typedef struct packed {
    logic  [0:0] TLPPFLOG0;  // RO/V/P
} load_AER_CAP_TLP_PREFIX_LOG_0_t;

typedef struct packed {
    load_DEVICE_STATUS_t  DEVICE_STATUS;
    load_PCIE_CAP_DEVICE_STATUS_t  PCIE_CAP_DEVICE_STATUS;
    load_AER_CAP_UNCORR_ERR_STATUS_t  AER_CAP_UNCORR_ERR_STATUS;
    load_AER_CAP_CORR_ERR_STATUS_t  AER_CAP_CORR_ERR_STATUS;
    load_AER_CAP_CONTROL_t  AER_CAP_CONTROL;
    load_AER_CAP_HEADER_LOG_0_t  AER_CAP_HEADER_LOG_0;
    load_AER_CAP_HEADER_LOG_1_t  AER_CAP_HEADER_LOG_1;
    load_AER_CAP_HEADER_LOG_2_t  AER_CAP_HEADER_LOG_2;
    load_AER_CAP_HEADER_LOG_3_t  AER_CAP_HEADER_LOG_3;
    load_AER_CAP_TLP_PREFIX_LOG_0_t  AER_CAP_TLP_PREFIX_LOG_0;
} hqm_pf_cfg_load_t;

// ===================================================
// lock

// ===================================================
// valid (so far used by WO registers)

// ===================================================
// new

typedef struct packed {
    logic [15:0] DID;  // RO/V
} new_DEVICE_ID_t;

typedef struct packed {
    logic  [0:0] DPE;  // RW/1C/V
    logic  [0:0] SSE;  // RW/1C/V
    logic  [0:0] RMA;  // RW/1C/V
    logic  [0:0] RTA;  // RW/1C/V
    logic  [0:0] STA;  // RW/1C/V
    logic  [0:0] MDPE;  // RW/1C/V
    logic  [0:0] INTSTS;  // RO/V
} new_DEVICE_STATUS_t;

typedef struct packed {
    logic  [3:0] RIDU;  // RO/V
    logic  [3:0] RIDL;  // RO/V
} new_REVISION_ID_CLASS_CODE_t;

typedef struct packed {
    logic  [0:0] MFD;  // RO/V
} new_HEADER_TYPE_t;

typedef struct packed {
    logic  [3:0] DPT;  // RO/V
} new_PCIE_CAP_t;

typedef struct packed {
    logic  [0:0] TP;  // RO/V
    logic  [0:0] URD;  // RW/1C/V
    logic  [0:0] FED;  // RW/1C/V
    logic  [0:0] NED;  // RW/1C/V
    logic  [0:0] CED;  // RW/1C/V
} new_PCIE_CAP_DEVICE_STATUS_t;

typedef struct packed {
    logic  [0:0] CMP10BTAGS;  // RO/V
} new_PCIE_CAP_DEVICE_CAP_2_t;

typedef struct packed {
    logic  [0:0] IEUNC;  // RW/1C/V/P
    logic  [0:0] UR;  // RW/1C/V/P
    logic  [0:0] ECRCC;  // RW/1C/V/P
    logic  [0:0] MTLP;  // RW/1C/V/P
    logic  [0:0] EC;  // RW/1C/V/P
    logic  [0:0] CA;  // RW/1C/V/P
    logic  [0:0] CT;  // RW/1C/V/P
    logic  [0:0] PTLPR;  // RW/1C/V/P
} new_AER_CAP_UNCORR_ERR_STATUS_t;

typedef struct packed {
    logic  [0:0] IECOR;  // RW/1C/V/P
    logic  [0:0] ANFES;  // RW/1C/V/P
} new_AER_CAP_CORR_ERR_STATUS_t;

typedef struct packed {
    logic  [0:0] TLPPFLOGP;  // RO/V/P
    logic  [4:0] TFEP;  // RO/V/P
} new_AER_CAP_CONTROL_t;

typedef struct packed {
    logic [31:0] HDRLOGDW0;  // RO/V/P
} new_AER_CAP_HEADER_LOG_0_t;

typedef struct packed {
    logic [31:0] HDRLOGDW1;  // RO/V/P
} new_AER_CAP_HEADER_LOG_1_t;

typedef struct packed {
    logic [31:0] HDRLOGDW2;  // RO/V/P
} new_AER_CAP_HEADER_LOG_2_t;

typedef struct packed {
    logic [31:0] HDRLOGDW3;  // RO/V/P
} new_AER_CAP_HEADER_LOG_3_t;

typedef struct packed {
    logic [31:0] TLPPFLOG0;  // RO/V/P
} new_AER_CAP_TLP_PREFIX_LOG_0_t;

typedef struct packed {
    new_DEVICE_ID_t  DEVICE_ID;
    new_DEVICE_STATUS_t  DEVICE_STATUS;
    new_REVISION_ID_CLASS_CODE_t  REVISION_ID_CLASS_CODE;
    new_HEADER_TYPE_t  HEADER_TYPE;
    new_PCIE_CAP_t  PCIE_CAP;
    new_PCIE_CAP_DEVICE_STATUS_t  PCIE_CAP_DEVICE_STATUS;
    new_PCIE_CAP_DEVICE_CAP_2_t  PCIE_CAP_DEVICE_CAP_2;
    new_AER_CAP_UNCORR_ERR_STATUS_t  AER_CAP_UNCORR_ERR_STATUS;
    new_AER_CAP_CORR_ERR_STATUS_t  AER_CAP_CORR_ERR_STATUS;
    new_AER_CAP_CONTROL_t  AER_CAP_CONTROL;
    new_AER_CAP_HEADER_LOG_0_t  AER_CAP_HEADER_LOG_0;
    new_AER_CAP_HEADER_LOG_1_t  AER_CAP_HEADER_LOG_1;
    new_AER_CAP_HEADER_LOG_2_t  AER_CAP_HEADER_LOG_2;
    new_AER_CAP_HEADER_LOG_3_t  AER_CAP_HEADER_LOG_3;
    new_AER_CAP_TLP_PREFIX_LOG_0_t  AER_CAP_TLP_PREFIX_LOG_0;
} hqm_pf_cfg_new_t;

// ===================================================
// HandCoded Control structure
//   (used by project HandCoded specified registers)

// ===================================================
// HandCoded Read/Write Structure
//    (used by project HandCoded specified registers)

// ===================================================
// HandCoded Read/Write Structure
//    (used by project HandCoded specified registers)

// ===================================================
// RW/V2 Structure

// ===================================================
// Parity Bit Structure

// ===================================================
// Watch Signals Structure


endpackage: hqm_pf_cfg_pkg

`endif // HQM_PF_CFG_PKG_VH
