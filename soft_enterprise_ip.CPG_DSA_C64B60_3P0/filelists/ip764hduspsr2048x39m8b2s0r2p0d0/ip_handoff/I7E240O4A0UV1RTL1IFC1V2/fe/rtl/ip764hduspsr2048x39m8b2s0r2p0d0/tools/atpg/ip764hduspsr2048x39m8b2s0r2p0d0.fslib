
/////////////////////////////////////////////////////////////////////////////////////////////
// Intel Confidential                                                                      //
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2023 Intel Corporation. The information contained herein is the proprietary   //
// and confidential information of Intel or its licensors, and is supplied subject to, and //
// may be used only in accordance with, previously executed agreements with Intel.         //
// EXCEPT AS MAY OTHERWISE BE AGREED IN WRITING: (1) ALL MATERIALS FURNISHED BY INTEL      //
// HEREUNDER ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND; (2) INTEL SPECIFICALLY     //
// DISCLAIMS ANY WARRANTY OF NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE OR          //
// MERCHANTABILITY; AND (3) INTEL WILL NOT BE LIABLE FOR ANY COSTS OF PROCUREMENT OF       //
// SUBSTITUTES, LOSS OF PROFITS, INTERRUPTION OF BUSINESS, OR FOR ANY OTHER SPECIAL,       //
// CONSEQUENTIAL OR INCIDENTAL DAMAGES, HOWEVER CAUSED, WHETHER FOR BREACH OF WARRANTY,    //
// CONTRACT, TORT, NEGLIGENCE, STRICT LIABILITY OR OTHERWISE.                              //
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                         //
//  Vendor:                Intel Corporation                                               //
//  Product:               c764hduspsr                                                     //
//  Version:               r1.0.0                                                          //
//  Technology:            p1276.4                                                         //
//  Celltype:              MemoryIP                                                        //
//  IP Owner:              Intel CMO                                                       //
//  Creation Time:         Tue Mar 28 2023 19:11:52                                        //
//  Memory Name:           ip764hduspsr2048x39m8b2s0r2p0d0                                 //
//  Memory Name Generated: ip764hduspsr2048x39m8b2s0r2p0d0                                 //
//                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////

//
// ***********************************************************************
// File Type:       Tessent Cell Library 
// Generated by:    Memory Compiler Template
// Tool Version:    N/A
// Tool Build Date:   N/A
// ***********************************************************************
// Library Created : Local Time = 
//                          GMT = 


library_format_version = 9;

array_delimiter = "[]";

model ip764hduspsr2048x39m8b2s0r2p0d0_mem_2048x40
  ( ad1, we1, di1, be1,
  re1 ,do1)
(
//  model_source = compiler_template;
  input (ad1) (array = 10 : 0;)
  input (we1) ( )
  input (di1) (array = 39 : 0;)
  input (be1) ()
  input (re1) ( )
  output (do1) (array = 39 : 0;)
  (

  primitive = _and mlc_and_1 ( we1, be1, mlc_and_1 );

  // memory array
  data_size = 40;
  address_size = 11;
  min_address = 0;
  max_address = 2047;

  //  LEVEL SENSITIVE ports

  // Read X, Write normally if read & write same address:
  read_write_conflict = XX;




// Verilog RAM has no Set or Reset pin :
// ----------------------------------------------------------------------------
// port 1
// ----------------------------------------------------------------------------
    primitive = _cram mem ( , ,
      // Following write port will Hold in-memory data when not writing.
      _write { , , } (mlc_and_1, , ad1, di1),
      // Following read port will Hold output data after reading.
      _read { , , ,H} ( , re1, , ad1, do1)
   );

  )
)

model ip764hduspsr2048x39m8b2s0r2p0d0_mem_2rx40
  ( ad1, we1, di1, be1,
  re1 ,do1)
(
//  model_source = compiler_template;
  input (ad1) (array = 3 : 0;)
  input (we1) ( )
  input (di1) (array = 39 : 0;)
  input (be1) ()
  input (re1) ( )
  output (do1) (array = 39 : 0;)
  (

  primitive = _and mlc_and_1 ( we1, be1, mlc_and_1 );
  // memory array
  data_size = 40;
  address_size = 4;
  min_address = 0;
  max_address = 15;

  //  LEVEL SENSITIVE ports

  // Read X, Write normally if read & write same address:
  read_write_conflict = XX;




// Verilog RAM has no Set or Reset pin :
// ----------------------------------------------------------------------------
// port 1
// ----------------------------------------------------------------------------
    primitive = _cram mem ( , ,
      // Following write port will Hold in-memory data when not writing.
      _write { , , } (mlc_and_1, , ad1, di1),
      // Following read port will Hold output data after reading.
      _read { , , ,H} ( , re1, , ad1, do1)
   );

  )
)



model ip764hduspsr2048x39m8b2s0r2p0d0_mem_simple_2048x40
  (clk, ad1, we1, di1,
  re1, do1)
(
//  model_source = compiler_template;
  intern (mlc_and_1) (array = 39 : 0;)
  input (clk) ( )
  input (ad1) (array = 10 : 0;)
  input (we1) ( )
  input (di1) (array = 39 : 0;)
  input (re1) ( )
  output (do1) (array = 39 : 0;)
  (

    // Remodel of Verilog RAM "mem" :
    data_size = 40;
    address_size = 11;
    min_address = 0;
    max_address = 2047;

    edge_trigger = rw;  //  EDGE TRIGGERED read ports and write ports

    // Read X, Write normally if read & write same address:
    read_write_conflict = XX;

    // Verilog RAM has no Set or Reset pin : 
    primitive = _cram mem ( , ,

      // Following write port will Hold in-memory data when not writing.
      _write { , , } (clk, we1, ad1, di1),
      // Following read port will Hold output data after reading.
      _read { ,H,H,H} ( , clk, re1, ad1, do1)
    );
  )
)





//=============================================================================
// END of ip764hduspsr2048x39m8b2s0r2p0d0.fslib
//=============================================================================

