
//  INTEL CONFIDENTIAL
//
//  Copyright 2023 Intel Corporation All Rights Reserved.
//
//  The source code contained or described herein and all documents related
//  to the source code ("Material") are owned by Intel Corporation or its
//  suppliers or licensors. Title to the Material remains with Intel
//  Corporation or its suppliers and licensors. The Material contains trade
//  secrets and proprietary and confidential information of Intel or its
//  suppliers and licensors. The Material is protected by worldwide copyright
//  and trade secret laws and treaty provisions. No part of the Material may
//  be used, copied, reproduced, modified, published, uploaded, posted,
//  transmitted, distributed, or disclosed in any way without Intel's prior
//  express written permission.
//
//  No license under any patent, copyright, trade secret or other intellectual
//  property right is granted to or conferred upon you by disclosure or
//  delivery of the Materials, either expressly, by implication, inducement,
//  estoppel or otherwise. Any license under such intellectual property rights
//  must be express and approved by Intel in writing.
//

//------------------------------------------------------------------------------------------------------------------------
// Intel Proprietary        Intel Confidential        Intel Proprietary        Intel Confidential        Intel Proprietary
//------------------------------------------------------------------------------------------------------------------------
// Generated by                  : cudoming
// Generated on                  : April 18, 2023
//------------------------------------------------------------------------------------------------------------------------
// General Information:
// ------------------------------
// 2r2w0c standard array for SDG server designs.
// Behavioral modeling of a parameterized register file core with no DFX features.
// RTL is written in SystemVerilog.
//------------------------------------------------------------------------------------------------------------------------
// Detail Information:
// ------------------------------
// Addresses        : RD/WR addresses are encoded.
//                    Input addresses will be valid at the array in 1 phases after being driven.
//                    Address latency of 1 is corresponding to a B-latch.
// Enables          : RD/WR enables are used to condition the clock and wordlines.
//                  : Input enables will be valid at the array in 1 phases after being driven.
//                    Enable latency of 1 is corresponding to a B-latch.
// Write Data       : Write data will be valid at the array 2 phases after being driven.
//                    Write data latency of 2 is corresponding to a rising-edge flop. 
// Read Data        : Read data will be valid at the output of a SDL 1 phase after being read.
//                    Read data latency of 1 is corresponding to a B-latch.
// Address Offset   : 
//------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
// Other Information:
// ------------------------------
// SDG RFIP RTL Release Path:
// /p/hdk/rtl/ip_releases/shdk74/array_macro_module
//
//------------------------------------------------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////
// FileName : arf028b256e2r2w0cbbeheaa4acw_hier.atpglib
// RAM Library Model
////////////////////////////////////////////////////////////////

model arf028b256e2r2w0cbbeheaa4acw_hier (
  ckrdp0, rdenp0, rdaddrp0, sdl_initp0, pre_rddatap0, 
  ckrdp1, rdenp1, rdaddrp1, sdl_initp1, pre_rddatap1, 
  sdl_initp0_i_out, ckrd_rcb_outp0, 
  sdl_initp1_i_out, ckrd_rcb_outp1, 
  ckwrp0, wrenp0, wraddrp0, wrdatap0, 
  ckwrp1, wrenp1, wraddrp1, wrdatap1,  
  rdaddrp0_fd, rdaddrp0_rd, 
  rdaddrp1_fd, rdaddrp1_rd, 
  wraddrp0_fd, wraddrp0_rd, wrdatap0_fd, wrdatap0_rd,
  wraddrp1_fd, wraddrp1_rd, wrdatap1_fd, wrdatap1_rd) (

  //Input and output pins declarations
  input (ckrdp0) ()
  input (rdenp0) ()
  input (rdaddrp0) (array =7:0; )
  input (sdl_initp0) ()

  input (ckrdp1) ()
  input (rdenp1) ()
  input (rdaddrp1) (array =7:0; )
  input (sdl_initp1) ()

  input (ckwrp0) ()
  input (wrenp0) () 
  input (wraddrp0) (array =7:0; )
  input (wrdatap0) (array =29:0; )

  input (ckwrp1) ()
  input (wrenp1) () 
  input (wraddrp1) (array =7:0; )
  input (wrdatap1) (array =29:0; )
 
  input (rdaddrp0_fd) (unused; no_fault = sa0 sa1;)
  input (rdaddrp0_rd) (unused; no_fault = sa0 sa1;)

  input (rdaddrp1_fd) (unused; no_fault = sa0 sa1;)
  input (rdaddrp1_rd) (unused; no_fault = sa0 sa1;)

  input (wraddrp0_fd) (unused; no_fault = sa0 sa1;)
  input (wraddrp0_rd) (unused; no_fault = sa0 sa1;)
  input (wrdatap0_fd) (unused; no_fault = sa0 sa1;)
  input (wrdatap0_rd) (unused; no_fault = sa0 sa1;)

  input (wraddrp1_fd) (unused; no_fault = sa0 sa1;)
  input (wraddrp1_rd) (unused; no_fault = sa0 sa1;)
  input (wrdatap1_fd) (unused; no_fault = sa0 sa1;)
  input (wrdatap1_rd) (unused; no_fault = sa0 sa1;)


  intern (mlc_t0) (primitive = _tie0 mlc_tie0_1 ( mlc_t0 );)
  intern (wrclk_int_0)     (primitive = _buf wrclk_int_0_i     (ckwrp0, wrclk_int_0);)
  intern (wrclk_int_not_0) (primitive = _inv wrclk_int_not_0_i (wrclk_int_0, wrclk_int_not_0);)

  intern (wrclk_int_1)     (primitive = _buf wrclk_int_1_i     (ckwrp1, wrclk_int_1);)
  intern (wrclk_int_not_1) (primitive = _inv wrclk_int_not_1_i (wrclk_int_1, wrclk_int_not_1);)

  intern (rdclk_int_0)     (primitive = _buf rdclk_int_0_i     (ckrdp0, rdclk_int_0);)
  intern (rdclk_int_not_0) (primitive = _inv rdclk_int_not_0_i (rdclk_int_0, rdclk_int_not_0);)

  intern (rdclk_int_1)     (primitive = _buf rdclk_int_1_i     (ckrdp1, rdclk_int_1);)
  intern (rdclk_int_not_1) (primitive = _inv rdclk_int_not_1_i (rdclk_int_1, rdclk_int_not_1);)


  //Capture Read and Write Enables
  intern (re0_i) (primitive = _dlat rd_en0 (mlc_t0, mlc_t0, rdclk_int_not_0, rdenp0, re0_i, );)
  intern (ckrd_rcb_0) (primitive = _and and_ckrd_rcb_0 ( re0_i, rdclk_int_0 , ckrd_rcb_0);)
  intern (ckrd_rcb_b_0) (primitive = _inv inv_ckrd_rcb_b_0 (ckrd_rcb_0, ckrd_rcb_b_0);)

  intern (re1_i) (primitive = _dlat rd_en1 (mlc_t0, mlc_t0, rdclk_int_not_1, rdenp1, re1_i, );)
  intern (ckrd_rcb_1) (primitive = _and and_ckrd_rcb_1 ( re1_i, rdclk_int_1 , ckrd_rcb_1);)
  intern (ckrd_rcb_b_1) (primitive = _inv inv_ckrd_rcb_b_1 (ckrd_rcb_1, ckrd_rcb_b_1);)

  intern (we0_i) (primitive = _dlat lat_we0 (mlc_t0, mlc_t0, wrclk_int_not_0, wrenp0, we0_i, );)
  intern (ckwr_rcb_0) (primitive = _and and_ckwr_rcb_0 ( we0_i, wrclk_int_0, ckwr_rcb_0);)
  intern (ckwr_rcb_b_0) (primitive = _inv inv_ckwr_rcb_b_0 (ckwr_rcb_0, ckwr_rcb_b_0);)

  intern (we1_i) (primitive = _dlat lat_we1 (mlc_t0, mlc_t0, wrclk_int_not_1, wrenp1, we1_i, );)
  intern (ckwr_rcb_1) (primitive = _and and_ckwr_rcb_1 ( we1_i, wrclk_int_1, ckwr_rcb_1);)
  intern (ckwr_rcb_b_1) (primitive = _inv inv_ckwr_rcb_b_1 (ckwr_rcb_1, ckwr_rcb_b_1);)


  //sdl init ff
  intern (sdlinit_lat_0) (primitive= _dff sdlinit_lat_0_dff (mlc_t0, mlc_t0, rdclk_int_0, sdl_initp0, sdlinit_lat_0, );)
  intern (sdlinit_lat_1) (primitive= _dff sdlinit_lat_1_dff (mlc_t0, mlc_t0, rdclk_int_1, sdl_initp1, sdlinit_lat_1, );)

  //sdl init out inv and rdclk rcb
  output (sdl_initp0_i_out)   (primitive = _inv sdlinit_i_0 (sdlinit_lat_0, sdl_initp0_i_out);) 
  output (ckrd_rcb_outp0) (primitive = _buf rdclk_rcb_buf_out0 (ckrd_rcb_0, ckrd_rcb_outp0);)
  output (sdl_initp1_i_out)   (primitive = _inv sdlinit_i_1 (sdlinit_lat_1, sdl_initp1_i_out);) 
  output (ckrd_rcb_outp1) (primitive = _buf rdclk_rcb_buf_out1 (ckrd_rcb_1, ckrd_rcb_outp1);)

 


  //Capture read and write address
  intern (iard0_i_lat) (
     array =  7  : 0;
     primitive = _dlat dlat_ard0_7 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[7], iard0_i_lat<7>, );
     primitive = _dlat dlat_ard0_6 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[6], iard0_i_lat<6>, );
     primitive = _dlat dlat_ard0_5 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[5], iard0_i_lat<5>, );
     primitive = _dlat dlat_ard0_4 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[4], iard0_i_lat<4>, );
     primitive = _dlat dlat_ard0_3 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[3], iard0_i_lat<3>, );
     primitive = _dlat dlat_ard0_2 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[2], iard0_i_lat<2>, );
     primitive = _dlat dlat_ard0_1 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[1], iard0_i_lat<1>, );
     primitive = _dlat dlat_ard0_0 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[0], iard0_i_lat<0>, );
  )

  intern (iard1_i_lat) (
     array =  7  : 0;
     primitive = _dlat dlat_ard1_7 (mlc_t0, mlc_t0, ckrd_rcb_b_1, rdaddrp1[7], iard1_i_lat<7>, );
     primitive = _dlat dlat_ard1_6 (mlc_t0, mlc_t0, ckrd_rcb_b_1, rdaddrp1[6], iard1_i_lat<6>, );
     primitive = _dlat dlat_ard1_5 (mlc_t0, mlc_t0, ckrd_rcb_b_1, rdaddrp1[5], iard1_i_lat<5>, );
     primitive = _dlat dlat_ard1_4 (mlc_t0, mlc_t0, ckrd_rcb_b_1, rdaddrp1[4], iard1_i_lat<4>, );
     primitive = _dlat dlat_ard1_3 (mlc_t0, mlc_t0, ckrd_rcb_b_1, rdaddrp1[3], iard1_i_lat<3>, );
     primitive = _dlat dlat_ard1_2 (mlc_t0, mlc_t0, ckrd_rcb_b_1, rdaddrp1[2], iard1_i_lat<2>, );
     primitive = _dlat dlat_ard1_1 (mlc_t0, mlc_t0, ckrd_rcb_b_1, rdaddrp1[1], iard1_i_lat<1>, );
     primitive = _dlat dlat_ard1_0 (mlc_t0, mlc_t0, ckrd_rcb_b_1, rdaddrp1[0], iard1_i_lat<0>, );
  )

  intern (iawr0_i_lat) (
     array =  7  : 0;
     primitive = _dlat dlat_awr0_7 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[7], iawr0_i_lat<7>, );
     primitive = _dlat dlat_awr0_6 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[6], iawr0_i_lat<6>, );
     primitive = _dlat dlat_awr0_5 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[5], iawr0_i_lat<5>, );
     primitive = _dlat dlat_awr0_4 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[4], iawr0_i_lat<4>, );
     primitive = _dlat dlat_awr0_3 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[3], iawr0_i_lat<3>, );
     primitive = _dlat dlat_awr0_2 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[2], iawr0_i_lat<2>, );
     primitive = _dlat dlat_awr0_1 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[1], iawr0_i_lat<1>, );
     primitive = _dlat dlat_awr0_0 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[0], iawr0_i_lat<0>, );
  )

  intern (iawr1_i_lat) (
     array =  7  : 0;
     primitive = _dlat dlat_awr1_7 (mlc_t0, mlc_t0, ckwr_rcb_b_1, wraddrp1[7], iawr1_i_lat<7>, );
     primitive = _dlat dlat_awr1_6 (mlc_t0, mlc_t0, ckwr_rcb_b_1, wraddrp1[6], iawr1_i_lat<6>, );
     primitive = _dlat dlat_awr1_5 (mlc_t0, mlc_t0, ckwr_rcb_b_1, wraddrp1[5], iawr1_i_lat<5>, );
     primitive = _dlat dlat_awr1_4 (mlc_t0, mlc_t0, ckwr_rcb_b_1, wraddrp1[4], iawr1_i_lat<4>, );
     primitive = _dlat dlat_awr1_3 (mlc_t0, mlc_t0, ckwr_rcb_b_1, wraddrp1[3], iawr1_i_lat<3>, );
     primitive = _dlat dlat_awr1_2 (mlc_t0, mlc_t0, ckwr_rcb_b_1, wraddrp1[2], iawr1_i_lat<2>, );
     primitive = _dlat dlat_awr1_1 (mlc_t0, mlc_t0, ckwr_rcb_b_1, wraddrp1[1], iawr1_i_lat<1>, );
     primitive = _dlat dlat_awr1_0 (mlc_t0, mlc_t0, ckwr_rcb_b_1, wraddrp1[0], iawr1_i_lat<0>, );
  )
 

  //input data 

  intern (idin0_i) (
    array =  29 :0;
    primitive = _dff dff_din0_29 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[29], idin0_i<29>, );
    primitive = _dff dff_din0_28 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[28], idin0_i<28>, );
    primitive = _dff dff_din0_27 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[27], idin0_i<27>, );
    primitive = _dff dff_din0_26 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[26], idin0_i<26>, );
    primitive = _dff dff_din0_25 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[25], idin0_i<25>, );
    primitive = _dff dff_din0_24 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[24], idin0_i<24>, );
    primitive = _dff dff_din0_23 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[23], idin0_i<23>, );
    primitive = _dff dff_din0_22 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[22], idin0_i<22>, );
    primitive = _dff dff_din0_21 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[21], idin0_i<21>, );
    primitive = _dff dff_din0_20 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[20], idin0_i<20>, );
    primitive = _dff dff_din0_19 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[19], idin0_i<19>, );
    primitive = _dff dff_din0_18 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[18], idin0_i<18>, );
    primitive = _dff dff_din0_17 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[17], idin0_i<17>, );
    primitive = _dff dff_din0_16 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[16], idin0_i<16>, );
    primitive = _dff dff_din0_15 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[15], idin0_i<15>, );
    primitive = _dff dff_din0_14 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[14], idin0_i<14>, );
    primitive = _dff dff_din0_13 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[13], idin0_i<13>, );
    primitive = _dff dff_din0_12 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[12], idin0_i<12>, );
    primitive = _dff dff_din0_11 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[11], idin0_i<11>, );
    primitive = _dff dff_din0_10 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[10], idin0_i<10>, );
    primitive = _dff dff_din0_9 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[9], idin0_i<9>, );
    primitive = _dff dff_din0_8 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[8], idin0_i<8>, );
    primitive = _dff dff_din0_7 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[7], idin0_i<7>, );
    primitive = _dff dff_din0_6 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[6], idin0_i<6>, );
    primitive = _dff dff_din0_5 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[5], idin0_i<5>, );
    primitive = _dff dff_din0_4 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[4], idin0_i<4>, );
    primitive = _dff dff_din0_3 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[3], idin0_i<3>, );
    primitive = _dff dff_din0_2 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[2], idin0_i<2>, );
    primitive = _dff dff_din0_1 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[1], idin0_i<1>, );
    primitive = _dff dff_din0_0 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[0], idin0_i<0>, );
  )

  intern (idin1_i) (
    array =  29 :0;
    primitive = _dff dff_din1_29 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[29], idin1_i<29>, );
    primitive = _dff dff_din1_28 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[28], idin1_i<28>, );
    primitive = _dff dff_din1_27 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[27], idin1_i<27>, );
    primitive = _dff dff_din1_26 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[26], idin1_i<26>, );
    primitive = _dff dff_din1_25 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[25], idin1_i<25>, );
    primitive = _dff dff_din1_24 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[24], idin1_i<24>, );
    primitive = _dff dff_din1_23 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[23], idin1_i<23>, );
    primitive = _dff dff_din1_22 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[22], idin1_i<22>, );
    primitive = _dff dff_din1_21 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[21], idin1_i<21>, );
    primitive = _dff dff_din1_20 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[20], idin1_i<20>, );
    primitive = _dff dff_din1_19 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[19], idin1_i<19>, );
    primitive = _dff dff_din1_18 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[18], idin1_i<18>, );
    primitive = _dff dff_din1_17 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[17], idin1_i<17>, );
    primitive = _dff dff_din1_16 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[16], idin1_i<16>, );
    primitive = _dff dff_din1_15 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[15], idin1_i<15>, );
    primitive = _dff dff_din1_14 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[14], idin1_i<14>, );
    primitive = _dff dff_din1_13 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[13], idin1_i<13>, );
    primitive = _dff dff_din1_12 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[12], idin1_i<12>, );
    primitive = _dff dff_din1_11 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[11], idin1_i<11>, );
    primitive = _dff dff_din1_10 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[10], idin1_i<10>, );
    primitive = _dff dff_din1_9 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[9], idin1_i<9>, );
    primitive = _dff dff_din1_8 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[8], idin1_i<8>, );
    primitive = _dff dff_din1_7 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[7], idin1_i<7>, );
    primitive = _dff dff_din1_6 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[6], idin1_i<6>, );
    primitive = _dff dff_din1_5 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[5], idin1_i<5>, );
    primitive = _dff dff_din1_4 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[4], idin1_i<4>, );
    primitive = _dff dff_din1_3 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[3], idin1_i<3>, );
    primitive = _dff dff_din1_2 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[2], idin1_i<2>, );
    primitive = _dff dff_din1_1 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[1], idin1_i<1>, );
    primitive = _dff dff_din1_0 (mlc_t0, mlc_t0, ckwr_rcb_1, wrdatap1[0], idin1_i<0>, );
  )



  //Instantiate RAM primitive(s)
  intern (odout0_i, odout1_i ) (
    array =  29 :0;
    instance = arf028b256e2r2w0cbbeheaa4acw_ram_2r2w_30x256_encode ram_arf028b256e2r2w0cbbeheaa4acw_0 (
    .re0(ckrd_rcb_0), .ra0(iard0_i_lat), .rd0(odout0_i),
    .re1(ckrd_rcb_1), .ra1(iard1_i_lat), .rd1(odout1_i),
    .we0(ckwr_rcb_0), .wa0(iawr0_i_lat), .wd0(idin0_i),
    .we1(ckwr_rcb_1), .wa1(iawr1_i_lat), .wd1(idin1_i));
  )
 
  output (pre_rddatap0) (
    array= 29 :0;
    primitive = _buf buf_dout_p0_29 (odout0_i<29>, pre_rddatap0[29]);
    primitive = _buf buf_dout_p0_28 (odout0_i<28>, pre_rddatap0[28]);
    primitive = _buf buf_dout_p0_27 (odout0_i<27>, pre_rddatap0[27]);
    primitive = _buf buf_dout_p0_26 (odout0_i<26>, pre_rddatap0[26]);
    primitive = _buf buf_dout_p0_25 (odout0_i<25>, pre_rddatap0[25]);
    primitive = _buf buf_dout_p0_24 (odout0_i<24>, pre_rddatap0[24]);
    primitive = _buf buf_dout_p0_23 (odout0_i<23>, pre_rddatap0[23]);
    primitive = _buf buf_dout_p0_22 (odout0_i<22>, pre_rddatap0[22]);
    primitive = _buf buf_dout_p0_21 (odout0_i<21>, pre_rddatap0[21]);
    primitive = _buf buf_dout_p0_20 (odout0_i<20>, pre_rddatap0[20]);
    primitive = _buf buf_dout_p0_19 (odout0_i<19>, pre_rddatap0[19]);
    primitive = _buf buf_dout_p0_18 (odout0_i<18>, pre_rddatap0[18]);
    primitive = _buf buf_dout_p0_17 (odout0_i<17>, pre_rddatap0[17]);
    primitive = _buf buf_dout_p0_16 (odout0_i<16>, pre_rddatap0[16]);
    primitive = _buf buf_dout_p0_15 (odout0_i<15>, pre_rddatap0[15]);
    primitive = _buf buf_dout_p0_14 (odout0_i<14>, pre_rddatap0[14]);
    primitive = _buf buf_dout_p0_13 (odout0_i<13>, pre_rddatap0[13]);
    primitive = _buf buf_dout_p0_12 (odout0_i<12>, pre_rddatap0[12]);
    primitive = _buf buf_dout_p0_11 (odout0_i<11>, pre_rddatap0[11]);
    primitive = _buf buf_dout_p0_10 (odout0_i<10>, pre_rddatap0[10]);
    primitive = _buf buf_dout_p0_9 (odout0_i<9>, pre_rddatap0[9]);
    primitive = _buf buf_dout_p0_8 (odout0_i<8>, pre_rddatap0[8]);
    primitive = _buf buf_dout_p0_7 (odout0_i<7>, pre_rddatap0[7]);
    primitive = _buf buf_dout_p0_6 (odout0_i<6>, pre_rddatap0[6]);
    primitive = _buf buf_dout_p0_5 (odout0_i<5>, pre_rddatap0[5]);
    primitive = _buf buf_dout_p0_4 (odout0_i<4>, pre_rddatap0[4]);
    primitive = _buf buf_dout_p0_3 (odout0_i<3>, pre_rddatap0[3]);
    primitive = _buf buf_dout_p0_2 (odout0_i<2>, pre_rddatap0[2]);
    primitive = _buf buf_dout_p0_1 (odout0_i<1>, pre_rddatap0[1]);
    primitive = _buf buf_dout_p0_0 (odout0_i<0>, pre_rddatap0[0]);
  )

  output (pre_rddatap1) (
    array= 29 :0;
    primitive = _buf buf_dout_p1_29 (odout1_i<29>, pre_rddatap1[29]);
    primitive = _buf buf_dout_p1_28 (odout1_i<28>, pre_rddatap1[28]);
    primitive = _buf buf_dout_p1_27 (odout1_i<27>, pre_rddatap1[27]);
    primitive = _buf buf_dout_p1_26 (odout1_i<26>, pre_rddatap1[26]);
    primitive = _buf buf_dout_p1_25 (odout1_i<25>, pre_rddatap1[25]);
    primitive = _buf buf_dout_p1_24 (odout1_i<24>, pre_rddatap1[24]);
    primitive = _buf buf_dout_p1_23 (odout1_i<23>, pre_rddatap1[23]);
    primitive = _buf buf_dout_p1_22 (odout1_i<22>, pre_rddatap1[22]);
    primitive = _buf buf_dout_p1_21 (odout1_i<21>, pre_rddatap1[21]);
    primitive = _buf buf_dout_p1_20 (odout1_i<20>, pre_rddatap1[20]);
    primitive = _buf buf_dout_p1_19 (odout1_i<19>, pre_rddatap1[19]);
    primitive = _buf buf_dout_p1_18 (odout1_i<18>, pre_rddatap1[18]);
    primitive = _buf buf_dout_p1_17 (odout1_i<17>, pre_rddatap1[17]);
    primitive = _buf buf_dout_p1_16 (odout1_i<16>, pre_rddatap1[16]);
    primitive = _buf buf_dout_p1_15 (odout1_i<15>, pre_rddatap1[15]);
    primitive = _buf buf_dout_p1_14 (odout1_i<14>, pre_rddatap1[14]);
    primitive = _buf buf_dout_p1_13 (odout1_i<13>, pre_rddatap1[13]);
    primitive = _buf buf_dout_p1_12 (odout1_i<12>, pre_rddatap1[12]);
    primitive = _buf buf_dout_p1_11 (odout1_i<11>, pre_rddatap1[11]);
    primitive = _buf buf_dout_p1_10 (odout1_i<10>, pre_rddatap1[10]);
    primitive = _buf buf_dout_p1_9 (odout1_i<9>, pre_rddatap1[9]);
    primitive = _buf buf_dout_p1_8 (odout1_i<8>, pre_rddatap1[8]);
    primitive = _buf buf_dout_p1_7 (odout1_i<7>, pre_rddatap1[7]);
    primitive = _buf buf_dout_p1_6 (odout1_i<6>, pre_rddatap1[6]);
    primitive = _buf buf_dout_p1_5 (odout1_i<5>, pre_rddatap1[5]);
    primitive = _buf buf_dout_p1_4 (odout1_i<4>, pre_rddatap1[4]);
    primitive = _buf buf_dout_p1_3 (odout1_i<3>, pre_rddatap1[3]);
    primitive = _buf buf_dout_p1_2 (odout1_i<2>, pre_rddatap1[2]);
    primitive = _buf buf_dout_p1_1 (odout1_i<1>, pre_rddatap1[1]);
    primitive = _buf buf_dout_p1_0 (odout1_i<0>, pre_rddatap1[0]);
  )
 
)

model arf028b256e2r2w0cbbeheaa4acw_ram_2r2w_30x256_encode ( 
  re0, ra0, rd0, re1, ra1, rd1, 
  we0, wa0, wd0,we1, wa1, wd1) (
    input  (we0, we1) ()
    input  (re0, re1) ()
    input  (wa0, wa1) (array =  7 :0; )
    input  (ra0, ra1) (array =  7 :0; )
    input  (wd0, wd1) (array =  29 :0; )
    output (rd0, rd1) (
            data_size = 30;
            address_size = 8;
            array =  29 :0;
            min_address = 0;
            max_address = 255 ;
            read_off = H; // [0|1|X|H];
            //edge_trigger = RW;
            address_type = encode;
            write_write_conflict = same_address_x_port;
            // read_read_conflict = [R|X]; // Multi read port only
            read_read_conflict = X; 
            read_write_conflict = XX; // [NW|XW|OW|XX|OX];
            // overwrite = [true|false]; // Multi write port only.
            primitive = _cram (,,
                    _write { , , } (we0, , wa0, wd0),
                    _write { , , } (we1, , wa1, wd1),
                    _read { , , ,h} ( , re0, , ra0, rd0),
                    _read { , , ,h} ( , re1, , ra1, rd1)
            );
     )
 )



