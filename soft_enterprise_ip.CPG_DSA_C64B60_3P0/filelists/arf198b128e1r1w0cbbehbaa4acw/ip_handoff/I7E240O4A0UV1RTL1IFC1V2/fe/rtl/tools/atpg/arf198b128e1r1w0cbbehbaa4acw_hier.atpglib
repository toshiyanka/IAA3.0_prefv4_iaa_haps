
//  INTEL CONFIDENTIAL
//
//  Copyright 2023 Intel Corporation All Rights Reserved.
//
//  The source code contained or described herein and all documents related
//  to the source code ("Material") are owned by Intel Corporation or its
//  suppliers or licensors. Title to the Material remains with Intel
//  Corporation or its suppliers and licensors. The Material contains trade
//  secrets and proprietary and confidential information of Intel or its
//  suppliers and licensors. The Material is protected by worldwide copyright
//  and trade secret laws and treaty provisions. No part of the Material may
//  be used, copied, reproduced, modified, published, uploaded, posted,
//  transmitted, distributed, or disclosed in any way without Intel's prior
//  express written permission.
//
//  No license under any patent, copyright, trade secret or other intellectual
//  property right is granted to or conferred upon you by disclosure or
//  delivery of the Materials, either expressly, by implication, inducement,
//  estoppel or otherwise. Any license under such intellectual property rights
//  must be express and approved by Intel in writing.
//

//------------------------------------------------------------------------------------------------------------------------
// Intel Proprietary        Intel Confidential        Intel Proprietary        Intel Confidential        Intel Proprietary
//------------------------------------------------------------------------------------------------------------------------
// Generated by                  : cudoming
// Generated on                  : April 18, 2023
//------------------------------------------------------------------------------------------------------------------------
// General Information:
// ------------------------------
// 1r1w0c standard array for SDG server designs.
// Behavioral modeling of a parameterized register file core with no DFX features.
// RTL is written in SystemVerilog.
//------------------------------------------------------------------------------------------------------------------------
// Detail Information:
// ------------------------------
// Addresses        : RD/WR addresses are encoded.
//                    Input addresses will be valid at the array in 1 phases after being driven.
//                    Address latency of 1 is corresponding to a B-latch.
// Enables          : RD/WR enables are used to condition the clock and wordlines.
//                  : Input enables will be valid at the array in 1 phases after being driven.
//                    Enable latency of 1 is corresponding to a B-latch.
// Write Data       : Write data will be valid at the array 2 phases after being driven.
//                    Write data latency of 2 is corresponding to a rising-edge flop. 
// Read Data        : Read data will be valid at the output of a SDL 1 phase after being read.
//                    Read data latency of 1 is corresponding to a B-latch.
// Address Offset   : 
//------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
// Other Information:
// ------------------------------
// SDG RFIP RTL Release Path:
// /p/hdk/rtl/ip_releases/shdk74/array_macro_module
//
//------------------------------------------------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////
// FileName : arf198b128e1r1w0cbbehbaa4acw_hier.atpglib
// RAM Library Model
////////////////////////////////////////////////////////////////

model arf198b128e1r1w0cbbehbaa4acw_hier (
  ckrdp0, rdenp0, rdaddrp0, sdl_initp0, pre_rddatap0, 
  sdl_initp0_i_out, ckrd_rcb_outp0, 
  ckwrp0, wrenp0, wraddrp0, wrdatap0,  
  rdaddrp0_fd, rdaddrp0_rd, 
  wraddrp0_fd, wraddrp0_rd, wrdatap0_fd, wrdatap0_rd) (

  //Input and output pins declarations
  input (ckrdp0) ()
  input (rdenp0) ()
  input (rdaddrp0) (array =6:0; )
  input (sdl_initp0) ()

  input (ckwrp0) ()
  input (wrenp0) () 
  input (wraddrp0) (array =6:0; )
  input (wrdatap0) (array =199:0; )
 
  input (rdaddrp0_fd) (unused; no_fault = sa0 sa1;)
  input (rdaddrp0_rd) (unused; no_fault = sa0 sa1;)

  input (wraddrp0_fd) (unused; no_fault = sa0 sa1;)
  input (wraddrp0_rd) (unused; no_fault = sa0 sa1;)
  input (wrdatap0_fd) (unused; no_fault = sa0 sa1;)
  input (wrdatap0_rd) (unused; no_fault = sa0 sa1;)


  intern (mlc_t0) (primitive = _tie0 mlc_tie0_1 ( mlc_t0 );)
  intern (wrclk_int_0)     (primitive = _buf wrclk_int_0_i     (ckwrp0, wrclk_int_0);)
  intern (wrclk_int_not_0) (primitive = _inv wrclk_int_not_0_i (wrclk_int_0, wrclk_int_not_0);)

  intern (rdclk_int_0)     (primitive = _buf rdclk_int_0_i     (ckrdp0, rdclk_int_0);)
  intern (rdclk_int_not_0) (primitive = _inv rdclk_int_not_0_i (rdclk_int_0, rdclk_int_not_0);)


  //Capture Read and Write Enables
  intern (re0_i) (primitive = _dlat rd_en0 (mlc_t0, mlc_t0, rdclk_int_not_0, rdenp0, re0_i, );)
  intern (ckrd_rcb_0) (primitive = _and and_ckrd_rcb_0 ( re0_i, rdclk_int_0 , ckrd_rcb_0);)
  intern (ckrd_rcb_b_0) (primitive = _inv inv_ckrd_rcb_b_0 (ckrd_rcb_0, ckrd_rcb_b_0);)

  intern (we0_i) (primitive = _dlat lat_we0 (mlc_t0, mlc_t0, wrclk_int_not_0, wrenp0, we0_i, );)
  intern (ckwr_rcb_0) (primitive = _and and_ckwr_rcb_0 ( we0_i, wrclk_int_0, ckwr_rcb_0);)
  intern (ckwr_rcb_b_0) (primitive = _inv inv_ckwr_rcb_b_0 (ckwr_rcb_0, ckwr_rcb_b_0);)


  //sdl init ff
  intern (sdlinit_lat_0) (primitive= _dff sdlinit_lat_0_dff (mlc_t0, mlc_t0, rdclk_int_0, sdl_initp0, sdlinit_lat_0, );)

  //sdl init out inv and rdclk rcb
  output (sdl_initp0_i_out)   (primitive = _inv sdlinit_i_0 (sdlinit_lat_0, sdl_initp0_i_out);) 
  output (ckrd_rcb_outp0) (primitive = _buf rdclk_rcb_buf_out0 (ckrd_rcb_0, ckrd_rcb_outp0);)

 


  //Capture read and write address
  intern (iard0_i_lat) (
     array =  6  : 0;
     primitive = _dlat dlat_ard0_6 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[6], iard0_i_lat<6>, );
     primitive = _dlat dlat_ard0_5 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[5], iard0_i_lat<5>, );
     primitive = _dlat dlat_ard0_4 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[4], iard0_i_lat<4>, );
     primitive = _dlat dlat_ard0_3 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[3], iard0_i_lat<3>, );
     primitive = _dlat dlat_ard0_2 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[2], iard0_i_lat<2>, );
     primitive = _dlat dlat_ard0_1 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[1], iard0_i_lat<1>, );
     primitive = _dlat dlat_ard0_0 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[0], iard0_i_lat<0>, );
  )

  intern (iawr0_i_lat) (
     array =  6  : 0;
     primitive = _dlat dlat_awr0_6 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[6], iawr0_i_lat<6>, );
     primitive = _dlat dlat_awr0_5 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[5], iawr0_i_lat<5>, );
     primitive = _dlat dlat_awr0_4 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[4], iawr0_i_lat<4>, );
     primitive = _dlat dlat_awr0_3 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[3], iawr0_i_lat<3>, );
     primitive = _dlat dlat_awr0_2 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[2], iawr0_i_lat<2>, );
     primitive = _dlat dlat_awr0_1 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[1], iawr0_i_lat<1>, );
     primitive = _dlat dlat_awr0_0 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[0], iawr0_i_lat<0>, );
  )
 

  //input data 

  intern (idin0_i) (
    array =  199 :0;
    primitive = _dff dff_din0_199 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[199], idin0_i<199>, );
    primitive = _dff dff_din0_198 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[198], idin0_i<198>, );
    primitive = _dff dff_din0_197 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[197], idin0_i<197>, );
    primitive = _dff dff_din0_196 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[196], idin0_i<196>, );
    primitive = _dff dff_din0_195 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[195], idin0_i<195>, );
    primitive = _dff dff_din0_194 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[194], idin0_i<194>, );
    primitive = _dff dff_din0_193 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[193], idin0_i<193>, );
    primitive = _dff dff_din0_192 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[192], idin0_i<192>, );
    primitive = _dff dff_din0_191 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[191], idin0_i<191>, );
    primitive = _dff dff_din0_190 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[190], idin0_i<190>, );
    primitive = _dff dff_din0_189 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[189], idin0_i<189>, );
    primitive = _dff dff_din0_188 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[188], idin0_i<188>, );
    primitive = _dff dff_din0_187 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[187], idin0_i<187>, );
    primitive = _dff dff_din0_186 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[186], idin0_i<186>, );
    primitive = _dff dff_din0_185 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[185], idin0_i<185>, );
    primitive = _dff dff_din0_184 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[184], idin0_i<184>, );
    primitive = _dff dff_din0_183 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[183], idin0_i<183>, );
    primitive = _dff dff_din0_182 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[182], idin0_i<182>, );
    primitive = _dff dff_din0_181 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[181], idin0_i<181>, );
    primitive = _dff dff_din0_180 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[180], idin0_i<180>, );
    primitive = _dff dff_din0_179 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[179], idin0_i<179>, );
    primitive = _dff dff_din0_178 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[178], idin0_i<178>, );
    primitive = _dff dff_din0_177 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[177], idin0_i<177>, );
    primitive = _dff dff_din0_176 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[176], idin0_i<176>, );
    primitive = _dff dff_din0_175 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[175], idin0_i<175>, );
    primitive = _dff dff_din0_174 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[174], idin0_i<174>, );
    primitive = _dff dff_din0_173 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[173], idin0_i<173>, );
    primitive = _dff dff_din0_172 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[172], idin0_i<172>, );
    primitive = _dff dff_din0_171 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[171], idin0_i<171>, );
    primitive = _dff dff_din0_170 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[170], idin0_i<170>, );
    primitive = _dff dff_din0_169 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[169], idin0_i<169>, );
    primitive = _dff dff_din0_168 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[168], idin0_i<168>, );
    primitive = _dff dff_din0_167 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[167], idin0_i<167>, );
    primitive = _dff dff_din0_166 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[166], idin0_i<166>, );
    primitive = _dff dff_din0_165 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[165], idin0_i<165>, );
    primitive = _dff dff_din0_164 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[164], idin0_i<164>, );
    primitive = _dff dff_din0_163 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[163], idin0_i<163>, );
    primitive = _dff dff_din0_162 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[162], idin0_i<162>, );
    primitive = _dff dff_din0_161 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[161], idin0_i<161>, );
    primitive = _dff dff_din0_160 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[160], idin0_i<160>, );
    primitive = _dff dff_din0_159 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[159], idin0_i<159>, );
    primitive = _dff dff_din0_158 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[158], idin0_i<158>, );
    primitive = _dff dff_din0_157 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[157], idin0_i<157>, );
    primitive = _dff dff_din0_156 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[156], idin0_i<156>, );
    primitive = _dff dff_din0_155 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[155], idin0_i<155>, );
    primitive = _dff dff_din0_154 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[154], idin0_i<154>, );
    primitive = _dff dff_din0_153 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[153], idin0_i<153>, );
    primitive = _dff dff_din0_152 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[152], idin0_i<152>, );
    primitive = _dff dff_din0_151 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[151], idin0_i<151>, );
    primitive = _dff dff_din0_150 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[150], idin0_i<150>, );
    primitive = _dff dff_din0_149 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[149], idin0_i<149>, );
    primitive = _dff dff_din0_148 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[148], idin0_i<148>, );
    primitive = _dff dff_din0_147 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[147], idin0_i<147>, );
    primitive = _dff dff_din0_146 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[146], idin0_i<146>, );
    primitive = _dff dff_din0_145 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[145], idin0_i<145>, );
    primitive = _dff dff_din0_144 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[144], idin0_i<144>, );
    primitive = _dff dff_din0_143 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[143], idin0_i<143>, );
    primitive = _dff dff_din0_142 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[142], idin0_i<142>, );
    primitive = _dff dff_din0_141 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[141], idin0_i<141>, );
    primitive = _dff dff_din0_140 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[140], idin0_i<140>, );
    primitive = _dff dff_din0_139 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[139], idin0_i<139>, );
    primitive = _dff dff_din0_138 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[138], idin0_i<138>, );
    primitive = _dff dff_din0_137 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[137], idin0_i<137>, );
    primitive = _dff dff_din0_136 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[136], idin0_i<136>, );
    primitive = _dff dff_din0_135 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[135], idin0_i<135>, );
    primitive = _dff dff_din0_134 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[134], idin0_i<134>, );
    primitive = _dff dff_din0_133 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[133], idin0_i<133>, );
    primitive = _dff dff_din0_132 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[132], idin0_i<132>, );
    primitive = _dff dff_din0_131 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[131], idin0_i<131>, );
    primitive = _dff dff_din0_130 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[130], idin0_i<130>, );
    primitive = _dff dff_din0_129 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[129], idin0_i<129>, );
    primitive = _dff dff_din0_128 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[128], idin0_i<128>, );
    primitive = _dff dff_din0_127 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[127], idin0_i<127>, );
    primitive = _dff dff_din0_126 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[126], idin0_i<126>, );
    primitive = _dff dff_din0_125 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[125], idin0_i<125>, );
    primitive = _dff dff_din0_124 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[124], idin0_i<124>, );
    primitive = _dff dff_din0_123 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[123], idin0_i<123>, );
    primitive = _dff dff_din0_122 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[122], idin0_i<122>, );
    primitive = _dff dff_din0_121 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[121], idin0_i<121>, );
    primitive = _dff dff_din0_120 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[120], idin0_i<120>, );
    primitive = _dff dff_din0_119 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[119], idin0_i<119>, );
    primitive = _dff dff_din0_118 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[118], idin0_i<118>, );
    primitive = _dff dff_din0_117 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[117], idin0_i<117>, );
    primitive = _dff dff_din0_116 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[116], idin0_i<116>, );
    primitive = _dff dff_din0_115 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[115], idin0_i<115>, );
    primitive = _dff dff_din0_114 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[114], idin0_i<114>, );
    primitive = _dff dff_din0_113 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[113], idin0_i<113>, );
    primitive = _dff dff_din0_112 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[112], idin0_i<112>, );
    primitive = _dff dff_din0_111 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[111], idin0_i<111>, );
    primitive = _dff dff_din0_110 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[110], idin0_i<110>, );
    primitive = _dff dff_din0_109 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[109], idin0_i<109>, );
    primitive = _dff dff_din0_108 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[108], idin0_i<108>, );
    primitive = _dff dff_din0_107 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[107], idin0_i<107>, );
    primitive = _dff dff_din0_106 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[106], idin0_i<106>, );
    primitive = _dff dff_din0_105 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[105], idin0_i<105>, );
    primitive = _dff dff_din0_104 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[104], idin0_i<104>, );
    primitive = _dff dff_din0_103 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[103], idin0_i<103>, );
    primitive = _dff dff_din0_102 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[102], idin0_i<102>, );
    primitive = _dff dff_din0_101 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[101], idin0_i<101>, );
    primitive = _dff dff_din0_100 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[100], idin0_i<100>, );
    primitive = _dff dff_din0_99 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[99], idin0_i<99>, );
    primitive = _dff dff_din0_98 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[98], idin0_i<98>, );
    primitive = _dff dff_din0_97 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[97], idin0_i<97>, );
    primitive = _dff dff_din0_96 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[96], idin0_i<96>, );
    primitive = _dff dff_din0_95 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[95], idin0_i<95>, );
    primitive = _dff dff_din0_94 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[94], idin0_i<94>, );
    primitive = _dff dff_din0_93 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[93], idin0_i<93>, );
    primitive = _dff dff_din0_92 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[92], idin0_i<92>, );
    primitive = _dff dff_din0_91 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[91], idin0_i<91>, );
    primitive = _dff dff_din0_90 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[90], idin0_i<90>, );
    primitive = _dff dff_din0_89 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[89], idin0_i<89>, );
    primitive = _dff dff_din0_88 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[88], idin0_i<88>, );
    primitive = _dff dff_din0_87 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[87], idin0_i<87>, );
    primitive = _dff dff_din0_86 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[86], idin0_i<86>, );
    primitive = _dff dff_din0_85 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[85], idin0_i<85>, );
    primitive = _dff dff_din0_84 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[84], idin0_i<84>, );
    primitive = _dff dff_din0_83 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[83], idin0_i<83>, );
    primitive = _dff dff_din0_82 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[82], idin0_i<82>, );
    primitive = _dff dff_din0_81 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[81], idin0_i<81>, );
    primitive = _dff dff_din0_80 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[80], idin0_i<80>, );
    primitive = _dff dff_din0_79 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[79], idin0_i<79>, );
    primitive = _dff dff_din0_78 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[78], idin0_i<78>, );
    primitive = _dff dff_din0_77 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[77], idin0_i<77>, );
    primitive = _dff dff_din0_76 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[76], idin0_i<76>, );
    primitive = _dff dff_din0_75 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[75], idin0_i<75>, );
    primitive = _dff dff_din0_74 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[74], idin0_i<74>, );
    primitive = _dff dff_din0_73 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[73], idin0_i<73>, );
    primitive = _dff dff_din0_72 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[72], idin0_i<72>, );
    primitive = _dff dff_din0_71 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[71], idin0_i<71>, );
    primitive = _dff dff_din0_70 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[70], idin0_i<70>, );
    primitive = _dff dff_din0_69 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[69], idin0_i<69>, );
    primitive = _dff dff_din0_68 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[68], idin0_i<68>, );
    primitive = _dff dff_din0_67 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[67], idin0_i<67>, );
    primitive = _dff dff_din0_66 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[66], idin0_i<66>, );
    primitive = _dff dff_din0_65 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[65], idin0_i<65>, );
    primitive = _dff dff_din0_64 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[64], idin0_i<64>, );
    primitive = _dff dff_din0_63 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[63], idin0_i<63>, );
    primitive = _dff dff_din0_62 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[62], idin0_i<62>, );
    primitive = _dff dff_din0_61 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[61], idin0_i<61>, );
    primitive = _dff dff_din0_60 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[60], idin0_i<60>, );
    primitive = _dff dff_din0_59 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[59], idin0_i<59>, );
    primitive = _dff dff_din0_58 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[58], idin0_i<58>, );
    primitive = _dff dff_din0_57 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[57], idin0_i<57>, );
    primitive = _dff dff_din0_56 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[56], idin0_i<56>, );
    primitive = _dff dff_din0_55 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[55], idin0_i<55>, );
    primitive = _dff dff_din0_54 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[54], idin0_i<54>, );
    primitive = _dff dff_din0_53 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[53], idin0_i<53>, );
    primitive = _dff dff_din0_52 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[52], idin0_i<52>, );
    primitive = _dff dff_din0_51 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[51], idin0_i<51>, );
    primitive = _dff dff_din0_50 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[50], idin0_i<50>, );
    primitive = _dff dff_din0_49 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[49], idin0_i<49>, );
    primitive = _dff dff_din0_48 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[48], idin0_i<48>, );
    primitive = _dff dff_din0_47 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[47], idin0_i<47>, );
    primitive = _dff dff_din0_46 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[46], idin0_i<46>, );
    primitive = _dff dff_din0_45 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[45], idin0_i<45>, );
    primitive = _dff dff_din0_44 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[44], idin0_i<44>, );
    primitive = _dff dff_din0_43 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[43], idin0_i<43>, );
    primitive = _dff dff_din0_42 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[42], idin0_i<42>, );
    primitive = _dff dff_din0_41 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[41], idin0_i<41>, );
    primitive = _dff dff_din0_40 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[40], idin0_i<40>, );
    primitive = _dff dff_din0_39 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[39], idin0_i<39>, );
    primitive = _dff dff_din0_38 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[38], idin0_i<38>, );
    primitive = _dff dff_din0_37 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[37], idin0_i<37>, );
    primitive = _dff dff_din0_36 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[36], idin0_i<36>, );
    primitive = _dff dff_din0_35 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[35], idin0_i<35>, );
    primitive = _dff dff_din0_34 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[34], idin0_i<34>, );
    primitive = _dff dff_din0_33 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[33], idin0_i<33>, );
    primitive = _dff dff_din0_32 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[32], idin0_i<32>, );
    primitive = _dff dff_din0_31 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[31], idin0_i<31>, );
    primitive = _dff dff_din0_30 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[30], idin0_i<30>, );
    primitive = _dff dff_din0_29 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[29], idin0_i<29>, );
    primitive = _dff dff_din0_28 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[28], idin0_i<28>, );
    primitive = _dff dff_din0_27 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[27], idin0_i<27>, );
    primitive = _dff dff_din0_26 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[26], idin0_i<26>, );
    primitive = _dff dff_din0_25 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[25], idin0_i<25>, );
    primitive = _dff dff_din0_24 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[24], idin0_i<24>, );
    primitive = _dff dff_din0_23 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[23], idin0_i<23>, );
    primitive = _dff dff_din0_22 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[22], idin0_i<22>, );
    primitive = _dff dff_din0_21 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[21], idin0_i<21>, );
    primitive = _dff dff_din0_20 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[20], idin0_i<20>, );
    primitive = _dff dff_din0_19 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[19], idin0_i<19>, );
    primitive = _dff dff_din0_18 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[18], idin0_i<18>, );
    primitive = _dff dff_din0_17 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[17], idin0_i<17>, );
    primitive = _dff dff_din0_16 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[16], idin0_i<16>, );
    primitive = _dff dff_din0_15 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[15], idin0_i<15>, );
    primitive = _dff dff_din0_14 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[14], idin0_i<14>, );
    primitive = _dff dff_din0_13 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[13], idin0_i<13>, );
    primitive = _dff dff_din0_12 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[12], idin0_i<12>, );
    primitive = _dff dff_din0_11 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[11], idin0_i<11>, );
    primitive = _dff dff_din0_10 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[10], idin0_i<10>, );
    primitive = _dff dff_din0_9 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[9], idin0_i<9>, );
    primitive = _dff dff_din0_8 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[8], idin0_i<8>, );
    primitive = _dff dff_din0_7 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[7], idin0_i<7>, );
    primitive = _dff dff_din0_6 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[6], idin0_i<6>, );
    primitive = _dff dff_din0_5 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[5], idin0_i<5>, );
    primitive = _dff dff_din0_4 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[4], idin0_i<4>, );
    primitive = _dff dff_din0_3 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[3], idin0_i<3>, );
    primitive = _dff dff_din0_2 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[2], idin0_i<2>, );
    primitive = _dff dff_din0_1 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[1], idin0_i<1>, );
    primitive = _dff dff_din0_0 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[0], idin0_i<0>, );
  )



  //Instantiate RAM primitive(s)
  intern (odout0_i ) (
    array =  199 :0;
    instance = arf198b128e1r1w0cbbehbaa4acw_ram_1r1w_200x128_encode ram_arf198b128e1r1w0cbbehbaa4acw_0 (
    .re0(ckrd_rcb_0), .ra0(iard0_i_lat), .rd0(odout0_i),
    .we0(ckwr_rcb_0), .wa0(iawr0_i_lat), .wd0(idin0_i));
  )
 
  output (pre_rddatap0) (
    array= 199 :0;
    primitive = _buf buf_dout_p0_199 (odout0_i<199>, pre_rddatap0[199]);
    primitive = _buf buf_dout_p0_198 (odout0_i<198>, pre_rddatap0[198]);
    primitive = _buf buf_dout_p0_197 (odout0_i<197>, pre_rddatap0[197]);
    primitive = _buf buf_dout_p0_196 (odout0_i<196>, pre_rddatap0[196]);
    primitive = _buf buf_dout_p0_195 (odout0_i<195>, pre_rddatap0[195]);
    primitive = _buf buf_dout_p0_194 (odout0_i<194>, pre_rddatap0[194]);
    primitive = _buf buf_dout_p0_193 (odout0_i<193>, pre_rddatap0[193]);
    primitive = _buf buf_dout_p0_192 (odout0_i<192>, pre_rddatap0[192]);
    primitive = _buf buf_dout_p0_191 (odout0_i<191>, pre_rddatap0[191]);
    primitive = _buf buf_dout_p0_190 (odout0_i<190>, pre_rddatap0[190]);
    primitive = _buf buf_dout_p0_189 (odout0_i<189>, pre_rddatap0[189]);
    primitive = _buf buf_dout_p0_188 (odout0_i<188>, pre_rddatap0[188]);
    primitive = _buf buf_dout_p0_187 (odout0_i<187>, pre_rddatap0[187]);
    primitive = _buf buf_dout_p0_186 (odout0_i<186>, pre_rddatap0[186]);
    primitive = _buf buf_dout_p0_185 (odout0_i<185>, pre_rddatap0[185]);
    primitive = _buf buf_dout_p0_184 (odout0_i<184>, pre_rddatap0[184]);
    primitive = _buf buf_dout_p0_183 (odout0_i<183>, pre_rddatap0[183]);
    primitive = _buf buf_dout_p0_182 (odout0_i<182>, pre_rddatap0[182]);
    primitive = _buf buf_dout_p0_181 (odout0_i<181>, pre_rddatap0[181]);
    primitive = _buf buf_dout_p0_180 (odout0_i<180>, pre_rddatap0[180]);
    primitive = _buf buf_dout_p0_179 (odout0_i<179>, pre_rddatap0[179]);
    primitive = _buf buf_dout_p0_178 (odout0_i<178>, pre_rddatap0[178]);
    primitive = _buf buf_dout_p0_177 (odout0_i<177>, pre_rddatap0[177]);
    primitive = _buf buf_dout_p0_176 (odout0_i<176>, pre_rddatap0[176]);
    primitive = _buf buf_dout_p0_175 (odout0_i<175>, pre_rddatap0[175]);
    primitive = _buf buf_dout_p0_174 (odout0_i<174>, pre_rddatap0[174]);
    primitive = _buf buf_dout_p0_173 (odout0_i<173>, pre_rddatap0[173]);
    primitive = _buf buf_dout_p0_172 (odout0_i<172>, pre_rddatap0[172]);
    primitive = _buf buf_dout_p0_171 (odout0_i<171>, pre_rddatap0[171]);
    primitive = _buf buf_dout_p0_170 (odout0_i<170>, pre_rddatap0[170]);
    primitive = _buf buf_dout_p0_169 (odout0_i<169>, pre_rddatap0[169]);
    primitive = _buf buf_dout_p0_168 (odout0_i<168>, pre_rddatap0[168]);
    primitive = _buf buf_dout_p0_167 (odout0_i<167>, pre_rddatap0[167]);
    primitive = _buf buf_dout_p0_166 (odout0_i<166>, pre_rddatap0[166]);
    primitive = _buf buf_dout_p0_165 (odout0_i<165>, pre_rddatap0[165]);
    primitive = _buf buf_dout_p0_164 (odout0_i<164>, pre_rddatap0[164]);
    primitive = _buf buf_dout_p0_163 (odout0_i<163>, pre_rddatap0[163]);
    primitive = _buf buf_dout_p0_162 (odout0_i<162>, pre_rddatap0[162]);
    primitive = _buf buf_dout_p0_161 (odout0_i<161>, pre_rddatap0[161]);
    primitive = _buf buf_dout_p0_160 (odout0_i<160>, pre_rddatap0[160]);
    primitive = _buf buf_dout_p0_159 (odout0_i<159>, pre_rddatap0[159]);
    primitive = _buf buf_dout_p0_158 (odout0_i<158>, pre_rddatap0[158]);
    primitive = _buf buf_dout_p0_157 (odout0_i<157>, pre_rddatap0[157]);
    primitive = _buf buf_dout_p0_156 (odout0_i<156>, pre_rddatap0[156]);
    primitive = _buf buf_dout_p0_155 (odout0_i<155>, pre_rddatap0[155]);
    primitive = _buf buf_dout_p0_154 (odout0_i<154>, pre_rddatap0[154]);
    primitive = _buf buf_dout_p0_153 (odout0_i<153>, pre_rddatap0[153]);
    primitive = _buf buf_dout_p0_152 (odout0_i<152>, pre_rddatap0[152]);
    primitive = _buf buf_dout_p0_151 (odout0_i<151>, pre_rddatap0[151]);
    primitive = _buf buf_dout_p0_150 (odout0_i<150>, pre_rddatap0[150]);
    primitive = _buf buf_dout_p0_149 (odout0_i<149>, pre_rddatap0[149]);
    primitive = _buf buf_dout_p0_148 (odout0_i<148>, pre_rddatap0[148]);
    primitive = _buf buf_dout_p0_147 (odout0_i<147>, pre_rddatap0[147]);
    primitive = _buf buf_dout_p0_146 (odout0_i<146>, pre_rddatap0[146]);
    primitive = _buf buf_dout_p0_145 (odout0_i<145>, pre_rddatap0[145]);
    primitive = _buf buf_dout_p0_144 (odout0_i<144>, pre_rddatap0[144]);
    primitive = _buf buf_dout_p0_143 (odout0_i<143>, pre_rddatap0[143]);
    primitive = _buf buf_dout_p0_142 (odout0_i<142>, pre_rddatap0[142]);
    primitive = _buf buf_dout_p0_141 (odout0_i<141>, pre_rddatap0[141]);
    primitive = _buf buf_dout_p0_140 (odout0_i<140>, pre_rddatap0[140]);
    primitive = _buf buf_dout_p0_139 (odout0_i<139>, pre_rddatap0[139]);
    primitive = _buf buf_dout_p0_138 (odout0_i<138>, pre_rddatap0[138]);
    primitive = _buf buf_dout_p0_137 (odout0_i<137>, pre_rddatap0[137]);
    primitive = _buf buf_dout_p0_136 (odout0_i<136>, pre_rddatap0[136]);
    primitive = _buf buf_dout_p0_135 (odout0_i<135>, pre_rddatap0[135]);
    primitive = _buf buf_dout_p0_134 (odout0_i<134>, pre_rddatap0[134]);
    primitive = _buf buf_dout_p0_133 (odout0_i<133>, pre_rddatap0[133]);
    primitive = _buf buf_dout_p0_132 (odout0_i<132>, pre_rddatap0[132]);
    primitive = _buf buf_dout_p0_131 (odout0_i<131>, pre_rddatap0[131]);
    primitive = _buf buf_dout_p0_130 (odout0_i<130>, pre_rddatap0[130]);
    primitive = _buf buf_dout_p0_129 (odout0_i<129>, pre_rddatap0[129]);
    primitive = _buf buf_dout_p0_128 (odout0_i<128>, pre_rddatap0[128]);
    primitive = _buf buf_dout_p0_127 (odout0_i<127>, pre_rddatap0[127]);
    primitive = _buf buf_dout_p0_126 (odout0_i<126>, pre_rddatap0[126]);
    primitive = _buf buf_dout_p0_125 (odout0_i<125>, pre_rddatap0[125]);
    primitive = _buf buf_dout_p0_124 (odout0_i<124>, pre_rddatap0[124]);
    primitive = _buf buf_dout_p0_123 (odout0_i<123>, pre_rddatap0[123]);
    primitive = _buf buf_dout_p0_122 (odout0_i<122>, pre_rddatap0[122]);
    primitive = _buf buf_dout_p0_121 (odout0_i<121>, pre_rddatap0[121]);
    primitive = _buf buf_dout_p0_120 (odout0_i<120>, pre_rddatap0[120]);
    primitive = _buf buf_dout_p0_119 (odout0_i<119>, pre_rddatap0[119]);
    primitive = _buf buf_dout_p0_118 (odout0_i<118>, pre_rddatap0[118]);
    primitive = _buf buf_dout_p0_117 (odout0_i<117>, pre_rddatap0[117]);
    primitive = _buf buf_dout_p0_116 (odout0_i<116>, pre_rddatap0[116]);
    primitive = _buf buf_dout_p0_115 (odout0_i<115>, pre_rddatap0[115]);
    primitive = _buf buf_dout_p0_114 (odout0_i<114>, pre_rddatap0[114]);
    primitive = _buf buf_dout_p0_113 (odout0_i<113>, pre_rddatap0[113]);
    primitive = _buf buf_dout_p0_112 (odout0_i<112>, pre_rddatap0[112]);
    primitive = _buf buf_dout_p0_111 (odout0_i<111>, pre_rddatap0[111]);
    primitive = _buf buf_dout_p0_110 (odout0_i<110>, pre_rddatap0[110]);
    primitive = _buf buf_dout_p0_109 (odout0_i<109>, pre_rddatap0[109]);
    primitive = _buf buf_dout_p0_108 (odout0_i<108>, pre_rddatap0[108]);
    primitive = _buf buf_dout_p0_107 (odout0_i<107>, pre_rddatap0[107]);
    primitive = _buf buf_dout_p0_106 (odout0_i<106>, pre_rddatap0[106]);
    primitive = _buf buf_dout_p0_105 (odout0_i<105>, pre_rddatap0[105]);
    primitive = _buf buf_dout_p0_104 (odout0_i<104>, pre_rddatap0[104]);
    primitive = _buf buf_dout_p0_103 (odout0_i<103>, pre_rddatap0[103]);
    primitive = _buf buf_dout_p0_102 (odout0_i<102>, pre_rddatap0[102]);
    primitive = _buf buf_dout_p0_101 (odout0_i<101>, pre_rddatap0[101]);
    primitive = _buf buf_dout_p0_100 (odout0_i<100>, pre_rddatap0[100]);
    primitive = _buf buf_dout_p0_99 (odout0_i<99>, pre_rddatap0[99]);
    primitive = _buf buf_dout_p0_98 (odout0_i<98>, pre_rddatap0[98]);
    primitive = _buf buf_dout_p0_97 (odout0_i<97>, pre_rddatap0[97]);
    primitive = _buf buf_dout_p0_96 (odout0_i<96>, pre_rddatap0[96]);
    primitive = _buf buf_dout_p0_95 (odout0_i<95>, pre_rddatap0[95]);
    primitive = _buf buf_dout_p0_94 (odout0_i<94>, pre_rddatap0[94]);
    primitive = _buf buf_dout_p0_93 (odout0_i<93>, pre_rddatap0[93]);
    primitive = _buf buf_dout_p0_92 (odout0_i<92>, pre_rddatap0[92]);
    primitive = _buf buf_dout_p0_91 (odout0_i<91>, pre_rddatap0[91]);
    primitive = _buf buf_dout_p0_90 (odout0_i<90>, pre_rddatap0[90]);
    primitive = _buf buf_dout_p0_89 (odout0_i<89>, pre_rddatap0[89]);
    primitive = _buf buf_dout_p0_88 (odout0_i<88>, pre_rddatap0[88]);
    primitive = _buf buf_dout_p0_87 (odout0_i<87>, pre_rddatap0[87]);
    primitive = _buf buf_dout_p0_86 (odout0_i<86>, pre_rddatap0[86]);
    primitive = _buf buf_dout_p0_85 (odout0_i<85>, pre_rddatap0[85]);
    primitive = _buf buf_dout_p0_84 (odout0_i<84>, pre_rddatap0[84]);
    primitive = _buf buf_dout_p0_83 (odout0_i<83>, pre_rddatap0[83]);
    primitive = _buf buf_dout_p0_82 (odout0_i<82>, pre_rddatap0[82]);
    primitive = _buf buf_dout_p0_81 (odout0_i<81>, pre_rddatap0[81]);
    primitive = _buf buf_dout_p0_80 (odout0_i<80>, pre_rddatap0[80]);
    primitive = _buf buf_dout_p0_79 (odout0_i<79>, pre_rddatap0[79]);
    primitive = _buf buf_dout_p0_78 (odout0_i<78>, pre_rddatap0[78]);
    primitive = _buf buf_dout_p0_77 (odout0_i<77>, pre_rddatap0[77]);
    primitive = _buf buf_dout_p0_76 (odout0_i<76>, pre_rddatap0[76]);
    primitive = _buf buf_dout_p0_75 (odout0_i<75>, pre_rddatap0[75]);
    primitive = _buf buf_dout_p0_74 (odout0_i<74>, pre_rddatap0[74]);
    primitive = _buf buf_dout_p0_73 (odout0_i<73>, pre_rddatap0[73]);
    primitive = _buf buf_dout_p0_72 (odout0_i<72>, pre_rddatap0[72]);
    primitive = _buf buf_dout_p0_71 (odout0_i<71>, pre_rddatap0[71]);
    primitive = _buf buf_dout_p0_70 (odout0_i<70>, pre_rddatap0[70]);
    primitive = _buf buf_dout_p0_69 (odout0_i<69>, pre_rddatap0[69]);
    primitive = _buf buf_dout_p0_68 (odout0_i<68>, pre_rddatap0[68]);
    primitive = _buf buf_dout_p0_67 (odout0_i<67>, pre_rddatap0[67]);
    primitive = _buf buf_dout_p0_66 (odout0_i<66>, pre_rddatap0[66]);
    primitive = _buf buf_dout_p0_65 (odout0_i<65>, pre_rddatap0[65]);
    primitive = _buf buf_dout_p0_64 (odout0_i<64>, pre_rddatap0[64]);
    primitive = _buf buf_dout_p0_63 (odout0_i<63>, pre_rddatap0[63]);
    primitive = _buf buf_dout_p0_62 (odout0_i<62>, pre_rddatap0[62]);
    primitive = _buf buf_dout_p0_61 (odout0_i<61>, pre_rddatap0[61]);
    primitive = _buf buf_dout_p0_60 (odout0_i<60>, pre_rddatap0[60]);
    primitive = _buf buf_dout_p0_59 (odout0_i<59>, pre_rddatap0[59]);
    primitive = _buf buf_dout_p0_58 (odout0_i<58>, pre_rddatap0[58]);
    primitive = _buf buf_dout_p0_57 (odout0_i<57>, pre_rddatap0[57]);
    primitive = _buf buf_dout_p0_56 (odout0_i<56>, pre_rddatap0[56]);
    primitive = _buf buf_dout_p0_55 (odout0_i<55>, pre_rddatap0[55]);
    primitive = _buf buf_dout_p0_54 (odout0_i<54>, pre_rddatap0[54]);
    primitive = _buf buf_dout_p0_53 (odout0_i<53>, pre_rddatap0[53]);
    primitive = _buf buf_dout_p0_52 (odout0_i<52>, pre_rddatap0[52]);
    primitive = _buf buf_dout_p0_51 (odout0_i<51>, pre_rddatap0[51]);
    primitive = _buf buf_dout_p0_50 (odout0_i<50>, pre_rddatap0[50]);
    primitive = _buf buf_dout_p0_49 (odout0_i<49>, pre_rddatap0[49]);
    primitive = _buf buf_dout_p0_48 (odout0_i<48>, pre_rddatap0[48]);
    primitive = _buf buf_dout_p0_47 (odout0_i<47>, pre_rddatap0[47]);
    primitive = _buf buf_dout_p0_46 (odout0_i<46>, pre_rddatap0[46]);
    primitive = _buf buf_dout_p0_45 (odout0_i<45>, pre_rddatap0[45]);
    primitive = _buf buf_dout_p0_44 (odout0_i<44>, pre_rddatap0[44]);
    primitive = _buf buf_dout_p0_43 (odout0_i<43>, pre_rddatap0[43]);
    primitive = _buf buf_dout_p0_42 (odout0_i<42>, pre_rddatap0[42]);
    primitive = _buf buf_dout_p0_41 (odout0_i<41>, pre_rddatap0[41]);
    primitive = _buf buf_dout_p0_40 (odout0_i<40>, pre_rddatap0[40]);
    primitive = _buf buf_dout_p0_39 (odout0_i<39>, pre_rddatap0[39]);
    primitive = _buf buf_dout_p0_38 (odout0_i<38>, pre_rddatap0[38]);
    primitive = _buf buf_dout_p0_37 (odout0_i<37>, pre_rddatap0[37]);
    primitive = _buf buf_dout_p0_36 (odout0_i<36>, pre_rddatap0[36]);
    primitive = _buf buf_dout_p0_35 (odout0_i<35>, pre_rddatap0[35]);
    primitive = _buf buf_dout_p0_34 (odout0_i<34>, pre_rddatap0[34]);
    primitive = _buf buf_dout_p0_33 (odout0_i<33>, pre_rddatap0[33]);
    primitive = _buf buf_dout_p0_32 (odout0_i<32>, pre_rddatap0[32]);
    primitive = _buf buf_dout_p0_31 (odout0_i<31>, pre_rddatap0[31]);
    primitive = _buf buf_dout_p0_30 (odout0_i<30>, pre_rddatap0[30]);
    primitive = _buf buf_dout_p0_29 (odout0_i<29>, pre_rddatap0[29]);
    primitive = _buf buf_dout_p0_28 (odout0_i<28>, pre_rddatap0[28]);
    primitive = _buf buf_dout_p0_27 (odout0_i<27>, pre_rddatap0[27]);
    primitive = _buf buf_dout_p0_26 (odout0_i<26>, pre_rddatap0[26]);
    primitive = _buf buf_dout_p0_25 (odout0_i<25>, pre_rddatap0[25]);
    primitive = _buf buf_dout_p0_24 (odout0_i<24>, pre_rddatap0[24]);
    primitive = _buf buf_dout_p0_23 (odout0_i<23>, pre_rddatap0[23]);
    primitive = _buf buf_dout_p0_22 (odout0_i<22>, pre_rddatap0[22]);
    primitive = _buf buf_dout_p0_21 (odout0_i<21>, pre_rddatap0[21]);
    primitive = _buf buf_dout_p0_20 (odout0_i<20>, pre_rddatap0[20]);
    primitive = _buf buf_dout_p0_19 (odout0_i<19>, pre_rddatap0[19]);
    primitive = _buf buf_dout_p0_18 (odout0_i<18>, pre_rddatap0[18]);
    primitive = _buf buf_dout_p0_17 (odout0_i<17>, pre_rddatap0[17]);
    primitive = _buf buf_dout_p0_16 (odout0_i<16>, pre_rddatap0[16]);
    primitive = _buf buf_dout_p0_15 (odout0_i<15>, pre_rddatap0[15]);
    primitive = _buf buf_dout_p0_14 (odout0_i<14>, pre_rddatap0[14]);
    primitive = _buf buf_dout_p0_13 (odout0_i<13>, pre_rddatap0[13]);
    primitive = _buf buf_dout_p0_12 (odout0_i<12>, pre_rddatap0[12]);
    primitive = _buf buf_dout_p0_11 (odout0_i<11>, pre_rddatap0[11]);
    primitive = _buf buf_dout_p0_10 (odout0_i<10>, pre_rddatap0[10]);
    primitive = _buf buf_dout_p0_9 (odout0_i<9>, pre_rddatap0[9]);
    primitive = _buf buf_dout_p0_8 (odout0_i<8>, pre_rddatap0[8]);
    primitive = _buf buf_dout_p0_7 (odout0_i<7>, pre_rddatap0[7]);
    primitive = _buf buf_dout_p0_6 (odout0_i<6>, pre_rddatap0[6]);
    primitive = _buf buf_dout_p0_5 (odout0_i<5>, pre_rddatap0[5]);
    primitive = _buf buf_dout_p0_4 (odout0_i<4>, pre_rddatap0[4]);
    primitive = _buf buf_dout_p0_3 (odout0_i<3>, pre_rddatap0[3]);
    primitive = _buf buf_dout_p0_2 (odout0_i<2>, pre_rddatap0[2]);
    primitive = _buf buf_dout_p0_1 (odout0_i<1>, pre_rddatap0[1]);
    primitive = _buf buf_dout_p0_0 (odout0_i<0>, pre_rddatap0[0]);
  )
 
)

model arf198b128e1r1w0cbbehbaa4acw_ram_1r1w_200x128_encode ( 
  re0, ra0, rd0, 
  we0, wa0, wd0) (
    input  (we0) ()
    input  (re0) ()
    input  (wa0) (array =  6 :0; )
    input  (ra0) (array =  6 :0; )
    input  (wd0) (array =  199 :0; )
    output (rd0) (
            data_size = 200;
            address_size = 7;
            array =  199 :0;
            min_address = 0;
            max_address = 127 ;
            read_off = H; // [0|1|X|H];
            //edge_trigger = RW;
            address_type = encode;
            write_write_conflict = same_address_x_port;
            // read_read_conflict = [R|X]; // Multi read port only
            read_read_conflict = X; 
            read_write_conflict = XX; // [NW|XW|OW|XX|OX];
            // overwrite = [true|false]; // Multi write port only.
            primitive = _cram (,,
                    _write { , , } (we0, , wa0, wd0),
                    _read { , , ,h} ( , re0, , ra0, rd0)
            );
     )
 )



