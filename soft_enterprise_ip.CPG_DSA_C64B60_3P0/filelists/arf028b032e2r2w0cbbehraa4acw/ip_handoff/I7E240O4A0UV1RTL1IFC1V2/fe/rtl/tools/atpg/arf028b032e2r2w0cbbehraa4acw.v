
//  INTEL CONFIDENTIAL
//
//  Copyright 2023 Intel Corporation All Rights Reserved.
//
//  The source code contained or described herein and all documents related
//  to the source code ("Material") are owned by Intel Corporation or its
//  suppliers or licensors. Title to the Material remains with Intel
//  Corporation or its suppliers and licensors. The Material contains trade
//  secrets and proprietary and confidential information of Intel or its
//  suppliers and licensors. The Material is protected by worldwide copyright
//  and trade secret laws and treaty provisions. No part of the Material may
//  be used, copied, reproduced, modified, published, uploaded, posted,
//  transmitted, distributed, or disclosed in any way without Intel's prior
//  express written permission.
//
//  No license under any patent, copyright, trade secret or other intellectual
//  property right is granted to or conferred upon you by disclosure or
//  delivery of the Materials, either expressly, by implication, inducement,
//  estoppel or otherwise. Any license under such intellectual property rights
//  must be express and approved by Intel in writing.
//

//------------------------------------------------------------------------------------------------------------------------
// Intel Proprietary        Intel Confidential        Intel Proprietary        Intel Confidential        Intel Proprietary
//------------------------------------------------------------------------------------------------------------------------
// Generated by                  : cudoming
// Generated on                  : April 18, 2023
//------------------------------------------------------------------------------------------------------------------------
// General Information:
// ------------------------------
// 2r2w0c standard array for SDG server designs.
// Behavioral modeling of a parameterized register file core with no DFX features.
// RTL is written in SystemVerilog.
//------------------------------------------------------------------------------------------------------------------------
// Detail Information:
// ------------------------------
// Addresses        : RD/WR addresses are encoded.
//                    Input addresses will be valid at the array in 1 phases after being driven.
//                    Address latency of 1 is corresponding to a B-latch.
// Enables          : RD/WR enables are used to condition the clock and wordlines.
//                  : Input enables will be valid at the array in 1 phases after being driven.
//                    Enable latency of 1 is corresponding to a B-latch.
// Write Data       : Write data will be valid at the array 2 phases after being driven.
//                    Write data latency of 2 is corresponding to a rising-edge flop. 
// Read Data        : Read data will be valid at the output of a SDL 1 phase after being read.
//                    Read data latency of 1 is corresponding to a B-latch.
// Address Offset   : 
//------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
// Other Information:
// ------------------------------
// SDG RFIP RTL Release Path:
// /p/hdk/rtl/ip_releases/shdk74/array_macro_module
//
//------------------------------------------------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////
// FileName : arf028b032e2r2w0cbbehraa4acw.v
// RAM Library Model - Top
// this module definition allows the sdl_init to be external to the atpglib 
// so that it can have a separate init attribute
////////////////////////////////////////////////////////////////

module arf028b032e2r2w0cbbehraa4acw (
  ckrdp0, rdenp0, rdaddrp0, sdl_initp0, rddatap0, 
  ckrdp1, rdenp1, rdaddrp1, sdl_initp1, rddatap1, 
  ckwrp0, wrenp0, wraddrp0, wrdatap0, 
  ckwrp1, wrenp1, wraddrp1, wrdatap1,  
  rdaddrp0_fd, rdaddrp0_rd, 
  rdaddrp1_fd, rdaddrp1_rd, 
  wraddrp0_fd, wraddrp0_rd, wrdatap0_fd, wrdatap0_rd,
  wraddrp1_fd, wraddrp1_rd, wrdatap1_fd, wrdatap1_rd);

  //Input and output pins declarations
  input ckrdp0;
  input rdenp0;
  input [4:0] rdaddrp0;
  output [29:0] rddatap0;
  input sdl_initp0;

  input ckrdp1;
  input rdenp1;
  input [4:0] rdaddrp1;
  output [29:0] rddatap1;
  input sdl_initp1;

  input ckwrp0;
  input wrenp0; 
  input [4:0] wraddrp0;
  input [29:0] wrdatap0;

  input ckwrp1;
  input wrenp1; 
  input [4:0] wraddrp1;
  input [29:0] wrdatap1;
 
  input rdaddrp0_fd;
  input rdaddrp0_rd;

  input rdaddrp1_fd;
  input rdaddrp1_rd;

  input wraddrp0_fd;
  input wraddrp0_rd;
  input wrdatap0_fd;
  input wrdatap0_rd;

  input wraddrp1_fd;
  input wraddrp1_rd;
  input wrdatap1_fd;
  input wrdatap1_rd;

  wire [29:0] pre_rddatap0 ;
  wire sdl_initp0_i_out;
  wire ckrd_rcb_outp0;

  wire [29:0] pre_rddatap1 ;
  wire sdl_initp1_i_out;
  wire ckrd_rcb_outp1;


  //hier module
  arf028b032e2r2w0cbbehraa4acw_hier sub_array (
     .ckrdp0           ( ckrdp0 )
    ,.rdenp0           ( rdenp0 )
    ,.rdaddrp0         ( rdaddrp0 )
    ,.pre_rddatap0     ( pre_rddatap0 )
    ,.sdl_initp0       ( sdl_initp0 )
    ,.sdl_initp0_i_out ( sdl_initp0_i_out )
    ,.ckrd_rcb_outp0   ( ckrd_rcb_outp0 )
    ,.ckrdp1           ( ckrdp1 )
    ,.rdenp1           ( rdenp1 )
    ,.rdaddrp1         ( rdaddrp1 )
    ,.pre_rddatap1     ( pre_rddatap1 )
    ,.sdl_initp1       ( sdl_initp1 )
    ,.sdl_initp1_i_out ( sdl_initp1_i_out )
    ,.ckrd_rcb_outp1   ( ckrd_rcb_outp1 )
    ,.ckwrp0           ( ckwrp0 )
    ,.wrenp0           ( wrenp0 )
    ,.wraddrp0         ( wraddrp0 )
    ,.wrdatap0         ( wrdatap0 )
    ,.ckwrp1           ( ckwrp1 )
    ,.wrenp1           ( wrenp1 )
    ,.wraddrp1         ( wraddrp1 )
    ,.wrdatap1         ( wrdatap1 )
    ,.rdaddrp0_fd      ( rdaddrp0_fd )
    ,.rdaddrp0_rd      ( rdaddrp0_rd )
    ,.rdaddrp1_fd      ( rdaddrp1_fd )
    ,.rdaddrp1_rd      ( rdaddrp1_rd )
    ,.wraddrp0_fd      ( wraddrp0_fd )
    ,.wraddrp0_rd      ( wraddrp0_rd )
    ,.wraddrp1_fd      ( wraddrp1_fd )
    ,.wraddrp1_rd      ( wraddrp1_rd )
    ,.wrdatap0_fd      ( wrdatap0_fd )
    ,.wrdatap0_rd      ( wrdatap0_rd )
    ,.wrdatap1_fd      ( wrdatap1_fd )
    ,.wrdatap1_rd      ( wrdatap1_rd )
  );

  //rddatap0
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_29 (.d(pre_rddatap0[29]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[29]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_28 (.d(pre_rddatap0[28]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[28]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_27 (.d(pre_rddatap0[27]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[27]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_26 (.d(pre_rddatap0[26]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[26]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_25 (.d(pre_rddatap0[25]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[25]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_24 (.d(pre_rddatap0[24]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[24]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_23 (.d(pre_rddatap0[23]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[23]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_22 (.d(pre_rddatap0[22]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[22]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_21 (.d(pre_rddatap0[21]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[21]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_20 (.d(pre_rddatap0[20]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[20]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_19 (.d(pre_rddatap0[19]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[19]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_18 (.d(pre_rddatap0[18]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[18]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_17 (.d(pre_rddatap0[17]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[17]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_16 (.d(pre_rddatap0[16]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[16]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_15 (.d(pre_rddatap0[15]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[15]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_14 (.d(pre_rddatap0[14]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[14]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_13 (.d(pre_rddatap0[13]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[13]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_12 (.d(pre_rddatap0[12]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[12]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_11 (.d(pre_rddatap0[11]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[11]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_10 (.d(pre_rddatap0[10]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[10]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_9 (.d(pre_rddatap0[9]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[9]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_8 (.d(pre_rddatap0[8]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[8]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_7 (.d(pre_rddatap0[7]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[7]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_6 (.d(pre_rddatap0[6]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[6]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_5 (.d(pre_rddatap0[5]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[5]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_4 (.d(pre_rddatap0[4]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[4]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_3 (.d(pre_rddatap0[3]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[3]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_2 (.d(pre_rddatap0[2]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[2]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_1 (.d(pre_rddatap0[1]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[1]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p0_0 (.d(pre_rddatap0[0]), .rb(sdl_initp0_i_out), .clk(ckrd_rcb_outp0), .o(rddatap0[0]));

  //rddatap1
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_29 (.d(pre_rddatap1[29]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[29]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_28 (.d(pre_rddatap1[28]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[28]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_27 (.d(pre_rddatap1[27]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[27]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_26 (.d(pre_rddatap1[26]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[26]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_25 (.d(pre_rddatap1[25]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[25]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_24 (.d(pre_rddatap1[24]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[24]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_23 (.d(pre_rddatap1[23]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[23]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_22 (.d(pre_rddatap1[22]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[22]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_21 (.d(pre_rddatap1[21]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[21]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_20 (.d(pre_rddatap1[20]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[20]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_19 (.d(pre_rddatap1[19]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[19]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_18 (.d(pre_rddatap1[18]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[18]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_17 (.d(pre_rddatap1[17]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[17]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_16 (.d(pre_rddatap1[16]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[16]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_15 (.d(pre_rddatap1[15]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[15]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_14 (.d(pre_rddatap1[14]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[14]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_13 (.d(pre_rddatap1[13]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[13]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_12 (.d(pre_rddatap1[12]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[12]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_11 (.d(pre_rddatap1[11]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[11]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_10 (.d(pre_rddatap1[10]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[10]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_9 (.d(pre_rddatap1[9]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[9]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_8 (.d(pre_rddatap1[8]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[8]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_7 (.d(pre_rddatap1[7]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[7]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_6 (.d(pre_rddatap1[6]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[6]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_5 (.d(pre_rddatap1[5]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[5]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_4 (.d(pre_rddatap1[4]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[4]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_3 (.d(pre_rddatap1[3]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[3]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_2 (.d(pre_rddatap1[2]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[2]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_1 (.d(pre_rddatap1[1]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[1]));
  arf028b032e2r2w0cbbehraa4acw_latch_func data_out_p1_0 (.d(pre_rddatap1[0]), .rb(sdl_initp1_i_out), .clk(ckrd_rcb_outp1), .o(rddatap1[0]));

endmodule

module arf028b032e2r2w0cbbehraa4acw_latch_func ( clk, d, rb, o );
input clk;
input d;
input rb;
output o;
wire o_tmp;

       arf028b032e2r2w0cbbehraa4acw_lat_mem latch_inst ( o_tmp, d, rb, clk );
       assign #1 o = o_tmp;

endmodule

// async-reset active-high latch.
primitive arf028b032e2r2w0cbbehraa4acw_lat_mem (o, d, rb, clk, notifier);
    output o;
    reg    o;
    input  d, rb, clk, notifier;

    table
    //  d   rb   clk   notifier :  ot  :   ot+1
        ?    1     0    ?        :  ?   :    - ;  // clock disabled
        ?    0     ?    ?        :  ?   :    0 ;  // async reset
        0    ?     1    ?        :  ?   :    0 ;  //clock enabled
        1    1     1    ?        :  ?   :    1 ;  //transparent data
        0    ?     x    ?        :  0   :    0 ;  // Reducing pessimism.
        1    1     x    ?        :  1   :    1 ;
        ?    x     0    ?        :  0   :    0 ;
        ?    ?     ?    *        :  ?   :    x ;  //notifier
   endtable
endprimitive
