
//  INTEL CONFIDENTIAL
//
//  Copyright 2023 Intel Corporation All Rights Reserved.
//
//  The source code contained or described herein and all documents related
//  to the source code ("Material") are owned by Intel Corporation or its
//  suppliers or licensors. Title to the Material remains with Intel
//  Corporation or its suppliers and licensors. The Material contains trade
//  secrets and proprietary and confidential information of Intel or its
//  suppliers and licensors. The Material is protected by worldwide copyright
//  and trade secret laws and treaty provisions. No part of the Material may
//  be used, copied, reproduced, modified, published, uploaded, posted,
//  transmitted, distributed, or disclosed in any way without Intel's prior
//  express written permission.
//
//  No license under any patent, copyright, trade secret or other intellectual
//  property right is granted to or conferred upon you by disclosure or
//  delivery of the Materials, either expressly, by implication, inducement,
//  estoppel or otherwise. Any license under such intellectual property rights
//  must be express and approved by Intel in writing.
//

//------------------------------------------------------------------------------------------------------------------------
// Intel Proprietary        Intel Confidential        Intel Proprietary        Intel Confidential        Intel Proprietary
//------------------------------------------------------------------------------------------------------------------------
// Generated by                  : cudoming
// Generated on                  : April 18, 2023
//------------------------------------------------------------------------------------------------------------------------
// General Information:
// ------------------------------
// 1r1w0c standard array for SDG server designs.
// Behavioral modeling of a parameterized register file core with no DFX features.
// RTL is written in SystemVerilog.
//------------------------------------------------------------------------------------------------------------------------
// Detail Information:
// ------------------------------
// Addresses        : RD/WR addresses are encoded.
//                    Input addresses will be valid at the array in 1 phases after being driven.
//                    Address latency of 1 is corresponding to a B-latch.
// Enables          : RD/WR enables are used to condition the clock and wordlines.
//                  : Input enables will be valid at the array in 1 phases after being driven.
//                    Enable latency of 1 is corresponding to a B-latch.
// Write Data       : Write data will be valid at the array 2 phases after being driven.
//                    Write data latency of 2 is corresponding to a rising-edge flop. 
// Read Data        : Read data will be valid at the output of a SDL 1 phase after being read.
//                    Read data latency of 1 is corresponding to a B-latch.
// Address Offset   : 
//------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
// Other Information:
// ------------------------------
// SDG RFIP RTL Release Path:
// /p/hdk/rtl/ip_releases/shdk74/array_macro_module
//
//------------------------------------------------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////
// FileName : arf038b128e1r1w0cbbehraa4acw.atpglib
// RAM Library Model
////////////////////////////////////////////////////////////////

model arf038b128e1r1w0cbbehraa4acw (
  ckrdp0, rdenp0, rdaddrp0, sdl_initp0, rddatap0, 
  ckwrp0, wrenp0, wraddrp0, wrdatap0,  
  rdaddrp0_fd, rdaddrp0_rd, 
  wraddrp0_fd, wraddrp0_rd, wrdatap0_fd, wrdatap0_rd) (

  //Input and output pins declarations
  input (ckrdp0) ()
  input (rdenp0) ()
  input (rdaddrp0) (array =6:0; )
  input (sdl_initp0) ()

  input (ckwrp0) ()
  input (wrenp0) () 
  input (wraddrp0) (array =6:0; )
  input (wrdatap0) (array =39:0; )
 
  input (rdaddrp0_fd) (unused; no_fault = sa0 sa1;)
  input (rdaddrp0_rd) (unused; no_fault = sa0 sa1;)

  input (wraddrp0_fd) (unused; no_fault = sa0 sa1;)
  input (wraddrp0_rd) (unused; no_fault = sa0 sa1;)
  input (wrdatap0_fd) (unused; no_fault = sa0 sa1;)
  input (wrdatap0_rd) (unused; no_fault = sa0 sa1;)


  intern (mlc_t0) (primitive = _tie0 mlc_tie0_1 ( mlc_t0 );)
  intern (wrclk_int_0)     (primitive = _buf wrclk_int_0_i     (ckwrp0, wrclk_int_0);)
  intern (wrclk_int_not_0) (primitive = _inv wrclk_int_not_0_i (wrclk_int_0, wrclk_int_not_0);)

  intern (rdclk_int_0)     (primitive = _buf rdclk_int_0_i     (ckrdp0, rdclk_int_0);)
  intern (rdclk_int_not_0) (primitive = _inv rdclk_int_not_0_i (rdclk_int_0, rdclk_int_not_0);)


  //Capture Read and Write Enables
  intern (re0_i) (primitive = _dlat rd_en0 (mlc_t0, mlc_t0, rdclk_int_not_0, rdenp0, re0_i, );)
  intern (ckrd_rcb_0) (primitive = _and and_ckrd_rcb_0 ( re0_i, rdclk_int_0 , ckrd_rcb_0);)
  intern (ckrd_rcb_b_0) (primitive = _inv inv_ckrd_rcb_b_0 (ckrd_rcb_0, ckrd_rcb_b_0);)

  intern (we0_i) (primitive = _dlat lat_we0 (mlc_t0, mlc_t0, wrclk_int_not_0, wrenp0, we0_i, );)
  intern (ckwr_rcb_0) (primitive = _and and_ckwr_rcb_0 ( we0_i, wrclk_int_0, ckwr_rcb_0);)
  intern (ckwr_rcb_b_0) (primitive = _inv inv_ckwr_rcb_b_0 (ckwr_rcb_0, ckwr_rcb_b_0);)


  //sdl init ff
  intern (sdlinit_lat_0) (primitive= _dff sdlinit_lat_0_dff (mlc_t0, mlc_t0, rdclk_int_0, sdl_initp0, sdlinit_lat_0, );)

 


  //Capture read and write address
  intern (iard0_i_lat) (
     array =  6  : 0;
     primitive = _dlat dlat_ard0_6 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[6], iard0_i_lat<6>, );
     primitive = _dlat dlat_ard0_5 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[5], iard0_i_lat<5>, );
     primitive = _dlat dlat_ard0_4 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[4], iard0_i_lat<4>, );
     primitive = _dlat dlat_ard0_3 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[3], iard0_i_lat<3>, );
     primitive = _dlat dlat_ard0_2 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[2], iard0_i_lat<2>, );
     primitive = _dlat dlat_ard0_1 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[1], iard0_i_lat<1>, );
     primitive = _dlat dlat_ard0_0 (mlc_t0, mlc_t0, ckrd_rcb_b_0, rdaddrp0[0], iard0_i_lat<0>, );
  )

  intern (iawr0_i_lat) (
     array =  6  : 0;
     primitive = _dlat dlat_awr0_6 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[6], iawr0_i_lat<6>, );
     primitive = _dlat dlat_awr0_5 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[5], iawr0_i_lat<5>, );
     primitive = _dlat dlat_awr0_4 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[4], iawr0_i_lat<4>, );
     primitive = _dlat dlat_awr0_3 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[3], iawr0_i_lat<3>, );
     primitive = _dlat dlat_awr0_2 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[2], iawr0_i_lat<2>, );
     primitive = _dlat dlat_awr0_1 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[1], iawr0_i_lat<1>, );
     primitive = _dlat dlat_awr0_0 (mlc_t0, mlc_t0, ckwr_rcb_b_0, wraddrp0[0], iawr0_i_lat<0>, );
  )
 

  //input data 

  intern (idin0_i) (
    array =  39 :0;
    primitive = _dff dff_din0_39 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[39], idin0_i<39>, );
    primitive = _dff dff_din0_38 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[38], idin0_i<38>, );
    primitive = _dff dff_din0_37 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[37], idin0_i<37>, );
    primitive = _dff dff_din0_36 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[36], idin0_i<36>, );
    primitive = _dff dff_din0_35 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[35], idin0_i<35>, );
    primitive = _dff dff_din0_34 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[34], idin0_i<34>, );
    primitive = _dff dff_din0_33 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[33], idin0_i<33>, );
    primitive = _dff dff_din0_32 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[32], idin0_i<32>, );
    primitive = _dff dff_din0_31 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[31], idin0_i<31>, );
    primitive = _dff dff_din0_30 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[30], idin0_i<30>, );
    primitive = _dff dff_din0_29 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[29], idin0_i<29>, );
    primitive = _dff dff_din0_28 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[28], idin0_i<28>, );
    primitive = _dff dff_din0_27 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[27], idin0_i<27>, );
    primitive = _dff dff_din0_26 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[26], idin0_i<26>, );
    primitive = _dff dff_din0_25 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[25], idin0_i<25>, );
    primitive = _dff dff_din0_24 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[24], idin0_i<24>, );
    primitive = _dff dff_din0_23 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[23], idin0_i<23>, );
    primitive = _dff dff_din0_22 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[22], idin0_i<22>, );
    primitive = _dff dff_din0_21 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[21], idin0_i<21>, );
    primitive = _dff dff_din0_20 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[20], idin0_i<20>, );
    primitive = _dff dff_din0_19 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[19], idin0_i<19>, );
    primitive = _dff dff_din0_18 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[18], idin0_i<18>, );
    primitive = _dff dff_din0_17 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[17], idin0_i<17>, );
    primitive = _dff dff_din0_16 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[16], idin0_i<16>, );
    primitive = _dff dff_din0_15 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[15], idin0_i<15>, );
    primitive = _dff dff_din0_14 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[14], idin0_i<14>, );
    primitive = _dff dff_din0_13 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[13], idin0_i<13>, );
    primitive = _dff dff_din0_12 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[12], idin0_i<12>, );
    primitive = _dff dff_din0_11 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[11], idin0_i<11>, );
    primitive = _dff dff_din0_10 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[10], idin0_i<10>, );
    primitive = _dff dff_din0_9 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[9], idin0_i<9>, );
    primitive = _dff dff_din0_8 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[8], idin0_i<8>, );
    primitive = _dff dff_din0_7 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[7], idin0_i<7>, );
    primitive = _dff dff_din0_6 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[6], idin0_i<6>, );
    primitive = _dff dff_din0_5 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[5], idin0_i<5>, );
    primitive = _dff dff_din0_4 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[4], idin0_i<4>, );
    primitive = _dff dff_din0_3 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[3], idin0_i<3>, );
    primitive = _dff dff_din0_2 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[2], idin0_i<2>, );
    primitive = _dff dff_din0_1 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[1], idin0_i<1>, );
    primitive = _dff dff_din0_0 (mlc_t0, mlc_t0, ckwr_rcb_0, wrdatap0[0], idin0_i<0>, );
  )



  //Instantiate RAM primitive(s)
  intern (odout0_i ) (
    array =  39 :0;
    instance = arf038b128e1r1w0cbbehraa4acw_ram_1r1w_40x128_encode ram_arf038b128e1r1w0cbbehraa4acw_0 (
    .re0(ckrd_rcb_0), .ra0(iard0_i_lat), .rd0(odout0_i),
    .we0(ckwr_rcb_0), .wa0(iawr0_i_lat), .wd0(idin0_i));
  )
 
  output (rddatap0) (
    array= 39 :0;
    primitive = _dlat dlat_dout_p0_39 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<39>, rddatap0[39], );
    primitive = _dlat dlat_dout_p0_38 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<38>, rddatap0[38], );
    primitive = _dlat dlat_dout_p0_37 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<37>, rddatap0[37], );
    primitive = _dlat dlat_dout_p0_36 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<36>, rddatap0[36], );
    primitive = _dlat dlat_dout_p0_35 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<35>, rddatap0[35], );
    primitive = _dlat dlat_dout_p0_34 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<34>, rddatap0[34], );
    primitive = _dlat dlat_dout_p0_33 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<33>, rddatap0[33], );
    primitive = _dlat dlat_dout_p0_32 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<32>, rddatap0[32], );
    primitive = _dlat dlat_dout_p0_31 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<31>, rddatap0[31], );
    primitive = _dlat dlat_dout_p0_30 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<30>, rddatap0[30], );
    primitive = _dlat dlat_dout_p0_29 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<29>, rddatap0[29], );
    primitive = _dlat dlat_dout_p0_28 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<28>, rddatap0[28], );
    primitive = _dlat dlat_dout_p0_27 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<27>, rddatap0[27], );
    primitive = _dlat dlat_dout_p0_26 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<26>, rddatap0[26], );
    primitive = _dlat dlat_dout_p0_25 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<25>, rddatap0[25], );
    primitive = _dlat dlat_dout_p0_24 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<24>, rddatap0[24], );
    primitive = _dlat dlat_dout_p0_23 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<23>, rddatap0[23], );
    primitive = _dlat dlat_dout_p0_22 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<22>, rddatap0[22], );
    primitive = _dlat dlat_dout_p0_21 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<21>, rddatap0[21], );
    primitive = _dlat dlat_dout_p0_20 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<20>, rddatap0[20], );
    primitive = _dlat dlat_dout_p0_19 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<19>, rddatap0[19], );
    primitive = _dlat dlat_dout_p0_18 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<18>, rddatap0[18], );
    primitive = _dlat dlat_dout_p0_17 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<17>, rddatap0[17], );
    primitive = _dlat dlat_dout_p0_16 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<16>, rddatap0[16], );
    primitive = _dlat dlat_dout_p0_15 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<15>, rddatap0[15], );
    primitive = _dlat dlat_dout_p0_14 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<14>, rddatap0[14], );
    primitive = _dlat dlat_dout_p0_13 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<13>, rddatap0[13], );
    primitive = _dlat dlat_dout_p0_12 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<12>, rddatap0[12], );
    primitive = _dlat dlat_dout_p0_11 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<11>, rddatap0[11], );
    primitive = _dlat dlat_dout_p0_10 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<10>, rddatap0[10], );
    primitive = _dlat dlat_dout_p0_9 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<9>, rddatap0[9], );
    primitive = _dlat dlat_dout_p0_8 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<8>, rddatap0[8], );
    primitive = _dlat dlat_dout_p0_7 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<7>, rddatap0[7], );
    primitive = _dlat dlat_dout_p0_6 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<6>, rddatap0[6], );
    primitive = _dlat dlat_dout_p0_5 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<5>, rddatap0[5], );
    primitive = _dlat dlat_dout_p0_4 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<4>, rddatap0[4], );
    primitive = _dlat dlat_dout_p0_3 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<3>, rddatap0[3], );
    primitive = _dlat dlat_dout_p0_2 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<2>, rddatap0[2], );
    primitive = _dlat dlat_dout_p0_1 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<1>, rddatap0[1], );
    primitive = _dlat dlat_dout_p0_0 (mlc_t0, sdlinit_lat_0, ckrd_rcb_0, odout0_i<0>, rddatap0[0], );
  )
 
)

model arf038b128e1r1w0cbbehraa4acw_ram_1r1w_40x128_encode ( 
  re0, ra0, rd0, 
  we0, wa0, wd0) (
    input  (we0) ()
    input  (re0) ()
    input  (wa0) (array =  6 :0; )
    input  (ra0) (array =  6 :0; )
    input  (wd0) (array =  39 :0; )
    output (rd0) (
            data_size = 40;
            address_size = 7;
            array =  39 :0;
            min_address = 0;
            max_address = 127 ;
            read_off = H; // [0|1|X|H];
            //edge_trigger = RW;
            address_type = encode;
            write_write_conflict = same_address_x_port;
            // read_read_conflict = [R|X]; // Multi read port only
            read_read_conflict = X; 
            read_write_conflict = XX; // [NW|XW|OW|XX|OX];
            // overwrite = [true|false]; // Multi write port only.
            primitive = _cram (,,
                    _write { , , } (we0, , wa0, wd0),
                    _read { , , ,h} ( , re0, , ra0, rd0)
            );
     )
 )



