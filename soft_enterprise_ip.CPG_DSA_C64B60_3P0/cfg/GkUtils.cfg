#-------------------------------------------------------------------------------------------------------
##   gatekeeper_utils pipeline jobs configuration file.
##
##-------------------------------------------------------------------------------------------------------

## Do for common file.
do "$ENV{GK_CONFIG_DIR}/GkUtils.cth.cct.cfg";

use Data::Dumper;
   $Data::Dumper::SortKeys = 1;
use File::Basename;
my $debug = 0;

if (defined $ENV{EC_SITE} && $ENV{EC_SITE} eq "pdx" && !defined $ENV{GK_MOCK_NBPOOL} ) {
   $ENV{GK_MOCK_NBPOOL} = "pdx_normal";
}


# ---------------------------------------------------------------------------- (
# The following overrides the central GkUtils spec, since we no longer share
# a qslot with PCIe
my $nb_mock = [
    "$ENV{EC_SITE}_normal", # target
    '8G&&SLES12SP5',        # class
    '/IMSG/EIPACC/RTL',     # qslot
];
my $nb_gk  = [
    'zsc11_critical_gk', # target
    '8G&&SLES12SP5',     # class
    '/IMSG/EIPACC/RTL',  # qslot
];
$Models{netbatch}{all}{mock}           = $nb_mock;
$Models{netbatch}{all}{turnin}         = $nb_gk;
$Models{netbatch}{all}{release}        = $nb_gk;
$Models{netbatch}{all}{'post-release'} = $nb_gk;
$Models{netbatch}{all}{filter}         = $nb_gk;
$Models{netbatch}{all}{drop}           = $nb_gk;
# ---------------------------------------------------------------------------- )




#(
my $override = '/p/cct/repo/.override.pm';
if (-e $override) {
    # The override must be syntactic perl encoding a hashref.
    # The hashref must have the key 'pool'
    # For example:
    #
    #   {
    #     pool => 'pdx_normal'
    #   }
    #
    print "Emergency override file $override exists.\n";
    qx(perl -c $override);
    my $rc = $?;
    #print "Testing if $override is valid Perl. Result is $rc\n";
    if ($rc) {
        print "Ignoring override $override due to syntax errors.\n";
    } else {
        my $hash = do $override;
        print "Using overrides from $override:\n";
        print Dumper($hash);
        if (defined $hash and ref $hash eq 'HASH') {
            print "Original NB parameters:\n", Dumper(%{$Models{netbatch}});
            foreach my $key (qw' filter turnin release post-release ') {
                next unless ref $Models{netbatch}{all}{$key} eq 'ARRAY';
                $Models{netbatch}{all}{$key}[0] = $hash->{pool}  if defined $hash->{pool};
                $Models{netbatch}{all}{$key}[1] = $hash->{class} if defined $hash->{class};
                $Models{netbatch}{all}{$key}[2] = $hash->{qslot} if defined $hash->{qslot};
                # <sigh> config uses array w/ positions </sigh>
                # 0 is pool
                # 1 is class
                # 2 is qslot
            }
            print "Overridden NB parameters:\n", Dumper(%{$Models{netbatch}});
        } else {
            print "Override $override has the wrong structure\n";
        }
    }
}
#)

use vars qw($lite_infra_version $cth_psetup_path $project_config_version $cth_psetup_cmd);
BEGIN {
    #-------------------------------------------------------------------------------
    # Setup CTH2 project environment
    $lite_infra_version     = '1.12.SP1';
    $cth_psetup_path        = '/p/hdk/pu_tu/prd/liteinfra/' . $lite_infra_version . '/commonFlow/bin';
    $project_config_version = '24.03.003';
    $cth_psetup_cmd = join(
        '; ',
        'unsetenv CTH_SETUP_CMD',
        'setenv SNPSLMD_DISABLE_DEBUG_LICENSE_CHECKS 1',
        'setenv SNPSLMD_DISABLE_FAF_LICENSE_CHECKS 1',
        'setenv SNPSLMD_DISABLE_NTA_LICENSE_CHECKS 1',
        'setenv SNPS_ANOMALY_DISABLE 1',
        "cd $ENV{GK_MODELROOT}",
        "$cth_psetup_path/cth_psetup -p ipfe/$project_config_version -cfg imsg_cto -read_only -ov_envs 'GK_PROJECT=cct' -ov_envs 'PROJROOT=/p/cct'"
        );
}


#-------------------------------------------------------------------------------
# Setup CTH2 project environment for tasks

$Models{cth_psetup}{'filter'}       = $cth_psetup_cmd;
$Models{cth_psetup}{'turnin'}       = $cth_psetup_cmd;
$Models{cth_psetup}{'release'}      = $cth_psetup_cmd;
$Models{cth_psetup}{'post-release'} = $cth_psetup_cmd;
$Models{cth_psetup}{'mock'}         = $cth_psetup_cmd;

$ENV{MODEL_ROOT} = $ENV{GK_MODELROOT};
$ENV{WORKAREA}   = $ENV{GK_MODELROOT};

# Set event value to GK_EVENTTYPE
my $event = $ENV{GK_EVENTTYPE};

# Increase timeout for "post-release"
if ( ((exists $ENV{GK_EVENTTYPE}) and ($ENV{GK_EVENTTYPE} eq "post-release")) or
     ((exists $ENV{GK_MOCK_EVENTTYPE}) and ($ENV{GK_MOCK_EVENTTYPE} eq "post-release")) ){
  # Set timeout for "post-release" to more hours due to long SIP SD flow runtime
  $Models{timeout} = 144; # hours
  # Set $event to post-release if either GK_EVENTTYPE or GK_MOCK_EVENTTYPE are "post-release"
  # This is to handle the case when running mock with a different event: turnin -mock -event post-release
  $event = 'post-release';
};
print "Event: $event\n";

# Override default GK groups config
$ENV{NB_WASH_GROUPS} = 'cct,hdk10nm,hdk7nm,n3,n3e,n5,soc,srvr10nm';

# Marks an empty 'post-release' stage as passing: https://jira.devtools.intel.com/browse/VA4-1019
#if($event =~ /post-release/)
#{
#   $Models{empty_recipe}{$ENV{'GK_CLUSTER'}} = 1;
#}

#-------------------------------------------------------------------------------
# Recipe tasks
# For more info see the gkutils wiki: https://dtspedia.intel.com/GateKeeper/gkutils#gk-utils_Recipe_File
# For info on HDK -> Cheetah migration: https://wiki.ith.intel.com/display/cheetah/High+Level+HDK+to+CTH+Mappings

$Models{early_kill}{all} = 1; # https://dtspedia.intel.com/GateKeeper/gkutils#Models.7Bearly_kill.7D
$Models{early_kill}{$ENV{GK_CLUSTER}}{'POST-RELEASE'} = 0;

$Models{semaphores} = {
    # https://wiki.ith.intel.com/pages/viewpage.action?pageId=1482851635#GatekeeperUtils-Models{semaphores}
    'vcssim' => 1,
    'collage' => 1,
};

BEGIN {
    $ENV{CHEETAH_RTL_ROOT} = '/p/hdk/cad/Cheetah-RTL/2022.09.sp2.p03';
    $ENV{WORKAREA} = $ENV{GK_MODELROOT};
}

use lib "$ENV{CHEETAH_RTL_ROOT}/iflow/lib/perl";
use IntegratedFlow;


$ENV{CTH_GK_MODE} = "true";

my $ini = {
    # Each of the GK events has a different set of tasks (or, in the case of MOCK vs TURNIN, different NB parameters)
    filter  => "$ENV{WORKAREA}/iflow/Gk_iflow_filter.ini",
    mock    => "$ENV{WORKAREA}/iflow/Gk_iflow_mock.ini",
    release => "$ENV{WORKAREA}/iflow/Gk_iflow_release.ini",
    turnin  => "$ENV{WORKAREA}/iflow/Gk_iflow_turnin.ini",
    'post-release'  => "$ENV{WORKAREA}/iflow/Gk_iflow_post-release.ini",
};

sub dump_spec {
    my $name = shift;
    my $spec = shift;

    open FH, '>', "$ENV{WORKAREA}/$name.tmp";
    print FH Dumper($spec);
    close FH;
}

if (defined $ini->{"$event"}) {

    my $tasks1 = $ini->{$event};
 
    my @internalArr = qw(EXEC_LIMITS); 
    my $gkHash = {SPECIAL_KEYS=> \@internalArr };    
    my $tasks2 = getGkStages($tasks1, $gkHash);

    &dump_spec("gk.$ENV{GK_EVENTTYPE}.spec.pre",  $tasks2);

    sub removable {
        # Remove non-gating tasks for events other than MOCK.
        # There is no point in running a failing task dozens of times a day, in a
        # context where the results are ignored.
        my $task = shift;
        return 1 if $ENV{GK_EVENTTYPE} eq 'mock';
        return 1 if $ENV{GK_EVENTTYPE} =~ m/release/;
        return 1 unless defined $task->{GATING};
        return 1 if $task->{GATING};
        return 0;
    }

    my @tasks3 =
        grep { &removable($_) }
        map  {  # Set additional flags, not in iflow

                # Before running a task, test if the local nb host is misconfigured
                $_->{JOB_PRE_EXEC} ||= "$ENV{GK_MODELROOT}/cfg/gk/job_pre_exec.csh";

                # 'Early kill' makes actual turnins more efficient, but decreases the
                # amount of useful feedback from running mock turnin.
                # https://dtspedia.intel.com/GateKeeper/gkutils#Models.7Bearly_kill.7D
                $_->{EARLY_KILL}   ||= 1 unless $ENV{GK_EVENTTYPE} eq 'mock'
                                             or $ENV{GK_EVENTTYPE} eq 'post-release';

                # A temporary hack
                if ( $_->{NAME} =~ /_vcssim$/) {
                    # TODO: once the 'analytics model' race is fixed, remove this semaphore
                    $_->{SEMAPHORE} ||= [];
                    push @{$_->{SEMAPHORE}}, 'vcssim';
                }

                # A temporary hack
                if ( $_->{NAME} =~ /_collage$/) {
                    $_->{SEMAPHORE} ||= [];
                    push @{$_->{SEMAPHORE}}, 'collage';
                }

                # Add a time-out.
                #
                # Another temporary hack:
                #   Give simregress additional time since it by default uses a
                #   flakey & wasteful 'double dispatch' in which both the simregress
                #   feeder job (which is idle) and the trex jobs are sent to netbatch.
                #   The result is that both the time a trex job spends waiting in
                #   the queue and the time trex spends running is counted against
                #   the simregress limit.
                $_->{EXEC_LIMITS} ||= $_->{NAME} =~ /_vcssim_turnintest$/
                                    ? '8h:9h'
                                    : '4h:5h'
                                    ;

                # Adding a temporary hack, as EXEC_LIMIT cannot be passed to iflow correctly.
                $_->{EXEC_LIMITS} ="60h:72h" if ($_->{NAME} =~ m#pa_power#);

                # Convert simregress task to something less flakey, less wasteful.
                #
                # Using the default translation of iflow-to-gkutils leads
                # to the following problems:
                #   1. The feeder frequently hangs.  This hang happens despite
                #      the tests being finished.  The hang results in a time-out
                #      which causes the turnin to be rejected
                #   2. The feeder runs on a NetBatch host, not locally, and trex
                #      are dispatched from this remote host.
                #      This 'double dispatch' wastes resources since the NB host
                #      with the feeder is idle for the duration
                #   3. Reporting has little data.  With double dispatch we only
                #      see whether the feeder is running.  With the converted
                #      flow reporting tracks individual tests.
                if ($_->{NAME} =~ /_vcssim_turnintest$/) {
                    my $prefix_regex = 'simregress -l';
                    if ($_->{CMDS} =~ /^$prefix_regex/) {
                        $_->{CMDS}           =~ s/^$prefix_regex//;
                        $_->{CMD_TYPE}       =  'simregress';
                        $_->{DELAY_TASK_GEN} =  1;
                        $_->{AUTO_REQ}       =  'autoreq attempts=1:exit==3'; # the syntax for this under-documented/mis-documented feature is weird: it requires both flag and arg, but the flag is without the leading '--'
                        delete $_->{JOB_WORK_DIR};
                        # a flag from Geethika which speeds up some tests by minimizing assertions
                        $_->{CMDS} .= " -trex  -simv_args +IAC_COMP_WIDGET_ASSERT_OFF -simv_args- -trex- " if $ENV{GK_EVENTTYPE} eq 'turnin';
                    } else {
                        # Fail noisily!
                        print "ERROR: conversion of iflow to gk-util failed on task\n";
                        print Dumper($_);
                        exit 1;
                    }
                }
                if ($_->{NAME} =~ /_gen_fsdb$/) {
                    my $prefix_regex = 'simregress -l';
                    if ($_->{CMDS} =~ /^$prefix_regex/) {
                        $_->{CMDS}           =~ s/^$prefix_regex//;
                        $_->{CMD_TYPE}       =  'simregress';
                        $_->{DELAY_TASK_GEN} =  1;
                        $_->{AUTO_REQ}       =  'autoreq attempts=1:exit==3';
                        $_->{NBCLASS}        =  'SLES12&&60G&&4C';
                        delete $_->{JOB_WORK_DIR};
                    } else {
                        # Fail noisily!
                        print "ERROR: conversion of iflow to gk-util failed on task\n";
                        print Dumper($_);
                        exit 1;
                    }
                }
                $_;
             }
        @$tasks2;

    push @tasks3, {
        EVENTS => [qw( POST-RELEASE )],
        NAME   => 'post_release_hook',
        CMDS   => '/nfs/site/disks/home_user/gkcct/makefiles/post-release.mk',
        GATING => 0,
    };

    $Models{general_cmds} = \@tasks3;
    &dump_spec("gk.$ENV{GK_EVENTTYPE}.spec.post", $Models{general_cmds});


} else {
    print "WARNING: No .ini file is associated with GK_EVENTTYPE/GK_MOCK_EVENTTYPE '$event'\n";
}
